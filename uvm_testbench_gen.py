#==================================================================================
# File Name        : uvm_testbench_gen.py  
# Description      :
# Name             : uvm_testbench_gen 
# Author           : Vignesh Manoharan
# Date             : 
# Copyright        : Copyright (c) 2016-2021 Vignesh Manoharan. All Rights Reserved.
#                    <vignesh.verify@gmail.com>
#                    
#                  * This is an opensource tool and its not associated
#                    with any other individual, group, organizaion or company.
#                    Its solely owned/developed by the Author mentioned 
#                    above.
#                  * Main purpose of this tool for user is to generate uvm  
#                    testbench and template codes for personal, educational
#                    and professional use.
#                  * User can download, run or edit the source code locally for 
#                    experimental use. If user wanted to contribute or provide 
#                    suggestions for improvement please contact the author.
#                  * Redistribution/Copying of the source code in any text,
#                    script or binary format is not permitted. 
#==================================================================================

# Global Import Variables
import tkinter
from tkinter import *
import tkinter as tk
import subprocess
import shlex
import os 
#from PIL import Image, ImageTk
#import Image, ImageTk
import time
import string

# Python2 -> 3 : 01032021SUN 
# import tkinter.constants, tkFileDialog
# import ttk
# import tkFont
from tkinter import constants
from tkinter import filedialog
from tkinter import ttk
from tkinter import font
import sys

import re
import datetime
import ast
import platform
import getpass
import shutil

# Imports Related to Workbook
from openpyxl import Workbook, load_workbook
# from openpyxl.compat import range
from openpyxl.utils import get_column_letter
from openpyxl.styles import Alignment, PatternFill, Border, Color
# from openpyxl.styles.colors import YELLOW 
from openpyxl.styles.borders import Border, Side

# Logging : 082518|SAT
import logging
import warnings

# Global Generic Variables : 112619|TUE 
global dtf
global dtff

# Global Local Variables
global cvagt_val_loop_tmp
global cvagt_val_loop
global cv_agent_cfg_array
global cv_agent_cfg_list
global sc_udie_loop
global sc_udie_frame_loop
global sc_udie_int_cfg_array 
global sc_udie_int_cfg_list 
global sc_udie_cb_cfg_array 
global sc_udie_mp_cfg_array 
global sc_udie_clock_cfg_array
global cv_udie_clock_cfg_array
global sc_udie_tmp_var
global sc_udie_cb_cnt
global sc_udie_mp_cnt
global sc_udie_cb_element_loop
global sc_udie_mp_element_loop
global cv_udie_cb_element_loop
global cv_udie_mp_element_loop
global cv_udie_cb_element_loop_tmp
global cv_udie_mp_element_loop_tmp
global cv_udie_intf_cfg_array 
global cv_udie_cb_cfg_array 
global cv_udie_mp_cfg_array 
global cv_udie_int_cfg_array 
global cv_udie_cb_cnt
global cv_tbtop_clock_array

global cv_udie_loop
global cv_udie_frame_loop
global cv_agt_loop_chk

global le 
global ree
global sc_element_loop
global cv_element_loop

global sc_agtrow_val

global tb_all_dir



# 081118|SAT - Variables related to Multi Interface
global sc_agt_selected
global sc_agt_selected_started
global sc_interface_pkg
global sc_agt_intf_cnt
global sc_agt_intf_cnt_tmp
global sc_agt_intf_num_of_ds_l
global sc_agt_intf_num_of_ds_a
global sc_choose_int_cmd_code_called

# 081218|SUN - Variables related to CV Multi Interface
global cv_agt_selected
global cv_agt_selected_started
global cv_interface_pkg
global cv_agt_intf_cnt
global cv_agt_intf_cnt_tmp
global cv_agt_intf_num_of_ds_l
global cv_agt_intf_num_of_ds_a
global cv_choose_int_cmd_code_called

# Elements related to Spreadsheet
global load_xls_file_path
global load_xls_file

# Elements For Multi Agent Instance : 090118|SAT
global cvad_e4_temp

# Elements for Multi Cluster VIP : 062619|WED
global str_arr
global mc_env_no_max
global mc_env_no_cur
global mc_env_agt_no
global mc_env_agt_no_tmp
global mc_env_find_idx
global mc_env_cfg_pool
global mc_env_cfg_pool_pass
global mc_env_cfg_pool_cnt
global mc_env_cfg_started
global mc_sub_env_arr_prev
global mc_sub_env_arr_focus_in
global mc_env_no_cur_prev
global mc_curr_env_set_c
global mc_curr_env_set_s
global mc_curr_env_agt_set_c
global mc_curr_env_agt_set_s
global mc_curr_env_seq_exists
global mc_curr_env_mon_exists

global mc_agt_cfg_pool
global mc_agt_cfg_pool_prev
global mc_agt_drv_intf_cfg_pool
global mc_agt_drv_intf_cfg_pool_prev
global mc_agt_cfg_pool_cnt
global mce5_arr
global mce5_agt_cnt
global mc_agt_drv_intf_cfg_pool_cnt 
global mcae2_drv_cnt
global mcae2_drv_name
global mcae2_drv_intf_type
global mcae2_drv_cnt_max
global mcae2_arr
global mc_agt_find_idx
global mc_agt_drv_intf_find_idx
global mc_agt_cfg_pool_dummy
global mc_agt_drv_intf_cfg_pool_dummy
global mc_udif_loop

# MC Interface Global Variables
global mc_udif_frame_loop
global mc_udif_cb_element_loop
global mc_udif_mp_element_loop
global mc_udif_cb_element_loop_tmp
global mc_udif_mp_element_loop_tmp
global mc_udif_intf_cfg_array 
global mc_udif_cb_cfg_array 
global mc_udif_mp_cfg_array 
global mc_udif_int_cfg_array 
global mc_udif_cb_cnt
global mc_udif_clock_cfg_array

global mc_envset_done
global mc_curr_env_mon_arr
global mc_curr_env_scb_arr
global mc_global_env_mon_arr
global mc_global_env_scb_arr
global mc_global_env_mon_scb_con_arr
global mc_envset_button_code_on
global mc_final_envset_button_code_on
global mc_curr_env_mon_scb_con_arr
global mc_env_arr_range
global xls_file_path_tmp
global mc_intf_arr_range
global mc_load_envcfg_button_code_called 
global mc_find_till_the_leaf_arr
global mc_mon_scb_port_range
global mc_mon_scb_port_loop 
global mc_mon_scb_port_loop_arr 
global mc_mon_scb_widget_arr_cur_len 

# Generic Parsing Interface Variables
global parse_ss_env_no
global parse_n
global parse_env_cfg_pool
global which_parse_gb
global generic_udif_frame_loop
global generic_udif_cb_element_loop
global generic_udif_mp_element_loop
global generic_udif_cb_element_loop_tmp
global generic_udif_mp_element_loop_tmp
global generic_udif_intf_cfg_array 
global generic_udif_cb_cfg_array 
global generic_udif_mp_cfg_array 
global generic_udif_int_cfg_array 
global generic_udif_cb_cnt
global generic_udif_clock_cfg_array

# MC Environment Interface Related Global Variables
global mc_env_cfg_pool_prev
global mc_env_intf_cfg_pool
global mc_env_intf_cfg_pool_prev
global mc_env_intf_cfg_pool_cnt 
global mc_env_intf_type
global mc_env_intf_find_idx
global mc_env_intf_cfg_pool_dummy
global mc_env_intf_cnt_max
global mc_env_intf_cnt 
global mc_env_intf_arr
global mc_env_intf_name

global mc_env_udif_loop
global mc_env_udif_frame_loop
global mc_env_udif_cb_element_loop
global mc_env_udif_mp_element_loop
global mc_env_udif_cb_element_loop_tmp
global mc_env_udif_mp_element_loop_tmp
global mc_env_udif_intf_cfg_array 
global mc_env_udif_cb_cfg_array 
global mc_env_udif_mp_cfg_array 
global mc_env_udif_int_cfg_array 
global mc_env_udif_cb_cnt
global mc_env_udif_clock_cfg_array

# Default/Common Interface Variables
global udie_intf_cfg_array 
global udie_cb_cfg_array 
global udie_mp_cfg_array 
global udie_clock_cfg_array

global create_stitch
global stitch_only
global cxn_only
global ei_only

# maketrans table : 01252021MON
global mt_rm_sym

# Logging : 082518|SAT 
LEVELS = { 'debug':logging.DEBUG,
            'info':logging.INFO,
            'warning':logging.WARNING,
            'error':logging.ERROR,
            'critical':logging.CRITICAL,
         }

if len(sys.argv) > 1:
    logging.basicConfig(filename="dbg_uvm_vip_template_py.log", filemode='a', format = "%(levelname) -10s %(module)s:%(lineno)s %(funcName)s %(message)s")
    level_name = sys.argv[1]
    level = LEVELS.get(level_name, logging.NOTSET)
    logging.basicConfig(level=level)
else:
    level = logging.WARNING

log = logging.getLogger('uvm_vip_template_py')
log.setLevel(level)

ch = logging.StreamHandler(sys.stdout)
ch.setLevel(level)
log.addHandler(ch)

# Generic Global Variables 
dtf = 0
dtff = 0

# All the range values defined 
mc_env_arr_range = 8
mc_intf_arr_range = 9
mc_mon_scb_port_range = 10

# Misc Items
tb_all_dir = None 
str_arr = ['aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'gg', 'hh', 'ii', 'jj', 'kk', 'll', 'mm', 'nn', 'oo', 'pp', 'qq', 'rr', 'ss', 'tt', 'uu', 'vv', 'ww', 'xx', 'yy', 'zz']

# 081118|SAT - Variables related to Multi Interface
sc_interface_pkg = []
sc_agt_intf_cnt = 0
sc_agt_intf_cnt_tmp = 0
sc_choose_int_cmd_code_called = 0

# 081218|SUN - Variables related to CV Multi Interface
cv_interface_pkg = []
cv_agt_intf_cnt = 0
cv_agt_intf_cnt_tmp = 0
cv_choose_int_cmd_code_called = 0
cv_tbtop_clock_array = []

load_xls_file_path = None
load_xls_file = None

sc_udie_loop = 0
sc_udie_frame_loop = 0
cv_udie_loop = 0
cv_udie_frame_loop = 0
cv_agt_loop_chk = 0

le = 0
ree = 0
sc_element_loop = 0
cv_element_loop = 0

sc_agtrow_val = 100
sc_agt_selected = 0
sc_agt_selected_started = 0

# Variables related to cv multi aft intefacce : 081218|SUN
cv_agt_selected = 0
cv_agt_selected_started = 0

# New Variables For Multi Agent Instance : 090118|SAT
cvad_e4_temp = None

# Elements for Multi Cluster VIP : 062619|WED
mc_env_cfg_pool = []
mc_env_cfg_pool_pass = [[] for x in range(mc_env_arr_range)]
mc_env_cfg_pool_prev = []
parse_env_cfg_pool = []
mc_env_cfg_pool_cnt = 0
mc_env_cfg_started = 0
mc_sub_env_arr_prev = []
mc_sub_env_arr_focus_in = []
mc_env_no_cur_prev = 0

mcae2_arr = ''
mcae2_drv_intf_type = ''
mc_env_intf_type = ''

mc_agt_cfg_pool = []
mc_agt_cfg_pool_prev = []
mc_agt_drv_intf_cfg_pool = []
mc_agt_drv_intf_cfg_pool_prev = []
mc_agt_cfg_pool_dummy = [[],[],[],[],[],[]];
mc_agt_drv_intf_cfg_pool_dummy = [[] for x in range(mc_intf_arr_range)] # [[],[],[],[],[],[],[],[]];
mc_agt_cfg_pool_cnt = 0
mc_agt_drv_intf_cfg_pool_cnt = 0
mc_udif_loop = 0
mc_udif_frame_loop = 0
mc_envset_done = 0

# MC Env intf variables
mc_env_intf_cfg_pool = []
mc_env_intf_cfg_pool_prev = []
mc_env_intf_cfg_pool_dummy = [[] for x in range(mc_intf_arr_range)] # [[],[],[],[],[],[],[],[]];
mc_env_intf_cfg_pool_cnt = 0
mc_env_udif_loop = 0
mc_env_udif_frame_loop = 0

mc_curr_env_mon_arr = []
mc_curr_env_scb_arr = []
mc_global_env_mon_arr = []
mc_global_env_scb_arr = []
mc_global_env_mon_scb_con_arr = []
mc_curr_env_mon_scb_con_arr = []
mc_envset_button_code_on = 0
mc_final_envset_button_code_on = 0

which_parse_gb = None
mc_load_envcfg_button_code_called = None
mc_find_till_the_leaf_arr = []
mc_mon_scb_port_loop = 0
mc_mon_scb_port_loop_arr = 0
mc_mon_scb_widget_arr_cur_len = 0

# Variables for the create,edit,make,run phasese : 112519|MON
mc_curr_env_set_c = 0
mc_curr_env_set_s = 0
mc_curr_env_agt_set_c = 0
mc_curr_env_agt_set_s = 0
mc_curr_env_seq_exists = 0
mc_curr_env_mon_exists = 0


# Generic Parsing Interface Variable
generic_udif_frame_loop = 0
parse_ss_env_no = 0

# Variables for the mc development : 112319|SAT
create_stitch = 0
stitch_only = 0
cxn_only = 0
ei_only = 0

# maketrans table : 01252021MON
mt_rm_sym = str.maketrans({"'":"","[":"","]":""})

# Getting the PROJ_ROOT Variable to Access The Shell Scripts
proj_root = os.environ.get("PROJ_ROOT")

# Commented the below code and using rtn_usr_name function : 01032021SUN

# Code To Store the User Name and Use It During Welcome Message
# user_name = subprocess.check_output("ypcat passwd | grep $USER | awk -F ':' '{print $5}' | sed 's/,.*//g'", shell=True)
# if "\n" in user_name:
#     user_name = user_name.replace('\n','')


class CustomLabel(tk.Frame):
    def __init__(self, parent, label1, label2, **kwargs):
        tk.Frame.__init__(self, parent, **kwargs)

        self.canvas = tk.Canvas(self, borderwidth=0, highlightbackground='black', highlightthickness=2, background=self.cget("background"))
        self.canvas.pack(fill="both", expand=True)

        l1 = tk.Label(self.canvas, text=label1, background=self.cget("background"))
        l2 = tk.Label(self.canvas, text=label2, background=self.cget("background"))

        l1.place(relx=.75, rely=.25, anchor="c")
        l2.place(relx=.25, rely=.75, anchor="c")

        # arrange for the line to be redrawn whenever the canvas
        # changes size
        self.canvas.bind("<Configure>", self.handle_configure)

        # set the default size to be relative to the requested size
        # of the labels plus some margin
        width  = l1.winfo_reqwidth()  + l2.winfo_reqwidth() + 4
        height = l1.winfo_reqheight() + l2.winfo_reqheight() + 4
        self.canvas.configure(width=width, height=height)

    def handle_configure(self, event):
        self.canvas.delete("line")
        self.canvas.create_line(0,0,event.width, event.height, tags=("line",))


# To Level Class Component. Which Builds the entire GUI 
class uvm_testbench_gen:
    def __init__(self, master):
        self.master = master
        self.bnr = IntVar(root)
        self.genbtn = None
        self.exit_button = None
        self.parse_button = None
        self.return_button = None
        self.initial_screen_buttons_dict = {}
        self.single_component_buttons_dict = {}
        self.single_component_button = None
        self.complete_vip_button = None
        
        self.multi_cluster_vip_button = None
        self.multi_cluster_vip_button_gui = None
        self.multi_cluster_vip_button_ss = None
        self.multi_cluster_vip_buttons_dict = {}
        self.mc_load_envcfg_button = None 
        self.mc_prev_envcfg_button = None 
        self.mc_next_envcfg_button = None 
        self.mc_done_envcfg_button = None 
        self.mc_envset_button = None 
        self.mc_final_envset_button = None 
        self.mc_parse_envcfg_button = None 
        
        self.scl3 = None
        self.scl4 = None
        self.scr2 = None
        self.scr3 = None

        self.scl1 = None 
        self.scl2 = None 
        self.sce1 = None 
        self.sce2 = None 
        self.scr1 = None 
        self.scal1 = None 
        self.scae1 = None 
        self.scal2 = None 
        self.scae2 = None 

        self.scr1_seq_item = None 
        self.scr1_seq = None 
        self.scr1_seqr = None 
        self.scr1_drv = None 
        self.scr1_mon = None 
        self.scr1_scb = None 
        self.scr1_agt = None 
        self.scr1_env = None 
        self.scr1_test = None 
        self.scr1_intf = None 
       
        self.sco1 = None

        self.cvl1 = None 
        self.cvl2 = None 
        self.cvl3 = None 
        self.cvl4 = None 
        self.cve1 = None 
        self.cve2 = None 
        self.cvr1 = None 
        self.cvr2 = None 
        self.cvr3 = None 
        self.cvr4 = None 

        self.cvad_l0 = None
        self.cvad_l1 = None
        self.cvad_l2 = None
        self.cvad_l3 = None
        self.cvad_l4 = None
        #self.cvad_l5 = None
        self.cvad_e1 = None
        self.cvad_e2 = None
        self.cvad_e3 = None
        self.cvad_e4 = None
        self.cvo1 = None
        self.cvo2 = None
        self.cvo3 = None

        self.cv_next_agt_cfg_button = None

        self.sc_udi_nxt = None
        self.sc_udi_done = None
        self.sc_udie = []
        
        self.sc_choose_int_list = {}
        self.sc_choose_int_val = StringVar()
        
        self.cv_udi_nxt = None
        self.cv_udi_done = None
        self.cv_udie = []

        self.acqt = None
        self.mcqt = None
        self.scqt = None
        self.icqt = None
        self.qtips_chkbtn = None
        self.bnr_chkbtn = None

        self.cv_mon_scb_con_list = {}
        self.cv_mon_scb_con_val = StringVar() 

        self.cv_choose_int_list = {}
        self.cv_choose_int_val = StringVar()

        self.sc_udif_frame = None
        self.sc_udif_name = None
        self.sc_udif_type = None
        self.sc_udif_le = None 
        self.sc_udif_re = None 
        self.sc_udif_cb = None 
        self.sc_udif_mp = None 
        self.sc_udif_name_e = [] 
        self.sc_udif_type_e = [] 
        self.sc_udif_le_e = [] 
        self.sc_udif_re_e = [] 
        self.sc_udif_cb_e = [] 
        self.sc_udif_mp_e = [] 

        self.cv_udif_frame = None
        self.cv_udif_name = None
        self.cv_udif_type = None
        self.cv_udif_le = None 
        self.cv_udif_re = None 
        self.cv_udif_cb = None 
        self.cv_udif_mp = None 
        self.cv_udif_name_e = [] 
        self.cv_udif_type_e = [] 
        self.cv_udif_le_e = [] 
        self.cv_udif_re_e = [] 
        self.cv_udif_cb_e = [] 
        self.cv_udif_mp_e = []
      
        # Variable for MC Interface : vimo : 071219|FRI
        self.mc_udif_frame = None
        self.mc_udif_name = None
        self.mc_udif_type = None
        self.mc_udif_le = None 
        self.mc_udif_re = None 
        self.mc_udif_cb = None 
        self.mc_udif_mp = None 
        self.mc_udif_name_e = [] 
        self.mc_udif_type_e = [] 
        self.mc_udif_le_e = [] 
        self.mc_udif_re_e = [] 
        self.mc_udif_cb_e = [] 
        self.mc_udif_mp_e = []
        self.mc_udi_nxt = None
        self.mc_udi_done = None

        # Multi Cluster VIP Code : 062419|MON
        self.mc_initial_button_frame = None
        self.mc_rlpe_frame = None
        self.mcl1 = None 
        
        self.mcl2 = None 
        self.mcl3 = None 
        self.mcl4 = None 
        self.mcl5 = None 
        self.mcl6 = None 
        self.mcl7 = None
        self.mcl8 = None # Label for env directory
        self.mcl9 = None # Label for Env Interface Directory 
        self.mcl10 = None # Label for env intf widget
        self.mcl11 = None # Label for env load intf

        self.mcal1 = None
        self.mcal2 = None
        self.mcal3 = None
        self.mcal4 = None
        self.mcal5 = None

        self.mce1 = None
        self.mce2 = None
        self.mce3 = None
        self.mce4 = None
        self.mce5 = None
        self.mce6 = None
        self.mce7 = None
        self.mce8 = None # Entry widget for getting mc env directory
        self.mce9 = None # Entry widget for getting env intf config 
        self.mce10 = None # Entry widget for env load intf config 
       
        self.mco1 = None # Option menu for env intf widget

        self.mcae1 = None
        self.mcae2 = None
        self.mcae3 = None
        self.mcae5 = None

        self.mcao1 = None
        
        self.mc_agt_button_frame = None
        self.mc_return_to_env_menu_button = None
        self.mc_prev_agt_cfg_button = None
        self.mc_next_agt_cfg_button = None
        self.mc_done_agt_cfg_button = None
        
        self.mc_agt_drv_intf_button_frame = None
        self.mc_agt_drv_intf_return_to_env_menu_button = None
        self.mc_agt_drv_intf_prev_cfg_button = None
        self.mc_agt_drv_intf_save_cfg_button = None
        self.mc_agt_drv_intf_next_cfg_button = None
        
        self.mc_choose_int_list = {}
        self.mc_choose_int_val = StringVar()

        self.mc_agt_nl = None
        self.mc_envset = None
        self.mc_final_envset = None

        self.mc_udif_frame = None
        
        self.mc_mon_scb_con_list = {}
        self.mc_mon_scb_con_val = {} 
        self.mc_mon_scb_label_list = {}
        self.mc_mon_scb_widget_arr = {}
        self.mc_mon_scb_con_save_button = None
        
        # MC Mon SCB Connectivity New Variables : 111519|FRI
        self.mc_mon_scb_con_init_val = {} 
        self.mc_mon_scb_widget_arr = {}
        self.mc_mon_scb_port_frame = None
        self.mc_mon_scb_port_label = None
        self.mc_mon_scb_port_name = [] 
        self.mc_mon_scb_port_option = [] 
        self.mc_mon_scb_port_entry = [] 
        self.mc_mon_scb_port_dd = [] 
        self.mc_mon_scb_port_dd_val = {}
        self.mc_mon_scb_port_dd_list = {}
        
        self.mc_mon_scb_port_button_frame = None
        self.mc_mon_scb_port_return_button = None
        self.mc_mon_scb_port_add_button = None
        self.mc_mon_scb_port_store_button = None

        # MC Spreadsheet Variables
        self.mcssl_1 = None 
        self.mcsse_1 = None
        self.mc_ss_initial_button_frame = None
        self.parse_ss_sheet = None
        self.parse_ss_sheet_side = None
        self.parse_ss_sheet_path = None
        self.parse_ss_sheet_path_generic = None
        self.parse_ss_sheet_path_side = None
        
        # MC ENV Intf Buttons
        self.mc_env_udif_frame = None
        self.mc_env_udif_name = None
        self.mc_env_udif_type = None
        self.mc_env_udif_le = None 
        self.mc_env_udif_re = None 
        self.mc_env_udif_cb = None 
        self.mc_env_udif_mp = None 
        self.mc_env_udif_name_e = [] 
        self.mc_env_udif_type_e = [] 
        self.mc_env_udif_le_e = [] 
        self.mc_env_udif_re_e = [] 
        self.mc_env_udif_cb_e = [] 
        self.mc_env_udif_mp_e = []
        self.mc_env_udi_nxt = None
        self.mc_env_udi_done = None
        
        self.mc_env_choose_int_list = {}
        self.mc_env_choose_int_val = StringVar()
        self.mc_env_intf_nl = None
        self.mc_env_intf_button_frame = None
        self.mc_env_intf_return_to_env_menu_button = None
        self.mc_env_intf_prev_cfg_button = None
        self.mc_env_intf_save_cfg_button = None
        self.mc_env_intf_next_cfg_button = None
        
        self.mc_parse_parenvname = StringVar()
        self.mc_parse_envname = StringVar()
        self.mc_parse_link = IntVar()

        self.top_frame = None
        self.lib_frame = None
        self.lib_label = None
        self.lib_entry = None
        self.final_rmg_frame = None
        
        self.sc_rm_ec_frame = None

        # Default Value Settings
        self.bnr.set(1)

        self.master.title("UVM Template Generator")
        #master.geometry('500x75')
        #root.pack(fill=BOTH)
        

        if self.top_frame: 
            self.top_frame.grid_forget(); self.top_frame = None
        self.top_frame = Frame(root, bg='gray50', highlightbackground='black', highlightthickness='2')
        self.top_frame.grid(row=0, column=0, columnspan=2,sticky='WE')
        self.top_frame.rowconfigure(0,weight=1)
        self.top_frame.columnconfigure((0,1,2),weight=1)


        # Codes For Checkbutton To Enable Tips Window
        self.qtips_chkbtn = Checkbutton(self.top_frame, bg='gray50', activebackground="gray90", highlightbackground='gray50', font=MyFontH2, anchor="center", text = "User Tips", variable = qt, onvalue = 1, offvalue = 0) 
        self.qtips_chkbtn.grid(row=0, column=0, sticky='NW')
        self.qtips_chkbtn.rowconfigure(0,weight=1)
        self.qtips_chkbtn.columnconfigure(0,weight=1)
        
        self.bnr_chkbtn = Checkbutton(self.top_frame, bg='gray50', activebackground="gray90", highlightbackground='gray50', font=MyFontH2, anchor="center", text = "Build & Run", variable = self.bnr, onvalue = 0, offvalue = 0) 
        self.bnr_chkbtn.grid(row=0, column=2, sticky='NE')
        self.bnr_chkbtn.rowconfigure(0,weight=1)
        self.bnr_chkbtn.columnconfigure(2,weight=1)

        #------------------------------------------------------------------------------
        # Code for taking the option for which lib type it is : 011520|WED
        #------------------------------------------------------------------------------
        if self.lib_frame: 
            self.lib_frame.grid_forget(); self.lib_frame = None
        self.lib_frame = Frame(self.top_frame, bg='gray50',)
        self.lib_frame.grid(row=0, column=1)
        self.lib_frame.rowconfigure(0,weight=1)
        self.lib_frame.columnconfigure(1,weight=1)
        
        if not (self.lib_label):
            self.lib_label = Label(self.lib_frame, font=MyFontH2, bg='gray50', highlightbackground='gray50', text="Lib")
            self.lib_label.grid(row=0, column=0)
            self.lib_label.rowconfigure(0,weight=1)
        else:
            self.lib_label.grid()
        
        if not (self.lib_entry): 
            self.lib_entry = Entry(self.lib_frame, font=MyFontH2, bg='gray50', highlightbackground='gray50', width = 10)
            self.lib_entry.insert(END, 'uvm')
            self.lib_entry.grid(row=0, column=1)
            self.lib_entry.rowconfigure(0,weight=1)
        else:
            self.lib_entry.grid()
        #------------------------------------------------------------------------------


        # Code to call/enable/wish the respective user
        self.greeting_widget_window()

        self.initial_screen_buttons_list_value = (
         ('self.single_component_button', 'Single UVM Component',v, 1, self.singlecomponent, 2, 'W', MyFontH1),
         # Disabling the complete vip button, as this is covered in Single & Multi Env VIP : 011520|WED
         #('self.complete_vip_button', 'Complete UVM VIP',v, 2, self.completevip, 3, 'W', MyFontH1),
         #('self.multi_cluster_vip_button', 'Multi Cluster VIP',v, 3, self.multiclustervip, 4, 'W', MyFontH1)
         ('self.multi_cluster_vip_button', 'Single & Multi Env VIP',v, 3, self.multiclustervip, 4, 'W', MyFontH1)
        )

        for _ButtonName , _Text, _Variable, _Value, _Operation, _Row, _Sticky, _Font in self.initial_screen_buttons_list_value: 
            _ButtonName_tmp = Radiobutton(self.master, activebackground="gray50", font=_Font, anchor="center", text=_Text, variable=_Variable, value=_Value, command=_Operation)
            _ButtonName_tmp.grid(row=_Row, sticky=_Sticky)
            _ButtonName_tmp.rowconfigure(_Row,weight=1)
            self.initial_screen_buttons_dict[_ButtonName]=_ButtonName_tmp 


        # self.single_component_button = Radiobutton(master, text="Single UVM Component", variable=v, value=1, command=self.singlecomponent)
        # #self.single_component_button.grid(row=1,column=1,pady=50,columnspan=2)
        # #self.single_component_button.pack(side=TOP, pady=1, padx=1, anchor=W)
        # self.single_component_button.grid(row=2, column=0)
        # 
        # self.complete_vip_button = Radiobutton(master, text="Complete UVM VIP", variable=v, value=2, command=self.completevip)
        # #self.complete_vip_button.pack()
        # self.complete_vip_button.grid(row=3, column=0)

        #self.exit_button = Button(root, text="EXIT CODE GENERATOR", command=self.exit_button_code)    
        #self.exit_button.pack()
        
        # self.qtips_yes = Radiobutton(master, text="Do You Want To Enable Tool Usage Quick Tips", variable=qv, value=1) #, command=self.completevip)
        # self.qtips_yes.pack()
        
        # self.qtips_label = Label(master, text="Do You Want To Enable Tool Usage Quick Tips")
        # self.qtips_label.pack()
        # 
        # self.qtips_yes = Radiobutton(master, text="Yes", variable=qv, value=1) #, command=self.completevip)
        # self.qtips_yes.grid(row=1,column=1)
        # self.qtips_yes.pack()
        # 
        # self.qtips_no = Radiobutton(master, text="No", variable=qv, value=2) #, command=self.completevip)
        # self.qtips_no.grid(row=1,column=2)
        # self.qtips_no.pack()
        
        # self.qtips_label = Label(master, text="Do You Want To Enable Tool Usage Quick Tips")
        # self.qtips_label.pack()
        
        # self.qtips_chkbtn = Checkbutton(master, text = "Do You Want To Enable Tool Usage Quick Tips", variable = 1, \
        #          onvalue = 1, offvalue = 0) 
        # self.qtips_chkbtn.pack()

        # if not (self.exit_button): 
        #     self.exit_button = Button(root, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code)    
        #     self.exit_button.grid(row=100, column=0)
        #     self.exit_button.rowconfigure(100,weight=1)

        self.exit_button_create_cb(1);

    
    def rtn_date_time_full(self):
        global dtf 

        dtf = datetime.datetime.today()
        dtf_str = dtf.strftime("%m%d%Y_%H%M%S") 
        #return dtf.isoformat() 
        return dtf_str
   
    def rtn_date_time_for_files(self):
        global dtff 

        dtff = datetime.datetime.today()
        dtff_str = dtff.strftime("%m/%d/%Y @ %I:%M %p")
        return dtff_str

    def rtn_usr_name(self):
        if (platform.system() == 'Linux'):
            return getpass.getuser()
        elif (platform.system() == 'Windows'):
            return getpass.getuser()

    def greeting_widget_window(self):
        self.initial_screen_label = Label(self.master, font=MyFontH1, anchor="center", text="Hello %s! Choose What You Want To Create"% self.rtn_usr_name())
        self.initial_screen_label.grid(row=1, column=0, columnspan=2)
        self.initial_screen_label.rowconfigure(1,weight=1)
   
    def greeting_widget_window_kcb(self):
        if self.initial_screen_label:
            self.initial_screen_label.grid_forget(); self.initial_screen_label = None
       
    def final_rmg_frame_kcb(self):
        if self.final_rmg_frame: 
            self.final_rmg_frame.grid_forget(); self.final_rmg_frame = None

    def single_component_widget_clear(self):
        # CLear The Entries in Single Component : vimo : 063018|SAT 
        if self.sce1:
            self.sce1.delete(0, 'end')
        if sv.get() != None:
            sv.set(None)

    def initial_screen_buttons_clear(self):
        if v.get() != 0:
            v.set(0)

    def return_button_create_cb(self, which_return):
        global sc_agtrow_val
        if which_return == 1: 
            if v.get()==1:
                if (self.return_button):
                    self.return_button.grid_forget() 
                self.return_button = None
                self.return_button = Button(root, font=MyFontH2, background="royalblue1", activebackground="blue2", text="RETURN TO MAIN MENU", command=self.return_button_code, highlightbackground='black', highlightthickness='2')    
                self.return_button.grid(row=sc_agtrow_val+7, column=0, sticky='WE')
                self.return_button.rowconfigure(sc_agtrow_val+7,weight=1)
            elif v.get()==2:
                if (self.return_button): 
                    self.return_button.grid_forget() 
                self.return_button = None
                self.return_button = Button(root, font=MyFontH2, background="royalblue1", activebackground="blue2", text="RETURN TO MAIN MENU", command=self.return_button_code, highlightbackground='black', highlightthickness='2')    
                self.return_button.grid(row=40)
                self.return_button.rowconfigure(40,weight=1)
        elif which_return == 2:
            if v.get()==1:
                if sv.get()=="Interface" or sv.get()=="Agent":
                    if (self.return_button):
                        self.return_button.grid_forget() 
                    self.return_button = None
                    self.return_button = Button(root, font=MyFontH2, background="royalblue1", activebackground="blue2", text="RETURN TO MAIN MENU", command=self.return_button_code, highlightbackground='black', highlightthickness='2')    
                    self.return_button.grid(row=sc_agtrow_val+7, column=0, sticky='WE')
                    self.return_button.rowconfigure(sc_agtrow_val+7,weight=1)
                    #self.return_button.columnconfigure(0,weight=1)
                else:
                    if (self.return_button):
                        self.return_button.grid_forget() 
                    self.return_button = None
                    self.return_button = Button(self.sc_rm_ec_frame, font=MyFontH2, width=32, background="royalblue1", activebackground="blue2", text="RETURN TO MAIN MENU", command=self.return_button_code, highlightbackground='black', highlightthickness='2')    
                    self.return_button.grid(row=0, column=0, sticky='WE')
                    #self.return_button.rowconfigure(0,weight=1)
                    #self.return_button.columnconfigure(0,weight=1)

                    # if (self.return_button):
                    #     self.return_button.grid_forget() 
                    # self.return_button = None
                    # self.return_button = Button(root, font=MyFontH2, width=32, background="royalblue1", activebackground="blue2", text="RETURN TO MAIN MENU", command=self.return_button_code)    
                    # self.return_button.grid(row=sc_agtrow_val+7, column=0, sticky='W')
                    # self.return_button.rowconfigure(sc_agtrow_val+7,weight=1)
                    # #self.return_button.columnconfigure(0,weight=1)
            elif v.get()==2:
                if (self.return_button): 
                    self.return_button.grid_forget() 
                self.return_button = None
                self.return_button = Button(root, font=MyFontH2, background="royalblue1", activebackground="blue2", text="RETURN TO MAIN MENU", command=self.return_button_code, highlightbackground='black', highlightthickness='2')    
                self.return_button.grid(row=40, column=0, sticky='WE')
                self.return_button.rowconfigure(40,weight=1)
                #self.return_button.columnconfigure(0,weight=1)
        elif which_return == 3:
            if v.get()==1:
                if sv.get()=="Interface" or sv.get()=="Agent":
                    if (self.return_button):
                        self.return_button.grid_forget() 
                    self.return_button = None
                    self.return_button = Button(root, font=MyFontH2, background="royalblue1", activebackground="blue2", text="RETURN TO MAIN MENU", command=self.return_button_code, highlightbackground='black', highlightthickness='2')    
                    self.return_button.grid(row=sc_agtrow_val+7, column=0, columnspan=2, sticky='WE')
                    self.return_button.rowconfigure(sc_agtrow_val+7,weight=1)
        elif which_return == 4:
            if v.get()==1:
                if sv.get()=="Interface" or sv.get()=="Agent":
                    if (self.return_button):
                        self.return_button.grid_forget() 
                    self.return_button = None
                    self.return_button = Button(root, font=MyFontH2, background="royalblue1", activebackground="blue2", text="RETURN TO MAIN MENU", command=self.return_button_code, highlightbackground='black', highlightthickness='2')    
                    self.return_button.grid(row=sc_agtrow_val+8, column=0, sticky='WE')
                    self.return_button.rowconfigure(sc_agtrow_val+8,weight=1)
            elif v.get()==2:
                if (self.return_button): 
                    self.return_button.grid_forget() 
                self.return_button = None
                self.return_button = Button(root, font=MyFontH2, background="royalblue1", activebackground="blue2", text="RETURN TO MAIN MENU", command=self.return_button_code, highlightbackground='black', highlightthickness='2')    
                self.return_button.grid(row=38, column=0, sticky='WE')
                self.return_button.rowconfigure(38,weight=1)
        elif which_return == 5:
            if v.get()==3:
                if (self.return_button): 
                    self.return_button.grid_forget() 
                self.return_button = None
                self.return_button = Button(self.mc_rlpe_frame, width=18, font=MyFontH2, background="royalblue1", activebackground="blue2", text="RETURN TO MAIN MENU", command=self.return_button_code, highlightbackground='black', highlightthickness='2')    
                self.return_button.grid(row=0, column=0, sticky='WE')
                self.return_button.columnconfigure(0, weight=1)
        elif which_return == 6:
            if v.get()==3:
                if (self.return_button): 
                    self.return_button.grid_forget() 
                self.return_button = None
                #self.return_button = Button(self.mc_initial_button_frame, font=MyFontH2, background="royalblue1", activebackground="blue2", text="RETURN TO MAIN MENU", command=self.return_button_code)    
                self.return_button = Button(root, width=32, font=MyFontH2, background="royalblue1", activebackground="blue2", text="RETURN TO MAIN MENU", command=self.return_button_code, highlightbackground='black', highlightthickness='2')    
                #self.return_button.grid(row=0, column=0, sticky='WE')
                self.return_button.grid(row=8, column=0, sticky='WE')
                #self.return_button.rowconfigure(0, weight=1)
                self.return_button.columnconfigure(0, weight=1)
                #self.return_button.pack(side=LEFT, fill="both", expand=True)
        elif which_return == 7:
            if v.get()==3:
                if (self.return_button): 
                    self.return_button.grid_forget() 
                self.return_button = None
                self.return_button = Button(self.mc_ss_initial_button_frame, font=MyFontH2, background="royalblue1", activebackground="blue2", text="RETURN TO MAIN MENU", command=self.return_button_code, highlightbackground='black', highlightthickness='2')
                #self.return_button = Button(root, font=MyFontH2, background="royalblue1", activebackground="blue2", text="RETURN TO MAIN MENU", command=self.return_button_code)    
                self.return_button.grid(row=0, column=0, sticky='WE')
                #self.return_button.grid(row=8, column=0, sticky='WE')
                #self.return_button.rowconfigure(0, weight=1)
                #self.return_button.columnconfigure(0, weight=1)
                #self.return_button.pack(side=LEFT, fill="both", expand=True)
        elif which_return == 8:
            #if v.get()==3:
            #    if (self.return_button): 
            #        self.return_button.grid_forget() 
            #    self.return_button = None
            #    self.return_button = Button(root, font=MyFontH2, background="royalblue1", activebackground="blue2", text="RETURN TO MAIN MENU", command=self.return_button_code, highlightbackground='black', highlightthickness='2')
            #    self.return_button.grid(row=40, column=0, sticky='WE')
            #    self.return_button.rowconfigure(40,weight=1)
            if v.get()==3:
                if (self.return_button): 
                    self.return_button.grid_forget() 
                self.return_button = None
                self.return_button = Button(self.final_rmg_frame, font=MyFontH2, width=35, background="royalblue1", activebackground="blue2", text="RETURN TO MAIN MENU", command=self.return_button_code, highlightbackground='black', highlightthickness='2')
                self.return_button.grid(row=0, column=0, sticky='WE')
                self.return_button.rowconfigure(0, weight=1)
                #self.return_button.columnconfigure(0, weight=1)


    def exit_button_create_cb(self, which_exit):
        if which_exit == 1:
            if not (self.exit_button): 
                self.exit_button = Button(root, font=MyFontH2, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code, highlightbackground='black', highlightthickness='2')    
                self.exit_button.grid(row=100, columnspan=2, sticky='WE')
                self.exit_button.rowconfigure(0,weight=1)
            else:
                self.exit_button_cb();
                self.exit_button = Button(root, font=MyFontH2, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code, highlightbackground='black', highlightthickness='2')    
                self.exit_button.grid(row=100, columnspan=2, sticky='WE')
                self.exit_button.rowconfigure(0,weight=1)
        elif which_exit == 2:
            if v.get()==1:
                if not (self.exit_button): 
                    self.exit_button = Button(self.sc_rm_ec_frame, font=MyFontH2, width=32, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code, highlightbackground='black', highlightthickness='2')    
                    self.exit_button.grid(row=0, column=1, sticky='WE')
                    #self.exit_button.rowconfigure(0,weight=1)
                    #self.exit_button.columnconfigure(1,weight=1)
                else:
                    self.exit_button_cb();
                    self.exit_button = Button(self.sc_rm_ec_frame, font=MyFontH2, width=32, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code, highlightbackground='black', highlightthickness='2')    
                    self.exit_button.grid(row=0, column=1, sticky='WE')
                    #self.exit_button.rowconfigure(0,weight=1)
                    #self.exit_button.columnconfigure(1,weight=1)

                #if not (self.exit_button): 
                #    self.exit_button = Button(root, font=MyFontH2, width=32, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code)    
                #    self.exit_button.grid(row=sc_agtrow_val+7, column=0, columnspan=2, sticky='E')
                #    self.exit_button.rowconfigure(sc_agtrow_val+7,weight=1)
                #else:
                #    self.exit_button_cb();
                #    self.exit_button = Button(root, font=MyFontH2, width=32, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code)    
                #    self.exit_button.grid(row=sc_agtrow_val+7, column=0, columnspan=2, sticky='E')
                #    self.exit_button.rowconfigure(sc_agtrow_val+7,weight=1)
            elif v.get()==2:
                if not (self.exit_button): 
                    self.exit_button = Button(root, font=MyFontH2, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code, highlightbackground='black', highlightthickness='2')    
                    self.exit_button.grid(row=40, column=1, sticky='WE')
                    self.exit_button.rowconfigure(40,weight=1)
                else:
                    self.exit_button_cb();
                    self.exit_button = Button(root, font=MyFontH2, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code, highlightbackground='black', highlightthickness='2')    
                    self.exit_button.grid(row=40, column=1, sticky='WE')
                    self.exit_button.rowconfigure(40,weight=1)
            # Multi Cluster Env Exit Button Code : vimo : 062519|TUE
            elif v.get()==3:
                if not (self.exit_button): 
                    self.exit_button = Button(self.mc_rlpe_frame, width=18, font=MyFontH2, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code, highlightbackground='black', highlightthickness='2')    
                    self.exit_button.grid(row=0, column=1, sticky='WE')
                    self.exit_button.rowconfigure(0,weight=1)
                    self.exit_button.columnconfigure(1, weight=1)
                else:
                    self.exit_button_cb();
                    self.exit_button = Button(self.mc_rlpe_frame, width=18, font=MyFontH2, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code, highlightbackground='black', highlightthickness='2')    
                    self.exit_button.grid(row=0, column=1, sticky='WE')
                    self.exit_button.rowconfigure(0,weight=1)
                    self.exit_button.columnconfigure(1, weight=1)
        elif which_exit == 3:
            if v.get()==2:
                if not (self.exit_button): 
                    self.exit_button = Button(root, font=MyFontH2, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code, highlightbackground='black', highlightthickness='2')    
                    self.exit_button.grid(row=38, column=1, sticky='WE')
                    self.exit_button.rowconfigure(38,weight=1)
                else:
                    self.exit_button_cb();
                    self.exit_button = Button(root, font=MyFontH2, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code, highlightbackground='black', highlightthickness='2')    
                    self.exit_button.grid(row=38, column=1, sticky='WE')
                    self.exit_button.rowconfigure(38,weight=1)
        elif which_exit == 4:
            if v.get()==3:
                if not (self.exit_button): 
                    #self.exit_button = Button(self.mc_initial_button_frame, font=MyFontH2, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code)    
                    self.exit_button = Button(root, width=32, font=MyFontH2, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code, highlightbackground='black', highlightthickness='2')    
                    #self.exit_button.grid(row=0, column=1, sticky='WE')
                    self.exit_button.grid(row=8, column=1, sticky='WE')
                    #self.exit_button.rowconfigure(0, weight=1)
                    self.exit_button.columnconfigure(1, weight=1)
                    #self.exit_button.pack(side=RIGHT , fill="both", expand=True)
                else:
                    self.exit_button_cb();
                    #self.exit_button = Button(self.mc_initial_button_frame, font=MyFontH2, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code)    
                    self.exit_button = Button(root, width=32, font=MyFontH2, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code, highlightbackground='black', highlightthickness='2')    
                    #self.exit_button.grid(row=0, column=1, sticky='WE')
                    self.exit_button.grid(row=8, column=1, sticky='WE')
                    #self.exit_button.rowconfigure(0, weight=1)
                    self.exit_button.columnconfigure(1, weight=1)
                    #self.exit_button.pack(side=RIGHT, fill="both", expand=True)
        elif which_exit == 5:
            if v.get()==3:
                if not (self.exit_button): 
                    self.exit_button = Button(self.mc_ss_initial_button_frame, font=MyFontH2, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code, highlightbackground='black', highlightthickness='2')
                    #self.exit_button = Button(root, font=MyFontH2, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code)    
                    self.exit_button.grid(row=0, column=2, sticky='WE')
                    #self.exit_button.grid(row=8, column=2, sticky='WE')
                    #self.exit_button.rowconfigure(0, weight=1)
                    #self.exit_button.columnconfigure(2, weight=1)
                    #self.exit_button.pack(side=RIGHT , fill="both", expand=True)
                else:
                    self.exit_button_cb();
                    self.exit_button = Button(self.mc_ss_initial_button_frame, font=MyFontH2, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code, highlightbackground='black', highlightthickness='2')
                    #self.exit_button = Button(root, font=MyFontH2, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code)    
                    self.exit_button.grid(row=0, column=2, sticky='WE')
                    #self.exit_button.grid(row=8, column=2, sticky='WE')
                    #self.exit_button.rowconfigure(0, weight=1)
                    #self.exit_button.columnconfigure(2, weight=1)
                    #self.exit_button.pack(side=RIGHT, fill="both", expand=True)
                    #self.exit_button.pack(side=RIGHT, fill="both", expand=True)
        elif which_exit == 6:
            if v.get()==3:
                if (self.exit_button):
                    self.exit_button.grid_forget(); self.exit_button = None
                self.exit_button = Button(self.final_rmg_frame, font=MyFontH2, width=35, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code, highlightbackground='black', highlightthickness='2')
                self.exit_button.grid(row=0, column=2, sticky='WE')
                self.exit_button.rowconfigure(0,weight=1)
                #self.exit_button.columnconfigure(1,weight=1)


    def parse_ss_button_create_cb(self, which_parse):
        global which_parse_gb
        if which_parse == 1:
            if v.get()==3:
                if not (self.parse_button):
                    which_parse_gb = which_parse
                    self.parse_button = Button(self.mc_ss_initial_button_frame, font=MyFontH2, background="tan1", activebackground="tan4", text="PARSE SPREADSHEET", command=self.parse_ss_button_code, highlightbackground='black', highlightthickness='2')    
                    self.parse_button.grid(row=0, column=1, sticky='WE')
                    self.parse_button.columnconfigure(1, weight=1)
                    self.flash_parse_button()
                else:
                    self.parse_ss_button_kcb();
                    which_parse_gb = which_parse
                    self.parse_button = Button(self.mc_ss_initial_button_frame, font=MyFontH2, background="tan1", activebackground="tan4", text="PARSE SPREADSHEET", command=self.parse_ss_button_code, highlightbackground='black', highlightthickness='2')    
                    self.parse_button.grid(row=0, column=1, sticky='WE')
                    self.parse_button.columnconfigure(1, weight=1)
                    self.flash_parse_button()
        elif which_parse == 2:
            if v.get() == 3:
                if (self.mc_parse_envcfg_button): 
                    self.mc_parse_envcfg_button.grid_forget() 
                which_parse_gb = which_parse
                self.mc_parse_envcfg_button = None
                self.mc_parse_envcfg_button = Button(self.mc_rlpe_frame, width=18, font=MyFontH2, background="khaki", activebackground="dark khaki", text="PARSE ENV CFG", command=self.parse_ss_button_code, highlightbackground='black', highlightthickness='2')    
                self.mc_parse_envcfg_button.grid(row=0, column=3, sticky='WE')
                self.mc_parse_envcfg_button.rowconfigure(0,weight=1)
                self.mc_parse_envcfg_button.columnconfigure(3, weight=1)
                self.flash_mc_parse_envcfg_button()

    def flash_parse_button(self):
        if (self.parse_button):
            bg = self.parse_button.cget("background")
            fg = self.parse_button.cget("foreground")
            self.parse_button.configure(background=fg, foreground=bg)
            self.parse_button.after(500, self.flash_parse_button)

    def flash_mc_parse_envcfg_button(self):
        if (self.mc_parse_envcfg_button):
            bg = self.mc_parse_envcfg_button.cget("background")
            fg = self.mc_parse_envcfg_button.cget("foreground")
            self.mc_parse_envcfg_button.configure(background=fg, foreground=bg)
            self.mc_parse_envcfg_button.after(500, self.flash_mc_parse_envcfg_button)

    def parse_ss_button_create_kcb(self):
        if (self.mc_parse_envcfg_button):
            self.mc_parse_envcfg_button.grid_forget(); self.mc_parse_envcfg_button = None 

    # Multi Cluster Related Buttons i.e. loading mc env cfg
    def mc_load_envcfg_button_create_cb(self):
        if (self.mc_load_envcfg_button): 
            self.mc_load_envcfg_button.grid_forget() 
        self.mc_load_envcfg_button = None
        self.mc_load_envcfg_button = Button(self.mc_rlpe_frame, width=18, font=MyFontH2, background="medium sea green", activebackground="sea green", text="LOAD ENV CFG", command=self.mc_load_envcfg_button_code, highlightbackground='black', highlightthickness='2')    
        self.mc_load_envcfg_button.grid(row=0, column=3, sticky='WE')
        self.mc_load_envcfg_button.rowconfigure(0,weight=1)
        self.mc_load_envcfg_button.columnconfigure(3, weight=1)
  
    def mc_load_envcfg_button_code_kcb(self):
        if (self.mc_load_envcfg_button): 
            self.mc_load_envcfg_button.grid_forget(); self.mc_load_envcfg_button = None

    def mc_prev_envcfg_button_create_cb(self):
        if (self.mc_prev_envcfg_button): 
            self.mc_prev_envcfg_button.grid_forget() 
        self.mc_prev_envcfg_button = None
        self.mc_prev_envcfg_button = Button(self.mc_rlpe_frame, width=18, font=MyFontH2, background="NavajoWhite2", activebackground="NavajoWhite4", text="PREV ENV CFG", command=self.mc_prev_envcfg_button_code, highlightbackground='black', highlightthickness='2')    
        self.mc_prev_envcfg_button.grid(row=0, column=4, sticky='WE')
        self.mc_prev_envcfg_button.rowconfigure(0,weight=1)
        self.mc_prev_envcfg_button.columnconfigure(4, weight=1)
    
    def mc_next_envcfg_button_create_cb(self):
        if (self.mc_next_envcfg_button): 
            self.mc_next_envcfg_button.grid_forget() 
        self.mc_next_envcfg_button = None
        self.mc_next_envcfg_button = Button(self.mc_rlpe_frame, width=18, font=MyFontH2, background="sienna1", activebackground="sienna3", text="NEXT ENV CFG", command=self.mc_next_envcfg_button_code, highlightbackground='black', highlightthickness='2')    
        self.mc_next_envcfg_button.grid(row=0, column=5, sticky='WE')
        self.mc_next_envcfg_button.rowconfigure(0,weight=1)
        self.mc_next_envcfg_button.columnconfigure(5, weight=1)

    def mc_done_envcfg_button_create_cb(self):
        if (self.mc_done_envcfg_button): 
            self.mc_done_envcfg_button.grid_forget() 
        self.mc_done_envcfg_button = None
        self.mc_done_envcfg_button = Button(self.mc_rlpe_frame, width=18, font=MyFontH2, background="sienna1", activebackground="sienna3", text="DONE ENV CFG", command=self.mc_done_envcfg_button_code, highlightbackground='black', highlightthickness='2')    
        self.mc_done_envcfg_button.grid(row=0, column=5, sticky='WE')
        self.mc_done_envcfg_button.rowconfigure(0,weight=1)
        self.mc_done_envcfg_button.columnconfigure(5, weight=1)
    
    def mc_envset_button_create_cb(self):
        if (self.mc_envset_button): 
            self.mc_envset_button.grid_forget() 
        self.mc_envset_button = None
        self.mc_envset_button = Button(self.mc_rlpe_frame, width=18, font=MyFontH2, background="goldenrod1", activebackground="goldenrod3", text="ENV SETUP", command=self.mc_envset_button_code, highlightbackground='black', highlightthickness='2')
        self.mc_envset_button.grid(row=0, column=2, sticky='WE')
        self.mc_envset_button.rowconfigure(0,weight=1)
        self.mc_envset_button.columnconfigure(2, weight=1)
    
    def mc_final_envset_button_create_cb(self):
        if (self.mc_final_envset_button): 
            self.mc_final_envset_button.grid_forget() 
        self.mc_final_envset_button = None
        self.mc_final_envset_button = Button(self.mc_rlpe_frame, width=18, font=MyFontH2, background="goldenrod1", activebackground="goldenrod3", text="FINAL ENV SETUP", command=self.mc_final_envset_button_code, highlightbackground='black', highlightthickness='2')
        self.mc_final_envset_button.grid(row=0, column=2, sticky='WE')
        self.mc_final_envset_button.rowconfigure(0,weight=1)
        self.mc_final_envset_button.columnconfigure(2, weight=1)
        self.flash_mc_final_envset_button() 
    
    def flash_mc_final_envset_button(self):
        if (self.mc_final_envset_button):
            bg = self.mc_final_envset_button.cget("background")
            fg = self.mc_final_envset_button.cget("foreground")
            self.mc_final_envset_button.configure(background=fg, foreground=bg)
            self.mc_final_envset_button.after(500, self.flash_mc_final_envset_button)

    # Agent Component Quick Tips
    def agent_drv_quick_tips(self):
        self.acqt = Toplevel()
        self.acqt.wm_title("UVM TEMPLATE GENERATOR QUICK TIPS")
        
        self.acqt_label = Label(self.acqt, text="How To Create Driver~Sequencer Components", font=MyFontH1)
        self.acqt_label.pack()
        
        self.acqt_text = Text(self.acqt, font=MyFontQT)
        self.acqt_text.insert(INSERT,"Please Enter the Following In Order Separated By Comma And No Space\n")
        self.acqt_text.insert(INSERT,"Enter no. of drivers,1st driver name,..,nth driver name\n")
        self.acqt_text.insert(INSERT,"\n")
        self.acqt_text.insert(INSERT,"For Example:\n")
        self.acqt_text.insert(INSERT,"  1. To Create One Driver Just Using Agent Name, please enter as give below:\n")
        self.acqt_text.insert(INSERT,"     1\n")
        self.acqt_text.insert(INSERT,"     Note: So This Will Create Driver With <Agent_Name>_driver.sv\n")
        self.acqt_text.insert(INSERT,"\n")
        self.acqt_text.insert(INSERT,"  2. To Create One Driver Named mango, please enter as give below:\n")
        self.acqt_text.insert(INSERT,"     1,mango\n")
        self.acqt_text.insert(INSERT,"\n")
        self.acqt_text.insert(INSERT,"  3. To Create Two Drivers Named mango and orange, please enter as give below:\n")
        self.acqt_text.insert(INSERT,"     2,mango,orange\n")
        self.acqt_text.insert(INSERT,"     Note: Similarly You Can Create N-number of drivers\n")
        self.acqt_text.insert(INSERT,"\n")
        self.acqt_text.insert(INSERT,"So This Will Create a Driver With Name <Agent Name>_mango_driver.sv\n")
        self.acqt_text.insert(INSERT,"Similarly It Will Create The Sequencer With Name <Agent Name>_mango_sequencer.sv\n")
        self.acqt_text.insert(INSERT,"\n")
        self.acqt_text.insert(INSERT,"For Detailed Working Operation of This Tool, Please Refer The Below Link!\n")
        self.acqt_text.pack()
        
        self.acqt_close_button = Button(self.acqt, text="Close", command=self.quick_tips_close_window_acqt)
        self.acqt_close_button.pack()
  
    def agent_mon_quick_tips(self):
        self.mcqt = Toplevel()
        self.mcqt.wm_title("UVM Template Generator Quick Tips")
        
        self.mcqt_label = Label(self.mcqt, text="How To Create Monitor Component", font=MyFontH1)
        self.mcqt_label.pack()
        
        self.mcqt_text = Text(self.mcqt, font=MyFontQT)
        self.mcqt_text.insert(INSERT,"Please Enter the Following In Order Separated By Comma And No Space\n")
        self.mcqt_text.insert(INSERT,"Enter no. of monitors,1st monitor name,..,nth monitor name\n")
        self.mcqt_text.insert(INSERT,"\n")
        self.mcqt_text.insert(INSERT,"For Example:\n")
        self.mcqt_text.insert(INSERT,"  1. To Create One Monitor Just Using Agent Name, please enter as give below:\n")
        self.mcqt_text.insert(INSERT,"     1\n")
        self.mcqt_text.insert(INSERT,"     Note: So This Will Create Monitor With <Agent_Name>_monitor.sv\n")
        self.mcqt_text.insert(INSERT,"\n")
        self.mcqt_text.insert(INSERT,"  2. To Create One Monitor Named mango, please enter as give below:\n")
        self.mcqt_text.insert(INSERT,"     1,mango\n")
        self.mcqt_text.insert(INSERT,"\n")
        self.mcqt_text.insert(INSERT,"  3. To Create Two Monitors Named mango and orange, please enter as give below:\n")
        self.mcqt_text.insert(INSERT,"     2,mango,orange\n")
        self.mcqt_text.insert(INSERT,"     Note: Similarly You Can Create N-number of monitors\n")
        self.mcqt_text.insert(INSERT,"\n")
        self.mcqt_text.insert(INSERT,"So This Will Create a Monitor With Name <Agent Name>_mango_monitor.sv\n")
        self.mcqt_text.insert(INSERT,"\n")
        self.mcqt_text.insert(INSERT,"For Detailed Working Operation of This Tool, Please Refer The Below Link!\n")
        self.mcqt_text.pack()
        
        self.mcqt_close_button = Button(self.mcqt, text="Close", command=self.quick_tips_close_window_mcqt)
        self.mcqt_close_button.pack()

    # Scoreboard Component Quick Tips
    def scb_quick_tips(self):
        self.scqt = Toplevel()
        self.scqt.wm_title("UVM Template Generator Quick Tips")
        
        self.scqt_label = Label(self.scqt, text="How To Create Scoreboard Component", font=MyFontH1)
        self.scqt_label.pack()
        
        self.scqt_text = Text(self.scqt, font=MyFontQT)
        self.scqt_text.insert(INSERT,"Please Enter the Following In Order Separated By Comma And No Space\n")
        self.scqt_text.insert(INSERT,"Enter no. of scoreboards,1st scoreboard name,..,nth scoreboard name\n")
        self.scqt_text.insert(INSERT,"\n")
        self.scqt_text.insert(INSERT,"For Example:\n")
        self.scqt_text.insert(INSERT,"  1. To Create One Scoreboard Just Using Agent Name, please enter as give below:\n")
        self.scqt_text.insert(INSERT,"     1\n")
        self.scqt_text.insert(INSERT,"     Note: So This Will Create Scoreboard With <Agent_Name>_scoreboard.sv\n")
        self.scqt_text.insert(INSERT,"\n")
        self.scqt_text.insert(INSERT,"  2. To Create One Scoreboard Named mango, please enter as give below:\n")
        self.scqt_text.insert(INSERT,"     1,mango\n")
        self.scqt_text.insert(INSERT,"\n")
        self.scqt_text.insert(INSERT,"  3. To Create Two Scoreboards Named mango and orange, please enter as\n")
        self.scqt_text.insert(INSERT,"     give below:\n")
        self.scqt_text.insert(INSERT,"     2,mango,orange\n")
        self.scqt_text.insert(INSERT,"     Note: Similarly You Can Create N-number of scoreboards\n")
        self.scqt_text.insert(INSERT,"\n")
        self.scqt_text.insert(INSERT,"So This Will Create a Scoreboard With Name <Agent Name>_mango_scoreboard.sv\n")
        self.scqt_text.insert(INSERT,"\n")
        self.scqt_text.insert(INSERT,"For Detailed Working Operation of This Tool, Please Refer The Below Link!\n")
        self.scqt_text.pack()
        
        self.scqt_close_button = Button(self.scqt, text="Close", command=self.quick_tips_close_window_scqt)
        self.scqt_close_button.pack()

    # Interface Quick Tips
    def intf_quick_tips(self):
        self.icqt = Toplevel()
        self.icqt.wm_title("UVM Template Generator Quick Tips")
        
        self.icqt_label = Label(self.icqt, text="How To Create Interface Component", font=MyFontH1)
        self.icqt_label.pack()
        
        self.icqt_text = Text(self.icqt, font=MyFontQT)
        self.icqt_text.insert(INSERT,"For Detailed Working Operation of This Tool, Please Refer The Below Link!\n")
        
        # self.icqt_text.insert(INSERT,"Please Enter the Following In Order Separated By Comma And No Space\n")
        # self.icqt_text.insert(INSERT,"Enter no. of Signal Name, Type, Size\n")
        # self.icqt_text.insert(INSERT,"\n")
        # self.icqt_text.insert(INSERT,"For Example:\n")
        # self.icqt_text.insert(INSERT,"  1. To Create an Interface Signal, please enter as give below:\n")
        # self.icqt_text.insert(INSERT,"     mango,logic,8 or mango,logic,`ADDR_WIDTH\n")
        # self.icqt_text.insert(INSERT,"\n")
        # self.icqt_text.insert(INSERT,"  2. To Create an Interface Signal With Clocking Block, make sure you end the\n")
        # self.icqt_text.insert(INSERT,"     clocking block name with _cb, please enter as give below:\n")
        # self.icqt_text.insert(INSERT,"     mango,logic,8,mon_cb,inout\n")
        # self.icqt_text.insert(INSERT,"     Note: You can add N-number of clocking blocks for the same signal\n")
        # self.icqt_text.insert(INSERT,"\n")
        # self.icqt_text.insert(INSERT,"  3. To Create an Interface Signal With Modports, make sure you end the\n")
        # self.icqt_text.insert(INSERT,"     modport name with _mp, please enter as give below:\n")
        # self.icqt_text.insert(INSERT,"     mango,logic,8,mon_mp,inout\n")
        # self.icqt_text.insert(INSERT,"     Note: You can add N-number of modport for the same signal\n")
        # self.icqt_text.insert(INSERT,"\n")
        # self.icqt_text.insert(INSERT,"  4. To Create an Interface Signal With Modports, make sure you end the\n")
        # self.icqt_text.insert(INSERT,"     modport name with _mp. If you wanted to add a clocking block\n")
        # self.icqt_text.insert(INSERT,"     into the modport, please enter as give below\n")
        # self.icqt_text.insert(INSERT,"     mango,logic,8,mon_mp,clocking\n")
        # self.icqt_text.insert(INSERT,"\n")
        # self.icqt_text.insert(INSERT,"  5. You can basically add both clocking block and modport in the same\n")
        # self.icqt_text.insert(INSERT,"     for a particular signal, please enter as give below:\n")
        # self.icqt_text.insert(INSERT,"     mango,logic,8,mon_cb,inout,drv_mp,output\n")
        # self.icqt_text.insert(INSERT,"\n")
        # self.icqt_text.insert(INSERT,"  6. To create an Interface Signal Wilh both left side and right side\n")
        # self.icqt_text.insert(INSERT,"     element size configuration, please enter as given below:\n")
        # self.icqt_text.insert(INSERT,"     mango,wire,le,8,ree,32 Or\n")
        # self.icqt_text.insert(INSERT,"     mango,wire,ree,32 Or\n")
        # self.icqt_text.insert(INSERT,"     mango,wire,le,8,ree,`ADDR_WIDTH Or\n")
        # self.icqt_text.insert(INSERT,"     mango,wire,le,`DATA_WIDTH,ree,`ADDR_WIDTH\n")
        # self.icqt_text.insert(INSERT,"     Note: Where le stands for left-element and ree for right-element\n")
        # self.icqt_text.insert(INSERT,"\n")
        # self.icqt_text.insert(INSERT,"So This Will Create a Interface With Name <Agent Name>_interface.sv\n")
        
        self.icqt_text.pack()
        
        self.icqt_close_button = Button(self.icqt, text="Close", command=self.quick_tips_close_window_icqt)
        self.icqt_close_button.pack()

    # Quick Tips Close Window
    def quick_tips_close_window_acqt(self):
        if self.acqt:
            # try: self.acqt.destroy()   
            # except (): pass # fill in the error here
            # self.acqt = None
            self.acqt.destroy()
            self.acqt = None
    
    def quick_tips_close_window_mcqt(self):
        if self.mcqt:
            # try: self.acqt.destroy()   
            # except (): pass # fill in the error here
            # self.acqt = None
            self.mcqt.destroy()
            self.mcqt = None    
    
    def quick_tips_close_window_scqt(self):
        if self.scqt:
            # try: self.scqt.destroy()   
            # except (): pass # fill in the error here
            # self.scqt = None
            self.scqt.destroy()
            self.scqt = None    
    
    def quick_tips_close_window_icqt(self):
        if self.icqt:
            # try: self.icqt.destroy()   
            # except (): pass # fill in the error here
            # self.icqt = None
            self.icqt.destroy()
            self.icqt = None    

    def match_substring_recursive(self,needle, haystack):
        if isinstance(haystack, str):
            return needle in haystack
        else:
            return any(self.match_substring_recursive(needle, x) for x in haystack)

    def find_index_sub_string_rec(self,needle, haystack):
        return [i for i, x in enumerate(haystack) if self.match_substring_recursive(needle, x)]
    
    def substr_str_search(self, needle, haystack):
        # If haystack is string
        if type(haystack) is str and needle in haystack:
            return [haystack]
        # Else (haystack is a list not empty)
        elif type(haystack) is list and len(haystack) > 0:
            # Recursion on first element and others elements on haystack
            return self.substr_str_search(needle, haystack[0]) + self.substr_str_search(needle, haystack[1:])
        # default value
        return []

    # Code to search for element index
    def find_index(self,needle,haystack):
        if needle == haystack: return []
        # Strings are iterable, too
        if isinstance(haystack,str) and len(haystack)<=1: return None
        try:
          for i,e in enumerate(haystack):
            r = self.find_index(needle,e)
            if r is not None: 
              r.insert(0,i)
              return r
        except TypeError:
          pass
        return None

    def find_index_sub_string(self,needle,haystack):
        return [i for i, x in enumerate(haystack) if needle in x] 

    # Code To Search For an Element in the Nested Lists
    def in_nested_list(self, item, container):
        if not isinstance(container, list):
            raise TypeError
        for elem in container:
            if isinstance(elem, list):
                found = self.in_nested_list(item, elem)
                if not found:
                    pass
                elif isinstance(found, bool):
                    # Item is present in this list
                    return container 
                else:
                    # Return the deepest list and not the most outer list containing it.
                    return found
            else:
                return item == elem

    # Code for the exit button. After the code is generated the EXIT CODE GENERATOR button popsup, 
    # pressing that executs this code to close the application and exit 
    def exit_button_code(self):
        log.debug("Exitting The TOOL !\n")
        root.destroy()

    # Code for closing the exit button when any other radio buttos are pressed. 
    # Just to make sure the button does not exists when we wanted to continue further. 
    def exit_button_cb(self):
        if (self.exit_button):
            self.exit_button.grid_forget()
            #self.exit_button.destroy()
        self.exit_button = None
    
    # Code for closing the return button when any other radio buttos are pressed. 
    # Just to make sure the button does not exists when we wanted to continue further. 
    def return_button_cb(self):
        if (self.return_button):
            self.return_button.grid_forget()
            #self.return_button.destroy()
        self.return_button = None
   
    # Code for closing the parse spreadsheet button when any other radio buttos are pressed. 
    # Just to make sure the button does not exists when we wanted to continue further. 
    def parse_ss_button_kcb(self):
        if (self.parse_button):
            self.parse_button.grid_forget()
        self.parse_button = None    

    # Code for closing the generate button when any other radio buttos are pressed. 
    # Just to make sure the button does not exists when we wanted to continue further. 
    def generate_button_cb(self):
        if (self.genbtn):
            self.genbtn.grid_forget()
            #self.genbtn.destroy()
        self.genbtn = None

    # Code for closing the next agent configuration button
    # Just to make sure the button does not exists when we wanted to continue further. 
    def next_agt_cfg_btn_kcb(self):
        if (self.cv_next_agt_cfg_button):
            self.cv_next_agt_cfg_button.grid_remove(); 
            #self.cv_next_agt_cfg_button.destroy(); 
        #self.cv_next_agt_cfg_button = None

    # Code for closing the single component user defined interface next config button
    def sc_udi_nxt_kcb(self):
        if (self.sc_udi_nxt):
            self.sc_udi_nxt.grid_forget()
            #self.sc_udi_nxt.destroy()
        self.sc_udi_nxt = None
        
    # Code for closing the single component user defined interface udie array
    def sc_udie_loop_kcb(self):
        for n in range(sc_udie_loop+1):
            if self.sc_udie:
                if (self.sc_udie[n]):
                    self.sc_udie[n].grid_forget()
                    #self.sc_udie[n].destroy()
   
    # Code for closing the single component user defined interface sc_udif_frame
    def sc_udif_frame_kcb(self):
        if (self.sc_udif_name):
            self.sc_udif_name.grid_forget()
        self.sc_udif_name = None
        if (self.sc_udif_type):
            self.sc_udif_type.grid_forget()
        self.sc_udif_type = None
        if (self.sc_udif_le):
            self.sc_udif_le.grid_forget()
        self.sc_udif_le = None 
        if (self.sc_udif_re):
            self.sc_udif_re.grid_forget()
        self.sc_udif_re = None 
        if (self.sc_udif_cb):
            self.sc_udif_cb.grid_forget()
        self.sc_udif_cb = None 
        if (self.sc_udif_mp):
            self.sc_udif_mp.grid_forget()
        self.sc_udif_mp = None 
        log.debug("Value of sc_udie_frame_loop in kill is %d"%sc_udie_frame_loop)
        log.debug("Value of sc_udif_name_e in kill is %d"%len(self.sc_udif_name_e))
        for n in range (sc_udie_frame_loop+1):
            if self.sc_udif_name_e:
                if self.sc_udif_name_e[n]:
                    self.sc_udif_name_e[n].grid_forget()
                self.sc_udif_name_e = []
            if self.sc_udif_type_e:
                if self.sc_udif_type_e[n]:
                    self.sc_udif_type_e[n].grid_forget()
                self.sc_udif_type_e = []
            if self.sc_udif_le_e:
                if self.sc_udif_le_e[n]:
                    self.sc_udif_le_e[n].grid_forget()
                self.sc_udif_le_e = []
            if self.sc_udif_re_e:
                if self.sc_udif_re_e[n]:
                    self.sc_udif_re_e[n].grid_forget()
                self.sc_udif_re_e = []
            if self.sc_udif_cb_e:
                if self.sc_udif_cb_e[n]:
                    self.sc_udif_cb_e[n].grid_forget()
                self.sc_udif_cb_e = []
            if self.sc_udif_mp_e:
                if self.sc_udif_mp_e[n]:
                    self.sc_udif_mp_e[n].grid_forget()
                self.sc_udif_mp_e = []
        if (self.sc_udif_frame):
            self.sc_udif_frame.grid_forget()
        self.sc_udif_frame = None    
            
    # Code for closing the single component user defined interface done config button
    def sc_udi_done_kcb(self):
        if (self.sc_udi_done):
            self.sc_udi_done.grid_forget()
            #self.sc_udi_done.destroy()
        self.sc_udi_done = None
   
    def sc_load_interface_kcb(self):    
        if (self.scl4):
            self.scl4.grid_forget()
        self.scl4 = None 
        if (self.sce2):
            self.sce2.grid_forget()
        self.sce2 = None    

    # Code for closing all the entry, button etc related to singlecomponent user defined interface 
    def sc_udi_kill_all_kcb(self):
        self.sc_udie_loop_kcb()
        self.sc_udif_frame_kcb();
        sc_udie_loop = 0
        sc_udie_frame_loop = 0
        del self.sc_udie[:]
        self.sc_udi_nxt_kcb()
        self.sc_udi_done_kcb()
    
    def cv_load_interface_kcb(self):    
        if (self.cvl4):
            self.cvl4.grid_forget()
        self.cvl4 = None 
        if (self.cve2):
            self.cve2.grid_forget()
        self.cve2 = None

    def mc_load_interface_kcb(self):    
        if (self.mcal5):
            self.mcal5.grid_forget()
        self.mcal5 = None 
        if (self.mcae5):
            self.mcae5.grid_forget()
        self.mcae5 = None

    # Code for closing the single component user defined interface next config button in complete vip
    def cv_udi_nxt_kcb(self):
        if (self.cv_udi_nxt):
            self.cv_udi_nxt.grid_forget()
            #self.cv_udi_nxt.destroy()
        #self.cv_udi_nxt = None

    # Code for closing the single component user defined interface udie array in complete vip
    def cv_udie_loop_kcb(self):
        for n in range(cv_udie_loop+1):
            if self.cv_udie:
                if (self.cv_udie[n]):
                    self.cv_udie[n].grid_forget()
                    #self.cv_udie[n].destroy()

    # Code for closing the mc user defined interface next config button in complete vip
    def mc_udi_nxt_kcb(self):
        if (self.mc_udi_nxt):
            self.mc_udi_nxt.grid_forget()
            #self.mc_udi_nxt.destroy()
        self.mc_udi_nxt = None

    # Code for closing the mc user defined interface done config button in complete vip
    def mc_udi_done_kcb(self):
        if (self.mc_udi_done):
            self.mc_udi_done.grid_forget()
            #self.mc_udi_done.destroy()
        self.mc_udi_done = None

    # Code for closing the complete vip user defined interface cv_udif_frame
    def cv_udif_frame_kcb(self):
        if (self.cv_udif_name):
            self.cv_udif_name.grid_forget()
        self.cv_udif_name = None
        if (self.cv_udif_type):
            self.cv_udif_type.grid_forget()
        self.cv_udif_type = None
        if (self.cv_udif_le):
            self.cv_udif_le.grid_forget()
        self.cv_udif_le = None 
        if (self.cv_udif_re):
            self.cv_udif_re.grid_forget()
        self.cv_udif_re = None 
        if (self.cv_udif_cb):
            self.cv_udif_cb.grid_forget()
        self.cv_udif_cb = None 
        if (self.cv_udif_mp):
            self.cv_udif_mp.grid_forget()
        self.cv_udif_mp = None 
        log.debug("Value of cv_udie_frame_loop in kill is %s"%cv_udie_frame_loop)
        log.debug("Value of cv_udif_name_e in kill is %s"%len(self.cv_udif_name_e))
        for n in range (cv_udie_frame_loop+1):
            if self.cv_udif_name_e:
                if self.cv_udif_name_e[n]:
                    self.cv_udif_name_e[n].grid_forget()
                self.cv_udif_name_e = []
            if self.cv_udif_type_e:
                if self.cv_udif_type_e[n]:
                    self.cv_udif_type_e[n].grid_forget()
                self.cv_udif_type_e = []
            if self.cv_udif_le_e:
                if self.cv_udif_le_e[n]:
                    self.cv_udif_le_e[n].grid_forget()
                self.cv_udif_le_e = []
            if self.cv_udif_re_e:
                if self.cv_udif_re_e[n]:
                    self.cv_udif_re_e[n].grid_forget()
                self.cv_udif_re_e = []
            if self.cv_udif_cb_e:
                if self.cv_udif_cb_e[n]:
                    self.cv_udif_cb_e[n].grid_forget()
                self.cv_udif_cb_e = []
            if self.cv_udif_mp_e:
                if self.cv_udif_mp_e[n]:
                    self.cv_udif_mp_e[n].grid_forget()
                self.cv_udif_mp_e = []
        if (self.cv_udif_frame):
            self.cv_udif_frame.grid_forget()
        self.cv_udif_frame = None

        
    # Code for closing the complete vip user defined interface mc_udif_frame
    def mc_udif_frame_kcb(self):
        if (self.mc_udif_name):
            self.mc_udif_name.grid_forget()
        self.mc_udif_name = None
        if (self.mc_udif_type):
            self.mc_udif_type.grid_forget()
        self.mc_udif_type = None
        if (self.mc_udif_le):
            self.mc_udif_le.grid_forget()
        self.mc_udif_le = None 
        if (self.mc_udif_re):
            self.mc_udif_re.grid_forget()
        self.mc_udif_re = None 
        if (self.mc_udif_cb):
            self.mc_udif_cb.grid_forget()
        self.mc_udif_cb = None 
        if (self.mc_udif_mp):
            self.mc_udif_mp.grid_forget()
        self.mc_udif_mp = None 
        log.debug("Value of mc_udif_frame_loop in kill is %s"%mc_udif_frame_loop)
        log.debug("Value of mc_udif_name_e in kill is %s"%len(self.mc_udif_name_e))
        for n in range (mc_udif_frame_loop+1):
            if self.mc_udif_name_e:
                if self.mc_udif_name_e[n]:
                    self.mc_udif_name_e[n].grid_forget()
                self.mc_udif_name_e = []
            if self.mc_udif_type_e:
                if self.mc_udif_type_e[n]:
                    self.mc_udif_type_e[n].grid_forget()
                self.mc_udif_type_e = []
            if self.mc_udif_le_e:
                if self.mc_udif_le_e[n]:
                    self.mc_udif_le_e[n].grid_forget()
                self.mc_udif_le_e = []
            if self.mc_udif_re_e:
                if self.mc_udif_re_e[n]:
                    self.mc_udif_re_e[n].grid_forget()
                self.mc_udif_re_e = []
            if self.mc_udif_cb_e:
                if self.mc_udif_cb_e[n]:
                    self.mc_udif_cb_e[n].grid_forget()
                self.mc_udif_cb_e = []
            if self.mc_udif_mp_e:
                if self.mc_udif_mp_e[n]:
                    self.mc_udif_mp_e[n].grid_forget()
                self.mc_udif_mp_e = []
        if (self.mc_udif_frame):
            self.mc_udif_frame.grid_forget()
        self.mc_udif_frame = None


    # Code for closing the complete vip user defined interface mc_env_udif_frame
    def mc_env_udif_frame_kcb(self):
        if (self.mc_env_udif_name):
            self.mc_env_udif_name.grid_forget()
        self.mc_env_udif_name = None
        if (self.mc_env_udif_type):
            self.mc_env_udif_type.grid_forget()
        self.mc_env_udif_type = None
        if (self.mc_env_udif_le):
            self.mc_env_udif_le.grid_forget()
        self.mc_env_udif_le = None 
        if (self.mc_env_udif_re):
            self.mc_env_udif_re.grid_forget()
        self.mc_env_udif_re = None 
        if (self.mc_env_udif_cb):
            self.mc_env_udif_cb.grid_forget()
        self.mc_env_udif_cb = None 
        if (self.mc_env_udif_mp):
            self.mc_env_udif_mp.grid_forget()
        self.mc_env_udif_mp = None 
        log.debug("Value of mc_env_udif_frame_loop in kill is %s"%mc_env_udif_frame_loop)
        log.debug("Value of mc_env_udif_name_e in kill is %s"%len(self.mc_env_udif_name_e))
        for n in range (mc_env_udif_frame_loop+1):
            if self.mc_env_udif_name_e:
                if self.mc_env_udif_name_e[n]:
                    self.mc_env_udif_name_e[n].grid_forget()
                self.mc_env_udif_name_e = []
            if self.mc_env_udif_type_e:
                if self.mc_env_udif_type_e[n]:
                    self.mc_env_udif_type_e[n].grid_forget()
                self.mc_env_udif_type_e = []
            if self.mc_env_udif_le_e:
                if self.mc_env_udif_le_e[n]:
                    self.mc_env_udif_le_e[n].grid_forget()
                self.mc_env_udif_le_e = []
            if self.mc_env_udif_re_e:
                if self.mc_env_udif_re_e[n]:
                    self.mc_env_udif_re_e[n].grid_forget()
                self.mc_env_udif_re_e = []
            if self.mc_env_udif_cb_e:
                if self.mc_env_udif_cb_e[n]:
                    self.mc_env_udif_cb_e[n].grid_forget()
                self.mc_env_udif_cb_e = []
            if self.mc_env_udif_mp_e:
                if self.mc_env_udif_mp_e[n]:
                    self.mc_env_udif_mp_e[n].grid_forget()
                self.mc_env_udif_mp_e = []
        if (self.mc_env_udif_frame):
            self.mc_env_udif_frame.grid_forget()
        self.mc_env_udif_frame = None

    # Code for closing the single component user defined interface done config button in complete vip
    def cv_udi_done_kcb(self):
        if (self.cv_udi_done):
            self.cv_udi_done.grid_forget()
            #self.cv_udi_done.destroy()
        self.cv_udi_done = None
    
    # Code for closing all the entry, button etc related to singlecomponent user defined interface in complete vip 
    def cv_udi_kill_all_kcb(self):
        self.cv_udie_loop_kcb()
        self.cv_udif_frame_kcb()
        cv_udie_loop = 0
        cv_udie_frame_loop = 0
        del self.cv_udie[:]
        self.cv_udi_nxt_kcb()
        self.cv_udi_done_kcb()

    # Code To Clean Up All The Arrays Used in Complete VIP Generation
    def cv_udi_del_array(self):
        global cv_udie_cb_element_loop
        global cv_udie_mp_element_loop
        global cv_udie_cb_element_loop_tmp
        global cv_udie_mp_element_loop_tmp
        global cv_udie_intf_cfg_array 
        global cv_udie_cb_cfg_array 
        global cv_udie_mp_cfg_array 
        global cv_agt_loop_chk
        global cv_udie_loop
    
        # del cv_udie_cb_element_loop[:]
        # del cv_udie_mp_element_loop[:]
        # del cv_udie_cb_element_loop_tmp[:]
        # del cv_udie_mp_element_loop_tmp[:]
        # del cv_udie_intf_cfg_array[:] 
        # del cv_udie_cb_cfg_array[:] 
        # del cv_udie_mp_cfg_array[:] 
        
        cv_udie_cb_element_loop = []
        cv_udie_mp_element_loop = []
        cv_udie_cb_element_loop_tmp = []
        cv_udie_mp_element_loop_tmp = []
        cv_udie_intf_cfg_array = [] 
        cv_udie_cb_cfg_array = [] 
        cv_udie_mp_cfg_array = [] 
        cv_agt_loop_chk = 0
        cv_udie_loop = 0
    
    
    def sc_agt_intf_kcb(self):
        if (self.scl3):
            self.scl3.grid_forget();  self.scl3 = None
        if (self.scl4):
            self.scl4.grid_forget();  self.scl4 = None
        if (self.sco1):
            self.sco1.grid_forget();  self.sco1 = None
    
    
    def cv_agt_intf_kcb(self):
        if (self.cvl3):
            self.cvl3.grid_forget();  self.cvl3 = None
        if (self.cvl4):
            self.cvl4.grid_forget();  self.cvl4 = None
        if (self.cvo3):
            self.cvo3.grid_forget();  self.cvo3 = None


    def sc_agt_kcb(self):
        if (self.scal1):
            self.scal1.grid_forget(); self.scal1 = None
        if (self.scae1):
            self.scae1.grid_forget(); self.scae1 = None
        if (self.scal2):
            self.scal2.grid_forget(); self.scal2 = None
        if (self.scae2):
            self.scae2.grid_forget(); self.scae2 = None
   
    def sc_clean_up_agt_intf_kcb(self):
        global sc_agt_selected
        global sc_agt_selected_started
        global sc_interface_pkg
        global sc_agt_intf_cnt
        global sc_agt_intf_cnt_tmp
        global sc_agt_intf_num_of_ds_l
        global sc_agt_intf_num_of_ds_a
        global sc_choose_int_cmd_code_called

        self.sc_agt_intf_kcb()
        self.sc_agt_kcb()
        sc_agt_selected = 0
        sc_agt_selected_started = 0
        sc_agt_intf_cnt = 0
        sc_agt_intf_cnt_tmp = 0
        sc_choose_int_cmd_code_called = 0
        del sc_interface_pkg [:]

    def cv_clean_up_agt_intf_kcb(self):
        global cv_agt_selected
        global cv_agt_selected_started
        global cv_interface_pkg
        global cv_agt_intf_cnt
        global cv_agt_intf_cnt_tmp
        global cv_agt_intf_num_of_ds_l
        global cv_agt_intf_num_of_ds_a
        global cv_choose_int_cmd_code_called

        self.cv_agt_intf_kcb()
        cv_agt_selected = 0
        cv_agt_selected_started = 0
        cv_agt_intf_cnt = 0
        cv_agt_intf_cnt_tmp = 0
        cv_choose_int_cmd_code_called = 0
        del cv_interface_pkg [:]

    # Code for closing the interface label, radio button etc when any other radio buttos 
    # are pressed. Just to make sure the button does not exists when we wanted to continue further. 
    def interface_label_rb_cb(self):
        global sc_agt_selected
        global sc_agt_selected_started 

        if (self.scl3):
            self.scl3.grid_forget();  self.scl3 = None
        if (self.scl4):
            self.scl4.grid_forget();  self.scl4 = None
        # if (self.scr2):
        #     self.scr2.grid_forget();  self.scr2 = None
        # if (self.scr3):
        #     self.scr3.grid_forget();  self.scr3 = None
        if (self.sco1):
            self.sco1.grid_forget();  self.sco1 = None
        if not sc_agt_selected or (sc_agt_selected != 0 and sc_agt_selected_started == 0):
            if (self.scal1):
                self.scal1.grid_forget(); self.scal1 = None
            if (self.scae1):
                self.scae1.grid_forget(); self.scae1 = None
            if (self.scal2):
                self.scal2.grid_forget(); self.scal2 = None
            if (self.scae2):
                self.scae2.grid_forget(); self.scae2 = None
            sc_agt_selected = 0
            sc_agt_selected_started = 0

    # Clearning Default Values From The Entry Widget
    def scae1_entry_click(self,event):
        if (self.scae1):
            if self.scae1.get() == 'Enter no. of drivers,1st driver name,..,nth driver name':
               self.scae1.delete(0, "end") # delete all the text in the entry
               self.scae1.insert(0, '') #Insert blank for user input
               #self.scae1.configure(bg="white")
            if qt.get():
               self.agent_drv_quick_tips()

    def scae2_entry_click(self,event):
        if (self.scae2):
            if self.scae2.get() == 'Enter no. of monitors,1st monitor name,..,nth monitor name':
               self.scae2.delete(0, "end") # delete all the text in the entry
               self.scae2.insert(0, '') #Insert blank for user input
               #self.scae2.configure(bg="white")
            if qt.get():
               self.agent_mon_quick_tips()
    
    def cvad_e1_entry_click(self,event):
        if self.cvad_e1.get() == 'Enter no. of drivers,1st driver name,..,nth driver name':
           self.cvad_e1.delete(0, "end") # delete all the text in the entry
           self.cvad_e1.insert(0, '') #Insert blank for user input
           #self.cvad_e1.configure(bg="white")
        if qt.get():
           self.agent_drv_quick_tips()
    
    def cvad_e2_entry_click(self,event):
        if self.cvad_e2.get() == 'Enter no. of monitors,1st monitor name,..,nth monitor name':
           self.cvad_e2.delete(0, "end") # delete all the text in the entry
           self.cvad_e2.insert(0, '') #Insert blank for user input
           #self.cvad_e2.configure(bg="white")
        if qt.get():
           self.agent_mon_quick_tips()
    
    def cvad_e3_entry_click(self,event):
        if self.cvad_e3.get() == 'Enter no. of scoreboards,1st scoreboard name,..,nth scoreboard name':
           self.cvad_e3.delete(0, "end") # delete all the text in the entry
           self.cvad_e3.insert(0, '') #Insert blank for user input
           #self.cvad_e3.configure(bg="white")
        if qt.get():
           self.scb_quick_tips()
    
    def sc_udie_entry_click(self,event):
        if self.sc_udie[sc_udie_loop].get() == 'Enter Signal Name, Type, Size. For More Options, Click User Tips!':
           self.sc_udie[sc_udie_loop].delete(0, "end") # delete all the text in the entry
           self.sc_udie[sc_udie_loop].insert(0, '') #Insert blank for user input
           #self.sc_udie[sc_udie_loop].configure(bg="white")
        if qt.get():
           self.intf_quick_tips()
   
    def cv_udie_entry_click(self,event):
        if self.cv_udie[cv_udie_loop].get() == 'Enter Signal Name, Type, Size. For More Options, Click User Tips!':
           self.cv_udie[cv_udie_loop].delete(0, "end") # delete all the text in the entry
           self.cv_udie[cv_udie_loop].insert(0, '') #Insert blank for user input
           #self.cv_udie[cv_udie_loop].configure(bg="white")
        if qt.get():
           self.intf_quick_tips()

    def mcae2_entry_click(self,event):
        if self.mcae2.get() == 'Enter no. of drivers,1st driver name,..,nth driver name':
           self.mcae2.delete(0, "end") # delete all the text in the entry
           self.mcae2.insert(0, '') #Insert blank for user input
        if qt.get():
           self.agent_drv_quick_tips()
    
    # Code for exit button. When Return Button is pressed it closes all the 
    # lables, entry button for either single component or complete VIP generation.
    def return_button_code(self):
        self.greeting_widget_window();
        if v.get()==1:
            self.sc_rm_ec_frame_code_kcb();
            self.generate_button_cb();

            if self.scl1:
                self.scl1.grid_forget(); self.scl1 = None
            if self.sce1:
                self.sce1.grid_forget(); self.sce1 = None
            if self.sce2:
                self.sce2.grid_forget(); self.sce2 = None
            if self.scl2:
                self.scl2.grid_forget(); self.scl2 = None 
            
            self.single_component_buttons_dict['scr1_seq_item'].grid_forget()
            self.single_component_buttons_dict['scr1_seq_item'] = None
            
            self.single_component_buttons_dict['scr1_seq'].grid_forget()
            self.single_component_buttons_dict['scr1_seq'] = None
            
            self.single_component_buttons_dict['scr1_seqr'].grid_forget()
            self.single_component_buttons_dict['scr1_seqr'] = None
            
            self.single_component_buttons_dict['scr1_drv'].grid_forget()
            self.single_component_buttons_dict['scr1_drv'] = None
            
            self.single_component_buttons_dict['scr1_mon'].grid_forget()
            self.single_component_buttons_dict['scr1_mon'] = None
            
            self.single_component_buttons_dict['scr1_agt'].grid_forget()
            self.single_component_buttons_dict['scr1_agt'] = None
            
            self.single_component_buttons_dict['scr1_scb'].grid_forget()
            self.single_component_buttons_dict['scr1_scb'] = None
            
            self.single_component_buttons_dict['scr1_env'].grid_forget()
            self.single_component_buttons_dict['scr1_env'] = None
            
            self.single_component_buttons_dict['scr1_test'].grid_forget()
            self.single_component_buttons_dict['scr1_test'] = None
            
            self.single_component_buttons_dict['scr1_intf'].grid_forget()
            self.single_component_buttons_dict['scr1_intf'] = None
            
            self.single_component_buttons_dict = {}
            
            # self.scr1_seq_item.pack_forget(); self.scr1_seq_i30725tem = None
            # self.scr1_seq.pack_forget(); self.scr1_seq = None
            # self.scr1_seqr.pack_forget(); self.scr1_seqr = None 
            # self.scr1_drv.pack_forget(); self.scr1_drv = None 
            # self.scr1_mon.pack_forget(); self.scr1_mon = None 
            # self.scr1_agt.pack_forget(); self.scr1_agt = None 
            # self.scr1_scb.pack_forget(); self.scr1_scb = None 
            # self.scr1_env.pack_forget(); self.scr1_env = None 
            # self.scr1_test.pack_forget(); self.scr1_test = None 
            # self.scr1_intf.pack_forget(); self.scr1_intf = None 
            
            self.sc_udi_kill_all_kcb()
            self.sc_load_interface_kcb()
            self.interface_label_rb_cb();
            # Code To CLean up all the sc agt interface related variables : 081218|SUN
            self.sc_clean_up_agt_intf_kcb()
            self.cv_clean_up_agt_intf_kcb()
            #self.complete_vip_button.grid()
            
            if "self.complete_vip_button" in self.initial_screen_buttons_dict.keys():
                self.initial_screen_buttons_dict['self.complete_vip_button'].grid()
            if "self.multi_cluster_vip_button" in self.initial_screen_buttons_dict.keys(): 
                self.initial_screen_buttons_dict['self.multi_cluster_vip_button'].grid()
            
            #self.exit_button.grid() 

        if v.get()==2:
            self.generate_button_cb();
            
            if (self.cvl1):
                self.cvl1.grid_forget(); self.cvl1 = None 
            if (self.cve1):
                self.cve1.grid_forget(); self.cve1 = None 
            if (self.cve2):
                self.cve2.grid_forget(); self.cve2 = None 
            if (self.cvl2):
                self.cvl2.grid_forget(); self.cvl2 = None 
            if (self.cvo1):
                self.cvo1.grid_forget(); self.cvo1 = None
            if (self.cvo2):
                self.cvo2.grid_forget(); self.cvo2 = None
            if (self.cvo3):
                self.cvo3.grid_forget(); self.cvo3 = None
            
            if "self.single_component_button" in self.initial_screen_buttons_dict.keys():
                self.initial_screen_buttons_dict['self.single_component_button'].grid()
            if "self.multi_cluster_vip_button" in self.initial_screen_buttons_dict.keys(): 
                self.initial_screen_buttons_dict['self.multi_cluster_vip_button'].grid()
      
            if (self.cvad_l0):
                self.cvad_l0.grid_forget(); self.cvad_l0 = None # self.cvad_l0.destroy(); self.cvad_l0 = None
            if (self.cvad_l1):
                self.cvad_l1.grid_forget(); self.cvad_l1 = None # self.cvad_l1.destroy(); self.cvad_l1 = None
            if (self.cvad_l2):                                  
                self.cvad_l2.grid_forget(); self.cvad_l2 = None # self.cvad_l2.destroy(); self.cvad_l2 = None
            if (self.cvad_l3):                                  
                self.cvad_l3.grid_forget(); self.cvad_l3 = None # self.cvad_l3.destroy(); self.cvad_l3 = None
            if (self.cvad_l4):                                  
                self.cvad_l4.grid_forget(); self.cvad_l4 = None # self.cvad_l4.destroy(); self.cvad_l4 = None
            #if (self.cvad_l5):
            #    self.cvad_l5.grid_remove(); # self.cvad_l5.destroy(); self.cvad_l5 = None
            if (self.cvad_e1):
                self.cvad_e1.grid_forget(); self.cvad_e1 = None # self.cvad_e1.destroy(); self.cvad_e1 = None
            if (self.cvad_e2):
                self.cvad_e2.grid_forget(); self.cvad_e2 = None # self.cvad_e2.destroy(); self.cvad_e2 = None
            if (self.cvad_e3):
                self.cvad_e3.grid_forget(); self.cvad_e3 = None # self.cvad_e3.destroy(); self.cvad_e3 = None
            if (self.cvad_e4):
                self.cvad_e4.grid_forget(); self.cvad_e4 = None # self.cvad_e4.destroy(); self.cvad_e4 = None
            if (self.cv_next_agt_cfg_button):
                self.cv_next_agt_cfg_button.grid_remove(); # self.cv_next_agt_cfg_button.destroy(); self.cv_next_agt_cfg_button = None

            if (self.cvl3):
                self.cvl3.grid_forget();  self.cvl3 = None
            if (self.cvl4):
                self.cvl4.grid_forget();  self.cvl4 = None
            if (self.cvr1):
                self.cvr1.grid_forget();  self.cvr1 = None
            if (self.cvr2):
                self.cvr2.grid_forget();  self.cvr2 = None
            if (self.cvr3):
                self.cvr3.grid_forget();  self.cvr3 = None
            if (self.cvr4):
                self.cvr4.grid_forget();  self.cvr4 = None

            self.cv_udi_kill_all_kcb()
            self.cv_load_interface_kcb();
            self.cv_udi_del_array()
            
            # Code To CLean up all the sc agt interface related variables : 081418|TUE
            self.cv_clean_up_agt_intf_kcb()
            self.sc_clean_up_agt_intf_kcb()

        if v.get()==3:
            log.debug("return_button_code : Was in Multi Cluster VIP Mode! Going to Kill All the widgets and go back to main menu !\n") 
            self.generate_button_cb();
            self.mc_kill_all_widgets_cb()
       
            # Builing the initial screen buttons
            if "self.single_component_button" in self.initial_screen_buttons_dict.keys():
                self.initial_screen_buttons_dict['self.single_component_button'].grid()
            if "self.complete_vip_button" in self.initial_screen_buttons_dict.keys():
                self.initial_screen_buttons_dict['self.complete_vip_button'].grid()
            if "self.multi_cluster_vip_button" in self.initial_screen_buttons_dict.keys(): 
                self.initial_screen_buttons_dict['self.multi_cluster_vip_button'].grid()
        

        self.return_button_cb();
        self.initial_screen_buttons_clear();
        
        # self.exit_button.grid() 
        self.exit_button_create_cb(1);

        # if not (self.exit_button): 
        #     self.exit_button = Button(root, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code)    
        #     self.exit_button.pack()

    
    def sc_rm_ec_frame_code(self):
        # Killing the existing return_button and exit_button widgets 
        self.return_button_cb();
        self.exit_button_cb();
        
        if not (self.sc_rm_ec_frame):
            self.sc_rm_ec_frame = Frame(root)
            self.sc_rm_ec_frame.grid(row=sc_agtrow_val+7, column=0, columnspan=2, sticky='WE')
            self.sc_rm_ec_frame.rowconfigure(sc_agtrow_val+7,weight=1)
            self.sc_rm_ec_frame.columnconfigure((0,1,2),weight=1)
        else:
            log.debug("self.sc_rm_ec_frame already exists!\n")
            self.sc_rm_ec_frame.grid() 
        
        self.return_button_create_cb(2);
        self.exit_button_create_cb(2);

    
    def sc_rm_ec_frame_code_kcb(self):
        if self.sc_rm_ec_frame:
            self.sc_rm_ec_frame.grid_forget(); self.sc_rm_ec_frame = None


    # Code for the single component generation process. It builds the necessary radio buttons
    # for the generation of single components. And it has the code to close completevip 
    # generation buttons and code for return botton process
    def singlecomponent(self):
        global sc_agtrow_val
        # Clearning of default values before start : vimo : 070118|SUN
        self.single_component_widget_clear();
        if not (self.scl1):
            self.scl1 = Label(root, font=MyFontH2, text="Enter The Component/Object Name You Wanted To Create: ")
            self.scl1.grid(row=5, column=0, columnspan=2)
            self.scl1.rowconfigure(5,weight=1)
        else:
            self.scl1.grid()

        if not (self.sce1): 
            self.sce1 = Entry(root, font=MyFontH2)
            self.sce1.grid(row=6, column=0, columnspan=2, sticky='WE')
            self.sce1.rowconfigure(6,weight=1)
        else:
            self.sce1.grid()

        if not (self.scl2):
            self.scl2 = Label(root, font=MyFontH2, text="Which Single Component/Object You Wanted To Create: ")
            self.scl2.grid(row=7)
            self.scl2.rowconfigure(7,weight=1)
        else:
            self.scl2.grid()

        self.single_component_button_list_values = (
         ('scr1_seq_item', 'Sequence Item',sv, "Sequence Item", self.singlecomponent_create, 8, 'W', MyFontH2),
         ('scr1_seq', 'Sequence',sv, "Sequence", self.singlecomponent_create, 9, 'W', MyFontH2),
         ('scr1_seqr', 'Sequencer',sv, "Sequencer", self.singlecomponent_create, 10, 'W', MyFontH2),
         ('scr1_drv', 'Driver',sv, "Driver", self.singlecomponent_create, 11, 'W', MyFontH2),
         ('scr1_mon', 'Monitor',sv, "Monitor", self.singlecomponent_create, 12, 'W', MyFontH2),
         ('scr1_agt', 'Agent',sv, "Agent", self.singlecomponent_create, 13, 'W', MyFontH2),
         ('scr1_scb', 'Scoreboard',sv, "Scoreboard", self.singlecomponent_create, sc_agtrow_val+1, 'W', MyFontH2),
         ('scr1_env', 'Environment',sv, "Environment", self.singlecomponent_create, sc_agtrow_val+2, 'W', MyFontH2),
         ('scr1_test', 'Test',sv, "Test", self.singlecomponent_create, sc_agtrow_val+3, 'W', MyFontH2),
         ('scr1_intf', 'Interface',sv, "Interface", self.singlecomponent_create, sc_agtrow_val+4, 'W', MyFontH2)
        )

        for _SCButtonName , _Text, _Variable, _Value, _Operation, _Row, _Sticky, _Font in self.single_component_button_list_values: 
            if _SCButtonName not in self.single_component_buttons_dict:
                _SCButtonName_tmp = Radiobutton(root, activebackground="gray50", font=_Font, anchor="center", text=_Text, variable=_Variable, value=_Value, command=_Operation)
                _SCButtonName_tmp.grid(row=_Row, sticky=_Sticky)
                _SCButtonName_tmp.rowconfigure(_Row,weight=1)
                self.single_component_buttons_dict[_SCButtonName]=_SCButtonName_tmp
            else:
                self.single_component_buttons_dict[_SCButtonName].grid()
                

        # if not (self.scr1_seq_item):
        #     self.scr1_seq_item = Radiobutton(root, text="Sequence Item", variable=sv, value="Sequence Item", command=self.singlecomponent_create)
        #     self.scr1_seq_item.pack()
        # if not (self.scr1_seq):
        #     self.scr1_seq = Radiobutton(root, text="Sequence", variable=sv, value="Sequence", command=self.singlecomponent_create)
        #     self.scr1_seq.pack()
        # if not (self.scr1_seqr):
        #     self.scr1_seqr = Radiobutton(root, text="Sequencer", variable=sv, value="Sequencer", command=self.singlecomponent_create)
        #     self.scr1_seqr.pack()
        # if not (self.scr1_drv):
        #     self.scr1_drv = Radiobutton(root, text="Driver", variable=sv, value="Driver", command=self.singlecomponent_create)
        #     self.scr1_drv.pack()
        # if not (self.scr1_mon):
        #     self.scr1_mon = Radiobutton(root, text="Monitor", variable=sv, value="Monitor", command=self.singlecomponent_create)
        #     self.scr1_mon.pack()
        # if not (self.scr1_agt):
        #     self.scr1_agt = Radiobutton(root, text="Agent", variable=sv, value="Agent", command=self.singlecomponent_create)
        #     self.scr1_agt.pack()
        # if not (self.scr1_scb):
        #     self.scr1_scb = Radiobutton(root, text="Scoreboard", variable=sv, value="Scoreboard", command=self.singlecomponent_create)
        #     self.scr1_scb.pack()
        # if not (self.scr1_env):
        #     self.scr1_env = Radiobutton(root, text="Environment", variable=sv, value="Environment", command=self.singlecomponent_create)
        #     self.scr1_env.pack()
        # if not (self.scr1_test):
        #     self.scr1_test = Radiobutton(root, text="Test", variable=sv, value="Test", command=self.singlecomponent_create)
        #     self.scr1_test.pack()
        # if not (self.scr1_intf):
        #     self.scr1_intf = Radiobutton(root, text="Interface", variable=sv, value="Interface", command=self.singlecomponent_create)
        #     self.scr1_intf.pack()

        self.greeting_widget_window_kcb();
        log.debug("List of Keys In initial_screen_buttons_dict is %s"%list(self.initial_screen_buttons_dict.keys()))
        log.debug("List of Values In initial_screen_buttons_dict is %s"%list(self.initial_screen_buttons_dict.values()))
        if "self.complete_vip_button" in self.initial_screen_buttons_dict.keys():
            self.initial_screen_buttons_dict['self.complete_vip_button'].grid_remove()
        if "self.multi_cluster_vip_button" in self.initial_screen_buttons_dict.keys(): 
            self.initial_screen_buttons_dict['self.multi_cluster_vip_button'].grid_remove()

        self.generate_button_cb();
        self.sc_udi_kill_all_kcb();
        self.sc_load_interface_kcb()
        self.interface_label_rb_cb();

        self.sc_rm_ec_frame_code()
        # self.return_button_create_cb(2);
        # self.exit_button_create_cb(2)

        # if not (self.return_button): 
        #     self.return_button = Button(root, background="mediumpurple1", activebackground="purple2", text="RETURN TO MAIN MENU", command=self.return_button_code)    
        #     self.return_button.grid(row=18)
        #     self.return_button.rowconfigure(18,weight=1)

        # self.exit_button_cb();

    
    # Code for the complete vip generation process. It builds the necessary radio buttons
    # for the generation of complete vip. And it has the code to close completevip 
    # generation buttons and code for return botton process
    def completevip(self):
        self.generate_button_cb();
        self.return_button_cb();
        self.exit_button_cb();
        
        self.greeting_widget_window_kcb();
        
        if "self.single_component_button" in self.initial_screen_buttons_dict.keys():
            self.initial_screen_buttons_dict['self.single_component_button'].grid_remove()
        if "self.multi_cluster_vip_button" in self.initial_screen_buttons_dict.keys(): 
            self.initial_screen_buttons_dict['self.multi_cluster_vip_button'].grid_remove()

        if (self.cvl1):
            self.cvl1.grid_forget(); self.cvl1 = None # self.cvl1.destroy(); self.cvl1 = None
        if (self.cve1):
            self.cve1.grid_forget(); self.cve1 = None # self.cve1.destroy(); self.cve1 = None
        if (self.cve2):
            self.cve2.grid_forget(); self.cve2 = None # self.cve2.destroy(); self.cve2 = None
        if (self.cvl2):
            self.cvl2.grid_forget(); self.cvl2 = None # self.cvl2.destroy(); self.cvl2 = None
        if (self.cvo1):
            self.cvo1.grid_forget(); self.cvo1 = None # self.cvo1.destroy(); self.cvo1 = None
        if (self.cvo2):
            self.cvo2.grid_forget(); self.cvo2 = None # self.cvo2.destroy(); self.cvo2 = None
        if (self.cvo3):
            self.cvo3.grid_forget(); self.cvo3 = None # self.cvo3.destroy(); self.cvo3 = None
        
        if (self.cvad_l0):
            self.cvad_l0.grid_forget(); self.cvad_l0 = None # self.cvad_l0.destroy(); self.cvad_l0 = None
        if (self.cvad_l1):
            self.cvad_l1.grid_forget(); self.cvad_l1 = None # self.cvad_l1.destroy(); self.cvad_l1 = None
        if (self.cvad_l2):                                  
            self.cvad_l2.grid_forget(); self.cvad_l2 = None # self.cvad_l2.destroy(); self.cvad_l2 = None
        if (self.cvad_l3):                                  
            self.cvad_l3.grid_forget(); self.cvad_l3 = None # self.cvad_l3.destroy(); self.cvad_l3 = None
        if (self.cvad_l4):                                  
            self.cvad_l4.grid_forget(); self.cvad_l4 = None # self.cvad_l4.destroy(); self.cvad_l4 = None
        #if (self.cvad_l5):
        #    self.cvad_l5.grid_remove(); # self.cvad_l5.destroy(); self.cvad_l5 = None
        if (self.cvad_e1):
            self.cvad_e1.grid_forget(); self.cvad_e1 = None # self.cvad_e1.destroy(); self.cvad_e1 = None
        if (self.cvad_e2):
            self.cvad_e2.grid_forget(); self.cvad_e2 = None # self.cvad_e2.destroy(); self.cvad_e2 = None
        if (self.cvad_e3):
            self.cvad_e3.grid_forget(); self.cvad_e3 = None # self.cvad_e3.destroy(); self.cvad_e3 = None
        if (self.cvad_e4):
            self.cvad_e4.grid_forget(); self.cvad_e4 = None # self.cvad_e4.destroy(); self.cvad_e4 = None
        if (self.cv_next_agt_cfg_button):
            self.cv_next_agt_cfg_button.grid_remove(); # self.cv_next_agt_cfg_button.destroy(); self.cv_next_agt_cfg_button = None

        if (self.cvl3):
            self.cvl3.grid_forget();  self.cvl3 = None
        if (self.cvl4):
            self.cvl4.grid_forget();  self.cvl4 = None
        if (self.cvr1):
            self.cvr1.grid_forget();  self.cvr1 = None
        if (self.cvr2):
            self.cvr2.grid_forget();  self.cvr2 = None
        if (self.cvr3):
            self.cvr3.grid_forget();  self.cvr3 = None
        if (self.cvr4):
            self.cvr4.grid_forget();  self.cvr4 = None
        
        # Closing next interface, done interface logics if anything is kept open
        self.cv_udi_kill_all_kcb()
        self.cv_udi_del_array()
        self.cv_load_interface_kcb()

        if not (self.cvl1):
            #self.cvl1 = Label(root, font=MyFontH2, text="Enter The Name Of The VIP You Wanted To Create: ")
            self.cvl1 = Label(root, font=MyFontH2, text="Enter The Name Of The VIP: ")
            self.cvl1.grid(row=18, column=0, sticky='W')
            self.cvl1.rowconfigure(18,weight=1)
        else:
            self.cvl1.grid()
            

        if not (self.cve1): 
            self.cve1 = Entry(root, font=MyFontH2, width=43)
            self.cve1.grid(row=18, column=1, sticky='WE')
            self.cve1.rowconfigure(18,weight=1)
        else:
            self.cve1.grid()
            

        del cvagt_list[:]
        agt = 0
        while agt<11:
            cvagt_list.append(agt)
            agt += 1
        
        if not (self.cvl2):
             #self.cvl2 = Label(root, font=MyFontH2, text="Choose How Many Agents You Wanted To Create:")
             self.cvl2 = Label(root, font=MyFontH2, text="Choose Required Number Of Agents To Be Created:")
             self.cvl2.grid(row=20, column=0, sticky='W')
             self.cvl2.rowconfigure(20,weight=1)
        else:
             self.cvl2.grid()
             

        cvagt_val.set("0")
        if not (self.cvo1):
            self.cvo1 = OptionMenu(root, cvagt_val, *cvagt_list, command=self.comp_vip_agt_data)
            self.cvo1.configure(width=39, activebackground="gray50", font=MyFontH2)
            menu = self.cvo1.nametowidget(self.cvo1.menuname)
            menu.config(font=MyFontH2, activebackground="gray50") 
            self.cvo1.grid(row=20, column=1, sticky='WE')
            self.cvo1.rowconfigure(20,weight=1)
        else:
            self.cvo1.grid()
            

        self.return_button_create_cb(2);
        self.exit_button_create_cb(2)
        
        # if not (self.return_button): 
        #     self.return_button = Button(root, background="mediumpurple1", activebackground="purple2", text="RETURN TO MAIN MENU", command=self.return_button_code)    
        #     self.return_button.pack()

    
    def comp_vip_agt_data(self, *args):
        global cvagt_val_loop_tmp
        global cvagt_val_loop
        global cv_agent_cfg_array
        global cv_agent_cfg_list
        cvagt_val_loop_tmp = 1 
       
        if (self.cvl2):
            self.cvl2.grid_forget(); self.cvl2 = None # self.cvl2.destroy(); self.cvl2 = None
        if (self.cvo1):
            self.cvo1.grid_forget(); self.cvo1 = None # self.cvo1.destroy(); self.cvo1 = None
        if (self.cvo2):
            self.cvo2.grid_forget(); self.cvo2 = None # self.cvo2.destroy(); self.cvo2 = None
        if (self.cvo3):
            self.cvo3.grid_forget(); self.cvo3 = None # self.cvo3.destroy(); self.cvo3 = None

        if (self.cvad_l0):
            self.cvad_l0.grid_forget(); self.cvad_l0 = None # self.cvad_l0.destroy(); self.cvad_l0 = None
        if (self.cvad_l1):
            self.cvad_l1.grid_forget(); self.cvad_l1 = None # self.cvad_l1.destroy(); self.cvad_l1 = None
        if (self.cvad_l2):                                  
            self.cvad_l2.grid_forget(); self.cvad_l2 = None # self.cvad_l2.destroy(); self.cvad_l2 = None
        if (self.cvad_l3):                                  
            self.cvad_l3.grid_forget(); self.cvad_l3 = None # self.cvad_l3.destroy(); self.cvad_l3 = None
        if (self.cvad_l4):                                  
            self.cvad_l4.grid_forget(); self.cvad_l4 = None # self.cvad_l4.destroy(); self.cvad_l4 = None
        #if (self.cvad_l5):
        #    self.cvad_l5.grid_remove(); self.cvad_l5.destroy(); self.cvad_l5 = None
        if (self.cvad_e1):
            self.cvad_e1.grid_forget(); self.cvad_e1 = None # self.cvad_e1.destroy(); self.cvad_e1 = None
        if (self.cvad_e2):
            self.cvad_e2.grid_forget(); self.cvad_e2 = None # self.cvad_e2.destroy(); self.cvad_e2 = None
        if (self.cvad_e3):
            self.cvad_e3.grid_forget(); self.cvad_e3 = None # self.cvad_e3.destroy(); self.cvad_e3 = None
        if (self.cvad_e4):
            self.cvad_e4.grid_forget(); self.cvad_e4 = None # self.cvad_e4.destroy(); self.cvad_e4 = None
        if (self.cv_next_agt_cfg_button):
            self.cv_next_agt_cfg_button.grid_remove(); # self.cv_next_agt_cfg_button.destroy(); self.cv_next_agt_cfg_button = None

        if (self.cvl3):
            self.cvl3.grid_forget();  self.cvl3 = None
        if (self.cvl4):
            self.cvl4.grid_forget();  self.cvl4 = None
        if (self.cvr1):
            self.cvr1.grid_forget();  self.cvr1 = None
        if (self.cvr2):
            self.cvr2.grid_forget();  self.cvr2 = None
        if (self.cvr3):
            self.cvr3.grid_forget();  self.cvr3 = None
        if (self.cvr4):
            self.cvr4.grid_forget();  self.cvr4 = None

        self.generate_button_cb();
        self.return_button_cb();
        self.exit_button_cb();

        if cvagt_val.get()!=0:
            cvagt_val_loop = cvagt_val.get()
            log.debug("Value of Selected Agent is %d %d %d"%(cvagt_val.get(), cvagt_val_loop, cvagt_val_loop_tmp))
            
            # Defining the Array For Agent To Get The Configuration
            cv_agent_cfg_array = [["" for x in range(7)] for x in range(cvagt_val_loop)]
            cv_agent_cfg_list = [["" for x in range(7)] for x in range(cvagt_val_loop)]

            if(cvagt_val_loop_tmp < cvagt_val_loop):
                if not (self.cvad_l0):
                    self.cvad_l0 = Label(root, background=root.cget('bg'), foreground="black", font=MyFontH2, text="Enter Agent %d Configuration Name:"% cvagt_val_loop_tmp)
                    self.cvad_l0.grid(row=22, column=0, sticky='W')
                    self.cvad_l0.rowconfigure(22,weight=1)
                    self.flash_agtcfg()
                else:
                    self.cvad_l0.grid()
                    self.flash_agtcfg()

                #self.cvad_l5 = Label(root, text="Enter The Agent Name: ")
                #self.cvad_l5.pack()
                
                if not (self.cvad_e4):
                    self.cvad_e4 = Entry(root, font=MyFontH2, width=43)
                    self.cvad_e4.grid(row=22, column=1, sticky='WE')
                    self.cvad_e4.rowconfigure(22,weight=1)
                else:
                    self.cvad_e4.grid()

                if not (self.cvad_l1):
                    #self.cvad_l1 = Label(root, font=MyFontH2, text="How Many Driver~Sequencer You Want To Create: ")
                    self.cvad_l1 = Label(root, font=MyFontH2, text="Enter Required Number Of Driver~Sequencer: ")
                    self.cvad_l1.grid(row=24, column=0, sticky='W')
                    self.cvad_l1.rowconfigure(24,weight=1)
                else:
                    self.cvad_l1.grid()
                   
                if not (self.cvad_e1):    
                    self.cvad_e1 = Entry(root, font=MyFontH2, width=43, bg="goldenrod")
                    self.cvad_e1.delete(0, END)
                    self.cvad_e1.insert(0, 'Enter no. of drivers,1st driver name,..,nth driver name')
                    self.cvad_e1.bind('<Button-1>', self.cvad_e1_entry_click)
                    self.cvad_e1.bind('<FocusOut>', self.comp_vip_agt_interface)
                    self.cvad_e1.grid(row=24, column=1, sticky='WE')
                    self.cvad_e1.rowconfigure(24,weight=1)
                else:
                    self.cvad_e1.grid()

                if not (self.cvad_l2):
                    #self.cvad_l2 = Label(root, font=MyFontH2, text="How Many Monitors You Want To Create: ")
                    self.cvad_l2 = Label(root, font=MyFontH2, text="Enter Required Number Of Monitor's: ")
                    self.cvad_l2.grid(row=26, column=0, sticky='W')
                    self.cvad_l2.rowconfigure(26,weight=1)
                else:
                    self.cvad_l2.grid()

                if not (self.cvad_e2):
                    self.cvad_e2 = Entry(root, font=MyFontH2, width=43, bg="goldenrod")
                    self.cvad_e2.delete(0, END)
                    self.cvad_e2.insert(0, 'Enter no. of monitors,1st monitor name,..,nth monitor name')
                    self.cvad_e2.bind('<Button-1>', self.cvad_e2_entry_click)
                    self.cvad_e2.grid(row=26, column=1, sticky='WE')
                    self.cvad_e2.rowconfigure(26,weight=1)
                else:
                    self.cvad_e2.grid()

                if not (self.cvad_l3):
                    #self.cvad_l3 = Label(root, font=MyFontH2, text="How Many Scoreboard You Want To Create: ")
                    self.cvad_l3 = Label(root, font=MyFontH2, text="Enter Required Number Of Scoreboard's: ")
                    self.cvad_l3.grid(row=28, column=0, sticky='W')
                    self.cvad_l3.rowconfigure(28,weight=1)
                else:
                    self.cvad_l3.grid()

                if not (self.cvad_e3):
                    self.cvad_e3 = Entry(root, font=MyFontH2, width=43, bg="goldenrod")
                    self.cvad_e3.delete(0, END)
                    self.cvad_e3.insert(0, 'Enter no. of scoreboards,1st scoreboard name,..,nth scoreboard name')
                    self.cvad_e3.bind('<Button-1>', self.cvad_e3_entry_click)
                    self.cvad_e3.grid(row=28, column=1, sticky='WE')
                    self.cvad_e3.rowconfigure(28,weight=1)
                else:
                    self.cvad_e3.grid()

                if not (self.cvad_l4):
                    #self.cvad_l4 = Label(root, font=MyFontH2, text="How Do You Want To Connect Between Monitor & Scoreboard: ")
                    #self.cvad_l4 = Label(root, font=MyFontH2, text="Choose The Type Of Connection Between Monitor & Scoreboard: ")
                    self.cvad_l4 = Label(root, font=MyFontH2, text="Choose Connection Type b/w Monitor & Scoreboard: ")
                    self.cvad_l4.grid(row=30, column=0, sticky='W')
                    self.cvad_l4.rowconfigure(30,weight=1)
                else:
                    self.cvad_l4.grid()
        
                self.cv_mon_scb_con_list.clear()
                self.cv_mon_scb_con_val.set("Click Drop-Down For Options")
                self.cv_mon_scb_con_list = {"Analysis Port-Export FIFO Based":1, "Analysis Port Write Function":2}

                if not (self.cvo2):
                    self.cvo2 = OptionMenu(root, self.cv_mon_scb_con_val, *self.cv_mon_scb_con_list)
                    self.cvo2.configure(width=39, activebackground="gray50", font=MyFontH2)
                    menu = self.cvo2.nametowidget(self.cvo2.menuname)
                    menu.config(font=MyFontH2, activebackground="gray50") 
                    self.cvo2.grid(row=30, column=1, sticky='WE')
                    self.cvo2.rowconfigure(30,weight=1)
                else:
                    self.cvo2.grid()

                #   if not (self.cvr3):
                #       self.cvr3 = Radiobutton(root, text="Analysis Port-Export FIFO Based", variable=cvs, value=1)
                #       self.cvr3.grid(row=31)
                #       self.cvr3.rowconfigure(31,weight=1)
                #   else:
                #       self.cvr3.grid()

                #   if not (self.cvr4):
                #       self.cvr4 = Radiobutton(root, text="Analysis Port Write Function", variable=cvs, value=2)
                #       self.cvr4.grid(row=32)
                #       self.cvr4.rowconfigure(32,weight=1)
                #   else:
                #       self.cvr4.grid()

                if not (self.cvl3):
                    #self.cvl3 = Label(root, font=MyFontH2, text="What Type Of Interface You Wanted To Create: ")
                    self.cvl3 = Label(root, font=MyFontH2, text="Choose The Type Of Interface: ")
                    self.cvl3.grid(row=33, column=0, sticky='W')
                    self.cvl3.rowconfigure(33,weight=1)
                else:
                    self.cvl3.grid()
                
                self.cv_choose_int_list.clear()
                self.cv_choose_int_val.set("Click Drop-Down For Options")
                self.cv_choose_int_list = {"Default Interface":1, "User Defined Interface":2, "Load Interface":3}

                if not (self.cvo3):
                    self.cvo3 = OptionMenu(root, self.cv_choose_int_val, *self.cv_choose_int_list, command=self.cv_choose_int_cmd_code)
                    self.cvo3.configure(width=39, activebackground="gray50", font=MyFontH2)
                    menu = self.cvo3.nametowidget(self.cvo3.menuname)
                    menu.config(font=MyFontH2, activebackground="gray50") 
                    self.cvo3.grid(row=33, column=1, sticky='WE')
                    self.cvo3.rowconfigure(33,weight=1)
                else:
                    self.cvo3.grid()

                # if not (self.cvr1):
                #     self.cvr1 = Radiobutton(root, text="Default Interface", variable=cv, value=1, command=self.cv_default_interface_no_gen)
                #     self.cvr1.grid(row=34)
                #     self.cvr1.rowconfigure(34,weight=1)
                # else:
                #     self.cvr1.grid()

                # if not (self.cvr2):
                #     self.cvr2 = Radiobutton(root, text="User Defined Interface", variable=cv, value=2, command=self.cv_user_defined_interface)
                #     self.cvr2.grid(row=35)
                #     self.cvr2.rowconfigure(35,weight=1)
                # else:
                #     self.cvr2.grid()

                if not (self.cv_next_agt_cfg_button): 
                    self.cv_next_agt_cfg_button = Button(root, font=MyFontBtn, background="mediumpurple1", activebackground="purple2", text="ENTER NEXT AGENT CONFIGURATION", command=self.cv_next_agt_cfg_button_code, highlightbackground='black', highlightthickness='2')    
                    self.cv_next_agt_cfg_button.grid(row=40, column=1, sticky='WE')
                    self.cv_next_agt_cfg_button.rowconfigure(40,weight=1)
                else:
                    self.cv_next_agt_cfg_button.grid()
                
                # Adding the Return Button : Vimo : 071818|WED
                self.return_button_create_cb(2);
            else:
                if not (self.cvad_l0):
                    self.cvad_l0 = Label(root, background=root.cget('bg'), foreground="black", font=MyFontH2, text="Enter Agent %d Configuration Name:"% cvagt_val_loop_tmp)
                    self.cvad_l0.grid(row=22, column=0, sticky='W')
                    self.cvad_l0.rowconfigure(22,weight=1)
                    self.flash_agtcfg()
                else:
                    self.cvad_l0.grid()
                    self.flash_agtcfg()
                
                #self.cvad_l5 = Label(root, text="Enter The Agent Name: ")
                #self.cvad_l5.pack()
                
                if not (self.cvad_e4):
                    self.cvad_e4 = Entry(root, font=MyFontH2, width=43)
                    self.cvad_e4.grid(row=22, column=1, sticky='WE')
                    self.cvad_e4.rowconfigure(22,weight=1)
                else:
                    self.cvad_e4.grid()
                
                if not (self.cvad_l1):
                    #self.cvad_l1 = Label(root, font=MyFontH2, text="How Many Driver~Sequencer You Want To Create: ")
                    self.cvad_l1 = Label(root, font=MyFontH2, text="Enter Required Number Of Driver~Sequencer: ")
                    self.cvad_l1.grid(row=24, column=0, sticky='W')
                    self.cvad_l1.rowconfigure(24,weight=1)
                else:
                    self.cvad_l1.grid()
                
                if not (self.cvad_e1):    
                    self.cvad_e1 = Entry(root, font=MyFontH2, width=43, bg="goldenrod")
                    self.cvad_e1.delete(0, END)
                    self.cvad_e1.insert(0, 'Enter no. of drivers,1st driver name,..,nth driver name')
                    self.cvad_e1.bind('<Button-1>', self.cvad_e1_entry_click)
                    self.cvad_e1.bind('<FocusOut>', self.comp_vip_agt_interface)
                    self.cvad_e1.grid(row=24, column=1, sticky='WE')
                    self.cvad_e1.rowconfigure(24,weight=1)
                else:
                    self.cvad_e1.grid()
                
                if not (self.cvad_l2):
                    #self.cvad_l2 = Label(root, font=MyFontH2, text="How Many Monitors You Want To Create: ")
                    self.cvad_l2 = Label(root, font=MyFontH2, text="Enter Required Number Of Monitor's: ")
                    self.cvad_l2.grid(row=26, column=0, sticky='W')
                    self.cvad_l2.rowconfigure(26,weight=1)
                else:
                    self.cvad_l2.grid()
                
                if not (self.cvad_e2):
                    self.cvad_e2 = Entry(root, font=MyFontH2, width=43, bg="goldenrod")
                    self.cvad_e2.delete(0, END)
                    self.cvad_e2.insert(0, 'Enter no. of monitors,1st monitor name,..,nth monitor name')
                    self.cvad_e2.bind('<Button-1>', self.cvad_e2_entry_click)
                    self.cvad_e2.grid(row=26, column=1, sticky='WE')
                    self.cvad_e2.rowconfigure(26,weight=1)
                else:
                    self.cvad_e2.grid()
                
                if not (self.cvad_l3):
                    #self.cvad_l3 = Label(root, font=MyFontH2, text="How Many Scoreboard You Want To Create: ")
                    self.cvad_l3 = Label(root, font=MyFontH2, text="Enter Required Number Of Scoreboard's: ")
                    self.cvad_l3.grid(row=28, column=0, sticky='W')
                    self.cvad_l3.rowconfigure(28,weight=1)
                else:
                    self.cvad_l3.grid()
                
                if not (self.cvad_e3):
                    self.cvad_e3 = Entry(root, font=MyFontH2, width=43, bg="goldenrod")
                    self.cvad_e3.delete(0, END)
                    self.cvad_e3.insert(0, 'Enter no. of scoreboards,1st scoreboard name,..,nth scoreboard name')
                    self.cvad_e3.bind('<Button-1>', self.cvad_e3_entry_click)
                    self.cvad_e3.grid(row=28, column=1, sticky='WE')
                    self.cvad_e3.rowconfigure(28,weight=1)
                else:
                    self.cvad_e3.grid()
                
                if not (self.cvad_l4):
                    #self.cvad_l4 = Label(root, font=MyFontH2, text="How Do You Want To Connect Between Monitor & Scoreboard: ")
                    #self.cvad_l4 = Label(root, font=MyFontH2, text="Choose The Type Of Connection Between Monitor & Scoreboard: ")
                    self.cvad_l4 = Label(root, font=MyFontH2, text="Choose Connection Type b/w Monitor & Scoreboard: ")
                    self.cvad_l4.grid(row=30, column=0, sticky='W')
                    self.cvad_l4.rowconfigure(30,weight=1)
                else:
                    self.cvad_l4.grid()
               
                self.cv_mon_scb_con_list.clear()
                self.cv_mon_scb_con_val.set("Click Drop-Down For Options")
                self.cv_mon_scb_con_list = {"Analysis Port-Export FIFO Based":1, "Analysis Port Write Function":2}

                if not (self.cvo2):
                    self.cvo2 = OptionMenu(root, self.cv_mon_scb_con_val, *self.cv_mon_scb_con_list)
                    self.cvo2.configure(width=39, activebackground="gray50", font=MyFontH2)
                    menu = self.cvo2.nametowidget(self.cvo2.menuname)
                    menu.config(font=MyFontH2, activebackground="gray50") 
                    self.cvo2.grid(row=30, column=1, sticky='WE')
                    self.cvo2.rowconfigure(30,weight=1)
                else:
                    self.cvo2.grid()

                # if not (self.cvr3):
                #     self.cvr3 = Radiobutton(root, text="Analysis Port-Export FIFO Based", variable=cvs, value=1)
                #     self.cvr3.grid(row=31)
                #     self.cvr3.rowconfigure(31,weight=1)
                # else:
                #     self.cvr3.grid()
                # 
                # if not (self.cvr4):
                #     self.cvr4 = Radiobutton(root, text="Analysis Port Write Function", variable=cvs, value=2)
                #     self.cvr4.grid(row=32)
                #     self.cvr4.rowconfigure(32,weight=1)
                # else:
                #     self.cvr4.grid()
       
                if not (self.cvl3):
                    #self.cvl3 = Label(root, font=MyFontH2, text="What Type Of Interface You Wanted To Create: ")
                    self.cvl3 = Label(root, font=MyFontH2, text="Choose The Type Of Interface: ")
                    self.cvl3.grid(row=33, column=0, sticky='W')
                    self.cvl3.rowconfigure(33,weight=1)
                else:
                    self.cvl3.grid()
                
                self.cv_choose_int_list.clear()
                self.cv_choose_int_val.set("Click Drop-Down For Options")
                self.cv_choose_int_list = {"Default Interface":1, "User Defined Interface":2, "Load Interface":3}

                if not (self.cvo3):
                    self.cvo3 = OptionMenu(root, self.cv_choose_int_val, *self.cv_choose_int_list, command=self.cv_choose_int_cmd_code)
                    self.cvo3.configure(width=39, activebackground="gray50", font=MyFontH2)
                    menu = self.cvo3.nametowidget(self.cvo3.menuname)
                    menu.config(font=MyFontH2, activebackground="gray50") 
                    self.cvo3.grid(row=33, column=1, sticky='WE')
                    self.cvo3.rowconfigure(33,weight=1)
                else:
                    self.cvo3.grid()
                
                # if not (self.cvr1):
                #     self.cvr1 = Radiobutton(root, text="Default Interface", variable=cv, value=1, command=self.cv_default_interface_gen)
                #     self.cvr1.grid(row=34)
                #     self.cvr1.rowconfigure(34,weight=1)
                # else:
                #     self.cvr1.grid()
                # 
                # if not (self.cvr2):
                #     self.cvr2 = Radiobutton(root, text="User Defined Interface", variable=cv, value=2, command=self.cv_user_defined_interface)
                #     self.cvr2.grid(row=35)
                #     self.cvr2.rowconfigure(35,weight=1)
                # else:
                #     self.cvr2.grid()
                
                # if not (self.return_button): 
                #     self.return_button = Button(root, background="mediumpurple1", activebackground="purple2", text="RETURN TO MAIN MENU", command=self.return_button_code)    
                #     self.return_button.pack()
                
                self.return_button_create_cb(2);
                # If its the last agent config, adding exit button as well : vimo : 071818|WED
                self.exit_button_create_cb(2)
        else: 
            # if not (self.return_button): 
            #     self.return_button = Button(root, background="mediumpurple1", activebackground="purple2", text="RETURN TO MAIN MENU", command=self.return_button_code)    
            #     self.return_button.pack()
            # self.return_button_create_cb(1);
            log.info("Choose Atleast One Agent To Create Complete VIP Templates\n")
            self.completevip()

    def cv_next_agt_cfg_button_code(self):
        global cvagt_val_loop_tmp
        global cvagt_val_loop
        global cv_agent_cfg_array
        global cv_agent_cfg_list
        global cvad_e4_temp

        # Getting the Agent Configuration Values 
        cv_agent_cfg_list[cvagt_val_loop_tmp-1][0] = self.cvad_e1.get()
        cv_agent_cfg_list[cvagt_val_loop_tmp-1][1] = self.cvad_e2.get()
        cv_agent_cfg_list[cvagt_val_loop_tmp-1][2] = self.cvad_e3.get()
            
        cv_agent_cfg_array[cvagt_val_loop_tmp-1][0] = cv_agent_cfg_list[cvagt_val_loop_tmp-1][0].split(",")
        cv_agent_cfg_array[cvagt_val_loop_tmp-1][1] = cv_agent_cfg_list[cvagt_val_loop_tmp-1][1].split(",")
        cv_agent_cfg_array[cvagt_val_loop_tmp-1][2] = cv_agent_cfg_list[cvagt_val_loop_tmp-1][2].split(",")
        
        # cv_agent_cfg_list[cvagt_val_loop_tmp-1][0] = "".join(cv_agent_cfg_array[cvagt_val_loop_tmp-1][0])
        # cv_agent_cfg_list[cvagt_val_loop_tmp-1][1] = "".join(cv_agent_cfg_array[cvagt_val_loop_tmp-1][1])
        # cv_agent_cfg_list[cvagt_val_loop_tmp-1][2] = "".join(cv_agent_cfg_array[cvagt_val_loop_tmp-1][2])
        
        # Code For Getting Agent name and number of agent instance : 082518|SAT
        # cv_agent_cfg_array[cvagt_val_loop_tmp-1][5] = self.cvad_e4.get()
        cvad_e4_temp = (self.cvad_e4.get()).split(",")
        # cvad_e4_temp = str((self.cvad_e4.get()).split(",")).strip()
        log.debug("Agt Instance Name : Value of cvad_e4 b4 split %s cvad_e4_temp %s"%(self.cvad_e4.get(), cvad_e4_temp))
        if len(cvad_e4_temp)>1:
            cv_agent_cfg_array[cvagt_val_loop_tmp-1][5] = str(cvad_e4_temp[0]).strip() 
            cv_agent_cfg_array[cvagt_val_loop_tmp-1][6] = str(cvad_e4_temp[1]).strip() 
            log.debug("Agt Instance Name : Value of cv_agent_cfg_array[%d-1] %s"%(cvagt_val_loop_tmp, cv_agent_cfg_array))
        else:
            cv_agent_cfg_array[cvagt_val_loop_tmp-1][5] = self.cvad_e4.get()
            log.debug("Agt Instance Name : Value of cv_agent_cfg_array[%d-1] %s"%(cvagt_val_loop_tmp, cv_agent_cfg_array))

        
        #if cvs.get()==1:
        #    cv_agent_cfg_array[cvagt_val_loop_tmp-1][3] = 1
        #else:
        #    cv_agent_cfg_array[cvagt_val_loop_tmp-1][3] = 2
        
        if self.cv_mon_scb_con_list.get(self.cv_mon_scb_con_val.get())==1:
            cv_agent_cfg_array[cvagt_val_loop_tmp-1][3] = 1
        elif self.cv_mon_scb_con_list.get(self.cv_mon_scb_con_val.get())==2:
            cv_agent_cfg_array[cvagt_val_loop_tmp-1][3] = 2
        
        # if cv.get()==1:
        #     cv_agent_cfg_array[cvagt_val_loop_tmp-1][4] = 1
        # else:
        #     cv_agent_cfg_array[cvagt_val_loop_tmp-1][4] = 2
        
        if self.cv_choose_int_list.get(self.cv_choose_int_val.get())==1:
            cv_agent_cfg_array[cvagt_val_loop_tmp-1][4] = 1
        elif self.cv_choose_int_list.get(self.cv_choose_int_val.get())==2:
            cv_agent_cfg_array[cvagt_val_loop_tmp-1][4] = 2
        elif self.cv_choose_int_list.get(self.cv_choose_int_val.get())==3:
            cv_agent_cfg_array[cvagt_val_loop_tmp-1][4] = 3

        if (self.cvad_l0):
            self.cvad_l0.grid_forget(); self.cvad_l0 = None # self.cvad_l0.destroy(); self.cvad_l0 = None
        if (self.cvad_l1):
            self.cvad_l1.grid_forget(); self.cvad_l1 = None # self.cvad_l1.destroy(); self.cvad_l1 = None
        if (self.cvad_l2):                                  
            self.cvad_l2.grid_forget(); self.cvad_l2 = None # self.cvad_l2.destroy(); self.cvad_l2 = None
        if (self.cvad_l3):                                  
            self.cvad_l3.grid_forget(); self.cvad_l3 = None # self.cvad_l3.destroy(); self.cvad_l3 = None
        if (self.cvad_l4):                                  
            self.cvad_l4.grid_forget(); self.cvad_l4 = None # self.cvad_l4.destroy(); self.cvad_l4 = None
        #if (self.cvad_l5):
        #    self.cvad_l5.grid_remove(); self.cvad_l5.destroy(); self.cvad_l5 = None
        if (self.cvad_e1):
            self.cvad_e1.grid_forget(); self.cvad_e1 = None # self.cvad_e1.destroy(); self.cvad_e1 = None
        if (self.cvad_e2):
            self.cvad_e2.grid_forget(); self.cvad_e2 = None # self.cvad_e2.destroy(); self.cvad_e2 = None
        if (self.cvad_e3):
            self.cvad_e3.grid_forget(); self.cvad_e3 = None # self.cvad_e3.destroy(); self.cvad_e3 = None
        if (self.cvad_e4):
            self.cvad_e4.grid_forget(); self.cvad_e4 = None # self.cvad_e4.destroy(); self.cvad_e4 = None
        if (self.cv_next_agt_cfg_button):
            self.cv_next_agt_cfg_button.grid_remove(); # self.cv_next_agt_cfg_button.destroy(); self.cv_next_agt_cfg_button = None
        if (self.cvl3):
            self.cvl3.grid_forget();  self.cvl3 = None
        if (self.cvl4):
            self.cvl4.grid_forget();  self.cvl4 = None
        if (self.cvr1):
            self.cvr1.grid_forget();  self.cvr1 = None
        if (self.cvr2):
            self.cvr2.grid_forget();  self.cvr2 = None
        if (self.cvr3):
            self.cvr3.grid_forget();  self.cvr3 = None
        if (self.cvr4):
            self.cvr4.grid_forget();  self.cvr4 = None
        
        cvagt_val_loop_tmp += 1 
        
        if(cvagt_val_loop_tmp < cvagt_val_loop):
            if not (self.cvad_l0):
                self.cvad_l0 = Label(root, background=root.cget('bg'), foreground="black", font=MyFontH2, text="Enter Agent %d Configuration Name:"% cvagt_val_loop_tmp)
                self.cvad_l0.grid(row=22, column=0, sticky='W')
                self.cvad_l0.rowconfigure(22,weight=1)
                self.flash_agtcfg()
            else:
                self.cvad_l0.grid()
                self.flash_agtcfg()
                
            #self.cvad_l5 = Label(root, text="Enter The Agent Name: ")
            #self.cvad_l5.pack()
            
            if not (self.cvad_e4):
                self.cvad_e4 = Entry(root, font=MyFontH2, width=43)
                self.cvad_e4.grid(row=22, column=1, sticky='WE')
                self.cvad_e4.rowconfigure(22,weight=1)
            else:
                self.cvad_e4.grid()
            
            if not (self.cvad_l1):
                #self.cvad_l1 = Label(root, font=MyFontH2, text="How Many Driver~Sequencer You Want To Create: ")
                self.cvad_l1 = Label(root, font=MyFontH2, text="Enter Required Number Of Driver~Sequencer: ")
                self.cvad_l1.grid(row=24, column=0, sticky='W')
                self.cvad_l1.rowconfigure(24,weight=1)
            else:
                self.cvad_l1.grid()
            
            if not (self.cvad_e1):    
                self.cvad_e1 = Entry(root, font=MyFontH2, width=43, bg="goldenrod")
                self.cvad_e1.delete(0, END)
                self.cvad_e1.insert(0, 'Enter no. of drivers,1st driver name,..,nth driver name')
                self.cvad_e1.bind('<Button-1>', self.cvad_e1_entry_click)
                self.cvad_e1.bind('<FocusOut>', self.comp_vip_agt_interface)
                self.cvad_e1.grid(row=24, column=1, sticky='WE')
                self.cvad_e1.rowconfigure(24,weight=1)
            else:
                self.cvad_e1.grid()
            
            if not (self.cvad_l2):
                #self.cvad_l2 = Label(root, font=MyFontH2, text="How Many Monitors You Want To Create: ")
                self.cvad_l2 = Label(root, font=MyFontH2, text="Enter Required Number Of Monitor's: ")
                self.cvad_l2.grid(row=26, column=0, sticky='W')
                self.cvad_l2.rowconfigure(26,weight=1)
            else:
                self.cvad_l2.grid()
            
            if not (self.cvad_e2):
                self.cvad_e2 = Entry(root, font=MyFontH2, width=43, bg="goldenrod")
                self.cvad_e2.delete(0, END)
                self.cvad_e2.insert(0, 'Enter no. of monitors,1st monitor name,..,nth monitor name')
                self.cvad_e2.bind('<Button-1>', self.cvad_e2_entry_click)
                self.cvad_e2.grid(row=26, column=1, sticky='WE')
                self.cvad_e2.rowconfigure(26,weight=1)
            else:
                self.cvad_e2.grid()
            
            if not (self.cvad_l3):
                #self.cvad_l3 = Label(root, font=MyFontH2, text="How Many Scoreboard You Want To Create: ")
                self.cvad_l3 = Label(root, font=MyFontH2, text="Enter Required Number Of Scoreboard's: ")
                self.cvad_l3.grid(row=28, column=0, sticky='W')
                self.cvad_l3.rowconfigure(28,weight=1)
            else:
                self.cvad_l3.grid()
            
            if not (self.cvad_e3):
                self.cvad_e3 = Entry(root, font=MyFontH2, width=43, bg="goldenrod")
                self.cvad_e3.delete(0, END)
                self.cvad_e3.insert(0, 'Enter no. of scoreboards,1st scoreboard name,..,nth scoreboard name')
                self.cvad_e3.bind('<Button-1>', self.cvad_e3_entry_click)
                self.cvad_e3.grid(row=28, column=1, sticky='WE')
                self.cvad_e3.rowconfigure(28,weight=1)
            else:
                self.cvad_e3.grid()
                
            if not (self.cvad_l4):
                #self.cvad_l4 = Label(root, font=MyFontH2, text="How Do You Want To Connect Between Monitor & Scoreboard: ")
                #self.cvad_l4 = Label(root, font=MyFontH2, text="Choose The Type Of Connection Between Monitor & Scoreboard: ")
                self.cvad_l4 = Label(root, font=MyFontH2, text="Choose Connection Type b/w Monitor & Scoreboard: ")
                self.cvad_l4.grid(row=30, column=0, sticky='W')
                self.cvad_l4.rowconfigure(30,weight=1)
            else:
                self.cvad_l4.grid()
                
            self.cv_mon_scb_con_list.clear()
            self.cv_mon_scb_con_val.set("Click Drop-Down For Options")
            self.cv_mon_scb_con_list = {"Analysis Port-Export FIFO Based":1, "Analysis Port Write Function":2}

            if not (self.cvo2):
                self.cvo2 = OptionMenu(root, self.cv_mon_scb_con_val, *self.cv_mon_scb_con_list)
                self.cvo2.configure(width=39, activebackground="gray50", font=MyFontH2)
                menu = self.cvo2.nametowidget(self.cvo2.menuname)
                menu.config(font=MyFontH2, activebackground="gray50") 
                self.cvo2.grid(row=30, column=1, sticky='WE')
                self.cvo2.rowconfigure(30,weight=1)
            else:
                self.cvo2.grid()
            
            # if not (self.cvr3):
            #     self.cvr3 = Radiobutton(root, text="Analysis Port-Export FIFO Based", variable=cvs, value=1)
            #     self.cvr3.grid(row=31)
            #     self.cvr3.rowconfigure(31,weight=1)
            # else:
            #     self.cvr3.grid()
            # 
            # if not (self.cvr4):
            #     self.cvr4 = Radiobutton(root, text="Analysis Port Write Function", variable=cvs, value=2)
            #     self.cvr4.grid(row=32)
            #     self.cvr4.rowconfigure(32,weight=1)
            # else:
            #     self.cvr4.grid()
           
            if not (self.cvl3):
                #self.cvl3 = Label(root, font=MyFontH2, text="What Type Of Interface You Wanted To Create: ")
                self.cvl3 = Label(root, font=MyFontH2, text="Choose The Type Of Interface: ")
                self.cvl3.grid(row=33, column=0, sticky='W')
                self.cvl3.rowconfigure(33,weight=1)
            else:
                self.cvl3.grid()
                
            self.cv_choose_int_list.clear()
            self.cv_choose_int_val.set("Click Drop-Down For Options")
            self.cv_choose_int_list = {"Default Interface":1, "User Defined Interface":2, "Load Interface":3}

            if not (self.cvo3):
                self.cvo3 = OptionMenu(root, self.cv_choose_int_val, *self.cv_choose_int_list, command=self.cv_choose_int_cmd_code)
                self.cvo3.configure(width=39, activebackground="gray50", font=MyFontH2)
                menu = self.cvo3.nametowidget(self.cvo3.menuname)
                menu.config(font=MyFontH2, activebackground="gray50") 
                self.cvo3.grid(row=33, column=1, sticky='WE')
                self.cvo3.rowconfigure(33,weight=1)
            else:
                self.cvo3.grid()
            
            # if not (self.cvr1):
            #     self.cvr1 = Radiobutton(root, text="Default Interface", variable=cv, value=1, command=self.cv_default_interface_no_gen)
            #     self.cvr1.grid(row=34)
            #     self.cvr1.rowconfigure(34,weight=1)
            # else:
            #     self.cvr1.grid()
            # 
            # if not (self.cvr2):
            #     self.cvr2 = Radiobutton(root, text="User Defined Interface", variable=cv, value=2, command=self.cv_user_defined_interface)
            #     self.cvr2.grid(row=35)
            #     self.cvr2.rowconfigure(35,weight=1)
            # else:
            #     self.cvr2.grid()

            if not (self.cv_next_agt_cfg_button): 
                self.cv_next_agt_cfg_button = Button(root, font=MyFontBtn, background="mediumpurple1", activebackground="purple2", text="ENTER NEXT AGENT CONFIGURATION", command=self.cv_next_agt_cfg_button_code, highlightbackground='black', highlightthickness='2')    
                self.cv_next_agt_cfg_button.grid(row=40, column=1, sticky='WE')
                self.cv_next_agt_cfg_button.rowconfigure(40,weight=1)
            else:
                self.cv_next_agt_cfg_button.grid()
                
            # Adding the Return Button : Vimo : 071818|WED
            self.return_button_create_cb(2);
        else:
            if not (self.cvad_l0):
                self.cvad_l0 = Label(root, background=root.cget('bg'), foreground="black", font=MyFontH2, text="Enter Agent %d Configuration Name:"% cvagt_val_loop_tmp)
                self.cvad_l0.grid(row=22, column=0, sticky='W')
                self.cvad_l0.rowconfigure(22,weight=1)
                self.flash_agtcfg()
            else:
                self.cvad_l0.grid()
                self.flash_agtcfg()
            
            #self.cvad_l5 = Label(root, text="Enter The Agent Name: ")
            #self.cvad_l5.pack()
            
            if not (self.cvad_e4):
                self.cvad_e4 = Entry(root, font=MyFontH2, width=43)
                self.cvad_e4.grid(row=22, column=1, sticky='WE')
                self.cvad_e4.rowconfigure(22,weight=1)
            else:
                self.cvad_e4.grid()
            
            if not (self.cvad_l1):
                #self.cvad_l1 = Label(root, font=MyFontH2, text="How Many Driver~Sequencer You Want To Create: ")
                self.cvad_l1 = Label(root, font=MyFontH2, text="Enter Required Number Of Driver~Sequencer: ")
                self.cvad_l1.grid(row=24, column=0, sticky='W')
                self.cvad_l1.rowconfigure(24,weight=1)
            else:
                self.cvad_l1.grid()
            
            if not (self.cvad_e1):    
                self.cvad_e1 = Entry(root, font=MyFontH2, width=43, bg="goldenrod")
                self.cvad_e1.delete(0, END)
                self.cvad_e1.insert(0, 'Enter no. of drivers,1st driver name,..,nth driver name')
                self.cvad_e1.bind('<Button-1>', self.cvad_e1_entry_click)
                self.cvad_e1.bind('<FocusOut>', self.comp_vip_agt_interface)
                self.cvad_e1.grid(row=24, column=1, sticky='WE')
                self.cvad_e1.rowconfigure(24,weight=1)
            else:
                self.cvad_e1.grid()
            
            if not (self.cvad_l2):
                #self.cvad_l2 = Label(root, font=MyFontH2, text="How Many Monitors You Want To Create: ")
                self.cvad_l2 = Label(root, font=MyFontH2, text="Enter Required Number Of Monitor's: ")
                self.cvad_l2.grid(row=26, column=0, sticky='W')
                self.cvad_l2.rowconfigure(26,weight=1)
            else:
                self.cvad_l2.grid()
            
            if not (self.cvad_e2):
                self.cvad_e2 = Entry(root, font=MyFontH2, width=43, bg="goldenrod")
                self.cvad_e2.delete(0, END)
                self.cvad_e2.insert(0, 'Enter no. of monitors,1st monitor name,..,nth monitor name')
                self.cvad_e2.bind('<Button-1>', self.cvad_e2_entry_click)
                self.cvad_e2.grid(row=26, column=1, sticky='WE')
                self.cvad_e2.rowconfigure(26,weight=1)
            else:
                self.cvad_e2.grid()
            
            if not (self.cvad_l3):
                #self.cvad_l3 = Label(root, font=MyFontH2, text="How Many Scoreboard You Want To Create: ")
                self.cvad_l3 = Label(root, font=MyFontH2, text="Enter Required Number Of Scoreboard's: ")
                self.cvad_l3.grid(row=28, column=0, sticky='W')
                self.cvad_l3.rowconfigure(28,weight=1)
            else:
                self.cvad_l3.grid()
            
            if not (self.cvad_e3):
                self.cvad_e3 = Entry(root, font=MyFontH2, width=43, bg="goldenrod")
                self.cvad_e3.delete(0, END)
                self.cvad_e3.insert(0, 'Enter no. of scoreboards,1st scoreboard name,..,nth scoreboard name')
                self.cvad_e3.bind('<Button-1>', self.cvad_e3_entry_click)
                self.cvad_e3.grid(row=28, column=1, sticky='WE')
                self.cvad_e3.rowconfigure(28,weight=1)
            else:
                self.cvad_e3.grid()
            
            if not (self.cvad_l4):
                #self.cvad_l4 = Label(root, font=MyFontH2, text="How Do You Want To Connect Between Monitor & Scoreboard: ")
                #self.cvad_l4 = Label(root, font=MyFontH2, text="Choose The Type Of Connection Between Monitor & Scoreboard: ")
                self.cvad_l4 = Label(root, font=MyFontH2, text="Choose Connection Type b/w Monitor & Scoreboard: ")
                self.cvad_l4.grid(row=30, column=0, sticky='W')
                self.cvad_l4.rowconfigure(30,weight=1)
            else:
                self.cvad_l4.grid()
            
            self.cv_mon_scb_con_list.clear()
            self.cv_mon_scb_con_val.set("Click Drop-Down For Options")
            self.cv_mon_scb_con_list = {"Analysis Port-Export FIFO Based":1, "Analysis Port Write Function":2}

            if not (self.cvo2):
                self.cvo2 = OptionMenu(root, self.cv_mon_scb_con_val, *self.cv_mon_scb_con_list)
                self.cvo2.configure(width=39, activebackground="gray50", font=MyFontH2)
                menu = self.cvo2.nametowidget(self.cvo2.menuname)
                menu.config(font=MyFontH2, activebackground="gray50") 
                self.cvo2.grid(row=30, column=1, sticky='WE')
                self.cvo2.rowconfigure(30,weight=1)
            else:
                self.cvo2.grid()
            
            # if not (self.cvr3):
            #     self.cvr3 = Radiobutton(root, text="Analysis Port-Export FIFO Based", variable=cvs, value=1)
            #     self.cvr3.grid(row=31)
            #     self.cvr3.rowconfigure(31,weight=1)
            # else:
            #     self.cvr3.grid()
            # 
            # if not (self.cvr4):
            #     self.cvr4 = Radiobutton(root, text="Analysis Port Write Function", variable=cvs, value=2)
            #     self.cvr4.grid(row=32)
            #     self.cvr4.rowconfigure(32,weight=1)
            # else:
            #     self.cvr4.grid()
       
            if not (self.cvl3):
                #self.cvl3 = Label(root, font=MyFontH2, text="What Type Of Interface You Wanted To Create: ")
                self.cvl3 = Label(root, font=MyFontH2, text="Choose The Type Of Interface: ")
                self.cvl3.grid(row=33, column=0, sticky='W')
                self.cvl3.rowconfigure(33,weight=1)
            else:
                self.cvl3.grid()
            
            self.cv_choose_int_list.clear()
            self.cv_choose_int_val.set("Click Drop-Down For Options")
            self.cv_choose_int_list = {"Default Interface":1, "User Defined Interface":2, "Load Interface":3}

            if not (self.cvo3):
                self.cvo3 = OptionMenu(root, self.cv_choose_int_val, *self.cv_choose_int_list, command=self.cv_choose_int_cmd_code)
                self.cvo3.configure(width=39, activebackground="gray50", font=MyFontH2)
                menu = self.cvo3.nametowidget(self.cvo3.menuname)
                menu.config(font=MyFontH2, activebackground="gray50") 
                self.cvo3.grid(row=33, column=1, sticky='WE')
                self.cvo3.rowconfigure(33,weight=1)
            else:
                self.cvo3.grid()
            
            # if not (self.cvr1):
            #     self.cvr1 = Radiobutton(root, text="Default Interface", variable=cv, value=1, command=self.cv_default_interface_gen)
            #     self.cvr1.grid(row=34)
            #     self.cvr1.rowconfigure(34,weight=1)
            # else:
            #     self.cvr1.grid()
            # 
            # if not (self.cvr2):
            #     self.cvr2 = Radiobutton(root, text="User Defined Interface", variable=cv, value=2, command=self.cv_user_defined_interface)
            #     self.cvr2.grid(row=35)
            #     self.cvr2.rowconfigure(35,weight=1)
            # else:
            #     self.cvr2.grid()
            
            # if not (self.return_button): 
            #     self.return_button = Button(root, background="mediumpurple1", activebackground="purple2", text="RETURN TO MAIN MENU", command=self.return_button_code)    
            #     self.return_button.pack()
            
            self.return_button_create_cb(2);
            # If its the last agent config, adding exit button as well : vimo : 071818|WED
            self.exit_button_create_cb(2)


    def cv_choose_int_cmd_code(self, *args):
        global cv_interface_pkg 
        global cv_agt_intf_cnt_tmp
        global cv_agt_selected_started
        global cv_choose_int_cmd_code_called
        global cvagt_val_loop_tmp

        log.debug("1. cv_choose_int_cmd_code : value cv_agt_intf_cnt %d cv_agt_intf_cnt_tmp = %d cv_interface_pkg %s"%(cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))

        if cv_agt_selected_started:
            log.debug("2. cv_choose_int_cmd_code : value cv_agt_intf_cnt %d cv_agt_intf_cnt_tmp = %d cv_interface_pkg %s"%(cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
            if cv_choose_int_cmd_code_called == 0:
                cv_choose_int_cmd_code_called = 1
            else:    
                if (cv_agt_intf_cnt_tmp != 0): cv_agt_intf_cnt_tmp -= 1 
                log.debug("3. cv_choose_int_cmd_code : value cv_agt_intf_cnt %d cv_agt_intf_cnt_tmp = %d cv_interface_pkg %s"%(cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
                
                for i in range (1, len(cv_interface_pkg[cvagt_val_loop_tmp-1][cv_agt_intf_cnt_tmp])):
                    del cv_interface_pkg[cvagt_val_loop_tmp-1][cv_agt_intf_cnt_tmp][i]

                log.debug("4. cv_choose_int_cmd_code : value cv_agt_intf_cnt %d cv_agt_intf_cnt_tmp = %d cv_interface_pkg %s"%(cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))

        if(cvagt_val_loop_tmp < cvagt_val_loop):
            log.debug("5. cv_choose_int_cmd_code : value cv_agt_intf_cnt %d cv_agt_intf_cnt_tmp = %d cv_interface_pkg %s"%(cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
            if self.cv_choose_int_list.get(self.cv_choose_int_val.get())==1:
                if cv_agt_selected_started: cv_interface_pkg[cvagt_val_loop_tmp-1][cv_agt_intf_cnt_tmp].append(1)
                self.cv_default_interface_no_gen()    
            elif self.cv_choose_int_list.get(self.cv_choose_int_val.get())==2:
                if cv_agt_selected_started: cv_interface_pkg[cvagt_val_loop_tmp-1][cv_agt_intf_cnt_tmp].append(2)
                self.cv_user_defined_interface() 
            elif self.cv_choose_int_list.get(self.cv_choose_int_val.get())==3:
                if cv_agt_selected_started: cv_interface_pkg[cvagt_val_loop_tmp-1][cv_agt_intf_cnt_tmp].append(3)
                self.cv_load_interface() 
        else:    
            log.debug("6. cv_choose_int_cmd_code : value cv_agt_intf_cnt %d cv_agt_intf_cnt_tmp = %d cv_interface_pkg %s"%(cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
            if self.cv_choose_int_list.get(self.cv_choose_int_val.get())==1:
                if cv_agt_selected_started: cv_interface_pkg[cvagt_val_loop_tmp-1][cv_agt_intf_cnt_tmp].append(1)
                self.cv_default_interface_gen() 
            elif self.cv_choose_int_list.get(self.cv_choose_int_val.get())==2:
                if cv_agt_selected_started: cv_interface_pkg[cvagt_val_loop_tmp-1][cv_agt_intf_cnt_tmp].append(2)
                self.cv_user_defined_interface() 
            elif self.cv_choose_int_list.get(self.cv_choose_int_val.get())==3:
                if cv_agt_selected_started: cv_interface_pkg[cvagt_val_loop_tmp-1][cv_agt_intf_cnt_tmp].append(3)
                self.cv_load_interface() 
       
        log.debug("7. cv_choose_int_cmd_code : value cv_agt_intf_cnt %d cv_agt_intf_cnt_tmp = %d cv_interface_pkg %s"%(cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
    
    def sc_choose_int_cmd_code(self, *args):
        global sc_interface_pkg 
        global sc_agt_intf_cnt_tmp
        global sc_agt_selected_started
        global sc_choose_int_cmd_code_called

        log.debug("Calling sc_choose_int_cmd_code\n")

        if sc_agt_selected_started:
            if sc_choose_int_cmd_code_called == 0:
                sc_choose_int_cmd_code_called = 1
            else:    
                sc_agt_intf_cnt_tmp -= 1 
                log.debug("Value of sc_interface_pkg b4 del"% sc_interface_pkg)
                
                for i in range (1, len(sc_interface_pkg[sc_agt_intf_cnt_tmp])):
                    del sc_interface_pkg[sc_agt_intf_cnt_tmp][i]

                log.debug("Value of sc_interface_pkg a8 del"% sc_interface_pkg)
                log.debug("value of sc_agt_intf_cnt %s sc_agt_intf_cnt_tmp %d @ sc_choose_int_cmd_code a8 del"%(sc_agt_intf_cnt, sc_agt_intf_cnt_tmp))

        if self.sc_choose_int_list.get(self.sc_choose_int_val.get())==1:
            if sc_agt_selected_started: sc_interface_pkg[sc_agt_intf_cnt_tmp].append(1)
            log.debug("Calling sc_choose_int_cmd_code: sc_default_interface\n")
            self.sc_default_interface() 
        elif self.sc_choose_int_list.get(self.sc_choose_int_val.get())==2:
            if sc_agt_selected_started: sc_interface_pkg[sc_agt_intf_cnt_tmp].append(2)
            log.debug("Calling sc_choose_int_cmd_code: sc_user_defined_interface\n")
            self.sc_user_defined_interface()
        elif self.sc_choose_int_list.get(self.sc_choose_int_val.get())==3:
            if sc_agt_selected_started: sc_interface_pkg[sc_agt_intf_cnt_tmp].append(3)
            log.debug("Calling sc_choose_int_cmd_code: sc_load_interface\n")
            self.sc_load_interface()
        log.debug("value of sc_agt_intf_cnt %s sc_agt_intf_cnt_tmp %d @ sc_choose_int_cmd_code"%(sc_agt_intf_cnt, sc_agt_intf_cnt_tmp))

    def cv_default_interface_gen(self):       
        global cv_agt_selected
        global cv_agt_selected_started
        global cv_agt_intf_cnt
        global cv_agt_intf_cnt_tmp
        global cv_interface_pkg
            
        self.cv_udi_kill_all_kcb();
        self.cv_load_interface_kcb();
        
        if not cv_agt_selected_started:
            self.cv_udi_kill_all_kcb();
            self.cv_load_interface_kcb();
            self.exit_button_cb();
            self.generate_button_operation();
            log.debug("Calling The Final cv_default_interface_gen\n")
        else:
            cv_agt_intf_cnt_tmp += 1
            log.debug("1. cv_default_interface_gen: value of cv_agt_intf_cnt %s cv_agt_intf_cnt_tmp %d cv_interface_pkg %s"%(cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
            
            if cv_agt_intf_cnt_tmp == cv_agt_intf_cnt:    
                log.debug("2. cv_default_interface_gen: value of cv_agt_intf_cnt %s cv_agt_intf_cnt_tmp %d cv_interface_pkg %s"%(cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
                
                # End Reached Reset cv_agt_selected so that next agent kicks-off
                cv_agt_selected = 1
                cv_agt_intf_cnt_tmp = 0

                self.cv_udi_kill_all_kcb();
                self.cv_load_interface_kcb();
                self.exit_button_cb();
                self.generate_button_operation();
                log.debug("Calling The Final cv_default_interface_gen\n")
            else:
                log.debug("3. cv_default_interface_gen: value of cv_agt_intf_cnt %s cv_agt_intf_cnt_tmp %d cv_interface_pkg %s"%(cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
                self.return_button_create_cb(2)
                #self.exit_button_create_cb(3)
                self.comp_vip_agt_interface()
        log.debug("4. cv_default_interface_gen: value of cv_agt_intf_cnt %s cv_agt_intf_cnt_tmp %d cv_interface_pkg %s"%(cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))

    def cv_default_interface_no_gen(self):       
        global cv_agt_selected
        global cv_agt_selected_started
        global cv_agt_intf_cnt
        global cv_agt_intf_cnt_tmp
        global cv_interface_pkg

        if not cv_agt_selected_started:
            self.cv_udi_kill_all_kcb();
            self.cv_load_interface_kcb();
            self.exit_button_cb();
            
            if(cvagt_val_loop_tmp < cvagt_val_loop):
                if not (self.cv_next_agt_cfg_button): 
                    self.cv_next_agt_cfg_button = Button(root, font=MyFontBtn, background="mediumpurple1", activebackground="purple2", text="ENTER NEXT AGENT CONFIGURATION", command=self.cv_next_agt_cfg_button_code, highlightbackground='black', highlightthickness='2')    
                    self.cv_next_agt_cfg_button.grid(row=40, column=1, sticky='WE')
                    self.cv_next_agt_cfg_button.rowconfigure(40,weight=1)
                else:
                    self.cv_next_agt_cfg_button.grid()
                # Adding the Return Button : Vimo : 071818|WED
                self.return_button_create_cb(2);
        else:
            cv_agt_intf_cnt_tmp += 1
            self.cv_udi_kill_all_kcb();
            self.cv_load_interface_kcb();
            self.exit_button_cb();
        
            if cv_agt_intf_cnt_tmp == cv_agt_intf_cnt:    
                log.debug("1. cv_default_interface_no_gen: value of cv_agt_intf_cnt %s cv_agt_intf_cnt_tmp %d cv_interface_pkg %s"%(cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
                
                # End Reached Reset cv_agt_selected so that next agent kicks-off
                cv_agt_selected = 1
                cv_agt_intf_cnt_tmp = 0
                
                if(cvagt_val_loop_tmp < cvagt_val_loop):
                    log.debug("2. cv_default_interface_no_gen: value of cv_agt_intf_cnt %s cv_agt_intf_cnt_tmp %d cv_interface_pkg %s"%(cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
                    if not (self.cv_next_agt_cfg_button): 
                        self.cv_next_agt_cfg_button = Button(root, font=MyFontBtn, background="mediumpurple1", activebackground="purple2", text="ENTER NEXT AGENT CONFIGURATION", command=self.cv_next_agt_cfg_button_code, highlightbackground='black', highlightthickness='2')    
                        self.cv_next_agt_cfg_button.grid(row=40, column=1, sticky='WE')
                        self.cv_next_agt_cfg_button.rowconfigure(40,weight=1)
                    else:
                        self.cv_next_agt_cfg_button.grid()
                    # Adding the Return Button : Vimo : 071818|WED
                    self.return_button_create_cb(2);
            else:
                log.debug("3. cv_default_interface_no_gen: value of cv_agt_intf_cnt %s cv_agt_intf_cnt_tmp %d cv_interface_pkg %s"%(cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
                self.return_button_create_cb(2)
                #self.exit_button_create_cb(3)
                self.comp_vip_agt_interface()
        log.debug("4. cv_default_interface_no_gen: value of cv_agt_intf_cnt %s cv_agt_intf_cnt_tmp %d cv_interface_pkg %s"%(cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))


    def cv_user_defined_interface(self):
        global cv_udie_loop
        global cv_udie_frame_loop
        
        global cv_agt_selected
        global cv_agt_selected_started
        global cv_agt_intf_cnt
        global cv_agt_intf_cnt_tmp
        global cv_interface_pkg

        self.cv_udi_kill_all_kcb();
        self.cv_load_interface_kcb();
        self.generate_button_cb();
        self.exit_button_cb();
        self.next_agt_cfg_btn_kcb();
        self.return_button_cb();

        if cv_agt_selected_started:
            cv_agt_intf_cnt_tmp += 1 

        if(cvagt_val_loop_tmp == cvagt_val_loop):
            self.return_button_cb();

        cv_udie_loop = 0
        cv_udie_frame_loop = 1
        self.cv_udie = []
        self.cv_udif_name_e.append([])
        self.cv_udif_type_e.append([])
        self.cv_udif_le_e.append([])
        self.cv_udif_re_e.append([])
        self.cv_udif_cb_e.append([])
        self.cv_udif_mp_e.append([])
    
        # self.cv_udie.append(Entry(root, font=MyFontH2, width=43, bg="goldenrod"))
        # self.cv_udie[cv_udie_loop].delete(0, END)
        # self.cv_udie[cv_udie_loop].insert(0, 'Enter Signal Name, Type, Size. For More Options, Click User Tips!')
        # self.cv_udie[cv_udie_loop].bind('<Button-1>', self.cv_udie_entry_click)
        # self.cv_udie[cv_udie_loop].grid(row=37, column=0, columnspan=2, sticky='WE')
        # self.cv_udie[cv_udie_loop].rowconfigure(37,weight=1)

        if not (self.cv_udif_frame):
            self.cv_udif_frame = Frame(root, width=50, bg='dark goldenrod', highlightbackground='dark goldenrod', highlightthickness='3')
            self.cv_udif_frame.grid(row=37, column=0, columnspan=2, sticky='WE')
            self.cv_udif_frame.rowconfigure(37,weight=1)
        else:
            log.debug("Frame already Exists\n")
            self.cv_udif_frame.grid() 

        if not (self.cv_udif_name):
            self.cv_udif_name = Label(self.cv_udif_frame, font=MyFontH2, text="Signal Name", bg='goldenrod')
            self.cv_udif_name.grid(row=0, column=0, sticky='WE')
            self.cv_udif_name.rowconfigure(0, weight=1)
        else:
            self.cv_udif_name.grid()

        self.cv_udif_name_e.append([])
        if not (self.cv_udif_name_e[cv_udie_frame_loop]):
            self.cv_udif_name_e[cv_udie_frame_loop] = Entry(self.cv_udif_frame, font=MyFontH2)
            self.cv_udif_name_e[cv_udie_frame_loop].grid(row=cv_udie_frame_loop, column=0)
            self.cv_udif_name_e[cv_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.cv_udif_name_e[cv_udie_frame_loop].grid()    

        
        if not (self.cv_udif_type):
            self.cv_udif_type = Label(self.cv_udif_frame, font=MyFontH2, text="Signal Type", bg='goldenrod')
            self.cv_udif_type.grid(row=0, column=1, sticky='WE')
            self.cv_udif_type.rowconfigure(0, weight=1)
        else:
            self.cv_udif_type.grid()

        self.cv_udif_type_e.append([])
        if not (self.cv_udif_type_e[cv_udie_frame_loop]):
            self.cv_udif_type_e[cv_udie_frame_loop] = Entry(self.cv_udif_frame, font=MyFontH2)
            self.cv_udif_type_e[cv_udie_frame_loop].grid(row=cv_udie_frame_loop, column=1)
            self.cv_udif_type_e[cv_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.cv_udif_type_e[cv_udie_frame_loop].grid()

       
        if not (self.cv_udif_le):
            self.cv_udif_le = Label(self.cv_udif_frame, font=MyFontH2, text="Packed Elements", bg='goldenrod')
            self.cv_udif_le.grid(row=0, column=2, sticky='WE')
            self.cv_udif_le.rowconfigure(0, weight=1)
        else:
            self.cv_udif_le.grid()

        self.cv_udif_le_e.append([])
        if not (self.cv_udif_le_e[cv_udie_frame_loop]):
            self.cv_udif_le_e[cv_udie_frame_loop] = Entry(self.cv_udif_frame, font=MyFontH2)
            self.cv_udif_le_e[cv_udie_frame_loop].grid(row=cv_udie_frame_loop, column=2)
            self.cv_udif_le_e[cv_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.cv_udif_le_e[cv_udie_frame_loop].grid()


        if not (self.cv_udif_re):
            self.cv_udif_re = Label(self.cv_udif_frame, font=MyFontH2, text="Un Packed Elements", bg='goldenrod')
            self.cv_udif_re.grid(row=0, column=3, sticky='WE')
            self.cv_udif_re.rowconfigure(0, weight=1)
        else:
            self.cv_udif_re.grid()

        self.cv_udif_re_e.append([])
        if not (self.cv_udif_re_e[cv_udie_frame_loop]):
            self.cv_udif_re_e[cv_udie_frame_loop] = Entry(self.cv_udif_frame, font=MyFontH2)
            self.cv_udif_re_e[cv_udie_frame_loop].grid(row=cv_udie_frame_loop, column=3)
            self.cv_udif_re_e[cv_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.cv_udif_re_e[cv_udie_frame_loop].grid()


        if not (self.cv_udif_cb):
            self.cv_udif_cb = Label(self.cv_udif_frame, font=MyFontH2, text="Clocking Block", bg='goldenrod')
            self.cv_udif_cb.grid(row=0, column=4, sticky='WE')
            self.cv_udif_cb.rowconfigure(0, weight=1)
        else:
            self.cv_udif_cb.grid()

        self.cv_udif_cb_e.append([])
        if not (self.cv_udif_cb_e[cv_udie_frame_loop]):
            self.cv_udif_cb_e[cv_udie_frame_loop] = Entry(self.cv_udif_frame, font=MyFontH2)
            self.cv_udif_cb_e[cv_udie_frame_loop].grid(row=cv_udie_frame_loop, column=4)
            self.cv_udif_cb_e[cv_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.cv_udif_cb_e[cv_udie_frame_loop].grid()


        if not (self.cv_udif_mp):
            self.cv_udif_mp = Label(self.cv_udif_frame, font=MyFontH2, text="Modport", bg='goldenrod')
            self.cv_udif_mp.grid(row=0, column=5, sticky='WE')
            self.cv_udif_mp.rowconfigure(0, weight=1)
        else:
            self.cv_udif_mp.grid()

        self.cv_udif_mp_e.append([])
        if not (self.cv_udif_mp_e[cv_udie_frame_loop]):
            self.cv_udif_mp_e[cv_udie_frame_loop] = Entry(self.cv_udif_frame, font=MyFontH2)
            self.cv_udif_mp_e[cv_udie_frame_loop].grid(row=cv_udie_frame_loop, column=5)
            self.cv_udif_mp_e[cv_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.cv_udif_mp_e[cv_udie_frame_loop].grid() 
    
        self.cv_udi_nxt = Button(root, font=MyFontBtn, background="IndianRed1", activebackground="IndianRed3", text="NEXT INTERFACE CONFIG", command=self.cv_udie_next_interface_config)
        self.cv_udi_nxt.grid(row=38, column=0, sticky='WE')
        self.cv_udi_nxt.rowconfigure(38,weight=1)
        
        self.cv_udi_done = Button(root, font=MyFontBtn, background="sienna1", activebackground="sienna3", text="DONE INTERFACE CONFIG", command=self.cv_udie_done_interface_config)
        self.cv_udi_done.pack(side=RIGHT)
        self.cv_udi_done.grid(row=38, column=1, sticky='WE')
        self.cv_udi_done.rowconfigure(38,weight=1)

    def cv_load_interface(self):
        global cv_agt_selected
        global cv_agt_selected_started
        global cv_agt_intf_cnt
        global cv_agt_intf_cnt_tmp
        global cv_interface_pkg

        self.cv_udi_kill_all_kcb()
        self.cv_load_interface_kcb();
        self.generate_button_cb();
        self.exit_button_cb();
        self.return_button_cb();
        self.next_agt_cfg_btn_kcb();
       
        if cv_agt_selected_started:
            cv_agt_intf_cnt_tmp += 1

        if not (self.cvl4):
            self.cvl4 = Label(root, font=MyFontH2, text="Choose the Interface Spreadsheet To Load: ")
            self.cvl4.grid(row=37, column=0, sticky='W')
            self.cvl4.rowconfigure(37,weight=1)
        else:
            self.cvl4.grid()
                
        if not (self.cve2):    
            self.cve2 = Entry(root, font=MyFontH2, bg="goldenrod")
            self.cve2.delete(0, END)
            self.cve2.insert(0, 'Right Click To Load-Left Click To Enter')
            self.cve2.bind('<Button-3>', self.cv_load_interface_file_dialog)
            self.cve2.bind('<Button-1>', self.cv_load_interface_file_path)
            self.cve2.grid(row=37, column=1, sticky='WE')
            self.cve2.rowconfigure(37,weight=1)
        else:
            self.cve2.grid_forget(); self.cve2 = None
            self.cve2 = Entry(root, font=MyFontH2)
            self.cve2.delete(0, END)
            self.cve2.insert(0, 'Right Click To Load-Left Click To Enter')
            self.cve2.bind('<Button-3>', self.cv_load_interface_file_dialog)
            self.cve2.bind('<Button-1>', self.cv_load_interface_file_path)
            self.cve2.grid(row=37, column=1, sticky='WE')
            self.cve2.rowconfigure(37,weight=1)
        
        self.return_button_create_cb(2);
        
        self.cv_udi_done = Button(root, font=MyFontH2, background="sienna1", activebackground="sienna3", text="DONE INTERFACE CONFIG", command=self.cv_udie_done_interface_config)
        self.cv_udi_done.grid(row=40, column=1, sticky='WE')
        self.cv_udi_done.rowconfigure(40,weight=1)

    def cv_load_interface_file_dialog(self, *args):
        self.cve2.delete(0, END)
        #self.cve2.insert(0, tkFileDialog.askopenfilename(initialdir = ".",title = "Select file",filetypes = (("xlsx files","*.xlsx"),("all files","*.*"))))
        self.cve2.insert(0, filedialog.askopenfilename(initialdir = ".",title = "Select file",filetypes = (("xlsx files","*.xlsx"),("all files","*.*"))))
    
    def cv_load_interface_file_path(self, *args):
        if self.cve2.get() == 'Right Click To Load-Left Click To Enter':
            self.cve2.delete(0, END)
            self.cve2.insert(0, '')
        else:
            self.cve2.insert(0, '')

    def cv_udie_next_interface_config(self):
        global cv_udie_loop
        global cv_udie_frame_loop

        cv_udie_loop += 1;
        cv_udie_frame_loop += 1;
        self.cv_udi_nxt_kcb();
        self.cv_udi_done_kcb();

        # self.cv_udie.append(Entry(root, font=MyFontH2, width=43, bg="goldenrod"))
        # self.cv_udie[cv_udie_loop].delete(0, END)
        # self.cv_udie[cv_udie_loop].insert(0, 'Enter Signal Name, Type, Size. For More Options, Click User Tips!')
        # self.cv_udie[cv_udie_loop].bind('<Button-1>', self.cv_udie_entry_click)
        # self.cv_udie[cv_udie_loop].grid(row=37+cv_udie_loop, column=0, columnspan=2, sticky='WE')
        # self.cv_udie[cv_udie_loop].rowconfigure(37+cv_udie_loop,weight=1)
       
        self.cv_udif_name_e.append([])
        if not (self.cv_udif_name_e[cv_udie_frame_loop]):
            self.cv_udif_name_e[cv_udie_frame_loop] = Entry(self.cv_udif_frame, font=MyFontH2)
            self.cv_udif_name_e[cv_udie_frame_loop].grid(row=cv_udie_frame_loop, column=0)
            self.cv_udif_name_e[cv_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.cv_udif_name_e[cv_udie_frame_loop].grid()    

        
        self.cv_udif_type_e.append([])
        if not (self.cv_udif_type_e[cv_udie_frame_loop]):
            self.cv_udif_type_e[cv_udie_frame_loop] = Entry(self.cv_udif_frame, font=MyFontH2)
            self.cv_udif_type_e[cv_udie_frame_loop].grid(row=cv_udie_frame_loop, column=1)
            self.cv_udif_type_e[cv_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.cv_udif_type_e[cv_udie_frame_loop].grid()

       
        self.cv_udif_le_e.append([])
        if not (self.cv_udif_le_e[cv_udie_frame_loop]):
            self.cv_udif_le_e[cv_udie_frame_loop] = Entry(self.cv_udif_frame, font=MyFontH2)
            self.cv_udif_le_e[cv_udie_frame_loop].grid(row=cv_udie_frame_loop, column=2)
            self.cv_udif_le_e[cv_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.cv_udif_le_e[cv_udie_frame_loop].grid()


        self.cv_udif_re_e.append([])
        if not (self.cv_udif_re_e[cv_udie_frame_loop]):
            self.cv_udif_re_e[cv_udie_frame_loop] = Entry(self.cv_udif_frame, font=MyFontH2)
            self.cv_udif_re_e[cv_udie_frame_loop].grid(row=cv_udie_frame_loop, column=3)
            self.cv_udif_re_e[cv_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.cv_udif_re_e[cv_udie_frame_loop].grid()


        self.cv_udif_cb_e.append([])
        if not (self.cv_udif_cb_e[cv_udie_frame_loop]):
            self.cv_udif_cb_e[cv_udie_frame_loop] = Entry(self.cv_udif_frame, font=MyFontH2)
            self.cv_udif_cb_e[cv_udie_frame_loop].grid(row=cv_udie_frame_loop, column=4)
            self.cv_udif_cb_e[cv_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.cv_udif_cb_e.grid()


        self.cv_udif_mp_e.append([])
        if not (self.cv_udif_mp_e[cv_udie_frame_loop]):
            self.cv_udif_mp_e[cv_udie_frame_loop] = Entry(self.cv_udif_frame, font=MyFontH2)
            self.cv_udif_mp_e[cv_udie_frame_loop].grid(row=cv_udie_frame_loop, column=5)
            self.cv_udif_mp_e[cv_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.cv_udif_mp_e.grid()

        self.cv_udi_nxt = Button(root, font=MyFontBtn, background="IndianRed1", activebackground="IndianRed3", text="NEXT INTERFACE CONFIG", command=self.cv_udie_next_interface_config)
        self.cv_udi_nxt.grid(row=38+cv_udie_loop, column=0, sticky='WE')
        self.cv_udi_nxt.rowconfigure(38+cv_udie_loop,weight=1)
        
        self.cv_udi_done = Button(root, font=MyFontBtn, background="sienna1", activebackground="sienna3", text="DONE INTERFACE CONFIG", command=self.cv_udie_done_interface_config)
        self.cv_udi_done.grid(row=38+cv_udie_loop, column=1, sticky='WE')
        self.cv_udi_done.rowconfigure(38+cv_udie_loop,weight=1)
    
    def cv_udie_done_interface_config(self):
        global cv_agt_selected_started
        global cv_agt_intf_cnt_tmp
        global cv_interface_pkg
        global cv_agt_selected_started
        global cv_agt_selected

        global cv_udie_loop
        global cv_udie_frame_loop
        global cv_udie_int_cfg_array 
        global cv_udie_int_cfg_list 
        global cv_udie_intf_cfg_array 
        global cv_udie_clock_cfg_array 
        global cv_udie_cb_cfg_array 
        global cv_udie_mp_cfg_array 
        global cv_udie_tmp_var
        global cv_udie_cb_cnt
        global cv_udie_mp_cnt
        global cv_udie_cb_element_loop
        global cv_udie_mp_element_loop
        global cv_udie_cb_element_loop_tmp
        global cv_udie_mp_element_loop_tmp
        global cv_agt_loop_chk       
        global le 
        global ree
        global cv_element_loop

        log.debug("Executing Function: cv_udie_done_interface_config\n")
        log.debug("@Start of cv_udie_done_interface_config: Value of cvagt_val_loop %d cvagt_val_loop_tmp %d"%(cvagt_val_loop, cvagt_val_loop_tmp))
        log.debug("@Start of cv_udie_done_interface_config: Value of cv_agt_intf_cnt %d cv_agt_intf_cnt_tmp %d"%(cv_agt_intf_cnt, cv_agt_intf_cnt_tmp))
        log.debug("@Start of cv_udie_done_interface_config: value of cv_agt_loop_chk %d"%cv_agt_loop_chk)

        if(cvagt_val_loop_tmp < cvagt_val_loop):
            if not (self.cv_next_agt_cfg_button): 
                self.cv_next_agt_cfg_button = Button(root, font=MyFontBtn, background="mediumpurple1", activebackground="purple2", text="ENTER NEXT AGENT CONFIGURATION", command=self.cv_next_agt_cfg_button_code, highlightbackground='black', highlightthickness='2')    
                self.cv_next_agt_cfg_button.grid(row=40, column=1, sticky='WE')
                self.cv_next_agt_cfg_button.rowconfigure(40,weight=1)
            else:
                self.cv_next_agt_cfg_button.grid()
            # Adding the Return Button : Vimo : 071818|WED
            self.return_button_create_cb(2);
        
        cv_udie_cb_element_loop_tmp = 0
        cv_udie_mp_element_loop_tmp = 0

        if self.cv_choose_int_list.get(self.cv_choose_int_val.get())==3:
            # load_xls_file_path = self.sce2.get()    
            load_xls_file_path_tmp = (self.cve2.get()).split(",") 
           
            if len(load_xls_file_path_tmp)>1:
                load_xls_file_path = str(load_xls_file_path_tmp[0]).strip()
                search_user_sheet  = str(load_xls_file_path_tmp[1]).strip()
            else:
                load_xls_file_path = str(load_xls_file_path_tmp[0])
                search_user_sheet  = None 
            log.debug("Value of load_xls_file_path %s search_user_sheet %s"%(load_xls_file_path,search_user_sheet))

            if not os.path.isfile(load_xls_file_path):
                log.error("Please Load a Proper Interface Spreadsheet For Generating The Output\n")

            # Not Opening and then Loading, Just Loading: 01032021SUN
            # load_xls_file = open(load_xls_file_path, "r") 
            # wb = load_workbook(load_xls_file) 
            wb = load_workbook(load_xls_file_path) 

            #sheet = wb.get_sheet_names()
            sheet = wb.sheetnames
            for ws in sheet:
                log.debug("Name of the sheet is : for %s"%ws)
                if search_user_sheet != None:
                    log.debug("into search_user_sheet %s ws %s"%(search_user_sheet,ws))
                    if ws == search_user_sheet:
                        #sheet = wb.get_sheet_by_name(ws)
                        sheet = wb[ws]
                        log.debug("Name of the sheet selected is %s"%sheet) 
                        break
                elif ws == "Sheet1":
                    #sheet = wb.get_sheet_by_name(ws)
                    sheet = wb[ws]
                    log.debug("Name of the sheet selected is %s"%sheet)
                    break
                else:
                    continue

            #if wb.active <> sheet:
            if wb.active != sheet:
                log.info("Required Interface Definition Sheet Is Not Found In Spreadsheet. Please Re-load Proper File!\n")

            #sc_udie_frame_loop = sheet.max_row-1
            log.debug("Name of the sheet is %s"% sheet) 
            cv_udie_frame_loop = len(sheet['A'])
            #sc_udie_frame_loop -= 1
            log.debug("Value of cv_udie_frame_loop from spreadsheet is %d"% cv_udie_frame_loop)

        # Defining the Array For Interface To Get The Configuration
        cv_udie_int_cfg_list = []
        
        # cv_udie_int_cfg_array = [[] for x in range(cv_udie_loop+1)]
        if self.cv_choose_int_list.get(self.cv_choose_int_val.get())==2:
            cv_udie_int_cfg_array = [[] for x in range(cv_udie_frame_loop)]
        elif self.cv_choose_int_list.get(self.cv_choose_int_val.get())==3:
            cv_udie_int_cfg_array = [[] for x in range(cv_udie_frame_loop-1)]
        log.debug("1. Value of cv_udie_int_cfg_array %s"% cv_udie_int_cfg_array)

        # if ((cvagt_val_loop_tmp == 1) and (cvagt_val_loop_tmp != cv_agt_loop_chk)):
        if ((cv_agt_loop_chk == 0) and (cvagt_val_loop_tmp != cv_agt_loop_chk)):
            cv_udie_cb_cfg_array = []
            cv_udie_clock_cfg_array = []
            cv_udie_mp_cfg_array = []
            cv_udie_cb_element_loop = [] 
            cv_udie_mp_element_loop = [] 
            cv_udie_intf_cfg_array = []
            # cv_udie_intf_cfg_array.append([])
            log.debug("Value of cvagt_val_loop_tmp %d"%cvagt_val_loop_tmp)
            log.debug("1. Value of cv_udie_clock_cfg_array %s"% cv_udie_clock_cfg_array)
            log.debug("1. Value of cv_udie_cb_cfg_array %s"% cv_udie_cb_cfg_array)
            log.debug("1. Value of cv_udie_mp_cfg_array %s"% cv_udie_mp_cfg_array)
            log.debug("1. Value of cv_udie_cb_element_loop %s"% cv_udie_cb_element_loop)
            log.debug("1. Value of cv_udie_mp_element_loop %s"% cv_udie_mp_element_loop)

        if (cvagt_val_loop_tmp == cv_agt_loop_chk):
            del cv_udie_cb_cfg_array[cvagt_val_loop_tmp-1]
            del cv_udie_clock_cfg_array[cvagt_val_loop_tmp-1]
            del cv_udie_mp_cfg_array[cvagt_val_loop_tmp-1]
            del cv_udie_cb_element_loop[cvagt_val_loop_tmp-1] 
            del cv_udie_mp_element_loop[cvagt_val_loop_tmp-1]
            del cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1]
            cv_agt_loop_chk = cv_agt_loop_chk-1

        if (cvagt_val_loop_tmp != cv_agt_loop_chk):
            cv_udie_cb_cfg_array.append([])
            cv_udie_clock_cfg_array.append([])
            cv_udie_mp_cfg_array.append([])
            cv_udie_cb_element_loop.append([])
            cv_udie_mp_element_loop.append([])
            log.debug("2. Value of cvagt_val_loop %d cvagt_val_loop_tmp %d"%(cvagt_val_loop, cvagt_val_loop_tmp))
            log.debug("2. Value of cv_udie_clock_cfg_array %s"% cv_udie_clock_cfg_array)
            log.debug("2. Value of cv_udie_cb_cfg_array %s"% cv_udie_cb_cfg_array)
            log.debug("2. Value of cv_udie_mp_cfg_array %s"% cv_udie_mp_cfg_array)
            log.debug("2. Value of cv_udie_cb_element_loop %s"% cv_udie_cb_element_loop)
            log.debug("2. Value of cv_udie_mp_element_loop %s"% cv_udie_mp_element_loop)
            
            for i in range(0, (cvagt_val_loop_tmp-1)):
                # if not cv_udie_intf_cfg_array:
                #     cv_udie_intf_cfg_array.append([])
                # elif cv_udie_intf_cfg_array[i]:
                #     cv_udie_intf_cfg_array.append([])
                #     # print "For Loop: Value of cv_udie_intf_cfg_array is ", cv_udie_intf_cfg_array

                intf_len = len(cv_udie_intf_cfg_array)
                if not intf_len:
                    cv_udie_intf_cfg_array.append([])
                elif (intf_len < (cvagt_val_loop_tmp-1)):
                    if ((cv_udie_intf_cfg_array[intf_len-1] == []) or (cv_udie_intf_cfg_array[intf_len-1])):
                        cv_udie_intf_cfg_array.append([])
                log.debug("Value of intf_len is %d"%intf_len)
                log.debug("Value of cv_udie_intf_cfg_array is %s"%cv_udie_intf_cfg_array) 
    
                
                log.debug("B4 Value of cv_udie_clock_cfg_array is %s"% cv_udie_clock_cfg_array )
                clock_len = len(cv_udie_clock_cfg_array)
                if not clock_len:
                    cv_udie_clock_cfg_array.append([])
                elif (clock_len <= (cvagt_val_loop_tmp-1)):
                    log.debug("Into clock_len elif condition and cv_udie_clock_cfg_array is %s"%cv_udie_clock_cfg_array)
                    if ((cv_udie_clock_cfg_array[clock_len-1] == []) or (cv_udie_clock_cfg_array[clock_len-1])):
                        cv_udie_clock_cfg_array.append([])
                log.debug("Value of clock_len is %d"%clock_len) 
                log.debug("A8 Value of cv_udie_clock_cfg_array is %s"% cv_udie_clock_cfg_array)
                 
                
                log.debug("B4 Value of cv_udie_cb_cfg_array is %s"% cv_udie_cb_cfg_array)
                cb_len = len(cv_udie_cb_cfg_array)
                if not cb_len:
                    cv_udie_cb_cfg_array.append([])
                elif (cb_len <= (cvagt_val_loop_tmp-1)):
                    log.debug("Into cb_len elif condition and cv_udie_cb_cfg_array is %s\n"%cv_udie_cb_cfg_array)
                    if ((cv_udie_cb_cfg_array[cb_len-1] == []) or (cv_udie_cb_cfg_array[cb_len-1])):
                        log.debug("Appending array to cv_udie_cb_cfg_array")
                        cv_udie_cb_cfg_array.append([])
                log.debug("Value of cb_len is %d"% cb_len )
                log.debug("A8 Value of cv_udie_cb_cfg_array is %s"% cv_udie_cb_cfg_array )


                cb_ele_len = len(cv_udie_cb_element_loop)
                if not cb_ele_len:
                    cv_udie_cb_element_loop.append([])
                elif (cb_ele_len <= (cvagt_val_loop_tmp-1)):
                    if ((cv_udie_cb_element_loop[cb_ele_len-1] == []) or (cv_udie_cb_element_loop[cb_ele_len-1])):
                        cv_udie_cb_element_loop.append([])


                log.debug("B4 Value of cv_udie_mp_cfg_array is %s"%cv_udie_mp_cfg_array) 
                mp_len = len(cv_udie_mp_cfg_array)
                if not mp_len:
                    cv_udie_mp_cfg_array.append([])
                elif (mp_len <= (cvagt_val_loop_tmp-1)):
                    log.debug("Into mp_len elif condition and cv_udie_mp_cfg_array is %s\n"%cv_udie_mp_cfg_array)
                    if ((cv_udie_mp_cfg_array[mp_len-1] == []) or (cv_udie_mp_cfg_array[mp_len-1])):
                        log.debug("Appending array to cv_udie_mp_cfg_array")
                        cv_udie_mp_cfg_array.append([])
                log.debug("Value of mp_len is %d"% mp_len )
                log.debug("A8 Value of cv_udie_mp_cfg_array is %s"% cv_udie_mp_cfg_array)


                mp_ele_len = len(cv_udie_mp_element_loop)
                if not mp_ele_len:
                    cv_udie_mp_element_loop.append([])
                elif (mp_ele_len <= (cvagt_val_loop_tmp-1)):
                    if ((cv_udie_mp_element_loop[mp_ele_len-1] == []) or (cv_udie_mp_element_loop[mp_ele_len-1])):
                        cv_udie_mp_element_loop.append([])
            
                log.debug("3. Value of cvagt_val_loop %d cvagt_val_loop_tmp %d"%(cvagt_val_loop, cvagt_val_loop_tmp))
                log.debug("3. Value of cv_udie_clock_cfg_array %s"% cv_udie_clock_cfg_array)
                log.debug("3. Value of cv_udie_cb_cfg_array %s"% cv_udie_cb_cfg_array)
                log.debug("3. Value of cv_udie_mp_cfg_array %s"% cv_udie_mp_cfg_array)
                log.debug("3. Value of cv_udie_cb_element_loop %s"% cv_udie_cb_element_loop)
                log.debug("3. Value of cv_udie_mp_element_loop %s"% cv_udie_mp_element_loop)
            
            # Changing the Range from 3 to 6 To hold elements - Vimo : 081616|TUE
            # cv_udie_intf_cfg_array.append([["" for x in range(6)] for x in range(cv_udie_loop+1)])
            
            if self.cv_choose_int_list.get(self.cv_choose_int_val.get())==2:
                cv_udie_intf_cfg_array.append([[] for x in range(cv_udie_frame_loop)])
            elif self.cv_choose_int_list.get(self.cv_choose_int_val.get())==3:
                cv_udie_intf_cfg_array.append([[] for x in range(cv_udie_frame_loop-1)])
            
            cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1].insert(0,[])
            cv_agt_loop_chk = cvagt_val_loop_tmp
        
        log.debug("Value of cv_udie_cb_cfg_array %s"%cv_udie_cb_cfg_array)
        log.debug("Value of cvagt_val_loop_tmp %s"% cvagt_val_loop_tmp)
        log.debug("2 Value of cv_udie_intf_cfg_array %s"% cv_udie_intf_cfg_array)
            
        #cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1][0] = (cv_udie_loop+1) 
        if self.cv_choose_int_list.get(self.cv_choose_int_val.get())==2:
            cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1][0] = (cv_udie_frame_loop) 
        elif self.cv_choose_int_list.get(self.cv_choose_int_val.get())==3:
            cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1][0] = (cv_udie_frame_loop-1)
        
        log.debug("31 Value of cv_udie_intf_cfg_array %s"% cv_udie_intf_cfg_array)
        log.debug("Value of cv_agt_loop_chk %d"% cv_agt_loop_chk)
        log.debug("Value of cv_udie_loop %d"% cv_udie_loop )

        if self.cv_choose_int_list.get(self.cv_choose_int_val.get())==2:
            #for n in range(cv_udie_loop+1):
            for n in range(cv_udie_frame_loop):
                # cv_udie_int_cfg_list.append(self.cv_udie[n].get())
                # cv_udie_int_cfg_array[n] = cv_udie_int_cfg_list[n].split(",")
               
                cv_udie_int_cfg_array[n].append(self.cv_udif_name_e[n+1].get())
                cv_udie_int_cfg_array[n].append(self.cv_udif_type_e[n+1].get())
                if (self.cv_udif_le_e[n+1].get() != ''):
                    cv_udie_int_cfg_array[n].append('le')
                    cv_udif_le_tmp = (self.cv_udif_le_e[n+1].get()).split(",")
                    for i in range (len(cv_udif_le_tmp)):
                        cv_udie_int_cfg_array[n].append(cv_udif_le_tmp[i])
                if (self.cv_udif_re_e[n+1].get() != ''):
                    cv_udie_int_cfg_array[n].append('ree')
                    cv_udif_re_tmp = (self.cv_udif_re_e[n+1].get()).split(",")
                    for i in range (len(cv_udif_re_tmp)):
                        cv_udie_int_cfg_array[n].append(cv_udif_re_tmp[i])
                if (self.cv_udif_cb_e[n+1].get() != ''):
                    cv_udif_cb_tmp = (self.cv_udif_cb_e[n+1].get()).split(",")
                    for i in range (len(cv_udif_cb_tmp)):
                        cv_udie_int_cfg_array[n].append(cv_udif_cb_tmp[i])
                if (self.cv_udif_mp_e[n+1].get() != ''):
                    cv_udif_mp_tmp = (self.cv_udif_mp_e[n+1].get()).split(",")
                    for i in range (len(cv_udif_mp_tmp)):
                        cv_udie_int_cfg_array[n].append(cv_udif_mp_tmp[i])
                    
                log.debug("Value of cv_udie_int_cfg_array %s"%cv_udie_int_cfg_array)
                log.debug("Count of cb is  %d"% len(cv_udie_int_cfg_array[n]))
                log.debug("Value of cv_udie_frame_loop in cv_udie_done_interface_config is %d"% cv_udie_frame_loop)
                
                cv_udie_cb_cnt = len(cv_udie_int_cfg_array[n])
             
                # for x in range(cv_udie_cb_cnt):
                #     if ("le" == cv_udie_int_cfg_array[n][x]):
                #         le = 1
                #     if ("ree" == cv_udie_int_cfg_array[n][x]):
                #         ree = 1

                # if ((le == 1 and ree == 0) or (le == 0 and ree == 1)):
                #     cv_element_loop = 4
                # elif (le == 1 and ree == 1):
                #     cv_element_loop = 6
                # else: 
                #     cv_element_loop = 3
                
                # Loading The Value of Signal Name, Signal Type And Signal Size For Each Agents Interface
                # if (cv_element_loop == 3):
                #     cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1][n+1][0] = str(cv_udie_int_cfg_array[n][0]).translate(mt_rm_sym)
                #     cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1][n+1][1] = str(cv_udie_int_cfg_array[n][1]).translate(mt_rm_sym)
                #     cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1][n+1][2] = str(cv_udie_int_cfg_array[n][2]).translate(mt_rm_sym)
                # elif (cv_element_loop == 4):
                #     cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1][n+1][0] = str(cv_udie_int_cfg_array[n][0]).translate(mt_rm_sym)
                #     cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1][n+1][1] = str(cv_udie_int_cfg_array[n][1]).translate(mt_rm_sym)
                #     cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1][n+1][2] = str(cv_udie_int_cfg_array[n][2]).translate(mt_rm_sym)
                #     cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1][n+1][3] = str(cv_udie_int_cfg_array[n][3]).translate(mt_rm_sym)
                # elif (cv_element_loop == 6):
                #     cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1][n+1][0] = str(cv_udie_int_cfg_array[n][0]).translate(mt_rm_sym)
                #     cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1][n+1][1] = str(cv_udie_int_cfg_array[n][1]).translate(mt_rm_sym)
                #     cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1][n+1][2] = str(cv_udie_int_cfg_array[n][2]).translate(mt_rm_sym)
                #     cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1][n+1][3] = str(cv_udie_int_cfg_array[n][3]).translate(mt_rm_sym)
                #     cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1][n+1][4] = str(cv_udie_int_cfg_array[n][4]).translate(mt_rm_sym)
                #     cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1][n+1][5] = str(cv_udie_int_cfg_array[n][5]).translate(mt_rm_sym)
               
                
                # cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1][n+1] = str(cv_udie_int_cfg_array[n]).translate(mt_rm_sym)
                cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1][n+1] = cv_udie_int_cfg_array[n]
                # print "3 Value of cv_udie_intf_cfg_array", cv_udie_intf_cfg_array

                #  for i in range (1, int(cv_udie_cb_cnt)):
                #      if "_cb" in cv_udie_int_cfg_array[n][i]:
                #          # # print "1st For Loop", cv_udie_cb_cfg_array
                #          # # print "Type of cb is",cv_udie_int_cfg_array[n][i]
                #         
                #          # # print "boo: Value of cv_udie_int_cfg_array is ", cv_udie_int_cfg_array
                #          # # print "baa: Value of cv_udie_cb_cfg_array is ", cv_udie_cb_cfg_array

                #          out_cb = self.in_nested_list(cv_udie_int_cfg_array[n][i], cv_udie_cb_cfg_array[cvagt_val_loop_tmp-1])
                #          if out_cb:
                #              # # print "Found - Match cb in cv_udie_cb_cfg_array"
                #              out_cb.append([cv_udie_int_cfg_array[n][0]])
                #              out_cb.append([cv_udie_int_cfg_array[n][i+1]])
                #              # # print "2nd If Match Loop", cv_udie_cb_cfg_array
                #          else:
                #              cv_udie_cb_cfg_array[cvagt_val_loop_tmp-1].append([[cv_udie_int_cfg_array[n][i]], [cv_udie_int_cfg_array[n][0]], [cv_udie_int_cfg_array[n][i+1]]])
                #              # cv_udie_cb_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n][i]])
                #              # cv_udie_cb_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n][0]])
                #              # cv_udie_cb_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n][i+1]])
                #              # # print "3rd else loop", cv_udie_cb_cfg_array
                #              cv_udie_cb_element_loop_tmp += 1
                #              cv_udie_cb_element_loop[cvagt_val_loop_tmp-1] = cv_udie_cb_element_loop_tmp
                #      elif "_mp" in cv_udie_int_cfg_array[n][i]:
                #          # # print "1st For Loop", cv_udie_mp_cfg_array
                #          # # print "Type of mp is",cv_udie_int_cfg_array[n][i]
                #          out_mp = self.in_nested_list(cv_udie_int_cfg_array[n][i], cv_udie_mp_cfg_array[cvagt_val_loop_tmp-1])
                #          if out_mp: 
                #              # # print "Found - Match cb in cv_udie_mp_cfg_array"
                #              out_mp.append([cv_udie_int_cfg_array[n][0]])
                #              out_mp.append([cv_udie_int_cfg_array[n][i+1]])
                #              # # print "2nd If Match Loop", cv_udie_mp_cfg_array
                #          else:
                #              cv_udie_mp_cfg_array[cvagt_val_loop_tmp-1].append([[cv_udie_int_cfg_array[n][i]], [cv_udie_int_cfg_array[n][0]], [cv_udie_int_cfg_array[n][i+1]]])
                #              # cv_udie_mp_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n][i]])
                #              # cv_udie_mp_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n][0]])
                #              # cv_udie_mp_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n][i+1]])
                #              # # print "3rd else loop", cv_udie_mp_cfg_array
                #              cv_udie_mp_element_loop_tmp += 1
                #              cv_udie_mp_element_loop[cvagt_val_loop_tmp-1] = cv_udie_mp_element_loop_tmp
                #      # Removing The Else Part as this keeps printing for non cb or mp variables - Vimo - 050516
                #      # else: 
                #      #     # print "Not Found cb or mp"
               
                
                for i in range (1, int(cv_udie_cb_cnt)):
                # for i in range (cv_element_loop, int(cv_udie_cb_cnt)):
                    if "-clk" in cv_udie_int_cfg_array[n][i]:
                        log.debug("Value of cv_udie_int_cfg_array[n][i] %s"% cv_udie_int_cfg_array[n][i])
                        if "-clk" == cv_udie_int_cfg_array[n][i]:
                            if (self.cv_udif_cb_e[n+1].get() != '') and  (self.cv_udif_mp_e[n+1].get() != ''):
                                cv_udie_clock_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n][0], ''] + (self.cv_udif_cb_e[n+1].get()).split(",") + (self.cv_udif_mp_e[n+1].get()).split(","))
                            elif (self.cv_udif_cb_e[n+1].get() != '') and  (self.cv_udif_mp_e[n+1].get() == ''):
                                cv_udie_clock_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n][0], ''] + (self.cv_udif_cb_e[n+1].get()).split(","))
                            elif (self.cv_udif_cb_e[n+1].get() == '') and  (self.cv_udif_mp_e[n+1].get() != ''):
                                cv_udie_clock_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n][0], ''] + (self.cv_udif_mp_e[n+1].get()).split(","))
                            elif (self.cv_udif_cb_e[n+1].get() == '') and  (self.cv_udif_mp_e[n+1].get() == ''):
                                cv_udie_clock_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n][0], ''])
                            log.debug("value of cv_udie_clock_cfg_array-1 %s"% cv_udie_clock_cfg_array[cvagt_val_loop_tmp-1])
                            log.debug("value of cv_udie_clock_cfg_array-1-full %s"% cv_udie_clock_cfg_array)
                        elif "-clk" in cv_udie_int_cfg_array[n][i]:                        
                            if (self.cv_udif_cb_e[n+1].get() != '') and  (self.cv_udif_mp_e[n+1].get() != ''):
                                cv_udie_clock_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n][0], cv_udie_int_cfg_array[n][1].split("-")[0]] + (self.cv_udif_cb_e[n+1].get()).split(",") + (self.cv_udif_mp_e[n+1].get()).split(","))
                            elif (self.cv_udif_cb_e[n+1].get() != '') and  (self.cv_udif_mp_e[n+1].get() == ''):
                                cv_udie_clock_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n][0], cv_udie_int_cfg_array[n][1].split("-")[0]] + (self.cv_udif_cb_e[n+1].get()).split(","))
                            elif (self.cv_udif_cb_e[n+1].get() == '') and  (self.cv_udif_mp_e[n+1].get() != ''):
                                cv_udie_clock_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n][0], cv_udie_int_cfg_array[n][1].split("-")[0]] + (self.cv_udif_mp_e[n+1].get()).split(","))
                            elif (self.cv_udif_cb_e[n+1].get() == '') and  (self.cv_udif_mp_e[n+1].get() == ''):
                                cv_udie_clock_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n][0], ''])
                            log.debug("value of cv_udie_clock_cfg_array-1a %s"% cv_udie_clock_cfg_array[cvagt_val_loop_tmp-1])
                            log.debug("value of cv_udie_clock_cfg_array-1a-full %s"% cv_udie_clock_cfg_array)
                
                        log.debug("Value of cvagt_val_loop %d cvagt_val_loop_tmp %d"%(cvagt_val_loop, cvagt_val_loop_tmp))
                        log.debug("Value of cv_udie_clock_cfg_array %s"% cv_udie_clock_cfg_array)
                        log.debug("Value of cv_udie_cb_cfg_array %s"% cv_udie_cb_cfg_array)
                        log.debug("Value of cv_udie_mp_cfg_array %s"% cv_udie_mp_cfg_array)
                        log.debug("Value of cv_udie_cb_element_loop %s"% cv_udie_cb_element_loop)
                        log.debug("Value of cv_udie_mp_element_loop %s"% cv_udie_mp_element_loop)
                        break # The clocking and modport information is obtained for clock signal here itself
                    elif "_cb" in cv_udie_int_cfg_array[n][i]:
                        log.debug("1st For Loop - cv_udie_cb_cfg_array %s"% cv_udie_cb_cfg_array)
                        log.debug("Type of cb is %s"%cv_udie_int_cfg_array[n][i])
                        out_cb = self.in_nested_list(cv_udie_int_cfg_array[n][i], cv_udie_cb_cfg_array[cvagt_val_loop_tmp-1])
                        if out_cb:
                            out_cb.append([cv_udie_int_cfg_array[n][0]])
                            out_cb.append([cv_udie_int_cfg_array[n][i+1]])
                            log.debug("Value of out_cb %s"%out_cb)
                        else:
                            cv_udie_cb_cfg_array[cvagt_val_loop_tmp-1].append([[cv_udie_int_cfg_array[n][i]], [cv_udie_int_cfg_array[n][0]], [cv_udie_int_cfg_array[n][i+1]]])
                            log.debug("3rd else loop - cv_udie_cb_cfg_array %s"% cv_udie_cb_cfg_array)
                            cv_udie_cb_element_loop_tmp += 1
                            cv_udie_cb_element_loop[cvagt_val_loop_tmp-1] = cv_udie_cb_element_loop_tmp
                        log.debug("Value of cvagt_val_loop %d cvagt_val_loop_tmp %d"%(cvagt_val_loop, cvagt_val_loop_tmp))
                        log.debug("Value of cv_udie_clock_cfg_array %s"% cv_udie_clock_cfg_array)
                        log.debug("Value of cv_udie_cb_cfg_array %s"% cv_udie_cb_cfg_array)
                        log.debug("Value of cv_udie_mp_cfg_array %s"% cv_udie_mp_cfg_array)
                        log.debug("Value of cv_udie_cb_element_loop %s"% cv_udie_cb_element_loop)
                        log.debug("Value of cv_udie_mp_element_loop %s"% cv_udie_mp_element_loop)
                    elif "_mp" in cv_udie_int_cfg_array[n][i]:
                        log.debug("1st For Loop - cv_udie_mp_cfg_array %s"% cv_udie_mp_cfg_array)
                        log.debug("Type of mp is %s"%cv_udie_int_cfg_array[n][i])
                        out_mp = self.in_nested_list(cv_udie_int_cfg_array[n][i], cv_udie_mp_cfg_array[cvagt_val_loop_tmp-1])
                        if out_mp: 
                            out_mp.append([cv_udie_int_cfg_array[n][0]])
                            out_mp.append([cv_udie_int_cfg_array[n][i+1]])
                            log.debug("Value of out_mp %s"%out_mp)
                        else:
                            cv_udie_mp_cfg_array[cvagt_val_loop_tmp-1].append([[cv_udie_int_cfg_array[n][i]], [cv_udie_int_cfg_array[n][0]], [cv_udie_int_cfg_array[n][i+1]]])
                            log.debug("3rd else loop - cv_udie_mp_cfg_array %s"% cv_udie_mp_cfg_array)
                            cv_udie_mp_element_loop_tmp += 1
                            cv_udie_mp_element_loop[cvagt_val_loop_tmp-1] = cv_udie_mp_element_loop_tmp
                        log.debug("Value of cvagt_val_loop %d cvagt_val_loop_tmp %d"%(cvagt_val_loop, cvagt_val_loop_tmp))
                        log.debug("Value of cv_udie_clock_cfg_array %s"% cv_udie_clock_cfg_array)
                        log.debug("Value of cv_udie_cb_cfg_array %s"% cv_udie_cb_cfg_array)
                        log.debug("Value of cv_udie_mp_cfg_array %s"% cv_udie_mp_cfg_array)
                        log.debug("Value of cv_udie_cb_element_loop %s"% cv_udie_cb_element_loop)
                        log.debug("Value of cv_udie_mp_element_loop %s"% cv_udie_mp_element_loop)
                    # Removing The Else Part as this keeps printing for non cb or mp variables - Vimo - 050516
                    # else: 
                    #     # print "Not Found cb or mp"

                # Clearning The Global Variables
                le = 0
                ree = 0
                cv_element_loop = 0
                    
                log.debug("Value of cv_udie_cb_element_loop is %s"%cv_udie_cb_element_loop)
                log.debug("Value of cv_udie_mp_element_loop is %s"%cv_udie_mp_element_loop)
        
        elif self.cv_choose_int_list.get(self.cv_choose_int_val.get())==3:
            for n in range(1,cv_udie_frame_loop):
                cv_udie_int_cfg_array[n-1].append(str(sheet.cell(row=n+1, column=1).value))
                cv_udie_int_cfg_array[n-1].append(str(sheet.cell(row=n+1, column=2).value))
                
                if (sheet.cell(row=n+1, column=3).value != None):
                    cv_udie_int_cfg_array[n-1].append('le')
                    cv_udif_le_tmp = str(sheet.cell(row=n+1, column=3).value).split(",")
                    for i in range (len(cv_udif_le_tmp)):
                        cv_udie_int_cfg_array[n-1].append(str(cv_udif_le_tmp[i]).strip())
                if (sheet.cell(row=n+1, column=4).value != None):
                    cv_udie_int_cfg_array[n-1].append('ree')
                    cv_udif_re_tmp = (sheet.cell(row=n+1, column=4).value).split(",")
                    for i in range (len(cv_udif_re_tmp)):
                        cv_udie_int_cfg_array[n-1].append(str(cv_udif_re_tmp[i]).strip())
                if (sheet.cell(row=n+1, column=5).value != None):
                    cv_udif_cb_tmp = (sheet.cell(row=n+1, column=5).value).split(",")
                    for i in range (len(cv_udif_cb_tmp)):
                        cv_udie_int_cfg_array[n-1].append(str(cv_udif_cb_tmp[i]).strip())
                if (sheet.cell(row=n+1, column=6).value != None):
                    cv_udif_mp_tmp = (sheet.cell(row=n+1, column=6).value).split(",")
                    for i in range (len(cv_udif_mp_tmp)):
                        cv_udie_int_cfg_array[n-1].append(str(cv_udif_mp_tmp[i]).strip())
                    
                log.debug("Value of cv_udie_int_cfg_array %s"%cv_udie_int_cfg_array)
                log.debug("Count of cb is  %d"% len(cv_udie_int_cfg_array[n-1]))
                log.debug("Value of cv_udie_frame_loop in cv_udie_done_interface_config is %d"% cv_udie_frame_loop)
                cv_udie_cb_cnt = len(cv_udie_int_cfg_array[n-1])
              
                cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1][n] = cv_udie_int_cfg_array[n-1]
                log.debug("3 Value of cv_udie_intf_cfg_array %s"% cv_udie_intf_cfg_array )

                for i in range (1, int(cv_udie_cb_cnt)):
                    if "-clk" in cv_udie_int_cfg_array[n-1][i]:
                        log.debug("Value of cv_udie_int_cfg_array[n-1][i] %s"% cv_udie_int_cfg_array[n-1][i])
                        if "-clk" == cv_udie_int_cfg_array[n-1][i]:
                            if (sheet.cell(row=n+1, column=5).value != None) and (sheet.cell(row=n+1, column=6).value != None):
                                cv_udie_clock_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n-1][0], ''] + str(sheet.cell(row=n+1, column=5).value).split(",") + str(sheet.cell(row=n+1, column=6).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value != None) and (sheet.cell(row=n+1, column=6).value == None):
                                cv_udie_clock_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n-1][0], ''] + str(sheet.cell(row=n+1, column=5).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value == None) and (sheet.cell(row=n+1, column=6).value != None):
                                cv_udie_clock_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n-1][0], ''] + str(sheet.cell(row=n+1, column=6).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value == None) and (sheet.cell(row=n+1, column=6).value == None):
                                cv_udie_clock_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n-1][0], ''])
                            log.debug("value of cv_udie_clock_cfg_array-1 %s"% cv_udie_clock_cfg_array)
                        elif "-clk" in cv_udie_int_cfg_array[n-1][i]:                        
                            if (sheet.cell(row=n+1, column=5).value != None) and (sheet.cell(row=n+1, column=6).value != None):
                                cv_udie_clock_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n-1][0], cv_udie_int_cfg_array[n-1][1].split("-")[0]] + str(sheet.cell(row=n+1, column=5).value).split(",") + str(sheet.cell(row=n+1, column=6).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value != None) and (sheet.cell(row=n+1, column=6).value == None):
                                cv_udie_clock_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n-1][0], cv_udie_int_cfg_array[n-1][1].split("-")[0]] + str(sheet.cell(row=n+1, column=5).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value == None) and (sheet.cell(row=n+1, column=6).value != None):
                                cv_udie_clock_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n-1][0], cv_udie_int_cfg_array[n-1][1].split("-")[0]] + str(sheet.cell(row=n+1, column=6).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value == None) and (sheet.cell(row=n+1, column=6).value == None):
                                cv_udie_clock_cfg_array[cvagt_val_loop_tmp-1].append([cv_udie_int_cfg_array[n-1][0], ''])
                            log.debug("value of cv_udie_clock_cfg_array-1a %s"% cv_udie_clock_cfg_array)
                        log.debug("Value of cvagt_val_loop %d cvagt_val_loop_tmp %d"%(cvagt_val_loop, cvagt_val_loop_tmp))
                        log.debug("Value of cv_udie_clock_cfg_array %s"% cv_udie_clock_cfg_array)
                        log.debug("Value of cv_udie_cb_cfg_array %s"% cv_udie_cb_cfg_array)
                        log.debug("Value of cv_udie_mp_cfg_array %s"% cv_udie_mp_cfg_array)
                        log.debug("Value of cv_udie_cb_element_loop %s"% cv_udie_cb_element_loop)
                        log.debug("Value of cv_udie_mp_element_loop %s"% cv_udie_mp_element_loop)
                        break # The clocking and modport information is obtained for clock signal here itself
                    elif "_cb" in cv_udie_int_cfg_array[n-1][i]:
                        log.debug("1st For Loop %s"% cv_udie_cb_cfg_array)
                        log.debug("Type of cb is %s"%cv_udie_int_cfg_array[n-1][i])
                        out_cb = self.in_nested_list(cv_udie_int_cfg_array[n-1][i], cv_udie_cb_cfg_array[cvagt_val_loop_tmp-1])
                        if out_cb:
                            out_cb.append([cv_udie_int_cfg_array[n-1][0]])
                            out_cb.append([cv_udie_int_cfg_array[n-1][i+1]])
                            log.debug("Value of out_cb %s"%out_cb)
                        else:
                            cv_udie_cb_cfg_array[cvagt_val_loop_tmp-1].append([[cv_udie_int_cfg_array[n-1][i]], [cv_udie_int_cfg_array[n-1][0]], [cv_udie_int_cfg_array[n-1][i+1]]])
                            cv_udie_cb_element_loop_tmp += 1
                            cv_udie_cb_element_loop[cvagt_val_loop_tmp-1] = cv_udie_cb_element_loop_tmp
                        log.debug("Value of cvagt_val_loop %d cvagt_val_loop_tmp %d"%(cvagt_val_loop, cvagt_val_loop_tmp))
                        log.debug("Value of cv_udie_clock_cfg_array %s"% cv_udie_clock_cfg_array)
                        log.debug("Value of cv_udie_cb_cfg_array %s"% cv_udie_cb_cfg_array)
                        log.debug("Value of cv_udie_mp_cfg_array %s"% cv_udie_mp_cfg_array)
                        log.debug("Value of cv_udie_cb_element_loop %s"% cv_udie_cb_element_loop)
                        log.debug("Value of cv_udie_mp_element_loop %s"% cv_udie_mp_element_loop)
                    elif "_mp" in cv_udie_int_cfg_array[n-1][i]:
                        log.debug("1st For Loop %s"% cv_udie_mp_cfg_array)
                        log.debug("Type of mp is %s"%cv_udie_int_cfg_array[n-1][i])
                        out_mp = self.in_nested_list(cv_udie_int_cfg_array[n-1][i], cv_udie_mp_cfg_array[cvagt_val_loop_tmp-1])
                        if out_mp: 
                            out_mp.append([cv_udie_int_cfg_array[n-1][0]])
                            out_mp.append([cv_udie_int_cfg_array[n-1][i+1]])
                            log.debug("Value of out_mp %s"%out_mp)
                        else:
                            cv_udie_mp_cfg_array[cvagt_val_loop_tmp-1].append([[cv_udie_int_cfg_array[n-1][i]], [cv_udie_int_cfg_array[n-1][0]], [cv_udie_int_cfg_array[n-1][i+1]]])
                            log.debug("3rd else loop %s"% cv_udie_mp_cfg_array)
                            cv_udie_mp_element_loop_tmp += 1
                            cv_udie_mp_element_loop[cvagt_val_loop_tmp-1] = cv_udie_mp_element_loop_tmp
                        log.debug("Value of cvagt_val_loop %d cvagt_val_loop_tmp %d"%(cvagt_val_loop, cvagt_val_loop_tmp))
                        log.debug("Value of cv_udie_clock_cfg_array %s"% cv_udie_clock_cfg_array)
                        log.debug("Value of cv_udie_cb_cfg_array %s"% cv_udie_cb_cfg_array)
                        log.debug("Value of cv_udie_mp_cfg_array %s"% cv_udie_mp_cfg_array)
                        log.debug("Value of cv_udie_cb_element_loop %s"% cv_udie_cb_element_loop)
                        log.debug("Value of cv_udie_mp_element_loop %s"% cv_udie_mp_element_loop)
                    # Removing The Else Part as this keeps printing for non cb or mp variables - Vimo - 050516
                    # else: 
                    #     # print "Not Found cb or mp"

                # Clearning The Global Variables
                le = 0
                ree = 0
                cv_element_loop = 0
            
        log.debug("1. cv_udie_done_interface_config: cv_udie_frame_loop %d cv_agt_intf_cnt %d cv_agt_intf_cnt_tmp %d cv_interface_pkg %s"%(cv_udie_frame_loop, cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
        self.cv_udie_loop_kcb();
        self.cv_udi_nxt_kcb();
        self.cv_udif_frame_kcb();
        self.cv_udi_done_kcb();
        self.cv_load_interface_kcb();

        if cv_agt_selected_started:
            log.debug("2. cv_udie_done_interface_config: cv_udie_frame_loop %d cv_agt_intf_cnt %d cv_agt_intf_cnt_tmp %d cv_interface_pkg %s"%(cv_udie_frame_loop, cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
            if cv_interface_pkg[cvagt_val_loop_tmp-1][cv_agt_intf_cnt_tmp-1][1] == 2 or cv_interface_pkg[cvagt_val_loop_tmp-1][cv_agt_intf_cnt_tmp-1][1] == 3:
                cv_interface_pkg[cvagt_val_loop_tmp-1][cv_agt_intf_cnt_tmp-1].append(cv_udie_frame_loop)
                cv_interface_pkg[cvagt_val_loop_tmp-1][cv_agt_intf_cnt_tmp-1].append(cv_udie_intf_cfg_array[cvagt_val_loop_tmp-1])
                cv_interface_pkg[cvagt_val_loop_tmp-1][cv_agt_intf_cnt_tmp-1].append(cv_udie_clock_cfg_array[cvagt_val_loop_tmp-1])
                cv_interface_pkg[cvagt_val_loop_tmp-1][cv_agt_intf_cnt_tmp-1].append(cv_udie_cb_cfg_array[cvagt_val_loop_tmp-1])
                cv_interface_pkg[cvagt_val_loop_tmp-1][cv_agt_intf_cnt_tmp-1].append(cv_udie_mp_cfg_array[cvagt_val_loop_tmp-1])
            #cv_agt_intf_cnt_tmp += 1 
            
            if cv_agt_intf_cnt_tmp == cv_agt_intf_cnt:
                log.debug("3. cv_udie_done_interface_config: cv_udie_frame_loop %d cv_agt_intf_cnt %d cv_agt_intf_cnt_tmp %d cv_interface_pkg %s"%(cv_udie_frame_loop, cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
                
                # End Reached Reset cv_agt_selected so that next agent kicks-off
                cv_agt_selected = 1
                cv_agt_intf_cnt_tmp = 0
                        
                # cv_agt_selected_started = 0
                # self.cv_udie_loop_kcb();
                # self.cv_udi_nxt_kcb();
                # self.cv_udif_frame_kcb();
                # self.cv_udi_done_kcb();
                # self.cv_load_interface_kcb();
                if(cvagt_val_loop_tmp == cvagt_val_loop):
                    self.generate_button_operation();
            else:
                log.debug("3. cv_udie_done_interface_config: cv_udie_frame_loop %d cv_agt_intf_cnt %d cv_agt_intf_cnt_tmp %d cv_interface_pkg %s"%(cv_udie_frame_loop, cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
                #self.exit_button_create_cb(3)
                self.comp_vip_agt_interface()    
        else:
            log.debug("4. cv_udie_done_interface_config: cv_udie_frame_loop %d cv_agt_intf_cnt %d cv_agt_intf_cnt_tmp %d cv_interface_pkg %s"%(cv_udie_frame_loop, cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
            if(cvagt_val_loop_tmp == cvagt_val_loop):
                self.generate_button_operation();

    def flash_agtcfg(self):
        if (self.cvad_l0):
            bg = self.cvad_l0.cget("background")
            fg = self.cvad_l0.cget("foreground")
            self.cvad_l0.configure(background=fg, foreground=bg)
            self.cvad_l0.after(500, self.flash_agtcfg)

    
    def comp_vip_agt_interface(self, *args):
        global cv_agt_intf_cnt
        global cv_agt_intf_cnt_tmp
        global cv_agt_intf_num_of_ds_l
        global cv_agt_intf_num_of_ds_a
        global cv_interface_pkg
        global cv_choose_int_cmd_code_called
        global cv_agt_selected
        global cv_agt_selected_started
        global cvagt_val_loop_tmp
        global cvagt_val_loop
        global cvad_e4_temp
        
        # If Not QuickTIps Enabled THen Do the FocusOut Operations : 081418|TUE
        if not qt.get():
            self.generate_button_cb()
            self.cv_load_interface_kcb()
            self.cv_udi_kill_all_kcb()
            self.cv_agt_intf_kcb()
            
            log.debug("1. comp_vip_agt_interface : cv_agt_selected %d cv_agt_selected_started %d cvagt_val_loop_tmp %d cv_agt_intf_cnt %d cv_agt_intf_cnt_tmp = %d cv_interface_pkg %s"%\
                 (cv_agt_selected, cv_agt_selected_started, cvagt_val_loop_tmp, cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))

            if not cv_agt_selected and not cv_agt_selected_started:
                cv_agt_selected = 1
                cv_agt_selected_started = 1
                for i in range (int(cvagt_val.get())):
                    cv_interface_pkg.append([])
                log.debug("2. comp_vip_agt_interface : cv_agt_selected %d cv_agt_selected_started %d cvagt_val_loop_tmp %d cv_agt_intf_cnt %d cv_agt_intf_cnt_tmp = %d cv_interface_pkg %s"%\
                      (cv_agt_selected, cv_agt_selected_started, cvagt_val_loop_tmp, cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
            
            if cv_agt_selected and cv_agt_selected_started:
                cv_agt_selected = 0
                cv_agt_intf_num_of_ds_l = self.cvad_e1.get()
                cv_agt_intf_num_of_ds_a = cv_agt_intf_num_of_ds_l.split(",")
                cv_agt_intf_cnt = int(cv_agt_intf_num_of_ds_a[0]) 
                log.debug("3. comp_vip_agt_interface : cv_agt_selected %d cv_agt_selected_started %d cvagt_val_loop_tmp %d cv_agt_intf_cnt %d cv_agt_intf_cnt_tmp = %d cv_interface_pkg %s"%\
                     (cv_agt_selected, cv_agt_selected_started, cvagt_val_loop_tmp, cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
                for i in range (cv_agt_intf_cnt):
                    cv_interface_pkg[cvagt_val_loop_tmp-1].append([])
                    
            if not cv_agt_selected and cv_agt_selected_started:
                log.debug("4. comp_vip_agt_interface : cv_agt_selected %d cv_agt_selected_started %d cvagt_val_loop_tmp %d cv_agt_intf_cnt %d cv_agt_intf_cnt_tmp = %d cv_interface_pkg %s"%\
                     (cv_agt_selected, cv_agt_selected_started, cvagt_val_loop_tmp, cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
                if cv_agt_intf_cnt_tmp < cv_agt_intf_cnt: 
                    # Deleting the exit button single have more interface to get for the current agent
                    # self.exit_button_cb()

                    log.debug("5. comp_vip_agt_interface : cv_agt_selected %d cv_agt_selected_started %d cvagt_val_loop_tmp %d cv_agt_intf_cnt %d cv_agt_intf_cnt_tmp = %d cv_interface_pkg %s"%\
                         (cv_agt_selected, cv_agt_selected_started, cvagt_val_loop_tmp, cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
                    if cv_choose_int_cmd_code_called == 1:
                        cv_choose_int_cmd_code_called = 0

                    if cv_agt_intf_cnt == 1:
                        log.debug("6. comp_vip_agt_interface : cv_agt_selected %d cv_agt_selected_started %d cvagt_val_loop_tmp %d cv_agt_intf_cnt %d cv_agt_intf_cnt_tmp = %d cv_interface_pkg %s"%\
                             (cv_agt_selected, cv_agt_selected_started, cvagt_val_loop_tmp, cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
                        if len(cv_agt_intf_num_of_ds_a) == 1: 
                            # cv_interface_pkg[cvagt_val_loop_tmp-1][cv_agt_intf_cnt_tmp].append(self.cvad_e4.get())
                            # cv_driver_name = self.cvad_e4.get()
                            cvad_e4_intname = self.cvad_e4.get().split(",")
                            log.debug("Agt Intf Name : Value of cvad_e4 b4 split %s cvad_e4_temp %s"%(self.cvad_e4.get(), cvad_e4_intname))
                            if len(cvad_e4_intname)>1:
                                cv_interface_pkg[cvagt_val_loop_tmp-1][cv_agt_intf_cnt_tmp].append(str(cvad_e4_intname[0]).strip())
                                cv_driver_name = str(cvad_e4_intname[0]).strip()
                            else:    
                                cv_interface_pkg[cvagt_val_loop_tmp-1][cv_agt_intf_cnt_tmp].append(self.cvad_e4.get())
                                cv_driver_name = self.cvad_e4.get()
                        else:    
                            cv_interface_pkg[cvagt_val_loop_tmp-1][cv_agt_intf_cnt_tmp].append(str(cv_agt_intf_num_of_ds_a[cv_agt_intf_cnt_tmp+1]))
                            cv_driver_name = str(cv_agt_intf_num_of_ds_a[cv_agt_intf_cnt_tmp+1])
                    else:
                        log.debug("7. comp_vip_agt_interface : cv_agt_selected %d cv_agt_selected_started %d cvagt_val_loop_tmp %d cv_agt_intf_cnt %d cv_agt_intf_cnt_tmp = %d cv_interface_pkg %s"%\
                             (cv_agt_selected, cv_agt_selected_started, cvagt_val_loop_tmp, cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))
                        cv_interface_pkg[cvagt_val_loop_tmp-1][cv_agt_intf_cnt_tmp].append(str(cv_agt_intf_num_of_ds_a[cv_agt_intf_cnt_tmp+1]))
                        cv_driver_name = str(cv_agt_intf_num_of_ds_a[cv_agt_intf_cnt_tmp+1])
                    
                    if not (self.cvl3):
                        #self.cvl3 = Label(root, font=MyFontH2, text="Type Of Interface For %s Driver: "%(cv_driver_name))
                        self.cvl3 = Label(root, font=MyFontH2, text="Choose The Type Of Interface For %s Driver: "%(cv_driver_name))
                        self.cvl3.grid(row=33, column=0, sticky='W')
                        self.cvl3.rowconfigure(33,weight=1)
                    else:
                        self.cvl3.grid()
                    
                    self.cv_choose_int_list.clear()
                    self.cv_choose_int_val.set("Click Drop-Down For Options")
                    self.cv_choose_int_list = {"Default Interface":1, "User Defined Interface":2, "Load Interface":3}

                    if not (self.cvo3):
                        self.cvo3 = OptionMenu(root, self.cv_choose_int_val, *self.cv_choose_int_list, command=self.cv_choose_int_cmd_code)
                        self.cvo3.configure(width=39, activebackground="gray50", font=MyFontH2)
                        menu = self.cvo3.nametowidget(self.cvo3.menuname)
                        menu.config(font=MyFontH2, activebackground="gray50") 
                        self.cvo3.grid(row=33, column=1, sticky='WE')
                        self.cvo3.rowconfigure(33,weight=1)
                    else:
                        self.cvo3.grid()
                    
                    # self.return_button_create_cb(3);
                    if (cvagt_val_loop_tmp == cvagt_val_loop):
                        if (cv_agt_intf_cnt_tmp <= (cv_agt_intf_cnt-1)): self.exit_button_create_cb(2);
                    # Adding the below condition to have exit button until tool is getting next interface config until it passes to next agent config : 082218|WED
                    elif (cvagt_val_loop_tmp < cvagt_val_loop):
                        self.next_agt_cfg_btn_kcb();
                        self.exit_button_create_cb(2)
                    
                    if not self.return_button:
                        self.return_button_create_cb(2)
            log.debug("8. comp_vip_agt_interface : cv_agt_selected %d cv_agt_selected_started %d cvagt_val_loop_tmp %d cv_agt_intf_cnt %d cv_agt_intf_cnt_tmp = %d cv_interface_pkg %s"%\
                 (cv_agt_selected, cv_agt_selected_started, cvagt_val_loop_tmp, cv_agt_intf_cnt, cv_agt_intf_cnt_tmp, str(cv_interface_pkg)))


    def singlecomponent_agt_interface(self):
        global sc_agt_intf_cnt
        global sc_agt_intf_cnt_tmp
        global sc_agt_intf_num_of_ds_l
        global sc_agt_intf_num_of_ds_a
        global sc_interface_pkg
        global sc_choose_int_cmd_code_called
        self.sc_agt_intf_kcb()
        
        log.debug("Calling singlecomponent_agt_interface and value sc_interface_pkg is %s"% sc_interface_pkg )

        if sc_agt_intf_cnt_tmp < sc_agt_intf_cnt: 
            if sc_choose_int_cmd_code_called == 1:
                sc_choose_int_cmd_code_called = 0

            if sc_agt_intf_cnt == 1:
                if len(sc_agt_intf_num_of_ds_a) == 1: 
                    sc_interface_pkg[sc_agt_intf_cnt_tmp].append(self.sce1.get())
                    sc_driver_name = self.sce1.get()
                else:    
                    sc_interface_pkg[sc_agt_intf_cnt_tmp].append(str(sc_agt_intf_num_of_ds_a[sc_agt_intf_cnt_tmp+1]))
                    sc_driver_name = str(sc_agt_intf_num_of_ds_a[sc_agt_intf_cnt_tmp+1])
            else:
                sc_interface_pkg[sc_agt_intf_cnt_tmp].append(str(sc_agt_intf_num_of_ds_a[sc_agt_intf_cnt_tmp+1]))
                sc_driver_name = str(sc_agt_intf_num_of_ds_a[sc_agt_intf_cnt_tmp+1])
            
            if not (self.scl3):
                #self.scl3 = Label(root, font=MyFontH2, text="Type Of Interface For %s Driver: "%(sc_driver_name))
                self.scl3 = Label(root, font=MyFontH2, text="Choose The Type Of Interface For %s Driver: "%(sc_driver_name))
                self.scl3.grid(row=sc_agtrow_val+6, column=0, sticky='W', padx=38)
                self.scl3.rowconfigure(sc_agtrow_val+6,weight=1)
            else:
                self.scl3.grid()
            
            self.sc_choose_int_list.clear()
            self.sc_choose_int_val.set("Click Drop-Down For Options")
            self.sc_choose_int_list = {"Default Interface":1, "User Defined Interface":2, "Load Interface":3}

            if not (self.sco1):
                self.sco1 = OptionMenu(root, self.sc_choose_int_val, *self.sc_choose_int_list, command=self.sc_choose_int_cmd_code)
                self.sco1.configure(width=39, activebackground="gray50", font=MyFontH2)
                menu = self.sco1.nametowidget(self.sco1.menuname)
                menu.config(font=MyFontH2, activebackground="gray50") 
                self.sco1.grid(row=sc_agtrow_val+6, column=1, sticky='WE')
                self.sco1.rowconfigure(sc_agtrow_val+6,weight=1)
            else:
                self.sco1.grid()
            
            self.return_button_create_cb(3);
        log.debug("Value of sc_interface_pkg @ singlecomponent_agt_interface %s"% sc_interface_pkg )
        log.debug("value of sc_agt_intf_cnt %s sc_agt_intf_cnt_tmp %d @ singlecomponent_agt_interface"%(sc_agt_intf_cnt, sc_agt_intf_cnt_tmp))
    
    def singlecomponent_create(self):
        global sc_agt_selected
        global sc_agt_selected_started
        global sc_agt_intf_num_of_ds_l
        global sc_agt_intf_num_of_ds_a 
        global sc_agt_intf_cnt
        global sc_agt_intf_cnt_tmp

        if sv.get()=="Interface":
            self.sc_udi_kill_all_kcb()
            self.sc_load_interface_kcb()
            #self.interface_label_rb_cb();
            self.generate_button_cb();
            self.exit_button_cb();
            self.return_button_cb();
          
            if not sc_agt_selected:
                if not (self.scl3):
                    #self.scl3 = Label(root, font=MyFontH2, text="What Type Of Interface You Wanted To Create: ")
                    self.scl3 = Label(root, font=MyFontH2, text="Choose The Type Of Interface: ")
                    self.scl3.grid(row=sc_agtrow_val+6, column=0, sticky='W', padx=38)
                    self.scl3.rowconfigure(sc_agtrow_val+6,weight=1)
                else:
                    self.scl3.grid()
                
                self.sc_choose_int_list.clear()
                self.sc_choose_int_val.set("Click Drop-Down For Options")
                self.sc_choose_int_list = {"Default Interface":1, "User Defined Interface":2, "Load Interface":3}

                if not (self.sco1):
                    self.sco1 = OptionMenu(root, self.sc_choose_int_val, *self.sc_choose_int_list, command=self.sc_choose_int_cmd_code)
                    self.sco1.configure(width=39, activebackground="gray50", font=MyFontH2)
                    menu = self.sco1.nametowidget(self.sco1.menuname)
                    menu.config(font=MyFontH2, activebackground="gray50") 
                    self.sco1.grid(row=sc_agtrow_val+6, column=1, sticky='WE')
                    self.sco1.rowconfigure(sc_agtrow_val+6,weight=1)
                else:
                    self.sco1.grid()
        
                self.return_button_create_cb(3);
            else: 
                sv.set("Agent")
                sc_agt_selected = 0
                sc_agt_selected_started = 1

                if ((self.scae1.get() == 'Enter no. of drivers,1st driver name,..,nth driver name'  and  \
                    self.scae2.get() == 'Enter no. of monitors,1st monitor name,..,nth monitor name') or \
                   (self.scae1.get() == 'Enter no. of drivers,1st driver name,..,nth driver name')   or \
                    self.scae1.get() == ''):
                    
                    sv.set("Interface")
                    sc_agt_selected = 0
                    sc_agt_selected_started = 0
                    self.sc_agt_kcb()

                    if not (self.scl3):
                        #self.scl3 = Label(root, font=MyFontH2, text="What Type Of Interface You Wanted To Create: ")
                        self.scl3 = Label(root, font=MyFontH2, text="Choose The Type Of Interface: ")
                        self.scl3.grid(row=sc_agtrow_val+6, column=0, sticky='W', padx=38)
                        self.scl3.rowconfigure(sc_agtrow_val+6,weight=1)
                    else:
                        self.scl3.grid()
                    
                    self.sc_choose_int_list.clear()
                    self.sc_choose_int_val.set("Click Drop-Down For Options")
                    self.sc_choose_int_list = {"Default Interface":1, "User Defined Interface":2, "Load Interface":3}

                    if not (self.sco1):
                        self.sco1 = OptionMenu(root, self.sc_choose_int_val, *self.sc_choose_int_list, command=self.sc_choose_int_cmd_code)
                        self.sco1.configure(width=39, activebackground="gray50", font=MyFontH2)
                        menu = self.sco1.nametowidget(self.sco1.menuname)
                        menu.config(font=MyFontH2, activebackground="gray50") 
                        self.sco1.grid(row=sc_agtrow_val+6, column=1, sticky='WE')
                        self.sco1.rowconfigure(sc_agtrow_val+6,weight=1)
                    else:
                        self.sco1.grid()
        
                    self.return_button_create_cb(3);
                else: 
                    sc_agt_intf_num_of_ds_l = self.scae1.get()
                    sc_agt_intf_num_of_ds_a = sc_agt_intf_num_of_ds_l.split(",")

                    log.debug("1. Value of sc_agt_intf_num_of_ds_a is %d"% int(sc_agt_intf_num_of_ds_a[0]))
                    for i in range (int(sc_agt_intf_num_of_ds_a[0])):
                        sc_interface_pkg.append([])
                    log.debug("2. Value of sc_interface_pkg is %s"% sc_interface_pkg)

                    sc_agt_intf_cnt = int(sc_agt_intf_num_of_ds_a[0])

                    self.singlecomponent_agt_interface();
                
                # if not (self.scl3):
                #     self.scl3 = Label(root, font=MyFontH2, text="What Type Of Interface You Wanted To Create: ")
                #     self.scl3.grid(row=sc_agtrow_val+6, column=0, sticky='W', padx=38)
                #     self.scl3.rowconfigure(sc_agtrow_val+6,weight=1)
                # else:
                #     self.scl3.grid()
                # 
                # self.sc_choose_int_list.clear()
                # self.sc_choose_int_val.set("Click Drop-Down For Options")
                # self.sc_choose_int_list = {"Default Interface":1, "User Defined Interface":2, "Load Interface":3}

                # if not (self.sco1):
                #     self.sco1 = OptionMenu(root, self.sc_choose_int_val, *self.sc_choose_int_list, command=self.sc_choose_int_cmd_code)
                #     self.sco1.configure(width=39, activebackground="gray50", font=MyFontH2)
                #     menu = self.sco1.nametowidget(self.sco1.menuname)
                #     menu.config(font=MyFontH2, activebackground="gray50") 
                #     self.sco1.grid(row=sc_agtrow_val+6, column=1, sticky='WE')
                #     self.sco1.rowconfigure(sc_agtrow_val+6,weight=1)
                # else:
                #     self.sco1.grid()
        
                # self.return_button_create_cb(3);


            #x----------COMBOBOX OPERATION---------------
            # self.sc_choose_int_list.clear()
            # self.sc_choose_int_list = {"Default Interface":1, "User Defined Interface":2}
            # 
            # self.sco1 = ttk.Combobox(root, textvariable=self.sc_choose_int_val, state='readonly', width=39, font=MyFontBtn)
            # self.sco1['values'] = self.sc_choose_int_list.keys() 
            # self.sco1.set("Click Drop-Down For Options")
            # self.sco1['state'] = 'readonly'
            # self.sco1.bind("<<ComboboxSelected>>", self.sc_choose_int_cmd_code)
            # self.sco1.option_add('*TCombobox*Listbox.selectBackground', 'gray50')
            # self.sco1.option_add('*TCombobox*Listbox.Background', root.cget('bg'))
            # self.sco1.option_add('*TCombobox*Listbox.font', MyFontBtn)
            # self.sco1.grid(row=sc_agtrow_val+6, column=1, sticky='WE')
            # self.sco1.rowconfigure(sc_agtrow_val+6,weight=1)

            # if not (self.scr2):
            #     self.scr2 = Radiobutton(root, text="Default Interface", variable=sccv, value=1, command=self.sc_default_interface)
            #     self.scr2.grid(row=20)
            #     self.scr2.rowconfigure(20,weight=1)
            # else:
            #     self.scr2.grid()
            # if not (self.scr3):
            #     self.scr3 = Radiobutton(root, text="User Defined Interface", variable=sccv, value=2, command=self.sc_user_defined_interface)
            #     self.scr3.grid(row=21)
            #     self.scr3.rowconfigure(21,weight=1)
            # else:
            #     self.scr3.grid()
        elif sv.get()=="Sequence Item":
            self.generate_button_cb();
            self.exit_button_cb();
            self.return_button_cb();
            self.sc_udi_kill_all_kcb()
            self.sc_load_interface_kcb()
            self.interface_label_rb_cb();
            self.generate_button_operation();
            self.return_button_create_cb(2);
        elif sv.get()=="Sequence":
            self.generate_button_cb();
            self.exit_button_cb();
            self.return_button_cb();
            self.sc_udi_kill_all_kcb()
            self.sc_load_interface_kcb()
            self.interface_label_rb_cb();
            self.generate_button_operation();
            self.return_button_create_cb(2);
        elif sv.get()=="Sequencer":
            self.generate_button_cb();
            self.exit_button_cb();
            self.return_button_cb();
            self.sc_udi_kill_all_kcb()
            self.sc_load_interface_kcb()
            self.interface_label_rb_cb();
            self.generate_button_operation();
            self.return_button_create_cb(2);
        elif sv.get()=="Driver":
            self.generate_button_cb();
            self.exit_button_cb();
            self.return_button_cb();
            self.sc_udi_kill_all_kcb()
            self.sc_load_interface_kcb()
            self.interface_label_rb_cb();
            self.generate_button_operation();
            self.return_button_create_cb(2);
        elif sv.get()=="Monitor":
            self.generate_button_cb();
            self.exit_button_cb();
            self.return_button_cb();
            self.sc_udi_kill_all_kcb()
            self.sc_load_interface_kcb()
            self.interface_label_rb_cb();
            self.generate_button_operation();
            self.return_button_create_cb(2);
        elif sv.get()=="Agent":
            self.generate_button_cb();
            self.exit_button_cb();
            self.return_button_cb();
            self.sc_udi_kill_all_kcb()
            self.sc_load_interface_kcb()
            self.interface_label_rb_cb();
            
            #self.scal1 = Label(root, font=MyFontH2, text="How Many Driver~Sequencer You Want To Create: ")
            self.scal1 = Label(root, font=MyFontH2, text="Enter Required Number Of Driver~Sequencer: ")
            self.scal1.grid(row=19, column=0, sticky='W', padx=38)
            self.scal1.rowconfigure(19,weight=1)
            
            self.scae1 = Entry(root, font=MyFontH2, width=43, bg="goldenrod")
            self.scae1.delete(0, END)
            self.scae1.insert(0, 'Enter no. of drivers,1st driver name,..,nth driver name')
            self.scae1.bind('<Button-1>', self.scae1_entry_click)
            self.scae1.grid(row=19, column=1, sticky='WE')
            self.scae1.rowconfigure(19,weight=1)
            
            #self.scal2 = Label(root, font=MyFontH2, text="How Many Monitors You Want To Create: ")
            self.scal2 = Label(root, font=MyFontH2, text="Enter Required Number Of Monitors: ")
            self.scal2.grid(row=21, column=0, sticky='W', padx=38)
            self.scal2.rowconfigure(21,weight=1)
            
            self.scae2 = Entry(root, font=MyFontH2, width=43, bg="goldenrod")
            self.scae2.delete(0, END)
            self.scae2.insert(0, 'Enter no. of monitors,1st monitor name,..,nth monitor name')
            self.scae2.bind('<Button-1>', self.scae2_entry_click)
            self.scae2.grid(row=21, column=1, sticky='WE')
            self.scae2.rowconfigure(21,weight=1)
            
            #----------------------------------------------------------------------------------------------------------------------
            # Original Operations With Interface : 081118|SAT
            #----------------------------------------------------------------------------------------------------------------------
            # if not (self.scl3):
            #     self.scl3 = Label(root, font=MyFontH2, text="What Type Of Interface You Wanted To Create: ")
            #     self.scl3.grid(row=sc_agtrow_val+6, column=0, sticky='W', padx=38)
            #     self.scl3.rowconfigure(sc_agtrow_val+6,weight=1)
            # else:
            #     self.scl3.grid()
            # 
            # self.sc_choose_int_list.clear()
            # self.sc_choose_int_val.set("Click Drop-Down For Options")
            # self.sc_choose_int_list = {"Default Interface":1, "User Defined Interface":2, "Load Interface":3}

            # if not (self.sco1):
            #     self.sco1 = OptionMenu(root, self.sc_choose_int_val, *self.sc_choose_int_list, command=self.sc_choose_int_cmd_code)
            #     self.sco1.configure(width=39, activebackground="gray50", font=MyFontH2)
            #     menu = self.sco1.nametowidget(self.sco1.menuname)
            #     menu.config(font=MyFontH2, activebackground="gray50") 
            #     self.sco1.grid(row=sc_agtrow_val+6, column=1, sticky='WE')
            #     self.sco1.rowconfigure(sc_agtrow_val+6,weight=1)
            # else:
            #     self.sco1.grid()
            # 
            # self.return_button_create_cb(3);
            #----------------------------------------------------------------------------------------------------------------------
           
            sc_agt_selected = 1
            self.generate_button_operation();
            self.return_button_create_cb(2);
        elif sv.get()=="Scoreboard":
            self.generate_button_cb();
            self.exit_button_cb();
            self.return_button_cb();
            self.sc_udi_kill_all_kcb()
            self.sc_load_interface_kcb()
            self.interface_label_rb_cb();
            self.generate_button_operation();
            self.return_button_create_cb(2);
        elif sv.get()=="Environment":
            self.generate_button_cb();
            self.exit_button_cb();
            self.return_button_cb();
            self.sc_udi_kill_all_kcb()
            self.sc_load_interface_kcb()
            self.interface_label_rb_cb();
            self.generate_button_operation();
            self.return_button_create_cb(2);
        elif sv.get()=="Test":
            self.generate_button_cb();
            self.exit_button_cb();
            self.return_button_cb();
            self.sc_udi_kill_all_kcb()
            self.sc_load_interface_kcb()
            self.interface_label_rb_cb();
            self.generate_button_operation();
            self.return_button_create_cb(2);
           
    def sc_default_interface(self):      
        global sc_agt_selected_started
        global sc_agt_intf_cnt
        global sc_agt_intf_cnt_tmp
        global sc_interface_pkg

        if not sc_agt_selected_started:
            self.sc_udi_kill_all_kcb();
            self.sc_load_interface_kcb();
            self.exit_button_cb();
            self.generate_button_operation();
            self.return_button_create_cb(2);
        else:
            sc_agt_intf_cnt_tmp += 1
            self.sc_udi_kill_all_kcb();
            self.sc_load_interface_kcb();
            self.exit_button_cb();
            
            if sc_agt_intf_cnt_tmp == sc_agt_intf_cnt:
                log.debug("1. Final: Value of sc_interface_pkg @ sc_default_interface %s"% sc_interface_pkg)
                # sc_agt_selected_started = 0
                self.generate_button_operation();
                self.return_button_create_cb(2);
            else:
                log.debug("1a. Final: Value of sc_interface_pkg @ sc_default_interface %s"% sc_interface_pkg)
                self.singlecomponent_agt_interface()
        log.debug("value of sc_agt_intf_cnt %s sc_agt_intf_cnt_tmp %d @ sc_default_interface"%(sc_agt_intf_cnt, sc_agt_intf_cnt_tmp))
    
    def sc_user_defined_interface(self):
        global sc_udie_loop
        global sc_udie_frame_loop
        global sc_agtrow_val
        
        global sc_agt_selected_started
        global sc_agt_intf_cnt_tmp
        global sc_interface_pkg
        
        self.sc_udi_kill_all_kcb();
        self.sc_load_interface_kcb();
        self.generate_button_cb();
        self.exit_button_cb();
        self.return_button_cb();
        
        if sc_agt_selected_started:
            sc_agt_intf_cnt_tmp += 1 
        
        sc_udie_loop = 0
        sc_udie_frame_loop = 1
        self.sc_udie = []
        self.sc_udif_name_e.append([])
        self.sc_udif_type_e.append([])
        self.sc_udif_le_e.append([])
        self.sc_udif_re_e.append([])
        self.sc_udif_cb_e.append([])
        self.sc_udif_mp_e.append([])

        # self.sc_udie.append(Entry(root, font=MyFontH2, width=43, bg="goldenrod"))
        # self.sc_udie[sc_udie_loop].delete(0, END)
        # self.sc_udie[sc_udie_loop].insert(0, 'Enter Signal Name, Type, Size. For More Options, Click User Tips!')
        # self.sc_udie[sc_udie_loop].bind('<Button-1>', self.sc_udie_entry_click)
        # self.sc_udie[sc_udie_loop].grid(row=sc_agtrow_val+8, column=0, columnspan=2, sticky='WE')
        # self.sc_udie[sc_udie_loop].rowconfigure(sc_agtrow_val+8,weight=1)
  
        log.debug("GoinG to create UDIF and sc_agtrow_val %d"% sc_agtrow_val)
        if not (self.sc_udif_frame):
            log.debug("1 GoinG to create UDIF and sc_agtrow_val %d"% sc_agtrow_val)
            self.sc_udif_frame = Frame(root, width=50, bg='dark goldenrod', highlightbackground='dark goldenrod', highlightthickness='3')
            self.sc_udif_frame.grid(row=sc_agtrow_val+8, column=0, columnspan=2, sticky='WE', padx=38)
            self.sc_udif_frame.rowconfigure(sc_agtrow_val+8,weight=1)
        else:
            log.debug("Frame already Exists\n")
            self.sc_udif_frame.grid() 

        if not (self.sc_udif_name):
            self.sc_udif_name = Label(self.sc_udif_frame, font=MyFontH2, text="Signal Name", bg='goldenrod')
            self.sc_udif_name.grid(row=0, column=0, sticky='WE')
            self.sc_udif_name.rowconfigure(0, weight=1)
        else:
            self.sc_udif_name.grid()

        self.sc_udif_name_e.append([])
        if not (self.sc_udif_name_e[sc_udie_frame_loop]):
            self.sc_udif_name_e[sc_udie_frame_loop] = Entry(self.sc_udif_frame, font=MyFontH2)
            self.sc_udif_name_e[sc_udie_frame_loop].grid(row=sc_udie_frame_loop, column=0)
            self.sc_udif_name_e[sc_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.sc_udif_name_e[sc_udie_frame_loop].grid()    

        
        if not (self.sc_udif_type):
            self.sc_udif_type = Label(self.sc_udif_frame, font=MyFontH2, text="Signal Type", bg='goldenrod')
            self.sc_udif_type.grid(row=0, column=1, sticky='WE')
            self.sc_udif_type.rowconfigure(0, weight=1)
        else:
            self.sc_udif_type.grid()

        self.sc_udif_type_e.append([])
        if not (self.sc_udif_type_e[sc_udie_frame_loop]):
            self.sc_udif_type_e[sc_udie_frame_loop] = Entry(self.sc_udif_frame, font=MyFontH2)
            self.sc_udif_type_e[sc_udie_frame_loop].grid(row=sc_udie_frame_loop, column=1)
            self.sc_udif_type_e[sc_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.sc_udif_type_e[sc_udie_frame_loop].grid()

       
        if not (self.sc_udif_le):
            self.sc_udif_le = Label(self.sc_udif_frame, font=MyFontH2, text="Packed Elements", bg='goldenrod')
            self.sc_udif_le.grid(row=0, column=2, sticky='WE')
            self.sc_udif_le.rowconfigure(0, weight=1)
        else:
            self.sc_udif_le.grid()

        self.sc_udif_le_e.append([])
        if not (self.sc_udif_le_e[sc_udie_frame_loop]):
            self.sc_udif_le_e[sc_udie_frame_loop] = Entry(self.sc_udif_frame, font=MyFontH2)
            self.sc_udif_le_e[sc_udie_frame_loop].grid(row=sc_udie_frame_loop, column=2)
            self.sc_udif_le_e[sc_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.sc_udif_le_e[sc_udie_frame_loop].grid()


        if not (self.sc_udif_re):
            self.sc_udif_re = Label(self.sc_udif_frame, font=MyFontH2, text="Un Packed Elements", bg='goldenrod')
            self.sc_udif_re.grid(row=0, column=3, sticky='WE')
            self.sc_udif_re.rowconfigure(0, weight=1)
        else:
            self.sc_udif_re.grid()

        self.sc_udif_re_e.append([])
        if not (self.sc_udif_re_e[sc_udie_frame_loop]):
            self.sc_udif_re_e[sc_udie_frame_loop] = Entry(self.sc_udif_frame, font=MyFontH2)
            self.sc_udif_re_e[sc_udie_frame_loop].grid(row=sc_udie_frame_loop, column=3)
            self.sc_udif_re_e[sc_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.sc_udif_re_e[sc_udie_frame_loop].grid()


        if not (self.sc_udif_cb):
            self.sc_udif_cb = Label(self.sc_udif_frame, font=MyFontH2, text="Clocking Block", bg='goldenrod')
            self.sc_udif_cb.grid(row=0, column=4, sticky='WE')
            self.sc_udif_cb.rowconfigure(0, weight=1)
        else:
            self.sc_udif_cb.grid()

        self.sc_udif_cb_e.append([])
        if not (self.sc_udif_cb_e[sc_udie_frame_loop]):
            self.sc_udif_cb_e[sc_udie_frame_loop] = Entry(self.sc_udif_frame, font=MyFontH2)
            self.sc_udif_cb_e[sc_udie_frame_loop].grid(row=sc_udie_frame_loop, column=4)
            self.sc_udif_cb_e[sc_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.sc_udif_cb_e[sc_udie_frame_loop].grid()


        if not (self.sc_udif_mp):
            self.sc_udif_mp = Label(self.sc_udif_frame, font=MyFontH2, text="Modport", bg='goldenrod')
            self.sc_udif_mp.grid(row=0, column=5, sticky='WE')
            self.sc_udif_mp.rowconfigure(0, weight=1)
        else:
            self.sc_udif_mp.grid()

        self.sc_udif_mp_e.append([])
        if not (self.sc_udif_mp_e[sc_udie_frame_loop]):
            self.sc_udif_mp_e[sc_udie_frame_loop] = Entry(self.sc_udif_frame, font=MyFontH2)
            self.sc_udif_mp_e[sc_udie_frame_loop].grid(row=sc_udie_frame_loop, column=5)
            self.sc_udif_mp_e[sc_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.sc_udif_mp_e[sc_udie_frame_loop].grid() 


        self.sc_udi_nxt = Button(root, font=MyFontH2, background="IndianRed1", activebackground="IndianRed3", text="NEXT INTERFACE CONFIG", command=self.sc_udie_next_interface_config)
        self.sc_udi_nxt.grid(row=sc_agtrow_val+10, column=0, sticky='WE')
        self.sc_udi_nxt.rowconfigure(sc_agtrow_val+10,weight=1)
        
        #self.sc_udi_nxt.columnconfigure(0,weight=1)
        self.sc_udi_done = Button(root, font=MyFontH2, background="sienna1", activebackground="sienna3", text="DONE INTERFACE CONFIG", command=self.sc_udie_done_interface_config)
        self.sc_udi_done.grid(row=sc_agtrow_val+10, column=1, sticky='WE')
        self.sc_udi_done.rowconfigure(sc_agtrow_val+10,weight=1)
        #self.sc_udi_done.columnconfigure(0,weight=1)
        
        log.debug("Value of sc_udie_frame_loop in sc_user_defined_interface is %d"% sc_udie_frame_loop)


    def sc_load_interface(self):
        global sc_agt_selected_started
        global sc_agt_intf_cnt_tmp
        global sc_interface_pkg
        
        self.sc_udi_kill_all_kcb()
        self.sc_load_interface_kcb();
        self.generate_button_cb();
        self.exit_button_cb();
        self.return_button_cb();
            
        if sc_agt_selected_started:
            sc_agt_intf_cnt_tmp += 1 
        
        if not (self.scl4):
            self.scl4 = Label(root, font=MyFontH2, text="Choose the Interface Spreadsheet To Load: ")
            self.scl4.grid(row=sc_agtrow_val+7, column=0, sticky='W', padx=38)
            self.scl4.rowconfigure(sc_agtrow_val+7,weight=1)
        else:
            self.scl4.grid()
                
        if not (self.sce2):    
            self.sce2 = Entry(root, font=MyFontH2, bg="goldenrod")
            self.sce2.delete(0, END)
            self.sce2.insert(0, 'Right Click To Load-Left Click To Enter')
            self.sce2.bind('<Button-3>', self.sc_load_interface_file_dialog)
            self.sce2.bind('<Button-1>', self.sc_load_interface_file_path)
            self.sce2.grid(row=sc_agtrow_val+7, column=1, sticky='WE')
            self.sce2.rowconfigure(sc_agtrow_val+7,weight=1)
        else:
            self.sce2.grid_forget(); self.sce2 = None
            self.sce2 = Entry(root, font=MyFontH2)
            self.sce2.delete(0, END)
            self.sce2.insert(0, 'Right Click To Load-Left Click To Enter')
            self.sce2.bind('<Button-3>', self.sc_load_interface_file_dialog)
            self.sce2.bind('<Button-1>', self.sc_load_interface_file_path)
            self.sce2.grid(row=sc_agtrow_val+7, column=1, sticky='WE')
            self.sce2.rowconfigure(sc_agtrow_val+7,weight=1)
        
        self.return_button_create_cb(4);
        
        self.sc_udi_done = Button(root, font=MyFontH2, background="sienna1", activebackground="sienna3", text="DONE INTERFACE CONFIG", command=self.sc_udie_done_interface_config)
        self.sc_udi_done.grid(row=sc_agtrow_val+8, column=1, sticky='WE')
        self.sc_udi_done.rowconfigure(sc_agtrow_val+8,weight=1)
       

    def sc_load_interface_file_dialog(self, *args):
        self.sce2.delete(0, END)
        #self.sce2.insert(0, tkFileDialog.askopenfilename(initialdir = ".",title = "Select file",filetypes = (("xlsx files","*.xlsx"),("all files","*.*"))))
        self.sce2.insert(0, filedialog.askopenfilename(initialdir = ".",title = "Select file",filetypes = (("xlsx files","*.xlsx"),("all files","*.*"))))
    
    def sc_load_interface_file_path(self, *args):
        if self.sce2.get() == 'Right Click To Load-Left Click To Enter':
            self.sce2.delete(0, END)
            self.sce2.insert(0, '')
        else:
            self.sce2.insert(0, '')

    def sc_udie_next_interface_config(self):
        global sc_udie_loop
        global sc_udie_frame_loop

        sc_udie_loop += 1;
        sc_udie_frame_loop += 1;
        self.sc_udi_nxt_kcb();
        self.sc_udi_done_kcb();

        # self.sc_udie.append(Entry(root, font=MyFontH2, width=43, bg="goldenrod"))
        # self.sc_udie[sc_udie_loop].delete(0, END)
        # self.sc_udie[sc_udie_loop].insert(0, 'Enter Signal Name, Type, Size. For More Options, Click User Tips!')
        # self.sc_udie[sc_udie_loop].bind('<Button-1>', self.sc_udie_entry_click)
        # self.sc_udie[sc_udie_loop].grid(row=sc_agtrow_val+8+sc_udie_loop, column=0, columnspan=2, sticky='WE')
        # self.sc_udie[sc_udie_loop].rowconfigure(sc_agtrow_val+8+sc_udie_loop,weight=1)
      
        
        self.sc_udif_name_e.append([])
        if not (self.sc_udif_name_e[sc_udie_frame_loop]):
            self.sc_udif_name_e[sc_udie_frame_loop] = Entry(self.sc_udif_frame, font=MyFontH2)
            self.sc_udif_name_e[sc_udie_frame_loop].grid(row=sc_udie_frame_loop, column=0)
            self.sc_udif_name_e[sc_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.sc_udif_name_e[sc_udie_frame_loop].grid()    

        
        self.sc_udif_type_e.append([])
        if not (self.sc_udif_type_e[sc_udie_frame_loop]):
            self.sc_udif_type_e[sc_udie_frame_loop] = Entry(self.sc_udif_frame, font=MyFontH2)
            self.sc_udif_type_e[sc_udie_frame_loop].grid(row=sc_udie_frame_loop, column=1)
            self.sc_udif_type_e[sc_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.sc_udif_type_e[sc_udie_frame_loop].grid()

       
        self.sc_udif_le_e.append([])
        if not (self.sc_udif_le_e[sc_udie_frame_loop]):
            self.sc_udif_le_e[sc_udie_frame_loop] = Entry(self.sc_udif_frame, font=MyFontH2)
            self.sc_udif_le_e[sc_udie_frame_loop].grid(row=sc_udie_frame_loop, column=2)
            self.sc_udif_le_e[sc_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.sc_udif_le_e[sc_udie_frame_loop].grid()


        self.sc_udif_re_e.append([])
        if not (self.sc_udif_re_e[sc_udie_frame_loop]):
            self.sc_udif_re_e[sc_udie_frame_loop] = Entry(self.sc_udif_frame, font=MyFontH2)
            self.sc_udif_re_e[sc_udie_frame_loop].grid(row=sc_udie_frame_loop, column=3)
            self.sc_udif_re_e[sc_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.sc_udif_re_e[sc_udie_frame_loop].grid()


        self.sc_udif_cb_e.append([])
        if not (self.sc_udif_cb_e[sc_udie_frame_loop]):
            self.sc_udif_cb_e[sc_udie_frame_loop] = Entry(self.sc_udif_frame, font=MyFontH2)
            self.sc_udif_cb_e[sc_udie_frame_loop].grid(row=sc_udie_frame_loop, column=4)
            self.sc_udif_cb_e[sc_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.sc_udif_cb_e.grid()


        self.sc_udif_mp_e.append([])
        if not (self.sc_udif_mp_e[sc_udie_frame_loop]):
            self.sc_udif_mp_e[sc_udie_frame_loop] = Entry(self.sc_udif_frame, font=MyFontH2)
            self.sc_udif_mp_e[sc_udie_frame_loop].grid(row=sc_udie_frame_loop, column=5)
            self.sc_udif_mp_e[sc_udie_frame_loop].rowconfigure(1,weight=1)
        else:
            self.sc_udif_mp_e.grid()


        self.sc_udi_nxt = Button(root, font=MyFontH2, background="IndianRed1", activebackground="IndianRed3", text="NEXT INTERFACE CONFIG", command=self.sc_udie_next_interface_config)
        self.sc_udi_nxt.grid(row=sc_agtrow_val+10+sc_udie_loop, column=0, sticky='WE')
        self.sc_udi_nxt.rowconfigure(sc_agtrow_val+10+sc_udie_loop,weight=1)
        
        self.sc_udi_done = Button(root, font=MyFontH2, background="sienna1", activebackground="sienna3", text="DONE INTERFACE CONFIG", command=self.sc_udie_done_interface_config)
        self.sc_udi_done.grid(row=sc_agtrow_val+10+sc_udie_loop, column=1, sticky='WE')
        self.sc_udi_done.rowconfigure(sc_agtrow_val+10+sc_udie_loop,weight=1)
        
        log.debug("Value of sc_udie_frame_loop in sc_udie_next_interface_config is %d"% sc_udie_frame_loop)

    def sc_udie_done_interface_config(self):
        global sc_agt_selected_started
        global sc_agt_intf_cnt_tmp
        global sc_interface_pkg
        
        global sc_udie_loop
        global sc_udie_frame_loop
        global sc_udie_int_cfg_array 
        global sc_udie_int_cfg_list 
        global sc_udie_cb_cfg_array 
        global sc_udie_mp_cfg_array 
        global sc_udie_clock_cfg_array 
        global sc_udie_tmp_var
        global sc_udie_cb_cnt
        global sc_udie_mp_cnt
        global sc_udie_cb_element_loop
        global sc_udie_mp_element_loop
        global le
        global ree
        global sc_element_loop

        sc_udie_cb_element_loop = 0
        sc_udie_mp_element_loop = 0
        
        if self.sc_choose_int_list.get(self.sc_choose_int_val.get())==3:
            # load_xls_file_path = self.sce2.get()    
            load_xls_file_path_tmp = (self.sce2.get()).split(",") 
           
            if len(load_xls_file_path_tmp)>1:
                load_xls_file_path = str(load_xls_file_path_tmp[0]).strip()
                search_user_sheet  = str(load_xls_file_path_tmp[1]).strip()
            else:
                load_xls_file_path = str(load_xls_file_path_tmp[0])
                search_user_sheet  = None 
            log.debug("Value of load_xls_file_path %s search_user_sheet %s"%(load_xls_file_path,search_user_sheet))

            if not os.path.isfile(load_xls_file_path):
                log.warning("Please Load a Proper Interface Spreadsheet For Generating The Output\n")

            # Not Opening and then Loading, Just Loading: 01032021SUN
            # load_xls_file = open(load_xls_file_path, "r") 
            # wb = load_workbook(load_xls_file) 
            wb = load_workbook(load_xls_file_path) 

            #sheet = wb.get_sheet_names()
            sheet = wb.sheetnames
            for ws in sheet:
                log.debug("Name of the sheet is : for %s"% ws)
                if search_user_sheet != None:
                    log.debug("into search_user_sheet %s ws %s"%(search_user_sheet,ws))
                    if ws == search_user_sheet:
                        #sheet = wb.get_sheet_by_name(ws)
                        sheet = wb[ws]
                        log.debug("Name of the sheet selected is %s"% sheet)
                        break
                elif ws == "Sheet1":
                    #sheet = wb.get_sheet_by_name(ws)
                    sheet = wb[ws]
                    log.debug("Name of the sheet selected is %s"% sheet)
                    break
                else:
                    continue

            # if wb.active <> sheet:
            if wb.active != sheet:
                log.warning("Required Interface Definition Sheet Is Not Found In Spreadsheet. Please ree-load Proper File!\n")

            #sc_udie_frame_loop = sheet.max_row-1
            log.debug("Name of the sheet is %s"% sheet )
            sc_udie_frame_loop = len(sheet['A'])
            #sc_udie_frame_loop -= 1
            log.debug("Value of sc_udie_frame_loop from spreadsheet is %d"% sc_udie_frame_loop)

            # for i in range(1,sc_udie_frame_loop):
            #     for j in range(1,sheet.max_column+1):
            #         # print "Value of the cell is", sheet.cell(row=i, column=j).value

        # Defining the Array For Interface To Get The Configuration
        sc_udie_int_cfg_list = []
        #sc_udie_int_cfg_array = [[] for x in range(sc_udie_loop+1)]
        if self.sc_choose_int_list.get(self.sc_choose_int_val.get())==2:
            sc_udie_int_cfg_array = [[] for x in range(sc_udie_frame_loop)]
        elif self.sc_choose_int_list.get(self.sc_choose_int_val.get())==3:
            sc_udie_int_cfg_array = [[] for x in range(sc_udie_frame_loop-1)]
        log.debug("1. Value of sc_udie_int_cfg_array %s"% sc_udie_int_cfg_array)

        sc_udie_cb_cfg_array = []
        sc_udie_mp_cfg_array = []
        sc_udie_clock_cfg_array = []

        if self.sc_choose_int_list.get(self.sc_choose_int_val.get())==2:
            for n in range(sc_udie_frame_loop):
                #sc_udie_int_cfg_list.append(self.sc_udie[n].get())
                #sc_udie_int_cfg_array[n] = sc_udie_int_cfg_list[n].split(",")
                
                # sc_udie_int_cfg_list.extend((self.sc_udif_name_e[n].get(), self.sc_udif_type_e[n].get(), self.sc_udif_le_e[n].get(), self.sc_udif_re_e[n].get(), \
                #                             self.sc_udif_cb_e[n].get(), self.sc_udif_mp_e[n].get()))
                
                # sc_udie_int_cfg_list.append(self.sc_udif_name_e[n].get())
                # sc_udie_int_cfg_list.append(,)
                # sc_udie_int_cfg_list.append(self.sc_udif_type_e[n].get())
                
                
                # sc_udie_int_cfg_array[n] = sc_udie_int_cfg_list.split(",")
                
                sc_udie_int_cfg_array[n].append(self.sc_udif_name_e[n+1].get())
                sc_udie_int_cfg_array[n].append(self.sc_udif_type_e[n+1].get())
                if (self.sc_udif_le_e[n+1].get() != ''):
                    sc_udie_int_cfg_array[n].append('le')
                    sc_udif_le_tmp = (self.sc_udif_le_e[n+1].get()).split(",")
                    for i in range (len(sc_udif_le_tmp)):
                        sc_udie_int_cfg_array[n].append(sc_udif_le_tmp[i].strip())
                if (self.sc_udif_re_e[n+1].get() != ''):
                    sc_udie_int_cfg_array[n].append('ree')
                    sc_udif_re_tmp = (self.sc_udif_re_e[n+1].get()).split(",")
                    for i in range (len(sc_udif_re_tmp)):
                        sc_udie_int_cfg_array[n].append(sc_udif_re_tmp[i].strip())
                if (self.sc_udif_cb_e[n+1].get() != ''):
                    sc_udif_cb_tmp = (self.sc_udif_cb_e[n+1].get()).split(",")
                    for i in range (len(sc_udif_cb_tmp)):
                        sc_udie_int_cfg_array[n].append(sc_udif_cb_tmp[i].strip())
                if (self.sc_udif_mp_e[n+1].get() != ''):
                    sc_udif_mp_tmp = (self.sc_udif_mp_e[n+1].get()).split(",")
                    for i in range (len(sc_udif_mp_tmp)):
                        sc_udie_int_cfg_array[n].append(sc_udif_mp_tmp[i].strip())
                    
                log.debug("Value of sc_udie_int_cfg_array %s"%sc_udie_int_cfg_array)
                log.debug("Count of cb is  %d"% len(sc_udie_int_cfg_array[n]))
                log.debug("Value of sc_udie_frame_loop in sc_udie_done_interface_config is %d"% sc_udie_frame_loop)
                sc_udie_cb_cnt = len(sc_udie_int_cfg_array[n])
               
                # for x in range(sc_udie_cb_cnt):
                #     if ("le" == sc_udie_int_cfg_array[n][x]):
                #         le = 1
                #     if ("ree" == sc_udie_int_cfg_array[n][x]):
                #         ree = 1

                # if ((le == 1 and ree == 0) or (le == 0 and ree == 1)):
                #     sc_element_loop = 4
                # elif (le == 1 and ree == 1):
                #     sc_element_loop = 6
                # else: 
                #     sc_element_loop = 3

                for i in range (1, int(sc_udie_cb_cnt)):
                # for i in range (sc_element_loop, int(sc_udie_cb_cnt)):
                    if "-clk" in sc_udie_int_cfg_array[n][i]:
                        log.debug("Value of sc_udie_int_cfg_array[n][i] %s"% sc_udie_int_cfg_array[n][i])
                        if "-clk" == sc_udie_int_cfg_array[n][i]:
                            if (self.sc_udif_cb_e[n+1].get() != '') and  (self.sc_udif_mp_e[n+1].get() != ''):
                                sc_udie_clock_cfg_array.append([sc_udie_int_cfg_array[n][0], ''] + (self.sc_udif_cb_e[n+1].get()).split(",") + (self.sc_udif_mp_e[n+1].get()).split(","))
                            elif (self.sc_udif_cb_e[n+1].get() != '') and  (self.sc_udif_mp_e[n+1].get() == ''):
                                sc_udie_clock_cfg_array.append([sc_udie_int_cfg_array[n][0], ''] + (self.sc_udif_cb_e[n+1].get()).split(","))
                            elif (self.sc_udif_cb_e[n+1].get() == '') and  (self.sc_udif_mp_e[n+1].get() != ''):
                                sc_udie_clock_cfg_array.append([sc_udie_int_cfg_array[n][0], ''] + (self.sc_udif_mp_e[n+1].get()).split(","))
                            elif (self.sc_udif_cb_e[n+1].get() == '') and  (self.sc_udif_mp_e[n+1].get() == ''):
                                sc_udie_clock_cfg_array.append([sc_udie_int_cfg_array[n][0], ''])
                            log.debug("value of sc_udie_clock_cfg_array-1 %s"% sc_udie_clock_cfg_array)
                        elif "-clk" in sc_udie_int_cfg_array[n][i]:                        
                            if (self.sc_udif_cb_e[n+1].get() != '') and  (self.sc_udif_mp_e[n+1].get() != ''):
                                sc_udie_clock_cfg_array.append([sc_udie_int_cfg_array[n][0], sc_udie_int_cfg_array[n][1].split("-")[0]] + (self.sc_udif_cb_e[n+1].get()).split(",") + (self.sc_udif_mp_e[n+1].get()).split(","))
                            elif (self.sc_udif_cb_e[n+1].get() != '') and  (self.sc_udif_mp_e[n+1].get() == ''):
                                sc_udie_clock_cfg_array.append([sc_udie_int_cfg_array[n][0], sc_udie_int_cfg_array[n][1].split("-")[0]] + (self.sc_udif_cb_e[n+1].get()).split(","))
                            elif (self.sc_udif_cb_e[n+1].get() == '') and  (self.sc_udif_mp_e[n+1].get() != ''):
                                sc_udie_clock_cfg_array.append([sc_udie_int_cfg_array[n][0], sc_udie_int_cfg_array[n][1].split("-")[0]] + (self.sc_udif_mp_e[n+1].get()).split(","))
                            elif (self.sc_udif_cb_e[n+1].get() == '') and  (self.sc_udif_mp_e[n+1].get() == ''):
                                sc_udie_clock_cfg_array.append([sc_udie_int_cfg_array[n][0], ''])
                            log.debug("value of sc_udie_clock_cfg_array-1a %s"% sc_udie_clock_cfg_array)
                        break # The clocking and modport information is obtained for clock signal here itself
                    elif "_cb" in sc_udie_int_cfg_array[n][i]:
                        log.debug("1st For Loop %s"% sc_udie_cb_cfg_array)
                        log.debug("Type of cb is %s"%sc_udie_int_cfg_array[n][i])
                        out_cb = self.in_nested_list(sc_udie_int_cfg_array[n][i], sc_udie_cb_cfg_array)
                        if out_cb:
                            out_cb.append([sc_udie_int_cfg_array[n][0]])
                            out_cb.append([sc_udie_int_cfg_array[n][i+1]])
                        else:
                            sc_udie_cb_cfg_array.append([[sc_udie_int_cfg_array[n][i]], [sc_udie_int_cfg_array[n][0]], [sc_udie_int_cfg_array[n][i+1]]])
                            log.debug("3rd else loop %s"% sc_udie_cb_cfg_array)
                            sc_udie_cb_element_loop += 1
                    elif "_mp" in sc_udie_int_cfg_array[n][i]:
                        log.debug("1st For Loop %s"% sc_udie_mp_cfg_array)
                        log.debug("Type of mp is %s"%sc_udie_int_cfg_array[n][i])
                        out_mp = self.in_nested_list(sc_udie_int_cfg_array[n][i], sc_udie_mp_cfg_array)
                        if out_mp: 
                            out_mp.append([sc_udie_int_cfg_array[n][0]])
                            out_mp.append([sc_udie_int_cfg_array[n][i+1]])
                        else:
                            sc_udie_mp_cfg_array.append([[sc_udie_int_cfg_array[n][i]], [sc_udie_int_cfg_array[n][0]], [sc_udie_int_cfg_array[n][i+1]]])
                            log.debug("3rd else loop %s"% sc_udie_mp_cfg_array)
                            sc_udie_mp_element_loop += 1 
                    # Removing The Else Part as this keeps printing for non cb or mp variables - Vimo - 050516
                    # else: 
                    #     # print "Not Found cb or mp"

                # Clearning The Global Variables
                le = 0
                ree = 0
                sc_element_loop = 0
        
        elif self.sc_choose_int_list.get(self.sc_choose_int_val.get())==3:
            for n in range(1,sc_udie_frame_loop):
                sc_udie_int_cfg_array[n-1].append(str(sheet.cell(row=n+1, column=1).value))
                sc_udie_int_cfg_array[n-1].append(str(sheet.cell(row=n+1, column=2).value))
                
                if (sheet.cell(row=n+1, column=3).value != None):
                    sc_udie_int_cfg_array[n-1].append('le')
                    sc_udif_le_tmp = str(sheet.cell(row=n+1, column=3).value).split(",")
                    for i in range (len(sc_udif_le_tmp)):
                        sc_udie_int_cfg_array[n-1].append(str(sc_udif_le_tmp[i]).strip())
                if (sheet.cell(row=n+1, column=4).value != None):
                    sc_udie_int_cfg_array[n-1].append('ree')
                    sc_udif_re_tmp = (sheet.cell(row=n+1, column=4).value).split(",")
                    for i in range (len(sc_udif_re_tmp)):
                        sc_udie_int_cfg_array[n-1].append(str(sc_udif_re_tmp[i]).strip())
                if (sheet.cell(row=n+1, column=5).value != None):
                    sc_udif_cb_tmp = (sheet.cell(row=n+1, column=5).value).split(",")
                    for i in range (len(sc_udif_cb_tmp)):
                        sc_udie_int_cfg_array[n-1].append(str(sc_udif_cb_tmp[i]).strip())
                if (sheet.cell(row=n+1, column=6).value != None):
                    sc_udif_mp_tmp = (sheet.cell(row=n+1, column=6).value).split(",")
                    for i in range (len(sc_udif_mp_tmp)):
                        sc_udie_int_cfg_array[n-1].append(str(sc_udif_mp_tmp[i]).strip())
                    
                log.debug("Value of sc_udie_int_cfg_array %s"%sc_udie_int_cfg_array)
                log.debug("Count of cb is  %s"% len(sc_udie_int_cfg_array[n-1]))
                log.debug("Value of sc_udie_frame_loop in sc_udie_done_interface_config is %d"% sc_udie_frame_loop)
                sc_udie_cb_cnt = len(sc_udie_int_cfg_array[n-1])
               
                for i in range (1, int(sc_udie_cb_cnt)):
                    if "-clk" in sc_udie_int_cfg_array[n-1][i]:
                        log.debug("Value of sc_udie_int_cfg_array[n-1][i] %s"% sc_udie_int_cfg_array[n-1][i])
                        if "-clk" == sc_udie_int_cfg_array[n-1][i]:
                            if (sheet.cell(row=n+1, column=5).value != None) and (sheet.cell(row=n+1, column=6).value != None):
                                sc_udie_clock_cfg_array.append([sc_udie_int_cfg_array[n-1][0], ''] + str(sheet.cell(row=n+1, column=5).value).split(",") + str(sheet.cell(row=n+1, column=6).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value != None) and (sheet.cell(row=n+1, column=6).value == None):
                                sc_udie_clock_cfg_array.append([sc_udie_int_cfg_array[n-1][0], ''] + str(sheet.cell(row=n+1, column=5).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value == None) and (sheet.cell(row=n+1, column=6).value != None):
                                sc_udie_clock_cfg_array.append([sc_udie_int_cfg_array[n-1][0], ''] + str(sheet.cell(row=n+1, column=6).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value == None) and (sheet.cell(row=n+1, column=6).value == None):
                                sc_udie_clock_cfg_array.append([sc_udie_int_cfg_array[n-1][0], ''])
                            log.debug("value of sc_udie_clock_cfg_array-1 %s"% sc_udie_clock_cfg_array)
                        elif "-clk" in sc_udie_int_cfg_array[n-1][i]:                        
                            if (sheet.cell(row=n+1, column=5).value != None) and (sheet.cell(row=n+1, column=6).value != None):
                                sc_udie_clock_cfg_array.append([sc_udie_int_cfg_array[n-1][0], sc_udie_int_cfg_array[n-1][1].split("-")[0]] + str(sheet.cell(row=n+1, column=5).value).split(",") + str(sheet.cell(row=n+1, column=6).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value != None) and (sheet.cell(row=n+1, column=6).value == None):
                                sc_udie_clock_cfg_array.append([sc_udie_int_cfg_array[n-1][0], sc_udie_int_cfg_array[n-1][1].split("-")[0]] + str(sheet.cell(row=n+1, column=5).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value == None) and (sheet.cell(row=n+1, column=6).value != None):
                                sc_udie_clock_cfg_array.append([sc_udie_int_cfg_array[n-1][0], sc_udie_int_cfg_array[n-1][1].split("-")[0]] + str(sheet.cell(row=n+1, column=6).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value == None) and (sheet.cell(row=n+1, column=6).value == None):
                                sc_udie_clock_cfg_array.append([sc_udie_int_cfg_array[n-1][0], ''])
                            log.debug("value of sc_udie_clock_cfg_array-1a %s"% sc_udie_clock_cfg_array)
                        break # The clocking and modport information is obtained for clock signal here itself
                    elif "_cb" in sc_udie_int_cfg_array[n-1][i]:
                        log.debug("1st For Loop %s"% sc_udie_cb_cfg_array)
                        log.debug("Type of cb is %s"%sc_udie_int_cfg_array[n-1][i])
                        out_cb = self.in_nested_list(sc_udie_int_cfg_array[n-1][i], sc_udie_cb_cfg_array)
                        if out_cb:
                            out_cb.append([sc_udie_int_cfg_array[n-1][0]])
                            out_cb.append([sc_udie_int_cfg_array[n-1][i+1]])
                        else:
                            sc_udie_cb_cfg_array.append([[sc_udie_int_cfg_array[n-1][i]], [sc_udie_int_cfg_array[n-1][0]], [sc_udie_int_cfg_array[n-1][i+1]]])
                            log.debug("3rd else loop %s"% sc_udie_cb_cfg_array)
                            sc_udie_cb_element_loop += 1
                    elif "_mp" in sc_udie_int_cfg_array[n-1][i]:
                        log.debug("1st For Loop %s"% sc_udie_mp_cfg_array)
                        log.debug("Type of mp is %s"%sc_udie_int_cfg_array[n-1][i])
                        out_mp = self.in_nested_list(sc_udie_int_cfg_array[n-1][i], sc_udie_mp_cfg_array)
                        if out_mp: 
                            out_mp.append([sc_udie_int_cfg_array[n-1][0]])
                            out_mp.append([sc_udie_int_cfg_array[n-1][i+1]])
                        else:
                            sc_udie_mp_cfg_array.append([[sc_udie_int_cfg_array[n-1][i]], [sc_udie_int_cfg_array[n-1][0]], [sc_udie_int_cfg_array[n-1][i+1]]])
                            log.debug("3rd else loop %s"% sc_udie_mp_cfg_array)
                            sc_udie_mp_element_loop += 1 
                    # Removing The Else Part as this keeps printing for non cb or mp variables - Vimo - 050516
                    # else: 
                    #     # print "Not Found cb or mp"

                # Clearning The Global Variables
                le = 0
                ree = 0
                sc_element_loop = 0


        log.debug("Value of sc_udie_frame_loop in sc_udie_done_interface_config is %d"% sc_udie_frame_loop)
        self.sc_udie_loop_kcb();
        # sc_udie_loop = 0;
        self.sc_udif_frame_kcb();
        self.sc_udi_nxt_kcb();
        self.sc_udi_done_kcb();
        
        if sc_agt_selected_started:
            log.debug("Value of sc_interface_pkg @ sc_udie_done_interface_config %s"% sc_interface_pkg)
            log.debug("Value of element is %d"% sc_interface_pkg[sc_agt_intf_cnt_tmp-1][1])
            if sc_interface_pkg[sc_agt_intf_cnt_tmp-1][1] == 2 or sc_interface_pkg[sc_agt_intf_cnt_tmp-1][1] == 3:
                log.debug("Final 1: Value of element is %d"% sc_interface_pkg[sc_agt_intf_cnt_tmp-1][1])
                sc_interface_pkg[sc_agt_intf_cnt_tmp-1].append(sc_udie_frame_loop)
                sc_interface_pkg[sc_agt_intf_cnt_tmp-1].append(sc_udie_int_cfg_array)
                sc_interface_pkg[sc_agt_intf_cnt_tmp-1].append(sc_udie_clock_cfg_array)
                sc_interface_pkg[sc_agt_intf_cnt_tmp-1].append(sc_udie_cb_cfg_array)
                sc_interface_pkg[sc_agt_intf_cnt_tmp-1].append(sc_udie_mp_cfg_array)
            #sc_agt_intf_cnt_tmp += 1 
            
            log.debug("value of sc_agt_intf_cnt %s sc_agt_intf_cnt_tmp %d @ sc_udie_done_interface_config"%(sc_agt_intf_cnt, sc_agt_intf_cnt_tmp))
            if sc_agt_intf_cnt_tmp == sc_agt_intf_cnt:
                log.debug("2. Final: Value of sc_interface_pkg @ sc_udie_done_interface_config %s"% sc_interface_pkg )
                        
                # # print "pre intf: Value of sc_interface_pkg[i][3]", sc_interface_pkg[sc_agt_intf_cnt_tmp-1][3]
                # # print "pre intf: Value of sc_interface_pkg[i][4]", sc_interface_pkg[sc_agt_intf_cnt_tmp-1][4]
                # # print "pre intf: Value of sc_interface_pkg[i][5]", sc_interface_pkg[sc_agt_intf_cnt_tmp-1][5]
                # # print "pre intf: Value of sc_interface_pkg[i][6]", sc_interface_pkg[sc_agt_intf_cnt_tmp-1][6]

                # sc_agt_selected_started = 0
                self.generate_button_operation();
                self.return_button_create_cb(2);
            else:
                log.debug("2a. Final: Value of sc_interface_pkg @ sc_udie_done_interface_config %s"% sc_interface_pkg)
                self.singlecomponent_agt_interface()
        else:        
            self.generate_button_operation();
            self.return_button_create_cb(2);

    
    def mc_initial_button_frame_code(self):
        # Killing the existing return_button and exit_button widgets 
        self.return_button_cb();
        self.exit_button_cb();
        
        #if not (self.mc_initial_button_frame):
        #    self.mc_initial_button_frame = Frame(root)
        #    self.mc_initial_button_frame.grid(row=8, column=0, columnspan=1, sticky='WE') # Note:072619: Changed row from 40 to 8
        #    self.mc_initial_button_frame.rowconfigure(8,weight=1)
        #    self.mc_initial_button_frame.columnconfigure((0,1),weight=1)
        #    #self.mc_initial_button_frame.grid_rowconfigure(8,weight=1)
        #    #self.mc_initial_button_frame.grid_columnconfigure((0,1),weight=1)
        #else:
        #    log.debug("Multi Cluster Widget Initial Button Frame already Exists\n")
        #    self.mc_initial_button_frame.grid() 
        
        self.return_button_create_cb(6);
        self.exit_button_create_cb(4);
   
    def parse_ss_related_widgets_kcb(self):
        log.debug("parse_ss_related_widgets_kcb: Killing the parse_ss label, entry and parse_ss_button_code!\n")
        
        if (self.mc_ss_initial_button_frame):
            self.mc_ss_initial_button_frame.grid_forget(); self.mc_ss_initial_button_frame = None

        self.multiclustervip_ss_buttons_kcb();
        self.parse_ss_button_kcb();
    
    def mc_ss_initial_button_code(self):
        # Killing the existing return_button and exit_button widgets 
        self.return_button_cb();
        self.exit_button_cb();
        
        if not (self.mc_ss_initial_button_frame):
            self.mc_ss_initial_button_frame = Frame(root)
            self.mc_ss_initial_button_frame.grid(row=8, column=0, columnspan=2, sticky='WE')
            self.mc_ss_initial_button_frame.rowconfigure(8,weight=1)
            self.mc_ss_initial_button_frame.columnconfigure((0,1,2),weight=1)
            #self.mc_ss_initial_button_frame.grid_rowconfigure(8,weight=1)
            #self.mc_ss_initial_button_frame.grid_columnconfigure((0,1),weight=1)
        else:
            log.debug("Multi Cluster Widget Parsing SS Initial Button Frame already Exists\n")
            self.mc_ss_initial_button_frame.grid() 
        
        self.return_button_create_cb(7);
        self.exit_button_create_cb(5);
        self.parse_ss_button_create_cb(1);


    # Multi Cluster VIP Code :062419/MON
    def multiclustervip(self):
        global mc_env_no_max
        global mc_env_no_cur
        global mc_env_agt_no 
        global mc_env_agt_no_tmp
        global mc_env_cfg_pool

        # Default Variables Values @ the start
        mc_env_cfg_started = 0
        mc_env_no_max = 1
        mc_env_no_cur = 0
        mc_env_agt_no = 0
        mc_env_agt_no_tmp = 0
        mc_env_cfg_pool = []

        log.debug("Going to Create multiclustervip Flow\n")
        self.generate_button_cb();
        self.return_button_cb();
        self.exit_button_cb();
        
        self.greeting_widget_window_kcb();
        if "self.single_component_button" in self.initial_screen_buttons_dict.keys():
            self.initial_screen_buttons_dict['self.single_component_button'].grid_remove()
        if "self.complete_vip_button" in self.initial_screen_buttons_dict.keys():
            self.initial_screen_buttons_dict['self.complete_vip_button'].grid_remove()
        if "self.multi_cluster_vip_button" in self.initial_screen_buttons_dict.keys(): 
            self.initial_screen_buttons_dict['self.multi_cluster_vip_button'].grid_remove()
        
        if not (self.mcl1):
            self.mcl1 = Label(root, font=MyFontH2, text="Create Multi Cluster VIP Using: ")
            self.mcl1.grid(row=5, column=0, sticky='W')
            self.mcl1.rowconfigure(5,weight=1)
        else:
            self.mcl1.grid()
        
        self.multi_cluster_vip_buttons_list_value = (
         ('self.multi_cluster_vip_button_gui', 'GUI Approach',mcv, 1, self.multiclustervip_gui, 6, 'W', MyFontH1),
         ('self.multi_cluster_vip_button_ss', 'Load Spreadsheet Approach',mcv, 2, self.multiclustervip_ss, 7, 'W', MyFontH1),
        )

        for _MultiClusterButtonName , _Text, _Variable, _Value, _Operation, _Row, _Sticky, _Font in self.multi_cluster_vip_buttons_list_value: 
            _MultiClusterButtonName_tmp = Radiobutton(root, activebackground="gray50", font=_Font, anchor="center", text=_Text, variable=_Variable, value=_Value, command=_Operation)
            _MultiClusterButtonName_tmp.grid(row=_Row, sticky=_Sticky)
            _MultiClusterButtonName_tmp.rowconfigure(_Row,weight=1)
            self.multi_cluster_vip_buttons_dict[_MultiClusterButtonName]=_MultiClusterButtonName_tmp 
       
        # Return and Exit Button Callbacks
        self.mc_initial_button_frame_code()

    
    def mc_initial_screen_kill_cb(self):
        log.debug("mc_initial_screen_kill_cb: Calling API to remove/delete the mc initial screen widgets!\n")
        if (self.mc_initial_button_frame):
            self.mc_initial_button_frame.grid_forget(); self.mc_initial_button_frame = None
        
        if (self.mcl1):
            self.mcl1.destroy(); self.mcl1 = None # self.mcl1.destroy(); self.mcl1 = None
        
        if self.multi_cluster_vip_buttons_dict['self.multi_cluster_vip_button_ss']:
            self.multi_cluster_vip_buttons_dict['self.multi_cluster_vip_button_ss'].grid_remove()
        if self.multi_cluster_vip_buttons_dict['self.multi_cluster_vip_button_gui']:
            self.multi_cluster_vip_buttons_dict['self.multi_cluster_vip_button_gui'].grid_remove()


    def multiclustervip_gui(self):
        global mc_env_cfg_started
        global mc_env_find_idx
        global mc_env_cfg_pool_cnt
        global mc_env_no_cur 
        global mc_env_no_max
        global mc_curr_env_mon_scb_con_arr
        global mc_env_arr_range
        log.debug("multiclustervip_gui: Going to Create multiclustervip Flow Using GUI\n")
       
        # Deleting the unwanted widgets for the multiclustervip_gui
        self.mc_initial_screen_kill_cb()

        # Set default values for variables
        # mc_env_no_cur = 0
        # mc_env_no_max = 1

        # Check if the entry is same or different
        while mc_env_no_cur < mc_env_no_max:
            mc_env_cfg_started = 1
            log.debug("multiclustervip_gui : Value of mc_env_no_cur %d mc_env_no_max %d\n"%(mc_env_no_cur, mc_env_no_max))
            log.debug("multiclustervip_gui : Value of mc_env_cfg_pool %s\n"%mc_env_cfg_pool)
            
            # Find if the env exists in the mc_env_cfg_pool 
            # self.mc_env_cfg_pool_exists()

            # Creating The env configuration layout
            self.mc_new_win_layout() 

            # Creaint / loading the env
            if mc_env_cfg_pool != []:
                log.debug("multiclustervip_gui : mc_env_cfg_pool != []\n")
                if mc_env_cfg_pool[mc_env_no_cur] != []:
                    log.debug("multiclustervip_gui : mc_env_cfg_pool[%d] != []. mc_env_cfg_pool[%d] %s\n"%(mc_env_no_cur, mc_env_no_cur, mc_env_cfg_pool[mc_env_no_cur]))
                    if mc_env_cfg_pool[mc_env_no_cur][0] != '': 
                        log.debug("multiclustervip_gui : mc_env_cfg_pool[%d][0] != ''. mc_env_cfg_pool[%d][0] %s\n"%(mc_env_no_cur, mc_env_no_cur, mc_env_cfg_pool[mc_env_no_cur][0]))
                        log.debug("multiclustervip_gui : mc_curr_env_mon_scb_con_arr %s, mc_env_cfg_pool %s\n"%(mc_curr_env_mon_scb_con_arr, mc_env_cfg_pool))
                        
                        # Loading the pre-existing values for the mc env configuration
                        if self.mce2.get() != None:
                            self.mce2.delete(0, "end")
                        self.mce2.insert(0, mc_env_cfg_pool[mc_env_no_cur][0])    
                        
                        if self.mce6.get() != None:
                            self.mce6.delete(0, "end")
                        if mc_env_cfg_pool[mc_env_no_cur][1]:
                            self.mce6.insert(0, mc_env_cfg_pool[mc_env_no_cur][1])    
                        
                        if self.mce5.get() != None:
                            self.mce5.delete(0, "end")
                        if mc_env_cfg_pool[mc_env_no_cur][2]:
                            self.mce5.insert(0, mc_env_cfg_pool[mc_env_no_cur][2][0])    
                        
                        if self.mce3.get() != None:
                            self.mce3.delete(0, "end")
                        if mc_env_cfg_pool[mc_env_no_cur][3]:
                            self.mce3.insert(0, mc_env_cfg_pool[mc_env_no_cur][3])    
                        
                        if self.mce4.get() != None:
                            self.mce4.delete(0, "end")
                        if mc_env_cfg_pool[mc_env_no_cur][4]:
                            self.mce4.insert(0, mc_env_cfg_pool[mc_env_no_cur][4])    
          
                        # Loading the values of env directory 
                        if self.mce8.get() != None:
                            self.mce8.delete(0, "end")
                        if mc_env_cfg_pool[mc_env_no_cur][6]:
                            self.mce8.insert(0, str(mc_env_cfg_pool[mc_env_no_cur][6]).strip('[,],\''))
                        else:
                            self.mce8.insert(0, 'pwd')
                        log.debug("multiclustervip_gui : mc_env_cfg_pool[%d][6] %s\n"%(mc_env_no_cur, mc_env_cfg_pool[mc_env_no_cur][6]))
                        
                        # Loading the interface details 
                        if self.mce9.get() != None:
                            self.mce9.delete(0, "end")
                        if mc_env_cfg_pool[mc_env_no_cur][7]:
                            self.mce9.insert(0, mc_env_cfg_pool[mc_env_no_cur][7][0])

                        mc_curr_env_mon_scb_con_arr = []
                        mc_curr_env_mon_scb_con_arr = mc_env_cfg_pool[mc_env_no_cur][5]
                        log.debug("multiclustervip_gui : mc_curr_env_mon_scb_con_arr %s, mc_env_cfg_pool %s\n"%(mc_curr_env_mon_scb_con_arr, mc_env_cfg_pool))
            else:
                mc_env_cfg_pool.append([[] for x in range(mc_env_arr_range)])
                mc_env_cfg_pool_cnt += 1
                log.debug("multiclustervip_gui : Value of mc_env_cfg_pool_cnt %d mc_env_cfg_pool %s\n"%(mc_env_cfg_pool_cnt,mc_env_cfg_pool))


            # Waiting for the return or prev or next/done agt config to be finished
            log.debug("multiclustervip_gui : Going to wait for mc_env_cnt_wait %d ! Value of mc_env_no_cur %d mc_env_no_max %d"%(mc_env_cnt_wait.get(),mc_env_no_cur,mc_env_no_max))
            root.wait_variable(mc_env_cnt_wait)
            log.debug("multiclustervip_gui : Wait done0 for mc_env_cnt_wait %d ! Value of mc_env_no_cur %d mc_env_no_max %d"%(mc_env_cnt_wait.get(),mc_env_no_cur,mc_env_no_max))
            
            # Code to increment mce5_agt_cnt based on mc_agt_cnt_wait value 
            if mc_env_cnt_wait.get() != 4: 
                mc_env_no_cur += 1
                if mc_env_cnt_wait.get() == 1 or mc_env_cnt_wait.get() == 2:
                    log.debug("multiclustervip_gui: breaking out of the while loop for mc_env_no_cur for return and exit API\n")
                    break

            log.debug("multiclustervip_gui : Wait done for mc_env_cnt_wait %d ! Value of mc_env_no_cur %s"%(mc_env_cnt_wait.get(),mc_env_no_cur))
        log.debug("multiclustervip_gui : Value of mc_env_no_cur %d mc_env_no_max %d mc_env_cfg_pool %s"%(mc_env_no_cur, mc_env_no_max, mc_env_cfg_pool))

        # Going to call the GENERATE CODE Button to build the environment and all necessary files.
        
        # Killing the button widgets
        self.mc_win_layout_return_exit_load_prev_next_done_buttons_kcb();        

        if self.final_rmg_frame: 
            self.final_rmg_frame.grid_forget(); self.final_rmg_frame = None
        self.final_rmg_frame = Frame(root, bg='gray50',)
        self.final_rmg_frame.grid(row=40, column=0, columnspan=2, sticky='WE')
        self.final_rmg_frame.rowconfigure(40,weight=1)
        self.final_rmg_frame.columnconfigure((0,1,2),weight=1)

        # Code to call the generate_button_operation
        self.generate_button_operation()
        self.return_button_create_cb(8);
        self.exit_button_create_cb(6)


    def mc_new_win_layout(self):
        log.debug("mc_new_win_layout: Going to Create multiclustervip Flow Using GUI Layout\n")

        # Removing / Killing the label and entry layout
        self.mc_new_win_layout_kcb()

        # Creating widgets for multiclustervip created using GUI
        if not (self.mcl2):
            self.mcl2 = Label(root, font=MyFontH2, text="Enter Env Name: ")
            self.mcl2.grid(row=6, column=0, sticky='W')
            self.mcl2.rowconfigure(6,weight=1)
        else:
            self.mcl2.grid()
        
        if not (self.mce2): 
            self.mce2 = Entry(root, font=MyFontH2)
            self.mce2.grid(row=6, column=1, sticky='WE')
            self.mce2.rowconfigure(6,weight=1)
        else:
            self.mce2.grid()
        
        
        if not (self.mcl6):
            self.mcl6 = Label(root, font=MyFontH2, text="How Many Sub Env You Want To Create: ")
            self.mcl6.grid(row=7, column=0, sticky='W')
            self.mcl6.rowconfigure(7,weight=1)
        else:
            self.mcl6.grid()
        
        if not (self.mce6): 
            self.mce6 = Entry(root, font=MyFontH2)
            self.mce6.bind('<FocusIn>',  self.mc_sub_env_details_focus_in)
            #self.mce6.bind('<FocusOut>', self.mc_sub_env_details)
            self.mce6.bind('<FocusOut>', self.mc_sub_env_details_focus_out)
            self.mce6.grid(row=7, column=1, sticky='WE')
            self.mce6.rowconfigure(7,weight=1)
        else:
            self.mce6.grid()


        if not (self.mcl5):
            self.mcl5 = Label(root, font=MyFontH2, text="How Many Agents You Want To Create: ")
            self.mcl5.grid(row=8, column=0, sticky='W')
            self.mcl5.rowconfigure(8,weight=1)
        else:
            self.mcl5.grid()
        
        if not (self.mce5): 
            self.mce5 = Entry(root, font=MyFontH2)
            self.mce5.bind('<FocusOut>', self.mc_env_agt_details)
            self.mce5.grid(row=8, column=1, sticky='WE')
            self.mce5.rowconfigure(8,weight=1)
        else:
            self.mce5.grid()


        if not (self.mcl3):
            self.mcl3 = Label(root, font=MyFontH2, text="How Many Monitors You Want To Create: ")
            self.mcl3.grid(row=9, column=0, sticky='W')
            self.mcl3.rowconfigure(9,weight=1)
        else:
            self.mcl3.grid()
        
        if not (self.mce3): 
            self.mce3 = Entry(root, font=MyFontH2)
            self.mce3.grid(row=9, column=1, sticky='WE')
            self.mce3.rowconfigure(9,weight=1)
        else:
            self.mce3.grid()


        if not (self.mcl4):
            self.mcl4 = Label(root, font=MyFontH2, text="How Many Scoreboards You Want To Create: ")
            self.mcl4.grid(row=10, column=0, sticky='W')
            self.mcl4.rowconfigure(10,weight=1)
        else:
            self.mcl3.grid()
        
        if not (self.mce4): 
            self.mce4 = Entry(root, font=MyFontH2)
            self.mce4.grid(row=10, column=1, sticky='WE')
            self.mce4.rowconfigure(10,weight=1)
        else:
            self.mce4.grid()

        # COde for getting the env interface configuration
        if not (self.mcl9):
            self.mcl9 = Label(root, font=MyFontH2, text="How Many Env Interface To Create: ")
            self.mcl9.grid(row=11, column=0, sticky='W')
            self.mcl9.rowconfigure(11,weight=1)
        else:
            self.mcl9.grid()
        
        if not (self.mce9): 
            self.mce9 = Entry(root, font=MyFontH2)
            self.mce9.bind('<FocusOut>', self.mc_env_intf_details)
            self.mce9.grid(row=11, column=1, sticky='WE')
            self.mce9.rowconfigure(11,weight=1)
        else:
            self.mce9.grid()

        if not (self.mcl8):
            self.mcl8 = Label(root, font=MyFontH2, text="Specify The Environment Directory Path: ")
            self.mcl8.grid(row=12, column=0, sticky='W')
            self.mcl8.rowconfigure(12,weight=1)
        else:
            self.mcl8.grid()
        
        if not (self.mce8): 
            self.mce8 = Entry(root, font=MyFontH2)
            self.mce8.delete(0, END)
            self.mce8.insert(0, 'pwd')
            self.mce8.bind('<Button-3>', self.mc_envcfg_dir_dialog)
            self.mce8.bind('<Button-1>', self.mc_envcfg_dir_path)
            self.mce8.grid(row=12, column=1, sticky='WE')
            self.mce8.rowconfigure(12,weight=1)
        else:
            self.mce8.grid()

        # Calling the API to build buttons for env layout
        self.mc_win_layout_return_exit_load_prev_next_done_buttons()


    def mc_envcfg_dir_dialog(self, *args):
        self.mce8.delete(0, END)
        #self.mce8.insert(0, tkFileDialog.askdirectory(initialdir = ".",title = "Select Directory"))
        self.mce8.insert(0, filedialog.askdirectory(initialdir = ".",title = "Select Directory"))
    
    def mc_envcfg_dir_path(self, *args):
        self.mce8.insert(0, '')

    def multiclustervip_ss(self):
        log.debug("multiclustervip_ss : Going to Create multiclustervip Flow Using Spreadsheet\n")
        
        # Deleting the unwanted widgets for the multiclustervip_gui
        self.mc_initial_screen_kill_cb()
        
        if not (self.mcssl_1):
            self.mcssl_1 = Label(font=MyFontH2, text="Choose the EnvConfig Spreadsheet To Load: ")
            self.mcssl_1.grid(row=1, column=0, sticky='W')
            self.mcssl_1.rowconfigure(1,weight=1)
            self.mcssl_1.columnconfigure(0,weight=1)
        else:
            self.mcssl_1.grid_forget(); self.mcssl_1 = None
            self.mcssl_1 = Label(font=MyFontH2, text="Choose the EnvConfig Spreadsheet To Load: ")
            self.mcssl_1.grid(row=1, column=0, sticky='W')
            self.mcssl_1.rowconfigure(1,weight=1)
            self.mcssl_1.columnconfigure(0,weight=1)
                
        if not (self.mcsse_1):    
            self.mcsse_1 = Entry(font=MyFontH2, bg="goldenrod")
            self.mcsse_1.config(width=40)
            self.mcsse_1.delete(0, END)
            self.mcsse_1.insert(0, 'Right Click To Load-Left Click To Enter')
            self.mcsse_1.bind('<Button-3>', self.mc_load_envcfg_ss_file_dialog)
            self.mcsse_1.bind('<Button-1>', self.mc_load_envcfg_ss_file_path)
            self.mcsse_1.grid(row=1, column=1, sticky='WE')
            self.mcsse_1.rowconfigure(1,weight=1)
            self.mcsse_1.columnconfigure(1,weight=1)
        else:
            self.mcsse_1.grid_forget(); self.mcsse_1 = None
            self.mcsse_1 = Entry(font=MyFontH2, bg="goldenrod")
            self.mcsse_1.delete(0, END)
            self.mcsse_1.insert(0, 'Right Click To Load-Left Click To Enter')
            self.mcsse_1.bind('<Button-3>', self.mc_load_envcfg_ss_file_dialog)
            self.mcsse_1.bind('<Button-1>', self.mc_load_envcfg_ss_file_path)
            self.mcsse_1.grid(row=1, column=1, sticky='WE')
            self.mcsse_1.rowconfigure(1,weight=1)
            self.mcsse_1.columnconfigure(1,weight=1)
        
        # Return and Exit Button Callbacks
        self.mc_ss_initial_button_code()
    
    def multiclustervip_ss_buttons_kcb(self):
        log.debug("multiclustervip_ss_buttons_kcb : Going to Kill All the Spreadsheet Load Related Widgets\n")
        
        if (self.mcssl_1):
            self.mcssl_1.grid_forget(); self.mcssl_1 = None
        
        if (self.mcsse_1):
            self.mcsse_1.grid_forget(); self.mcsse_1 = None

    def mc_load_envcfg_ss_file_dialog(self, *args):
        self.mcsse_1.delete(0, END)
        #self.mcsse_1.insert(0, tkFileDialog.askopenfilename(initialdir = ".",title = "Select file",filetypes = (("xlsx files","*.xlsx"),("all files","*.*"))))
        self.mcsse_1.insert(0, filedialog.askopenfilename(initialdir = ".",title = "Select file",filetypes = (("xlsx files","*.xlsx"),("all files","*.*"))))
    
    def mc_load_envcfg_ss_file_path(self, *args):
        if self.mcsse_1.get() == 'Right Click To Load-Left Click To Enter':
            self.mcsse_1.delete(0, END)
            self.mcsse_1.insert(0, '')
        else:
            self.mcsse_1.insert(0, '')

    def return_ss_link(self, arg1):
        #global xls_file_path_tmp
        
        # Getting the xls path
        load_xls_file_path_tmp = arg1 
        log.debug("return_ss_link: Value of load_xls_file_path_tmp %s"%(load_xls_file_path_tmp))

        if len(load_xls_file_path_tmp)>1:
            load_xls_file_path = str(load_xls_file_path_tmp[0]).strip()
            search_user_sheet  = str(load_xls_file_path_tmp[1]).strip()
        else:
            load_xls_file_path = str(load_xls_file_path_tmp[0])
            search_user_sheet  = None 
        log.debug("return_ss_link: Value of load_xls_file_path %s search_user_sheet %s"%(load_xls_file_path,search_user_sheet))

        if not os.path.isfile(load_xls_file_path):
            log.error("return_ss_link : Please Load a Proper Interface Spreadsheet For Generating The Output\n")

        # Not Opening and then Loading, Just Loading: 01032021SUN
        # load_xls_file = open(load_xls_file_path, "a+") 
        # wb = load_workbook(load_xls_file) 
        wb = load_workbook(load_xls_file_path) 

        #sheet = wb.get_sheet_names()
        sheet = wb.sheetnames
        for ws in sheet:
            log.debug("Name of the sheet is : for %s"%ws)
            if search_user_sheet != None:
                log.debug("into search_user_sheet %s ws %s"%(search_user_sheet,ws))
                if ws == search_user_sheet:
                    #sheet = wb.get_sheet_by_name(ws)
                    sheet = wb[ws]
                    log.debug("Name of the sheet selected is %s"%sheet) 
                    break
            elif ws == "Sheet1":
                #sheet = wb.get_sheet_by_name(ws)
                sheet = wb[ws]
                log.debug("Name of the sheet selected is %s"%sheet)
                break
            else:
                continue

        # if wb.active <> sheet:
        if wb.active != sheet:
            log.info("return_ss_link : Required Interface Definition Sheet Is Not Found In Spreadsheet. Please Re-load Proper File!\n")

        return sheet


    def parse_ss_button_code(self):
        global parse_ss_env_no
        global parse_n
        global which_parse_gb
        global parse_env_cfg_pool
        global mc_intf_arr_range
        global mc_env_cfg_pool
        global mc_env_no_cur
        global mc_env_no_max
        global mc_agt_cfg_pool
        global mc_agt_cfg_pool_cnt
        global mc_agt_drv_intf_cfg_pool
        global mc_agt_drv_intf_cfg_pool_cnt
        global mc_env_cfg_pool_cnt
        global mc_env_intf_cfg_pool
        global mc_env_intf_cfg_pool_cnt
        global mc_global_env_mon_scb_con_arr

        # Generic Interface Spreadsheet Parsing Variables
        global generic_udif_frame_loop
        global generic_udif_clock_cfg_array
        global generic_udif_cb_cfg_array
        global generic_udif_mp_cfg_array
        global generic_udif_intf_cfg_array

        log.debug("parse_ss_button_code : Going to Load Env Configuration from Spreadsheet and Parse it!\n")
        
        log.debug("parse_ss_button_code : Going to CLean Main Parse Variables. parse_ss_env_no %d parse_env_cfg_pool %s!\n"%(parse_ss_env_no, parse_env_cfg_pool))
        parse_ss_env_no = 0
        parse_env_cfg_pool = []
        log.debug("parse_ss_button_code : CLeaned Main Parse Variables. parse_ss_env_no %d parse_env_cfg_pool %s!\n"%(parse_ss_env_no, parse_env_cfg_pool))

        if which_parse_gb == 1:
            if len((self.mcsse_1.get()).split(","))>1:
                self.parse_ss_sheet_path = (self.mcsse_1.get()).split(",")
            else:
                self.parse_ss_sheet_path = []; parse_ss_env_temp = ''
                parse_ss_env_temp = (((self.mcsse_1.get()).split("/"))[-1]).replace("_file.xlsx","")
                self.parse_ss_sheet_path.append(self.mcsse_1.get())
                self.parse_ss_sheet_path.append(parse_ss_env_temp)
                log.debug("parse_ss_button_code : Value of parse_ss_env_temp = %s, parse_ss_sheet_path is %s!\n"%(parse_ss_env_temp, self.parse_ss_sheet_path))

            log.debug("parse_ss_button_code : Value of parse_ss_sheet_path is %s!\n"%self.parse_ss_sheet_path)
        
            # Killing the multiclustervip_ss_buttons and the parse_button 
            self.multiclustervip_ss_buttons_kcb();
            self.parse_ss_button_kcb();
        
        elif which_parse_gb == 2:
            if len((self.mce7.get()).split(","))>1:
                self.parse_ss_sheet_path = (self.mce7.get()).split(",")
            else:
                self.parse_ss_sheet_path = []; parse_ss_env_temp = ''
                parse_ss_env_temp = (((self.mce7.get()).split("/"))[-1]).replace("_file.xlsx","")
                self.parse_ss_sheet_path.append(self.mce7.get())
                self.parse_ss_sheet_path.append(parse_ss_env_temp)
                log.debug("parse_ss_button_code : Value of parse_ss_env_temp = %s, parse_ss_sheet_path is %s!\n"%(parse_ss_env_temp, self.parse_ss_sheet_path))

            log.debug("parse_ss_button_code : Value of parse_ss_sheet_path is %s!\n"%self.parse_ss_sheet_path)
            
            # Killing the mc load env parse spreadsheet window
            self.mc_load_envcfg_by_parse_button_create_kcb()

            # Killing the parse env spreadsheet code and replace with mc load env cfg code
            self.parse_ss_button_create_kcb()
            self.mc_load_envcfg_button_create_cb()

        # Getting the respective sheet link
        self.parse_ss_sheet = self.return_ss_link(self.parse_ss_sheet_path)

        # Parsing the required sheet
        self.generic_parse_ss_and_store(self.parse_ss_sheet)
       
        #----------------------------------------------------------------------
        # Testing Logic To Load details about N-instace of env everywhere !
        #----------------------------------------------------------------------
        for x in range (len(parse_env_cfg_pool)):
            log.debug("parse_ss_button_code : Value of parse_env_cfg_pool[%0d] %s!\n"%(x, parse_env_cfg_pool[x]))
            if len((parse_env_cfg_pool[x][0].split(",")[1]).split(":"))>1:
                
                log.debug(((parse_env_cfg_pool[x][0].split(","))[1]).split(":"))

                whattoreplace = ((parse_env_cfg_pool[x][0].split(","))[1]).split(":")[0]
                
                if "__c" in whattoreplace:
                    whattoreplace = whattoreplace.replace("__c","")
                if "__s" in whattoreplace:
                    whattoreplace = whattoreplace.replace("__s","")
                
                replacewith   = parse_env_cfg_pool[x][0].split(",")[1]
                log.debug("parse_ss_button_code : whattoreplace %s, replacewith %s, parse_env_cfg_pool[%0d] %s!\n"%(whattoreplace, replacewith, x, parse_env_cfg_pool[x]))
                
                #parse_env_cfg_pool[x] = ast.literal_eval(re.sub(r'\%s\b(?!:)'%(whattoreplace),'%s'%(replacewith), str(parse_env_cfg_pool[x])))
                parse_env_cfg_pool = ast.literal_eval(re.sub(r'\b%s\b(?!:)'%(whattoreplace),'%s'%(replacewith), str(parse_env_cfg_pool)))
                
                log.debug("parse_ss_button_code : Value of parse_env_cfg_pool[%0d] %s!\n"%(x, parse_env_cfg_pool[x]))
                log.debug("parse_ss_button_code : Value of parse_env_cfg_pool %s!\n"%(parse_env_cfg_pool))
        
            if "__c" in str(((parse_env_cfg_pool[x][0].split(","))[1]).split(":")[0]) or "__s" in str(((parse_env_cfg_pool[x][0].split(","))[1]).split(":")[0]):
                log.debug(((parse_env_cfg_pool[x][0].split(","))[1]).split(":"))
                replacewith = ((parse_env_cfg_pool[x][0].split(","))[1]).split(":")[0]
                
                if "__c" in replacewith:
                    whattoreplace = replacewith.replace("__c","")
                if "__s" in replacewith:
                    whattoreplace = replacewith.replace("__s","")
                
                log.debug("parse_ss_button_code : whattoreplace %s, replacewith %s, parse_env_cfg_pool[%0d] %s!\n"%(whattoreplace, replacewith, x, parse_env_cfg_pool[x]))
                
                parse_env_cfg_pool = ast.literal_eval(re.sub(r'\b%s\b(?!__)'%(whattoreplace),'%s'%(replacewith), str(parse_env_cfg_pool)))
                
                log.debug("parse_ss_button_code : Value of parse_env_cfg_pool[%0d] %s!\n"%(x, parse_env_cfg_pool[x]))
                log.debug("parse_ss_button_code : Value of parse_env_cfg_pool %s!\n"%(parse_env_cfg_pool))
        #----------------------------------------------------------------------

        if which_parse_gb == 1:
            # Storing the parsed env cfg values into the global mc_env_cfg_pool
            mc_env_cfg_pool = parse_env_cfg_pool                 
            log.debug("parse_ss_button_code : Value of mc_env_cfg_pool is %s!\n"%mc_env_cfg_pool)

            # Setting up the values for mc_env_no_cur mc_env_no_max
            mc_env_no_cur = 0;
            mc_env_no_max = len(mc_env_cfg_pool)
            log.debug("parse_ss_button_code : Value of mc_env_no_cur %d mc_env_no_max is %d!\n"%(mc_env_no_cur, mc_env_no_max))

            # Loading the mc_agt_cfg_pool
            for a in range (len(mc_env_cfg_pool)):   
                log.debug("parse_ss_button_code : Value of mc_env_cfg_pool[%0d] is %s!\n"%(a, mc_env_cfg_pool[a]))
                
                if mc_env_cfg_pool[a][2] != []:
                    if mc_env_cfg_pool[a][2][0] != []:
                        for b in range (int(((mc_env_cfg_pool[a][2][0]).split(","))[0])):
                            if mc_env_cfg_pool[a][2][b+1] != []:
                                mc_agt_cfg_pool.append(mc_env_cfg_pool[a][2][b+1])
                                
                                #Code for loading the mc_agt_drv_intf_cfg_pool
                                if mc_env_cfg_pool[a][2][b+1][3] != '':
                                    for c in range (int(((mc_env_cfg_pool[a][2][b+1][3]).split(","))[0])):
                                        if mc_env_cfg_pool[a][2][b+1][5] != []:
                                            mc_agt_drv_intf_cfg_pool.append(mc_env_cfg_pool[a][2][b+1][5][c])

                                #Code for loading the mc_global_env_mon_arr 
                                if mc_env_cfg_pool[a][2][b+1][4] != '':
                                    log.debug("parse_ss_button_code : mc_env_cfg_pool[%0d][2][%0d+1][4] %s!\n"%(a,b,mc_env_cfg_pool[a][2][b+1][4]))
                                    mc_global_env_mon_arr_ele_split = str(mc_env_cfg_pool[a][2][b+1][4]).split(",")
                                    if len(mc_global_env_mon_arr_ele_split)>1:
                                        for d in range (int(mc_global_env_mon_arr_ele_split[0])):
                                            mc_global_env_mon_arr_ele = mc_env_cfg_pool[a][2][b+1][0]+','+mc_global_env_mon_arr_ele_split[d+1]
                                            mc_global_env_mon_arr.append(mc_global_env_mon_arr_ele)
                                            log.debug("parse_ss_button_code : mc_global_env_mon_arr_ele %s mc_global_env_mon_arr %s!\n"%(mc_global_env_mon_arr_ele, mc_global_env_mon_arr))
                                    else:
                                        # Creating the top/env/agent/agent name bcoz len is 1
                                        mc_global_env_mon_arr_ele = mc_env_cfg_pool[a][2][b+1][0]+','+mc_env_cfg_pool[a][2][b+1][1]
                                        mc_global_env_mon_arr.append(mc_global_env_mon_arr_ele)
                                        log.debug("parse_ss_button_code : mc_global_env_mon_arr_ele %s mc_global_env_mon_arr %s!\n"%(mc_global_env_mon_arr_ele, mc_global_env_mon_arr))

                
                #Code for loading the mc_global_env_mon_arr 
                if mc_env_cfg_pool[a][3] != '' and mc_env_cfg_pool[a][3] != []:
                    log.debug("parse_ss_button_code : mc_env_cfg_pool[%0d][3] %s!\n"%(a,mc_env_cfg_pool[a][3]))
                    mc_global_env_mon_arr_ele_split = str(mc_env_cfg_pool[a][3]).split(",")
                    if len(mc_global_env_mon_arr_ele_split)>1:
                        for e in range (int(mc_global_env_mon_arr_ele_split[0])):
                           
                            if len(mc_global_env_mon_arr_ele_split[e+1].split(":"))>1:
                                mc_global_env_mon_arr_ele = mc_env_cfg_pool[a][0]+','+mc_global_env_mon_arr_ele_split[e+1].split(":")[0]
                            else:
                                mc_global_env_mon_arr_ele = mc_env_cfg_pool[a][0]+','+mc_global_env_mon_arr_ele_split[e+1]

                            # mc_global_env_mon_arr_ele = mc_env_cfg_pool[a][0]+','+mc_global_env_mon_arr_ele_split[e+1]
                            
                            mc_global_env_mon_arr.append(mc_global_env_mon_arr_ele)
                            log.debug("parse_ss_button_code : mc_global_env_mon_arr_ele %s mc_global_env_mon_arr %s!\n"%(mc_global_env_mon_arr_ele, mc_global_env_mon_arr))
                    else:
                        # Creating the top/env/agent/agent name bcoz len is 1
                        mc_global_env_mon_arr_ele = mc_env_cfg_pool[a][0]+','+((mc_env_cfg_pool[a][0]).split(","))[1]
                        mc_global_env_mon_arr.append(mc_global_env_mon_arr_ele)
                        log.debug("parse_ss_button_code : mc_global_env_mon_arr_ele %s mc_global_env_mon_arr %s!\n"%(mc_global_env_mon_arr_ele, mc_global_env_mon_arr))
              
                #Code for loading the mc_global_env_scb_arr 
                if mc_env_cfg_pool[a][4] != '' and mc_env_cfg_pool[a][4] != []:
                    log.debug("parse_ss_button_code : mc_env_cfg_pool[%0d][4] %s!\n"%(a,mc_env_cfg_pool[a][4]))
                    mc_global_env_scb_arr_ele_split = str(mc_env_cfg_pool[a][4]).split(",")
                    if len(mc_global_env_scb_arr_ele_split)>1:
                        for f in range (int(mc_global_env_scb_arr_ele_split[0])):
                            
                            if len(mc_global_env_scb_arr_ele_split[f+1].split(":"))>1:
                                mc_global_env_scb_arr_ele = mc_env_cfg_pool[a][0]+','+mc_global_env_scb_arr_ele_split[f+1].split(":")[0]
                            else:
                                mc_global_env_scb_arr_ele = mc_env_cfg_pool[a][0]+','+mc_global_env_scb_arr_ele_split[f+1]
                            
                            # mc_global_env_scb_arr_ele = mc_env_cfg_pool[a][0]+','+mc_global_env_scb_arr_ele_split[f+1]
                            
                            mc_global_env_scb_arr.append(mc_global_env_scb_arr_ele)
                            log.debug("parse_ss_button_code : mc_global_env_scb_arr_ele %s mc_global_env_scb_arr %s!\n"%(mc_global_env_scb_arr_ele, mc_global_env_scb_arr))
                    else:
                        # Creating the top/env/agent/agent name bcoz len is 1
                        mc_global_env_scb_arr_ele = mc_env_cfg_pool[a][0]+','+((mc_env_cfg_pool[a][0]).split(","))[1]
                        mc_global_env_scb_arr.append(mc_global_env_scb_arr_ele)
                        log.debug("parse_ss_button_code : mc_global_env_scb_arr_ele %s mc_global_env_scb_arr %s!\n"%(mc_global_env_scb_arr_ele, mc_global_env_scb_arr))
               
                # Code for loading up the mc_global_env_mon_scb_con_arr
                if mc_env_cfg_pool[a][5] != []:
                    for g in range (len(mc_env_cfg_pool[a][5])):
                        mc_global_env_mon_scb_con_arr.append(mc_env_cfg_pool[a][5][g])

                
                # Coding for loading the mc_env_intf_cfg_pool
                if mc_env_cfg_pool[a][7] != []:
                    if mc_env_cfg_pool[a][7][0] != '':
                        for h in range (int(((mc_env_cfg_pool[a][7][0]).split(","))[0])):
                            if mc_env_cfg_pool[a][7][h+1] != []:
                                mc_env_intf_cfg_pool.append(mc_env_cfg_pool[a][7][h+1])


            log.debug("parse_ss_button_code : Value of mc_agt_cfg_pool is %s!\n"%mc_agt_cfg_pool)
            log.debug("parse_ss_button_code : Value of mc_agt_drv_intf_cfg_pool is %s!\n"%mc_agt_drv_intf_cfg_pool)
            log.debug("parse_ss_button_code : Value of mc_global_env_mon_scb_con_arr is %s!\n"%mc_global_env_mon_scb_con_arr)
            log.debug("parse_ss_button_code : Value of mc_env_intf_cfg_pool is %s!\n"%mc_env_intf_cfg_pool)
            log.debug("parse_ss_button_code : Value of mc_env_cfg_pool is %s!\n"%mc_env_cfg_pool)
            
            mc_env_cfg_pool_cnt = len(mc_env_cfg_pool)
            mc_agt_cfg_pool_cnt = len(mc_agt_cfg_pool)
            mc_agt_drv_intf_cfg_pool_cnt = len(mc_agt_drv_intf_cfg_pool)
            mc_env_intf_cfg_pool_cnt = len(mc_env_intf_cfg_pool)
            log.debug("parse_ss_button_code : Value of mc_env_cfg_pool_cnt %d mc_agt_cfg_pool_cnt is %d, mc_agt_drv_intf_cfg_pool_cnt %d, mc_env_intf_cfg_pool_cnt %d!\n"%(mc_env_cfg_pool_cnt, mc_agt_cfg_pool_cnt, mc_agt_drv_intf_cfg_pool_cnt, mc_env_intf_cfg_pool_cnt))

            # Calling the multiclustervip_gui, so that you can traverse through the parsed content
            self.multiclustervip_gui();
        
        elif which_parse_gb == 2:
            # Finding the total length of the parsed env
            parse_env_cfg_pool_len = len(parse_env_cfg_pool)
            log.debug("parse_ss_button_code : Value of parse_env_cfg_pool_len is %d!\n"%(parse_env_cfg_pool_len))

            # Loading the other environment into the mc_env_cfg_pool
            for a in range (len(parse_env_cfg_pool)): 
                log.debug("parse_ss_button_code : Value of a %d mc_env_no_cur %d mc_env_no_max %d  mc_env_cfg_pool %s!\n"%(a, mc_env_no_cur, mc_env_no_max, mc_env_cfg_pool))
                if a == 0:
                    mc_env_cfg_pool[mc_env_no_cur] = parse_env_cfg_pool[a]
                    log.debug("parse_ss_button_code : Value of mc_env_cfg_pool is %s!\n"%(mc_env_cfg_pool))
                else:    
                    mc_env_cfg_pool.append([[] for x in range(mc_env_arr_range)])
                    log.debug("parse_ss_button_code : Value of mc_env_cfg_pool is %s!\n"%(mc_env_cfg_pool))
                    mc_env_cfg_pool_cnt += 1
                    mc_env_cfg_pool[mc_env_no_max] = parse_env_cfg_pool[a]
                    log.debug("parse_ss_button_code : Value of mc_env_cfg_pool is %s!\n"%(mc_env_cfg_pool))
                    mc_env_no_max += 1

                if parse_env_cfg_pool[a][2] != []:
                    if parse_env_cfg_pool[a][2][0] != []:
                        for b in range (int(((parse_env_cfg_pool[a][2][0]).split(","))[0])):
                            if parse_env_cfg_pool[a][2][b+1] != []:
                                mc_agt_cfg_pool.append(parse_env_cfg_pool[a][2][b+1])
                                mc_agt_cfg_pool_cnt = mc_agt_cfg_pool_cnt+1 
                                log.debug("parse_ss_button_code : Value of mc_agt_cfg_pool_cnt is %d, mc_agt_cfg_pool %s!\n"%(mc_agt_cfg_pool_cnt, mc_agt_cfg_pool))
                                
                                #Code for loading the mc_agt_drv_intf_cfg_pool
                                if parse_env_cfg_pool[a][2][b+1][3] != '':
                                    for c in range (int(((parse_env_cfg_pool[a][2][b+1][3]).split(","))[0])):
                                        if parse_env_cfg_pool[a][2][b+1][5] != []:
                                            mc_agt_drv_intf_cfg_pool.append(parse_env_cfg_pool[a][2][b+1][5][c])
                                            mc_agt_drv_intf_cfg_pool_cnt = mc_agt_drv_intf_cfg_pool_cnt+1 
                                            log.debug("parse_ss_button_code : Value of mc_agt_drv_intf_cfg_pool is %d, mc_agt_drv_intf_cfg_pool %s!\n"%(mc_agt_drv_intf_cfg_pool_cnt, mc_agt_drv_intf_cfg_pool))
                                
                                #Code for loading the mc_global_env_mon_arr 
                                if parse_env_cfg_pool[a][2][b+1][4] != '':
                                    log.debug("parse_ss_button_code : parse_env_cfg_pool[%0d][2][%0d+1][4] %s!\n"%(a,b,parse_env_cfg_pool[a][2][b+1][4]))
                                    mc_global_env_mon_arr_ele_split = str(parse_env_cfg_pool[a][2][b+1][4]).split(",")
                                    if len(mc_global_env_mon_arr_ele_split)>1:
                                        for d in range (int(mc_global_env_mon_arr_ele_split[0])):
                                            mc_global_env_mon_arr_ele = parse_env_cfg_pool[a][2][b+1][0]+','+mc_global_env_mon_arr_ele_split[d+1]
                                            mc_global_env_mon_arr.append(mc_global_env_mon_arr_ele)
                                            log.debug("parse_ss_button_code : mc_global_env_mon_arr_ele %s mc_global_env_mon_arr %s!\n"%(mc_global_env_mon_arr_ele, mc_global_env_mon_arr))
                                    else:
                                        # Creating the top/env/agent/agent name bcoz len is 1
                                        mc_global_env_mon_arr_ele = parse_env_cfg_pool[a][2][b+1][0]+','+parse_env_cfg_pool[a][2][b+1][1]
                                        mc_global_env_mon_arr.append(mc_global_env_mon_arr_ele)
                                        log.debug("parse_ss_button_code : mc_global_env_mon_arr_ele %s mc_global_env_mon_arr %s!\n"%(mc_global_env_mon_arr_ele, mc_global_env_mon_arr))
                
                #Code for loading the mc_global_env_mon_arr 
                if parse_env_cfg_pool[a][3] != '' and parse_env_cfg_pool[a][3] != []:
                    log.debug("parse_ss_button_code : parse_env_cfg_pool[%0d][3] %s!\n"%(a,parse_env_cfg_pool[a][3]))
                    mc_global_env_mon_arr_ele_split = str(parse_env_cfg_pool[a][3]).split(",")
                    if len(mc_global_env_mon_arr_ele_split)>1:
                        for e in range (int(mc_global_env_mon_arr_ele_split[0])):
                            
                            if len(mc_global_env_mon_arr_ele_split[e+1].split(":"))>1:
                                #mc_global_env_mon_arr_ele = mc_env_cfg_pool[a][0]+','+mc_global_env_mon_arr_ele_split[e+1].split(":")[0]
                                mc_global_env_mon_arr_ele = parse_env_cfg_pool[a][0]+','+mc_global_env_mon_arr_ele_split[e+1].split(":")[0]
                            else:
                                #mc_global_env_mon_arr_ele = mc_env_cfg_pool[a][0]+','+mc_global_env_mon_arr_ele_split[e+1]
                                mc_global_env_mon_arr_ele = parse_env_cfg_pool[a][0]+','+mc_global_env_mon_arr_ele_split[e+1]
                            
                            # mc_global_env_mon_arr_ele = parse_env_cfg_pool[a][0]+','+mc_global_env_mon_arr_ele_split[e+1]
                            
                            mc_global_env_mon_arr.append(mc_global_env_mon_arr_ele)
                            log.debug("parse_ss_button_code : mc_global_env_mon_arr_ele %s mc_global_env_mon_arr %s!\n"%(mc_global_env_mon_arr_ele, mc_global_env_mon_arr))
                    else:
                        # Creating the top/env/agent/agent name bcoz len is 1
                        mc_global_env_mon_arr_ele = parse_env_cfg_pool[a][0]+','+((parse_env_cfg_pool[a][0]).split(","))[1]
                        mc_global_env_mon_arr.append(mc_global_env_mon_arr_ele)
                        log.debug("parse_ss_button_code : mc_global_env_mon_arr_ele %s mc_global_env_mon_arr %s!\n"%(mc_global_env_mon_arr_ele, mc_global_env_mon_arr))
              
                #Code for loading the mc_global_env_scb_arr 
                if parse_env_cfg_pool[a][4] != '' and parse_env_cfg_pool[a][4] != []:
                    log.debug("parse_ss_button_code : parse_env_cfg_pool[%0d][4] %s!\n"%(a,parse_env_cfg_pool[a][4]))
                    mc_global_env_scb_arr_ele_split = str(parse_env_cfg_pool[a][4]).split(",")
                    if len(mc_global_env_scb_arr_ele_split)>1:
                        for f in range (int(mc_global_env_scb_arr_ele_split[0])):
                            
                            if len(mc_global_env_scb_arr_ele_split[f+1].split(":"))>1:
                                #mc_global_env_scb_arr_ele = mc_env_cfg_pool[a][0]+','+mc_global_env_scb_arr_ele_split[f+1].split(":")[0]
                                mc_global_env_scb_arr_ele = parse_env_cfg_pool[a][0]+','+mc_global_env_scb_arr_ele_split[f+1].split(":")[0]
                            else:
                                #mc_global_env_scb_arr_ele = mc_env_cfg_pool[a][0]+','+mc_global_env_scb_arr_ele_split[f+1]
                                mc_global_env_scb_arr_ele = parse_env_cfg_pool[a][0]+','+mc_global_env_scb_arr_ele_split[f+1]
                            
                            # mc_global_env_scb_arr_ele = parse_env_cfg_pool[a][0]+','+mc_global_env_scb_arr_ele_split[f+1]
                            
                            mc_global_env_scb_arr.append(mc_global_env_scb_arr_ele)
                            log.debug("parse_ss_button_code : mc_global_env_scb_arr_ele %s mc_global_env_scb_arr %s!\n"%(mc_global_env_scb_arr_ele, mc_global_env_scb_arr))
                    else:
                        # Creating the top/env/agent/agent name bcoz len is 1
                        mc_global_env_scb_arr_ele = parse_env_cfg_pool[a][0]+','+((parse_env_cfg_pool[a][0]).split(","))[1]
                        mc_global_env_scb_arr.append(mc_global_env_scb_arr_ele)
                        log.debug("parse_ss_button_code : mc_global_env_scb_arr_ele %s mc_global_env_scb_arr %s!\n"%(mc_global_env_scb_arr_ele, mc_global_env_scb_arr))

                # Code for loading up the mc_global_env_mon_scb_con_arr
                if parse_env_cfg_pool[a][5] != []:
                    for d in range (len(parse_env_cfg_pool[a][5])):
                        mc_global_env_mon_scb_con_arr.append(parse_env_cfg_pool[a][5][d])
                
                # Coding for loading the mc_env_intf_cfg_pool
                if parse_env_cfg_pool[a][7] != []:
                    if parse_env_cfg_pool[a][7][0] != '':
                        for h in range (int(((parse_env_cfg_pool[a][7][0]).split(","))[0])):
                            if parse_env_cfg_pool[a][7][h+1] != []:
                                mc_env_intf_cfg_pool.append(parse_env_cfg_pool[a][7][h+1])
                                mc_env_intf_cfg_pool_cnt = mc_env_intf_cfg_pool_cnt+1 
                
                # Loading the details onto the window
                if a == 0:
                    # Loading the pre-existing values for the mc env configuration
                    if self.mce2.get() != None:
                        self.mce2.delete(0, "end")
                    self.mce2.insert(0, mc_env_cfg_pool[mc_env_no_cur][0])    
                    
                    if self.mce6.get() != None:
                        self.mce6.delete(0, "end")
                    if mc_env_cfg_pool[mc_env_no_cur][1]:
                        self.mce6.insert(0, mc_env_cfg_pool[mc_env_no_cur][1])    
                    
                    if self.mce5.get() != None:
                        self.mce5.delete(0, "end")
                    if mc_env_cfg_pool[mc_env_no_cur][2]:
                        self.mce5.insert(0, mc_env_cfg_pool[mc_env_no_cur][2][0])    
                    
                    if self.mce3.get() != None:
                        self.mce3.delete(0, "end")
                    if mc_env_cfg_pool[mc_env_no_cur][3]:
                        self.mce3.insert(0, mc_env_cfg_pool[mc_env_no_cur][3])    
                    
                    if self.mce4.get() != None:
                        self.mce4.delete(0, "end")
                    if mc_env_cfg_pool[mc_env_no_cur][4]:
                        self.mce4.insert(0, mc_env_cfg_pool[mc_env_no_cur][4])    
            
                    # Delet the content on the env directory, load from parsed spreadsheet : 04122021MON
                    # if str(self.mce8.get()) != 'pwd':
                    self.mce8.delete(0, "end")
                    if mc_env_cfg_pool[mc_env_no_cur][6]:
                        log.debug("multiclustervip_gui : env_path {}, {}, {}\n".format(str(mc_env_cfg_pool[mc_env_no_cur][6]), str(mc_env_cfg_pool[mc_env_no_cur][6]).strip('[,],\''), os.path.abspath(str(mc_env_cfg_pool[mc_env_no_cur][6]).strip('[,],\''))))
                        self.mce8.insert(0, str(mc_env_cfg_pool[mc_env_no_cur][6]).strip('[,],\''))
                    else:
                        self.mce8.insert(0, 'pwd')
                    log.debug("multiclustervip_gui : mc_env_cfg_pool[%d][6] %s\n"%(mc_env_no_cur, mc_env_cfg_pool[mc_env_no_cur][6]))
                        
                    # Loading the interface details 
                    if self.mce9.get() != None:
                        self.mce9.delete(0, "end")
                    if mc_env_cfg_pool[mc_env_no_cur][7]:
                        self.mce9.insert(0, mc_env_cfg_pool[mc_env_no_cur][7][0])
           
                    mc_curr_env_mon_scb_con_arr = []
                    mc_curr_env_mon_scb_con_arr = mc_env_cfg_pool[mc_env_no_cur][5]

            log.debug("parse_ss_button_code : Value of mc_agt_cfg_pool is %s!\n"%mc_agt_cfg_pool)
            log.debug("parse_ss_button_code : Value of mc_agt_drv_intf_cfg_pool is %s!\n"%mc_agt_drv_intf_cfg_pool)
            log.debug("parse_ss_button_code : Value of mc_global_env_mon_scb_con_arr is %s!\n"%mc_global_env_mon_scb_con_arr)
            log.debug("parse_ss_button_code : Value of mc_env_intf_cfg_pool is %s!\n"%mc_env_intf_cfg_pool)
            log.debug("parse_ss_button_code : Value of mc_env_cfg_pool is %s!\n"%mc_env_cfg_pool)
            log.debug("parse_ss_button_code : Value of mc_agt_cfg_pool_cnt is %d, mc_agt_drv_intf_cfg_pool_cnt %d!\n"%(mc_agt_cfg_pool_cnt, mc_agt_drv_intf_cfg_pool_cnt))
            
            # Calling the API to build buttons for env layout
            self.mc_win_layout_return_exit_load_prev_next_done_buttons()

            # Editing the mc_env_no_max based on based env numbers
            # mc_env_no_max = mc_env_no_max + (parse_env_cfg_pool_len-1)

    def generic_parse_ss_and_store(self, sheet):
        global which_parse_gb
        global parse_ss_env_no
        global parse_env_cfg_pool
        
        # Max number of rows to parse in the sheet
        parse_ss_max_row = len(sheet['A'])
        log.debug("parse_ss_button_code : Value of parse_ss_max_row from spreadsheet is %d"% parse_ss_max_row)

        # Local Variable
        log.debug("parse_ss_button_code : parse_ss_env_no is %d"%parse_ss_env_no)

        # Code to parse the Env Configuration Spreadsheet : vimo : 102519|FRI   
        for n in range (2, parse_ss_max_row+1):
            #log.debug("generic_parse_ss_and_store : Sheet Is %s, row = %d!\n"%(sheet, n))

            # Parsing and storing the parenvname locally
            # if (sheet.cell(row=n, column=1).value != None:
            #     self.mc_parse_parenvname = str(sheet.cell(row=n, column=3).value)
            #     self.mc_parse_link = 1
            #     log.debug("parse_ss_button_code : self.mc_parse_parenvname %s  self.mc_parse_link %d!\n"%(self.mc_parse_parenvname, self.mc_parse_link))

            if (sheet.cell(row=n, column=1).value != None and sheet.cell(row=n, column=12).value != None):
               
                if self.mc_parse_parenvname.get():
                    if str(sheet.cell(row=n, column=3).value) not in self.mc_parse_parenvname.get():
                        self.mc_parse_parenvname.set(str(sheet.cell(row=n, column=3).value))
                else:    
                    self.mc_parse_parenvname.set(str(sheet.cell(row=n, column=3).value))
                
                log.debug("parse_ss_button_code : parse_ss_env_no %d self.mc_parse_envname %s self.mc_parse_parenvname %s\n"%(parse_ss_env_no, self.mc_parse_envname.get(), self.mc_parse_parenvname.get()))
                if self.mc_parse_envname.get() and "__c" in self.mc_parse_envname.get() or self.mc_parse_envname.get() and "__s" in self.mc_parse_envname.get():
                    if self.mc_parse_parenvname.get() in self.mc_parse_envname.get():
                        log.debug("parse_ss_button_code : self.mc_parse_envname %s self.mc_parse_parenvname %s\n"%(self.mc_parse_envname.get(), self.mc_parse_parenvname.get()))
                        self.mc_parse_parenvname.set(self.mc_parse_envname.get())
    
                # Storing the Value of envname if its a linked sheet 
                self.mc_parse_envname.set(str(sheet.cell(row=n, column=2).value))

                # Setting the variable stating the current environment info is kept in the linked sheet
                self.mc_parse_link.set(1)
                
                log.debug("parse_ss_button_code : self.mc_parse_parenvname %s  self.mc_parse_link %d!\n"%(self.mc_parse_parenvname.get(), self.mc_parse_link.get()))
                log.debug("parse_ss_button_code : Main Sheet Is %s!\n"%sheet)
                
                self.parse_ss_sheet_path_side = (sheet.cell(row=n, column=12).value).split(",")
                log.debug("parse_ss_button_code : Found EnvConfig Sheet To Load Is %s!\n"%self.parse_ss_sheet_path_side)
               
                self.parse_ss_sheet_side = None
                self.parse_ss_sheet_side = self.return_ss_link(self.parse_ss_sheet_path_side)
                log.debug("parse_ss_button_code : Found EnvConfig Sheet Path %s. Sheet To Be Parsed Is %s!\n"%(self.parse_ss_sheet_path_side,self.parse_ss_sheet_side))
                
                self.generic_parse_ss_and_store(self.parse_ss_sheet_side)
                
            elif (sheet.cell(row=n, column=1).value != None and sheet.cell(row=n, column=12).value == None):
                parse_env_cfg_pool.append([[] for x in range(mc_env_arr_range)])

                # Loading ENV Name with Parent Env
                if (sheet.cell(row=n, column=2).value) != None:
                    if which_parse_gb == 2 and not self.mc_parse_link.get() and parse_ss_env_no == 0:
                        envname = str(((self.mce2.get()).split(","))[1])
                    elif self.mc_parse_link.get():
                        envname = self.mc_parse_envname.get()
                    else:
                        envname = str(sheet.cell(row=n, column=2).value)
                    
                    log.debug("parse_ss_button_code : parse_ss_env_no %d self.mc_parse_envname %s self.mc_parse_parenvname %s\n"%(parse_ss_env_no, self.mc_parse_envname.get(), self.mc_parse_parenvname.get()))
                    if self.mc_parse_link.get():
                        log.debug("parse_ss_button_code : Getting parenvname from link : self.mc_parse_parenvname %s  self.mc_parse_link %d!\n"%(self.mc_parse_parenvname.get(), self.mc_parse_link.get()))
                        parenvname = self.mc_parse_parenvname.get()
                        self.mc_parse_link.set(0)
                        log.debug("parse_ss_button_code : Getting parenvname from link : self.mc_parse_parenvname %s  self.mc_parse_link %d!\n"%(self.mc_parse_parenvname.get(), self.mc_parse_link.get()))
                    elif which_parse_gb == 2 and parse_ss_env_no == 0: 
                        log.debug("parse_ss_button_code : %s"%((self.mce2.get()).split(",")))
                        parenvname = str(((self.mce2.get()).split(","))[0])
                        log.debug("parse_ss_button_code : Getting parenvname from which_parse_gb:2 : parenvname %s!\n"%(parenvname))
                    elif which_parse_gb == 2 and parse_ss_env_no != 0 and "__c" in self.mc_parse_envname.get() or which_parse_gb == 2 and parse_ss_env_no != 0 and "__s" in self.mc_parse_envname.get():
                        log.debug("parse_ss_button_code: parse_ss_env_no %d envname %s parenvname %s self.mc_parse_envname %s self.mc_parse_parenvname %s\n"%(parse_ss_env_no, envname, parenvname, self.mc_parse_envname.get(), self.mc_parse_parenvname.get()))
                        log.debug(str(sheet.cell(row=n, column=3).value)) 
                        if str(sheet.cell(row=n, column=3).value) in self.mc_parse_envname.get():
                            parenvname = self.mc_parse_envname.get()
                            log.debug("parse_ss_button_code: parse_ss_env_no %d envname %s parenvname %s\n"%(parse_ss_env_no, envname, parenvname))
                    else:    
                        parenvname = str(sheet.cell(row=n, column=3).value)
                   
                    # Logic for __c or __s options in the environment : 112819|THU 
                    if "__c" in parenvname:
                        log.debug("parse_ss_button_code : b4 parenvname %s envname %s Value of parse_env_cfg_pool[%d] %s"%(parenvname, envname, parse_ss_env_no, parse_env_cfg_pool[parse_ss_env_no]))
                        
                        if not "__s" in envname and not "__c" in envname:
                            envname = envname+"__c"
                        
                        log.debug("parse_ss_button_code : a8 parenvname %s envname %s Value of parse_env_cfg_pool[%d] %s"%(parenvname, envname, parse_ss_env_no, parse_env_cfg_pool[parse_ss_env_no]))
                    elif "__s" in parenvname:
                        log.debug("parse_ss_button_code : b4 parenvname %s envname %s Value of parse_env_cfg_pool[%d] %s"%(parenvname, envname, parse_ss_env_no, parse_env_cfg_pool[parse_ss_env_no]))
                        
                        if not "__c" in envname and not "__s" in envname:
                            envname = envname+"__s"
                        
                        log.debug("parse_ss_button_code : a8 parenvname %s envname %s Value of parse_env_cfg_pool[%d] %s"%(parenvname, envname, parse_ss_env_no, parse_env_cfg_pool[parse_ss_env_no]))
        

                    # Storing the envname into global variable
                    if parse_ss_env_no == 0 and "__c" in envname or parse_ss_env_no == 0 and "__s" in envname:
                        log.debug("parse_ss_button_code : parse_ss_env_no %d envname %s parenvname %s self.mc_parse_envname %s self.mc_parse_parenvname %s\n"%(parse_ss_env_no, envname, parenvname, self.mc_parse_envname.get(), self.mc_parse_parenvname.get()))
                        self.mc_parse_envname.set(envname)
                        log.debug("parse_ss_button_code : parse_ss_env_no %d envname %s parenvname %s self.mc_parse_envname %s self.mc_parse_parenvname %s\n"%(parse_ss_env_no, envname, parenvname, self.mc_parse_envname.get(), self.mc_parse_parenvname.get()))
                    log.debug("parse_ss_button_code : parse_ss_env_no %d envname %s parenvname %s self.mc_parse_envname %s self.mc_parse_parenvname %s\n"%(parse_ss_env_no, envname, parenvname, self.mc_parse_envname.get(), self.mc_parse_parenvname.get()))

                    parse_env_cfg_pool[parse_ss_env_no][0] = (parenvname+','+envname)
                    log.debug("parse_ss_button_code : parenvname %s envname %s Value of parse_env_cfg_pool[%d] %s"%(parenvname, envname, parse_ss_env_no, parse_env_cfg_pool[parse_ss_env_no]))

                # Loading the sub env details 
                if (sheet.cell(row=n, column=4).value) != None:
                    subenvdet = str(sheet.cell(row=n, column=4).value)
                    parse_env_cfg_pool[parse_ss_env_no][1] = (subenvdet)
                    log.debug("parse_ss_button_code : subenvdet %s Value of parse_env_cfg_pool[%d] %s"%(subenvdet, parse_ss_env_no, parse_env_cfg_pool[parse_ss_env_no]))
                else:
                    parse_env_cfg_pool[parse_ss_env_no][1] = ''
                    log.debug("parse_ss_button_code : Value of parse_env_cfg_pool[%d] %s"%(parse_ss_env_no, parse_env_cfg_pool[parse_ss_env_no]))


                # Loading/Capturing Agent details 
                if (sheet.cell(row=n, column=7).value) != None:
                    envagtdet = (sheet.cell(row=n, column=7).value).split(",")
                    log.debug("parse_ss_button_code : Value of envagtdet %s"%str(envagtdet))

                    # Loading the agent config initial details.
                    parse_env_cfg_pool[parse_ss_env_no][2].append(str(sheet.cell(row=n, column=7).value))

                    # Loading each individual agent details
                    agt_det_rno = 0
                    for a in range (int(envagtdet[0])): 
                        if a == 0:
                            agt_det_rno = n
                        else:
                            #agt_det_rno = n+4
                            agt_det_rno = agt_det_rno+4
                        
                        parse_env_cfg_pool[parse_ss_env_no][2].append([])
                        envagtname = parenvname+','+envname+','+envagtdet[a+1]
                        log.debug("parse_ss_button_code : Value of envagtname %s"%(envagtname))
                       
                        # Adding top,env,agt name
                        parse_env_cfg_pool[parse_ss_env_no][2][a+1].append(str(envagtname))
                       
                        # Adding agt name
                        parse_env_cfg_pool[parse_ss_env_no][2][a+1].append(str(envagtdet[a+1]))
                        log.debug("parse_ss_button_code : Value of parse_env_cfg_pool[%d] %s"%(parse_ss_env_no, parse_env_cfg_pool[parse_ss_env_no]))

                        # Adding agt instance
                        if (sheet.cell(row=agt_det_rno, column=8).value) != None:
                            #agtinst = (sheet.cell(row=agt_det_rno, column=8).value).split(",")
                            agtinst = (sheet.cell(row=agt_det_rno, column=8).value).split(":")
                            log.debug("parse_ss_button_code : agtinst %s Value of parse_env_cfg_pool[%d] %s"%(agtinst, parse_ss_env_no, parse_env_cfg_pool[parse_ss_env_no]))
        
                            if len(agtinst)>1:   
                                parse_env_cfg_pool[parse_ss_env_no][2][a+1].append(int(agtinst[1]))
                            else:
                                parse_env_cfg_pool[parse_ss_env_no][2][a+1].append('')

                        # Adding agt driver configuration 
                        if (sheet.cell(row=agt_det_rno+1, column=8).value) != None:
                            parse_env_cfg_pool[parse_ss_env_no][2][a+1].append(str(sheet.cell(row=agt_det_rno+1, column=8).value))
                        else:
                            parse_env_cfg_pool[parse_ss_env_no][2][a+1].append('')

                        # Adding agt monitor configuration 
                        if (sheet.cell(row=agt_det_rno+2, column=8).value) != None:
                            parse_env_cfg_pool[parse_ss_env_no][2][a+1].append(str(sheet.cell(row=agt_det_rno+2, column=8).value))
                        else:
                            parse_env_cfg_pool[parse_ss_env_no][2][a+1].append('')

                        # Loading agt intf details
                        if (sheet.cell(row=agt_det_rno+1, column=8).value) != None:
                            agtdrvdet = str(sheet.cell(row=agt_det_rno+1, column=8).value).split(",")
                            log.debug("parse_ss_button_code : Value of agtdrvdet %s"%(agtdrvdet))

                            # Agt drv Intf details 
                            agtdrvintdet = str(sheet.cell(row=agt_det_rno+3, column=8).value).split("-")
                            log.debug("parse_ss_button_code : Value of agtdrvintdet %s"%(agtdrvintdet))

                            # Loading [] for number of drivers
                            parse_env_cfg_pool[parse_ss_env_no][2][a+1].append([[[] for x in range(mc_intf_arr_range)] for x in range(int(agtdrvdet[0]))])
                            log.debug("parse_ss_button_code : Value of parse_env_cfg_pool[%d] %s"%(parse_ss_env_no, parse_env_cfg_pool[parse_ss_env_no]))
                        
                            if len(agtdrvdet)>1:
                                for b in range (int(agtdrvdet[0])):
                                    envagtdrvname = envagtname+","+agtdrvdet[b+1]
                                    log.debug("parse_ss_button_code : Value of a %d b %d parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][b][0] %s"%(a, b, parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][b][0]))
                                    
                                    # Loading env,agt,drv name
                                    parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][b][0] = (str(envagtdrvname))
                                    log.debug("parse_ss_button_code : Value of parse_env_cfg_pool[%d] %s"%(parse_ss_env_no, parse_env_cfg_pool[parse_ss_env_no]))
                                   
                                    # Loading driver name 
                                    parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][b][1] = (str(agtdrvdet[b+1]))
                                    
                                    # Driver interface details
                                    drvintdet = str(agtdrvintdet[b]).split(":")
                                    log.debug("parse_ss_button_code : Value of drvintdet %s"%(drvintdet))
                                    
                                    # Loading intf config type 
                                    if len(str(agtdrvintdet[b]).split(":"))>1:
                                        parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][b][2] = (str(drvintdet[0]))
                                        
                                        # Calling logic to parse the Interface spreadsheet and load data
                                        self.parse_interface_ss(str(drvintdet[1])) 
                                    
                                        # Loading the interface variables values - no. of elements in the sheet
                                        parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][b][3] = (generic_udif_frame_loop-1)
                                    
                                        # Loading the generic_udif_intf_cfg_array 
                                        parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][b][4] = (generic_udif_intf_cfg_array)

                                        # Loading the generic_udif_clock_cfg_array    
                                        parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][b][5] = (generic_udif_clock_cfg_array)
                                        
                                        # Loading the generic_udif_cb_cfg_array
                                        parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][b][6] = (generic_udif_cb_cfg_array)
                                        
                                        # Loading the generic_udif_mp_cfg_array
                                        parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][b][7] = (generic_udif_mp_cfg_array)
                                    
                                        # Loading the interface sheet path, name     
                                        parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][b][8] = str(drvintdet[1])
                                    else:     
                                        parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][b][2] = (str(drvintdet[0]))
                            
                            else:
                                envagtdrvname = envagtname+","+envagtdet[a+1]
                                log.debug("parse_ss_button_code : Value of envagtdrvname is %s\n", envagtdrvname) 
                                log.debug("parse_ss_button_code : Value of parse_env_cfg_pool %s"%(parse_env_cfg_pool))
                                
                                # Loading env,agt,drv name
                                parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][0][0] = (str(envagtdrvname))
                                log.debug("parse_ss_button_code : Value of parse_env_cfg_pool[%d] %s"%(parse_ss_env_no, parse_env_cfg_pool[parse_ss_env_no]))
                                    
                                # Loading driver name 
                                parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][0][1] = (str(envagtdet[a+1]))
                                    
                                # Driver interface details
                                drvintdet = str(agtdrvintdet[0]).split(":")
                                    
                                # Loading intf config type 
                                if len(str(agtdrvintdet[0]).split(":"))>1:
                                    parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][0][2] = (str(drvintdet[0]))
                                    
                                    # Calling logic to parse the Interface spreadsheet and load data
                                    self.parse_interface_ss(str(drvintdet[1])) 
                                    
                                    # Loading the interface variables values - no. of elements in the sheet
                                    parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][0][3] = (generic_udif_frame_loop-1)
                                    
                                    # Loading the generic_udif_intf_cfg_array 
                                    parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][0][4] = (generic_udif_intf_cfg_array)

                                    # Loading the generic_udif_clock_cfg_array    
                                    parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][0][5] = (generic_udif_clock_cfg_array)
                                    
                                    # Loading the generic_udif_cb_cfg_array
                                    parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][0][6] = (generic_udif_cb_cfg_array)
                                    
                                    # Loading the generic_udif_mp_cfg_array
                                    parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][0][7] = (generic_udif_mp_cfg_array)
                                        
                                    # Loading the interface sheet path, name     
                                    parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][0][8] = str(drvintdet[1])
                                else:     
                                    parse_env_cfg_pool[parse_ss_env_no][2][a+1][5][0][2] = (str(drvintdet[0]))
                        # Try : WATCHOUT : Adding dummy entry for agent interface : 030820|SAT
                        else:
                            parse_env_cfg_pool[parse_ss_env_no][2][a+1].append([[] for x in range(mc_intf_arr_range)])
            

    
                # Loading monitor inside env details
                if (sheet.cell(row=n, column=5).value) != None:
                    monenvdet = str(sheet.cell(row=n, column=5).value)
                    parse_env_cfg_pool[parse_ss_env_no][3] = (monenvdet)
                    log.debug("parse_ss_button_code : Value of parse_env_cfg_pool[%d] %s"%(parse_ss_env_no, parse_env_cfg_pool[parse_ss_env_no]))
                
                # Loading scoreboard inside env details
                if (sheet.cell(row=n, column=6).value) != None:
                    scbenvdet = str(sheet.cell(row=n, column=6).value)
                    parse_env_cfg_pool[parse_ss_env_no][4] = (scbenvdet)
                    log.debug("parse_ss_button_code : Value of parse_env_cfg_pool[%d] %s"%(parse_ss_env_no, parse_env_cfg_pool[parse_ss_env_no]))

                # Loading the Monitor-Scoreboard Connectivity details
                if (sheet.cell(row=n, column=9).value) != None:
                    monscbcon = str(sheet.cell(row=n, column=9).value).split("|") # Modifying the split operator from : -> | : 12312019|TUE
                    for i in range (len(monscbcon)):
                        # Splitting the individual connection and checking if its from same environment 
                        monscbcon_ind = (str(monscbcon[i]).strip()).split("-") # WATCHOUT : Added Strip : 12182020FRI
                        log.debug("parse_ss_button_code : envname %s monscbcon_ind %s  monscbcon[%d] %s"%(envname, monscbcon_ind, i, monscbcon[i]))

                        if not len(envname.split(":"))>1: 
                            if "__c" in envname:
                                if monscbcon_ind[0].startswith(envname.replace("__c","")) and monscbcon_ind[1].startswith(envname.replace("__c","")):
                                    parenvname_list = []; parenvname_list.append(parenvname+",")
                                    log.debug("parse_ss_button_code : envname %s  monscbcon_ind %s  monscbcon[%d] %s  parenvname_list %s"%(envname, monscbcon_ind, i, monscbcon[i], parenvname_list))
                                    
                                    monscbcon_ind[0] = monscbcon_ind[0].replace(envname.replace("__c",""), envname)
                                    monscbcon_ind[1] = monscbcon_ind[1].replace(envname.replace("__c",""), envname)
                                    log.debug("parse_ss_button_code : envname %s  monscbcon_ind %s  monscbcon[%d] %s  parenvname_list %s"%(envname, monscbcon_ind, i, monscbcon[i], parenvname_list))
                                    
                                    monscbcon_ind_l = parenvname_list[0]+monscbcon_ind[0]+"-"+parenvname_list[0]+monscbcon_ind[1]+"-"+monscbcon_ind[2]    
                                    log.debug("parse_ss_button_code : envname %s  monscbcon_ind %s  monscbcon[%d] %s  monscbcon_ind_l %s parenvname_list %s"%(envname, monscbcon_ind, i, monscbcon[i], monscbcon_ind_l, parenvname_list))
                                else:
                                    monscbcon_ind_l = monscbcon_ind[0]+"-"+monscbcon_ind[1]+"-"+monscbcon_ind[2]    
                                    log.debug("parse_ss_button_code : envname %s monscbcon_ind %s  monscbcon_ind_l %s"%(envname, monscbcon_ind, monscbcon_ind_l))
                            elif "__s" in envname:
                                if monscbcon_ind[0].startswith(envname.replace("__s","")) and monscbcon_ind[1].startswith(envname.replace("__s","")):
                                    parenvname_list = []; parenvname_list.append(parenvname+",")
                                    
                                    monscbcon_ind[0] = monscbcon_ind[0].replace(envname.replace("__s",""), envname)
                                    monscbcon_ind[1] = monscbcon_ind[1].replace(envname.replace("__s",""), envname)
                                    
                                    monscbcon_ind_l = parenvname_list[0]+monscbcon_ind[0]+"-"+parenvname_list[0]+monscbcon_ind[1]+"-"+monscbcon_ind[2]    
                                    log.debug("parse_ss_button_code : envname %s monscbcon_ind %s  monscbcon_ind_l %s"%(envname, monscbcon_ind, monscbcon_ind_l))
                                else:
                                    monscbcon_ind_l = monscbcon_ind[0]+"-"+monscbcon_ind[1]+"-"+monscbcon_ind[2]    
                                    log.debug("parse_ss_button_code : envname %s monscbcon_ind %s  monscbcon_ind_l %s"%(envname, monscbcon_ind, monscbcon_ind_l))
                            else:
                                if monscbcon_ind[0].startswith(envname) and monscbcon_ind[1].startswith(envname):
                                    parenvname_list = []; parenvname_list.append(parenvname+",")
                                    monscbcon_ind_l = parenvname_list[0]+monscbcon_ind[0]+"-"+parenvname_list[0]+monscbcon_ind[1]+"-"+monscbcon_ind[2]    
                                    log.debug("parse_ss_button_code : envname %s monscbcon_ind %s  monscbcon_ind_l %s"%(envname, monscbcon_ind, monscbcon_ind_l))
                                else:
                                    monscbcon_ind_l = monscbcon_ind[0]+"-"+monscbcon_ind[1]+"-"+monscbcon_ind[2]    
                                    log.debug("parse_ss_button_code : envname %s monscbcon_ind %s  monscbcon_ind_l %s"%(envname, monscbcon_ind, monscbcon_ind_l))
                        else:
                            # whattoreplace = envname.split(":")[0]
                            # replacewith   = envname 
                            # monscbcon_ind = ast.literal_eval(re.sub(r'\b%s\b(?!:)'%(whattoreplace),'%s'%(replacewith), str(monscbcon_ind)))
                            # log.debug("whattoreplace %s, replacewith %s, monscbcon_ind %s!\n"%(whattoreplace, replacewith, monscbcon_ind))
                            
                            if "__c" in envname:
                                whattoreplace = envname.split(":")[0].replace("__c","")
                                replacewith   = envname.replace("__c","")
                                #monscbcon_ind = ast.literal_eval(re.sub(r'\b%s\b(?!:)'%(whattoreplace),'%s'%(replacewith), str(monscbcon_ind)))
                                log.debug("parse_ss_button_code : envname %s monscbcon_ind %s parse_env_cfg_pool %s"%(envname, monscbcon_ind, parse_env_cfg_pool))
                                
                                parse_env_cfg_pool = ast.literal_eval(re.sub(r'\b%s\b(?!:)'%(whattoreplace),'%s'%(replacewith), str(parse_env_cfg_pool)))
                                monscbcon_ind = ast.literal_eval(re.sub(r'\b%s\b(?!:)'%(whattoreplace),'%s'%(replacewith), str(monscbcon_ind)))
                                
                                log.debug("parse_ss_button_code : envname %s monscbcon_ind %s parse_env_cfg_pool %s"%(envname, monscbcon_ind, parse_env_cfg_pool))
                                
                                log.debug("envname %s whattoreplace %s, replacewith %s, monscbcon_ind %s!\n"%(envname, whattoreplace, replacewith, monscbcon_ind))
                                
                                if monscbcon_ind[0].startswith(envname.replace("__c","")) and monscbcon_ind[1].startswith(envname.replace("__c","")):
                                    parenvname_list = []; parenvname_list.append(parenvname+",")
                                    log.debug("parse_ss_button_code : envname %s  monscbcon_ind %s  monscbcon[%d] %s  parenvname_list %s"%(envname, monscbcon_ind, i, monscbcon[i], parenvname_list))
                                    
                                    monscbcon_ind[0] = monscbcon_ind[0].replace(envname.replace("__c",""), envname)
                                    monscbcon_ind[1] = monscbcon_ind[1].replace(envname.replace("__c",""), envname)
                                    log.debug("parse_ss_button_code : envname %s  monscbcon_ind %s  monscbcon[%d] %s  parenvname_list %s"%(envname, monscbcon_ind, i, monscbcon[i], parenvname_list))
                                    
                                    monscbcon_ind_l = parenvname_list[0]+monscbcon_ind[0]+"-"+parenvname_list[0]+monscbcon_ind[1]+"-"+monscbcon_ind[2]    
                                    log.debug("parse_ss_button_code : envname %s  monscbcon_ind %s  monscbcon[%d] %s  monscbcon_ind_l %s parenvname_list %s"%(envname, monscbcon_ind, i, monscbcon[i], monscbcon_ind_l, parenvname_list))
                                else:
                                    monscbcon_ind_l = monscbcon_ind[0]+"-"+monscbcon_ind[1]+"-"+monscbcon_ind[2]    
                                    log.debug("parse_ss_button_code : envname %s monscbcon_ind %s  monscbcon_ind_l %s"%(envname, monscbcon_ind, monscbcon_ind_l))
                            elif "__s" in envname:
                                whattoreplace = envname.split(":")[0].replace("__s","")
                                replacewith   = envname.replace("__s","")
                                #monscbcon_ind = ast.literal_eval(re.sub(r'\b%s\b(?!:)'%(whattoreplace),'%s'%(replacewith), str(monscbcon_ind)))
                                log.debug("parse_ss_button_code : envname %s monscbcon_ind %s parse_env_cfg_pool %s"%(envname, monscbcon_ind, parse_env_cfg_pool))
                                
                                parse_env_cfg_pool = ast.literal_eval(re.sub(r'\b%s\b(?!:)'%(whattoreplace),'%s'%(replacewith), str(parse_env_cfg_pool)))
                                monscbcon_ind = ast.literal_eval(re.sub(r'\b%s\b(?!:)'%(whattoreplace),'%s'%(replacewith), str(monscbcon_ind)))
                                
                                log.debug("parse_ss_button_code : envname %s monscbcon_ind %s parse_env_cfg_pool %s"%(envname, monscbcon_ind, parse_env_cfg_pool))
                                log.debug("envname %s whattoreplace %s, replacewith %s, monscbcon_ind %s!\n"%(envname, whattoreplace, replacewith, monscbcon_ind))
                                
                                if monscbcon_ind[0].startswith(envname.replace("__s","")) and monscbcon_ind[1].startswith(envname.replace("__s","")):
                                    parenvname_list = []; parenvname_list.append(parenvname+",")
                                    
                                    monscbcon_ind[0] = monscbcon_ind[0].replace(envname.replace("__s",""), envname)
                                    monscbcon_ind[1] = monscbcon_ind[1].replace(envname.replace("__s",""), envname)
                                    
                                    monscbcon_ind_l = parenvname_list[0]+monscbcon_ind[0]+"-"+parenvname_list[0]+monscbcon_ind[1]+"-"+monscbcon_ind[2]    
                                    log.debug("parse_ss_button_code : envname %s monscbcon_ind %s  monscbcon_ind_l %s"%(envname, monscbcon_ind, monscbcon_ind_l))
                                else:
                                    monscbcon_ind_l = monscbcon_ind[0]+"-"+monscbcon_ind[1]+"-"+monscbcon_ind[2]    
                                    log.debug("parse_ss_button_code : envname %s monscbcon_ind %s  monscbcon_ind_l %s"%(envname, monscbcon_ind, monscbcon_ind_l))
                            else:
                                whattoreplace = envname.split(":")[0]
                                replacewith   = envname
                                #monscbcon_ind = ast.literal_eval(re.sub(r'\b%s\b(?!:)'%(whattoreplace),'%s'%(replacewith), str(monscbcon_ind)))
                                log.debug("parse_ss_button_code : envname %s monscbcon_ind %s parse_env_cfg_pool %s"%(envname, monscbcon_ind, parse_env_cfg_pool))
                                
                                parse_env_cfg_pool = ast.literal_eval(re.sub(r'\b%s\b(?!:)'%(whattoreplace),'%s'%(replacewith), str(parse_env_cfg_pool)))
                                monscbcon_ind = ast.literal_eval(re.sub(r'\b%s\b(?!:)'%(whattoreplace),'%s'%(replacewith), str(monscbcon_ind)))
                                
                                log.debug("parse_ss_button_code : envname %s monscbcon_ind %s parse_env_cfg_pool %s"%(envname, monscbcon_ind, parse_env_cfg_pool))
                                log.debug("envname %s whattoreplace %s, replacewith %s, monscbcon_ind %s!\n"%(envname, whattoreplace, replacewith, monscbcon_ind))
                                
                                if monscbcon_ind[0].startswith(envname) and monscbcon_ind[1].startswith(envname):
                                    parenvname_list = []; parenvname_list.append(parenvname+",")
                                    monscbcon_ind_l = parenvname_list[0]+monscbcon_ind[0]+"-"+parenvname_list[0]+monscbcon_ind[1]+"-"+monscbcon_ind[2]    
                                    log.debug("parse_ss_button_code : envname %s monscbcon_ind %s  monscbcon_ind_l %s"%(envname, monscbcon_ind, monscbcon_ind_l))
                                else:
                                    monscbcon_ind_l = monscbcon_ind[0]+"-"+monscbcon_ind[1]+"-"+monscbcon_ind[2]    
                                    log.debug("parse_ss_button_code : envname %s monscbcon_ind %s  monscbcon_ind_l %s"%(envname, monscbcon_ind, monscbcon_ind_l))

                        parse_env_cfg_pool[parse_ss_env_no][5].append(monscbcon_ind_l.strip())

                # Loading up the EnvIntfDetails from column 10
                if (sheet.cell(row=n, column=10).value) != None:
                    envintfdet = str(sheet.cell(row=n, column=10).value).split(",")
                    log.debug("parse_ss_button_code : envintfdet %s"%(envintfdet))
                    
                    parse_env_cfg_pool[parse_ss_env_no][7].append(str(sheet.cell(row=n, column=10).value))

                    # Loading [] for number of env Interface 
                    for x in range(int(envintfdet[0])):
                        parse_env_cfg_pool[parse_ss_env_no][7].append([[] for x in range(mc_intf_arr_range)])
                    log.debug("parse_ss_button_code : Value of parse_env_cfg_pool[%d] %s"%(parse_ss_env_no, parse_env_cfg_pool[parse_ss_env_no]))
                   
                    # Finding the env interface deails
                    envintfvaldet = str(sheet.cell(row=n+1, column=10).value).split("-")
                    log.debug("parse_ss_button_code : envintfvaldet %s"%(envintfvaldet))
                    
                    if len(envintfdet)>1:
                        for e in range (int(envintfdet[0])):
                            envintfname = parenvname+","+envname+","+envintfdet[e+1]
                            log.debug("parse_ss_button_code : Value of e %d envintfname %s"%(e, envintfname))
                            
                            # Loading top,env,intf name
                            parse_env_cfg_pool[parse_ss_env_no][7][e+1][0] = (str(envintfname))
                            log.debug("parse_ss_button_code : Value of parse_env_cfg_pool[%d] %s"%(parse_ss_env_no, parse_env_cfg_pool[parse_ss_env_no]))
                            
                            # Loading env intf name 
                            parse_env_cfg_pool[parse_ss_env_no][7][e+1][1] = (str(envintfdet[e+1]))
                            log.debug("parse_ss_button_code : Value of parse_env_cfg_pool[%d] %s"%(parse_ss_env_no, parse_env_cfg_pool[parse_ss_env_no]))
                            
                            # env interface details
                            eintfdet = str(envintfvaldet[e]).split(":")
                            log.debug("parse_ss_button_code : Value of eintfdet %s"%(eintfdet))
                                    
                            # Loading intf config type 
                            if len(str(envintfvaldet[e]).split(":"))>1:
                                parse_env_cfg_pool[parse_ss_env_no][7][e+1][2] = (str(eintfdet[0]))
                                
                                # Calling logic to parse the Interface spreadsheet and load data
                                self.parse_interface_ss(str(eintfdet[1])) 
                            
                                # Loading the interface variables values - no. of elements in the sheet
                                parse_env_cfg_pool[parse_ss_env_no][7][e+1][3] = (generic_udif_frame_loop-1)
                            
                                # Loading the generic_udif_intf_cfg_array 
                                parse_env_cfg_pool[parse_ss_env_no][7][e+1][4] = (generic_udif_intf_cfg_array)

                                # Loading the generic_udif_clock_cfg_array    
                                parse_env_cfg_pool[parse_ss_env_no][7][e+1][5] = (generic_udif_clock_cfg_array)
                                
                                # Loading the generic_udif_cb_cfg_array
                                parse_env_cfg_pool[parse_ss_env_no][7][e+1][6] = (generic_udif_cb_cfg_array)
                                
                                # Loading the generic_udif_mp_cfg_array
                                parse_env_cfg_pool[parse_ss_env_no][7][e+1][7] = (generic_udif_mp_cfg_array)
                            
                                # Loading the interface sheet path, name   
                                parse_env_cfg_pool[parse_ss_env_no][7][e+1][8] = str(eintfdet[1])
                            else:     
                                parse_env_cfg_pool[parse_ss_env_no][7][e+1][2] = (str(eintfdet[0]))
                    
                    else:
                        envintfname = parenvname+","+envname+","+envname
                        log.debug("parse_ss_button_code : Value of e %d envintfname %s"%(e, envintfname))
                        
                        # Loading top,env,intf name
                        parse_env_cfg_pool[parse_ss_env_no][7][1][0] = (str(envintfname))
                        log.debug("parse_ss_button_code : Value of parse_env_cfg_pool[%d] %s"%(parse_ss_env_no, parse_env_cfg_pool[parse_ss_env_no]))
                        
                        # Loading env intf name 
                        parse_env_cfg_pool[parse_ss_env_no][7][1][1] = envname 
                        log.debug("parse_ss_button_code : Value of parse_env_cfg_pool[%d] %s"%(parse_ss_env_no, parse_env_cfg_pool[parse_ss_env_no]))
                        
                        # env interface details
                        eintfdet = str(envintfvaldet[0]).split(":")
                        log.debug("parse_ss_button_code : Value of eintfdet %s"%(eintfdet))
                       
                        # Loading intf config type 
                        if len(str(envintfvaldet[0]).split(":"))>1:
                            parse_env_cfg_pool[parse_ss_env_no][7][1][2] = (str(eintfdet[0]))
                            
                            # Calling logic to parse the Interface spreadsheet and load data
                            self.parse_interface_ss(str(eintfdet[1])) 
                        
                            # Loading the interface variables values - no. of elements in the sheet
                            parse_env_cfg_pool[parse_ss_env_no][7][1][3] = (generic_udif_frame_loop-1)
                        
                            # Loading the generic_udif_intf_cfg_array 
                            parse_env_cfg_pool[parse_ss_env_no][7][1][4] = (generic_udif_intf_cfg_array)

                            # Loading the generic_udif_clock_cfg_array    
                            parse_env_cfg_pool[parse_ss_env_no][7][1][5] = (generic_udif_clock_cfg_array)
                            
                            # Loading the generic_udif_cb_cfg_array
                            parse_env_cfg_pool[parse_ss_env_no][7][1][6] = (generic_udif_cb_cfg_array)
                            
                            # Loading the generic_udif_mp_cfg_array
                            parse_env_cfg_pool[parse_ss_env_no][7][1][7] = (generic_udif_mp_cfg_array)
                        
                            # Loading the interface sheet path, name   
                            parse_env_cfg_pool[parse_ss_env_no][7][1][8] = str(eintfdet[1])
                        else:     
                            parse_env_cfg_pool[parse_ss_env_no][7][1][2] = (str(eintfdet[0]))


                # Loading the details of current directory where the env exists
                if (sheet.cell(row=n, column=11).value) == None or str(sheet.cell(row=n, column=11).value) == 'pwd':
                    parse_env_cfg_pool[parse_ss_env_no][6].append(str(os.popen('pwd').read()).strip())
                else:    
                    parse_env_cfg_pool[parse_ss_env_no][6].append(str(sheet.cell(row=n, column=11).value))
                log.debug("parse_ss_button_code : Value of env directory path from spreadsheet %s"%(sheet.cell(row=n, column=11).value))
                log.debug(str(os.popen('pwd').read()).strip())

                # Incrementing the parse_ss_env_no @ the end
                parse_ss_env_no+=1
                log.debug("parse_ss_button_code : Value of parse_ss_env_no %d parse_env_cfg_pool %s"%(parse_ss_env_no, parse_env_cfg_pool))

    
    def mc_load_envcfg_button_code(self):
        log.debug("mc_load_envcfg_button_code : Going to Load Env Configuration for MC Setup\n")

        # Going to kil the load env button and replace with parse env button.
        self.mc_load_envcfg_button_code_kcb();

        # Calling the code to create the parse_ss_button_create_cb button
        self.parse_ss_button_create_cb(2);

        # Calling the code to create spreadsheet entry
        self.mc_load_envcfg_by_parse_button_create_cb();


    def mc_load_envcfg_by_parse_button_create_cb(self):
        log.debug("mc_load_envcfg_by_parse_button_create_cb : Going to Create mc_load_envcfg_by_parse_button_create_cb\n")
        if (self.mcl7):
            self.mcl7.grid_forget(); self.mcl7 = None
        self.mcl7 = Label(font=MyFontH2, text="Choose the EnvConfig Spreadsheet To Load: ")
        self.mcl7.grid(row=13, column=0, sticky='W')
        self.mcl7.rowconfigure(13,weight=1)
        self.mcl7.columnconfigure(0,weight=1)
                
        if (self.mce7):    
            self.mce7.grid_forget(); self.mce7 = None
        self.mce7 = Entry(font=MyFontH2, bg="goldenrod")
        self.mce7.delete(0, END)
        self.mce7.insert(0, 'Right Click To Load-Left Click To Enter')
        self.mce7.bind('<Button-3>', self.mc_load_envcfg_by_parse_ss_file_dialog)
        self.mce7.bind('<Button-1>', self.mc_load_envcfg_by_parse_ss_file_path)
        self.mce7.grid(row=13, column=1, sticky='WE')
        self.mce7.rowconfigure(13,weight=1)
        self.mce7.columnconfigure(1,weight=1)


    def mc_load_envcfg_by_parse_ss_file_dialog(self, *args):
        self.mce7.delete(0, END)
        # self.mce7.insert(0, tkFileDialog.askopenfilename(initialdir = ".",title = "Select file",filetypes = (("xlsx files","*.xlsx"),("all files","*.*"))))
        self.mce7.insert(0, filedialog.askopenfilename(initialdir = ".",title = "Select file",filetypes = (("xlsx files","*.xlsx"),("all files","*.*"))))


    def mc_load_envcfg_by_parse_ss_file_path(self, *args):
        if self.mce7.get() == 'Right Click To Load-Left Click To Enter':
            self.mce7.delete(0, END)
            self.mce7.insert(0, '')
        else:
            self.mce7.insert(0, '')


    def mc_load_envcfg_by_parse_button_create_kcb(self):
        log.debug("mc_load_envcfg_by_parse_button_create_kcb : Going to Create mc_load_envcfg_by_parse_button_create_kcb\n")
        
        if (self.mcl7):
            self.mcl7.grid_forget(); self.mcl7 = None
        
        if (self.mce7):
            self.mce7.grid_forget(); self.mce7 = None


    def mc_sub_env_details_focus_in(self, *args):
        global mc_sub_env_arr_focus_in 
        log.debug("mc_sub_env_details_focus_in : Going to Decode the Sub Env Configuration Details While Focusing In!\n")
        
        log.debug("mc_sub_env_details_focus_in : value of self.mce6 %s\n"%self.mce6.get())
        
        if self.mce6.get() != '':
            mc_sub_env_arr_focus_in = (self.mce6.get()).split(",")
        else:
            mc_sub_env_arr_focus_in = [] 
        log.debug("mc_sub_env_details_focus_in : value of mc_sub_env_arr_focus_in %s\n"%mc_sub_env_arr_focus_in)


    def mc_sub_env_details(self, *args):
        global mc_env_no_cur
        global mc_env_no_cur_prev
        global mc_env_no_max
        global mc_env_cfg_pool 
        global mc_sub_env_arr_prev 
        global mc_env_cfg_pool_cnt
        global mc_env_arr_range
        log.debug("mc_sub_env_details : Going to Decode the Sub Env Configuration Details\n")

        mc_sub_env_cnt = 0
        
        #if len(self.mce6.get()) != 0:
        log.debug("mc_sub_env_details: value of self.mce6 %s\n"%self.mce6.get())
        if self.mce6.get() != '':
            mc_sub_env_arr = (self.mce6.get()).split(",")
        else:
            mc_sub_env_arr = '' 
        log.debug("mc_sub_env_details : Value of mc_sub_env_arr %s\n"%mc_sub_env_arr)
   
        log.debug("mc_sub_env_details : mc_env_no_cur_prev %0d mc_env_no_cur %0d\n"%(mc_env_no_cur_prev, mc_env_no_cur))
        if mc_env_no_cur_prev == mc_env_no_cur:
            log.debug("mc_sub_env_details : mc_env_no_cur_prev %d == mc_env_no_cur %d ! Re-Structuring the mc_env_cfg_pool !\n"%(mc_env_no_cur_prev, mc_env_no_cur))

            if mc_sub_env_arr != mc_sub_env_arr_prev:
                log.debug("mc_sub_env_details : mc_sub_env_arr %s != mc_sub_env_arr_prev %s ! Re-Structuring the mc_env_cfg_pool %s!\n"%(mc_sub_env_arr, mc_sub_env_arr_prev,mc_env_cfg_pool))
                log.debug("mc_sub_env_details : len(mc_sub_env_arr) %d len(mc_sub_env_arr_prev) %d!\n"%(len(mc_sub_env_arr), len(mc_sub_env_arr_prev)))
                
                # Deleting the sub env array elements 
                mc_env_cfg_pool[mc_env_no_cur][1] = ''
                
                if len(mc_sub_env_arr_prev) != 0:
                    while mc_sub_env_cnt < int(mc_sub_env_arr_prev[0]):
                        #mc_sub_env_ele = str(self.mce2.get())+','+mc_sub_env_arr_prev[mc_sub_env_cnt+1]
                        mc_sub_env_ele = str(((self.mce2.get()).split(","))[1])+','+mc_sub_env_arr_prev[mc_sub_env_cnt+1]
                        mc_sub_env_idx = self.find_index(mc_sub_env_ele, mc_env_cfg_pool)
                        if mc_sub_env_idx != None:
                            del mc_env_cfg_pool[mc_sub_env_idx[0]]
                            mc_env_cfg_pool_cnt -= 1 
                        log.debug("mc_sub_env_details : mc_sub_env_ele %s mc_sub_env_idx %s mc_env_cfg_pool %s!\n"%(mc_sub_env_ele, mc_sub_env_idx, mc_env_cfg_pool))
                        mc_sub_env_cnt += 1
                        log.debug("mc_sub_env_details : mc_sub_env_cnt %d mc_sub_env_arr_prev[0] %d!\n"%(mc_sub_env_cnt, int(mc_sub_env_arr_prev[0])))
                else:
                    log.debug("mc_sub_env_details : mc_sub_env_arr_prev is == []!\n")
                
                log.debug("mc_sub_env_details : mc_env_no_cur %d, mc_env_no_max %d, mc_env_cfg_pool_cnt %d, mc_env_cfg_pool %s!\n"%(mc_env_no_cur, mc_env_no_max, mc_env_cfg_pool_cnt, mc_env_cfg_pool))

                # Loading / Creating new entry in the mc_env_cfg_pool
                # log.debug("mc_sub_env_details: mc_sub_env_arr %s, mc_sub_env_arr[0] = %s, str(mc_sub_env_arr[0]) %s, len(mc_sub_env_arr) %d\n"%(mc_sub_env_arr, mc_sub_env_arr[0], str(mc_sub_env_arr[0]), len(mc_sub_env_arr)))
                mc_sub_env_cnt = 0
                # Loading up the sub env array elements 
                mc_env_cfg_pool[mc_env_no_cur][1] = self.mce6.get()
                if mc_sub_env_arr != '': 
                    while mc_sub_env_cnt < int(mc_sub_env_arr[0]):
                        log.debug("mc_sub_env_details : mc_sub_env_cnt %d, mc_sub_env_arr %s\n"%(mc_sub_env_cnt, mc_sub_env_arr))
                        #mc_sub_env_ele =  str(self.mce2.get())+','+mc_sub_env_arr[mc_sub_env_cnt+1]   
                        mc_sub_env_ele =  str(((self.mce2.get()).split(","))[1])+','+mc_sub_env_arr[mc_sub_env_cnt+1]   
                        mc_sub_env_idx = self.find_index(mc_sub_env_ele, mc_env_cfg_pool)
                        log.debug("mc_sub_env_details : mc_sub_env_ele %s mc_sub_env_idx %s mc_env_no_cur %d mc_env_cfg_pool_cnt %d mc_env_cfg_pool %s!\n"%(mc_sub_env_ele, mc_sub_env_idx, mc_env_no_cur, mc_env_cfg_pool_cnt, mc_env_cfg_pool))
                        if mc_sub_env_idx != None:
                            del mc_env_cfg_pool[mc_sub_env_idx[0]]
                            mc_env_cfg_pool_cnt -= 1 
                            log.debug("mc_sub_env_details : mc_sub_env_ele %s mc_sub_env_idx %s mc_env_no_cur %d mc_env_cfg_pool_cnt %d mc_env_cfg_pool %s!\n"%(mc_sub_env_ele, mc_sub_env_idx, mc_env_no_cur, mc_env_cfg_pool_cnt, mc_env_cfg_pool))
                        else:
                            mc_env_cfg_pool.append([[] for x in range(mc_env_arr_range)])
                            log.debug("mc_sub_env_details : mc_sub_env_ele %s mc_sub_env_idx %s mc_env_no_cur %d mc_env_cfg_pool_cnt %d mc_env_cfg_pool %s!\n"%(mc_sub_env_ele, mc_sub_env_idx, mc_env_no_cur, mc_env_cfg_pool_cnt, mc_env_cfg_pool))
                            mc_env_cfg_pool[mc_env_cfg_pool_cnt][0] = mc_sub_env_ele
                            mc_env_cfg_pool_cnt += 1
                            log.debug("mc_sub_env_details : mc_sub_env_ele %s mc_sub_env_idx %s mc_env_no_cur %d mc_env_cfg_pool_cnt %d mc_env_cfg_pool %s!\n"%(mc_sub_env_ele, mc_sub_env_idx, mc_env_no_cur, mc_env_cfg_pool_cnt, mc_env_cfg_pool))
                        mc_sub_env_cnt += 1
                        log.debug("mc_sub_env_details : mc_sub_env_cnt %d mc_sub_env_arr[0] %d!\n"%(mc_sub_env_cnt, int(mc_sub_env_arr[0])))
                
                log.debug("mc_sub_env_details : mc_env_no_cur %d, mc_env_no_max %d, mc_env_cfg_pool_cnt %d, mc_env_cfg_pool %s!\n"%(mc_env_no_cur, mc_env_no_max, mc_env_cfg_pool_cnt, mc_env_cfg_pool))

                # Re-ordering the mc_env_no_max value 
                # if mc_sub_env_arr_prev != [] or len(mc_sub_env_arr_prev) != 0:
                if len(mc_sub_env_arr_prev) != 0:
                    mc_env_no_max = mc_env_no_max - int(mc_sub_env_arr_prev[0]) 
                if mc_sub_env_arr != '':
                    mc_env_no_max = mc_env_no_max + int(mc_sub_env_arr[0])
                log.debug("mc_sub_env_details : mc_env_no_max %d!\n"%(mc_env_no_max))
                
                # Saving the mc_sub_env_arr_prev into mc_sub_env_arr 
                mc_sub_env_arr_prev = mc_sub_env_arr
                log.debug("mc_sub_env_details : mc_sub_env_arr_prev %s!\n"%(mc_sub_env_arr_prev))
                
                # Saving the mc_env_no_cur 
                mc_env_no_cur_prev = mc_env_no_cur
                log.debug("mc_sub_env_details : mc_env_no_cur_prev %d!\n"%(mc_env_no_cur_prev))
            else: 
                log.debug("mc_sub_env_details : mc_sub_env_arr == mc_sub_env_arr_prev ! No Changes required!\n")
        else:
            log.debug("mc_sub_env_details : mc_env_no_cur_prev != mc_env_no_cur ! Re-Structuring the mc_env_cfg_pool !\n")

            mc_sub_env_cnt = 0
            if mc_sub_env_arr != '': 
                while mc_sub_env_cnt < int(mc_sub_env_arr[0]):
                        #mc_sub_env_ele =  str(self.mce2.get())+','+mc_sub_env_arr[mc_sub_env_cnt+1]   
                        mc_sub_env_ele =  str(((self.mce2.get()).split(","))[1])+','+mc_sub_env_arr[mc_sub_env_cnt+1]   
                        mc_sub_env_idx = self.find_index(mc_sub_env_ele, mc_env_cfg_pool)
                        if mc_sub_env_idx != None:
                            del mc_env_cfg_pool[mc_sub_env_idx[0]]
                            mc_env_cfg_pool_cnt -= 1 
                        else:
                            mc_env_cfg_pool.append([[] for x in range(mc_env_arr_range)])
                            mc_env_cfg_pool[mc_env_cfg_pool_cnt][0] = mc_sub_env_ele
                            mc_env_cfg_pool_cnt += 1
                        mc_sub_env_cnt += 1
                        log.debug("mc_sub_env_details : mc_sub_env_cnt %d mc_sub_env_arr[0] %d!\n"%(mc_sub_env_cnt, int(mc_sub_env_arr[0])))

            # Re-ordering the mc_env_no_max value 
            if mc_sub_env_arr != '':
                mc_env_no_max = mc_env_no_max + int(mc_sub_env_arr[0])
            log.debug("mc_sub_env_details : mc_env_no_max %d!\n"%(mc_env_no_max))
            
            # Saving the mc_sub_env_arr_prev into mc_sub_env_arr 
            mc_sub_env_arr_prev = mc_sub_env_arr
            log.debug("mc_sub_env_details : mc_sub_env_arr_prev %s!\n"%(mc_sub_env_arr_prev))
                
            # Saving the mc_env_no_cur 
            mc_env_no_cur_prev = mc_env_no_cur
            log.debug("mc_sub_env_details : mc_env_no_cur_prev %d!\n"%(mc_env_no_cur_prev))
        # else:    
        #     log.debug("mc_sub_env_details : self.mce6.get() is either 0 or empty !\n") 
            
        log.debug("mc_sub_env_details : At end. mc_env_no_cur %d mc_env_no_max %d mc_env_cfg_pool %s\n"%(mc_env_no_cur, mc_env_no_max, mc_env_cfg_pool))
        
        # Calling the API to kill buttons for env layout
        self.mc_win_layout_return_exit_load_prev_next_done_buttons_kcb()
        
        # Calling the API to build buttons for env layout
        self.mc_win_layout_return_exit_load_prev_next_done_buttons()
    
    
    def mc_sub_env_details_focus_out(self, *args):
        global mc_env_no_cur
        global mc_env_no_cur_prev
        global mc_env_no_max
        global mc_env_cfg_pool 
        global mc_sub_env_arr_prev 
        global mc_env_cfg_pool_cnt
        global mc_env_arr_range
        global mc_find_till_the_leaf_arr
        log.debug("mc_sub_env_details : Going to Decode the Sub Env Configuration Details\n")

        mc_sub_env_cnt = 0
        
        #if len(self.mce6.get()) != 0:
        log.debug("mc_sub_env_details: value of self.mce6 %s\n"%self.mce6.get())
        if self.mce6.get() != '':
            mc_sub_env_arr = (self.mce6.get()).split(",")
        else:
            mc_sub_env_arr = '' 
        log.debug("mc_sub_env_details : Value of mc_sub_env_arr %s\n"%mc_sub_env_arr)
        
        # Conditions on what needs to be done when you focus in and focus out.
        if mc_sub_env_arr_focus_in == mc_sub_env_arr:
            log.debug("mc_sub_env_details : mc_sub_env_arr_focus_in %0s == mc_sub_env_arr %0s! Don't have to do anything!\n"%(mc_sub_env_arr_focus_in, mc_sub_env_arr))
        elif mc_sub_env_arr_focus_in == []: 
            log.debug("mc_sub_env_details : mc_sub_env_arr_focus_in %0s is equal to None or ''\n"%(mc_sub_env_arr_focus_in))
            
            # Loading up the sub env array elements 
            mc_sub_env_cnt = 0
            mc_env_cfg_pool[mc_env_no_cur][1] = self.mce6.get()
            if mc_sub_env_arr != '': 
                while mc_sub_env_cnt < int(mc_sub_env_arr[0]):
                    log.debug("mc_sub_env_details : mc_sub_env_cnt %d, mc_sub_env_arr %s\n"%(mc_sub_env_cnt, mc_sub_env_arr))
                    mc_sub_env_ele =  str(((self.mce2.get()).split(","))[1])+','+mc_sub_env_arr[mc_sub_env_cnt+1]   
                    mc_sub_env_idx = self.find_index(mc_sub_env_ele, mc_env_cfg_pool)
                    log.debug("mc_sub_env_details : mc_sub_env_ele %s mc_sub_env_idx %s mc_env_no_cur %d mc_env_cfg_pool_cnt %d mc_env_cfg_pool %s!\n"%(mc_sub_env_ele, mc_sub_env_idx, mc_env_no_cur, mc_env_cfg_pool_cnt, mc_env_cfg_pool))
                    if mc_sub_env_idx != None:
                        del mc_env_cfg_pool[mc_sub_env_idx[0]]
                        
                        mc_env_cfg_pool_cnt -= 1 
                        mc_env_no_max -= 1 
                        log.debug("mc_sub_env_details : mc_sub_env_ele %s mc_sub_env_idx %s mc_env_no_cur %d mc_env_cfg_pool_cnt %d mc_env_cfg_pool %s!\n"%(mc_sub_env_ele, mc_sub_env_idx, mc_env_no_cur, mc_env_cfg_pool_cnt, mc_env_cfg_pool))
                    else:
                        mc_env_cfg_pool.append([[] for x in range(mc_env_arr_range)])
                        log.debug("mc_sub_env_details : mc_sub_env_ele %s mc_sub_env_idx %s mc_env_no_cur %d mc_env_cfg_pool_cnt %d mc_env_cfg_pool %s!\n"%(mc_sub_env_ele, mc_sub_env_idx, mc_env_no_cur, mc_env_cfg_pool_cnt, mc_env_cfg_pool))
                        mc_env_cfg_pool[mc_env_cfg_pool_cnt][0] = mc_sub_env_ele
                        
                        mc_env_cfg_pool_cnt += 1
                        mc_env_no_max += 1 
                        log.debug("mc_sub_env_details : mc_sub_env_ele %s mc_sub_env_idx %s mc_env_no_cur %d mc_env_cfg_pool_cnt %d mc_env_cfg_pool %s!\n"%(mc_sub_env_ele, mc_sub_env_idx, mc_env_no_cur, mc_env_cfg_pool_cnt, mc_env_cfg_pool))
                    mc_sub_env_cnt += 1
                    log.debug("mc_sub_env_details : mc_sub_env_cnt %d mc_sub_env_arr[0] %d!\n"%(mc_sub_env_cnt, int(mc_sub_env_arr[0])))
            log.debug("mc_sub_env_details : mc_env_no_cur %d, mc_env_no_max %d, mc_env_cfg_pool_cnt %d, mc_env_cfg_pool %s!\n"%(mc_env_no_cur, mc_env_no_max, mc_env_cfg_pool_cnt, mc_env_cfg_pool))
            
            #   # Re-ordering the mc_env_no_max value 
            #   if mc_sub_env_arr != '':
            #       mc_env_no_max = mc_env_no_max + int(mc_sub_env_arr[0])
            #   log.debug("mc_sub_env_details : mc_env_no_max %d!\n"%(mc_env_no_max))
        
        elif mc_sub_env_arr_focus_in != mc_sub_env_arr:
            log.debug("mc_sub_env_details : mc_sub_env_arr_focus_in %0s != mc_sub_env_arr %0s! Start Editing!\n"%(mc_sub_env_arr_focus_in, mc_sub_env_arr))

            # Cycle through the mc_sub_env_arr_focus_in and delete which is not there in mc_sub_env_arr
            if mc_sub_env_arr_focus_in != None and mc_sub_env_arr_focus_in != '':
                for i in range (1, len(mc_sub_env_arr_focus_in)):
                    focus_in_to_delet = self.find_index(mc_sub_env_arr_focus_in[i], mc_sub_env_arr)
                    log.debug("mc_sub_env_details : focus_in_to_delet %s mc_sub_env_arr_focus_in[%0d] %0s mc_sub_env_arr %0s!!\n"%(focus_in_to_delet, i, mc_sub_env_arr_focus_in[i], mc_sub_env_arr))
                    
                    if focus_in_to_delet == None:
                        log.debug("mc_sub_env_details: parent %s child %s"%(str(((self.mce2.get()).split(","))[1]), mc_sub_env_arr_focus_in[i]))
                        self.mc_find_till_the_leaf(str(((self.mce2.get()).split(","))[1]), mc_sub_env_arr_focus_in[i]) 
                        log.debug("mc_sub_env_details: value of mc_find_till_the_leaf_arr %s"%mc_find_till_the_leaf_arr)   

                        # Deleting the sub env related to above main env in the mc_env_cfg_pool
                        for j in range (len(mc_find_till_the_leaf_arr)):
                            mc_find_till_the_leaf_arr_idx = self.find_index(mc_find_till_the_leaf_arr[j], mc_env_cfg_pool)
                            if mc_find_till_the_leaf_arr_idx != None:
                                del mc_env_cfg_pool[mc_find_till_the_leaf_arr_idx[0]]
                                
                                mc_env_cfg_pool_cnt -= 1 
                                mc_env_no_max -= 1 
                                log.debug("mc_sub_env_details : mc_env_no_cur %d mc_env_no_max %d mc_env_cfg_pool_cnt %d mc_env_cfg_pool %s!\n"%(mc_env_no_cur, mc_env_no_max, mc_env_cfg_pool_cnt, mc_env_cfg_pool))
                        
                        # CLeaning the mc_find_till_the_leaf_arr
                        mc_find_till_the_leaf_arr = []

            # Cycle through the mc_sub_env_arr, create all the elements which is not there in mc_sub_env_arr_focus_in
            if mc_sub_env_arr != None and mc_sub_env_arr != '':
                # Loading up the sub env array elements 
                mc_sub_env_cnt = 0
                mc_env_cfg_pool[mc_env_no_cur][1] = self.mce6.get()
                if mc_sub_env_arr != '': 
                    while mc_sub_env_cnt < int(mc_sub_env_arr[0]):
                        log.debug("mc_sub_env_details : mc_sub_env_cnt %d, mc_sub_env_arr %s\n"%(mc_sub_env_cnt, mc_sub_env_arr))
                        mc_sub_env_ele =  str(((self.mce2.get()).split(","))[1])+','+mc_sub_env_arr[mc_sub_env_cnt+1]   
                        mc_sub_env_idx = self.find_index(mc_sub_env_ele, mc_env_cfg_pool)
                        log.debug("mc_sub_env_details : mc_sub_env_ele %s mc_sub_env_idx %s mc_env_no_cur %d mc_env_cfg_pool_cnt %d mc_env_cfg_pool %s!\n"%(mc_sub_env_ele, mc_sub_env_idx, mc_env_no_cur, mc_env_cfg_pool_cnt, mc_env_cfg_pool))
                        if mc_sub_env_idx == None:
                        # if mc_sub_env_idx != None:
                        #     del mc_env_cfg_pool[mc_sub_env_idx[0]]
                        #     
                        #     mc_env_cfg_pool_cnt -= 1 
                        #     mc_env_no_max -= 1 
                        #     log.debug("mc_sub_env_details : mc_sub_env_ele %s mc_sub_env_idx %s mc_env_no_cur %d mc_env_cfg_pool_cnt %d mc_env_cfg_pool %s!\n"%(mc_sub_env_ele, mc_sub_env_idx, mc_env_no_cur, mc_env_cfg_pool_cnt, mc_env_cfg_pool))
                        # else:
                            mc_env_cfg_pool.append([[] for x in range(mc_env_arr_range)])
                            log.debug("mc_sub_env_details : mc_sub_env_ele %s mc_sub_env_idx %s mc_env_no_cur %d mc_env_cfg_pool_cnt %d mc_env_cfg_pool %s!\n"%(mc_sub_env_ele, mc_sub_env_idx, mc_env_no_cur, mc_env_cfg_pool_cnt, mc_env_cfg_pool))
                            mc_env_cfg_pool[mc_env_cfg_pool_cnt][0] = mc_sub_env_ele
                            
                            mc_env_cfg_pool_cnt += 1
                            mc_env_no_max += 1 
                            log.debug("mc_sub_env_details : mc_sub_env_ele %s mc_sub_env_idx %s mc_env_no_cur %d mc_env_cfg_pool_cnt %d mc_env_cfg_pool %s!\n"%(mc_sub_env_ele, mc_sub_env_idx, mc_env_no_cur, mc_env_cfg_pool_cnt, mc_env_cfg_pool))
                        mc_sub_env_cnt += 1
                        log.debug("mc_sub_env_details : mc_sub_env_cnt %d mc_sub_env_arr[0] %d!\n"%(mc_sub_env_cnt, int(mc_sub_env_arr[0])))
                log.debug("mc_sub_env_details : mc_env_no_cur %d, mc_env_no_max %d, mc_env_cfg_pool_cnt %d, mc_env_cfg_pool %s!\n"%(mc_env_no_cur, mc_env_no_max, mc_env_cfg_pool_cnt, mc_env_cfg_pool))
        
        log.debug("mc_sub_env_details : At end. mc_env_no_cur %d mc_env_no_max %d mc_env_cfg_pool %s\n"%(mc_env_no_cur, mc_env_no_max, mc_env_cfg_pool))
        
        # Calling the API to kill buttons for env layout
        self.mc_win_layout_return_exit_load_prev_next_done_buttons_kcb()
        
        # Calling the API to build buttons for env layout
        self.mc_win_layout_return_exit_load_prev_next_done_buttons()

    
    def mc_find_till_the_leaf(self, parent, child):
        global mc_find_till_the_leaf_arr
        
        log.debug("mc_find_till_the_leaf : Going to launch function to delete items till the leaf!\n")

        mc_sub_env_ele = parent+','+child
        mc_sub_env_idx = self.find_index(mc_sub_env_ele, mc_env_cfg_pool)
        log.debug("mc_find_till_the_leaf : parent %s child %s mc_sub_env_ele %s mc_sub_env_idx %s\n"%(parent,child,mc_sub_env_ele,mc_sub_env_idx))
        
        # Deleting the main env entry
        ele_idx = 0
        if mc_sub_env_idx != None:
            #mc_find_till_the_leaf_arr.append(mc_sub_env_idx[0])
            mc_find_till_the_leaf_arr.append(mc_sub_env_ele)
            log.debug("mc_find_till_the_leaf : mc_find_till_the_leaf_arr %s\n"%(mc_find_till_the_leaf_arr))
            
            ele_to_search = child+','
            log.debug("mc_find_till_the_leaf : ele_to_search %s\n"%(ele_to_search))
            
            while ele_idx < len(mc_env_cfg_pool):
                log.debug("mc_find_till_the_leaf : ele_idx %d ele_to_search %s\n"%(ele_idx, ele_to_search))
                if  re.search(str(ele_to_search), str(mc_env_cfg_pool[ele_idx][0])):
                    parent_l = child
                    child_l = str(mc_env_cfg_pool[ele_idx][0]).split(",")[1]
                    log.debug("mc_find_till_the_leaf : parent_l %s child_l %s\n"%(parent_l,child_l))
                    
                    self.mc_find_till_the_leaf(parent_l, child_l) 
                    ele_idx += 1
                else:
                    ele_idx += 1


    def mc_prev_envcfg_button_code(self):
        global mc_env_no_cur
        log.debug("mc_prev_envcfg_button_code : Going to Load Prev Env Configuration for MC Setup\n")
   
        # Reducing the mc_env_no_cur 
        mc_env_no_cur -= 1

        # Setting the env cfg ended for current configuration
        mc_env_cfg_started = 0

        log.debug("mc_prev_envcfg_button_code : Value of mc_env_no_cur is %d. mc_env_cfg_pool %s\n"%(mc_env_no_cur, mc_env_cfg_pool))
       
        mc_env_cnt_wait.set("4")


    def mc_next_envcfg_button_code(self):
        log.debug("mc_next_envcfg_button_code : Going to Next Env Configuration for MC Setup\n")
      
        # Loading / Saving the env configuration into mc_env_cfg_pool
        self.mc_env_cfg_pool_load()

        log.debug("mc_next_envcfg_button_code : Value of mc_env_no_cur is %d. mc_env_cfg_pool %s\n"%(mc_env_no_cur, mc_env_cfg_pool))
        
        # Setting the env cfg ended for current configuration
        mc_env_cfg_started = 0
       
        mc_env_cnt_wait.set("5")
   

    def mc_done_envcfg_button_code(self):
        log.debug("mc_done_envcfg_button_code : Going to Done Env Configuration for MC Setup\n")
        
        # Loading / Saving the env configuration into mc_env_cfg_pool
        self.mc_env_cfg_pool_load()

        log.debug("mc_done_envcfg_button_code : Value of mc_env_no_cur is %d. mc_env_cfg_pool %s\n"%(mc_env_no_cur, mc_env_cfg_pool))
        
        if (mc_env_no_cur == (mc_env_no_max-1)) and mc_env_no_cur > 0:
            #self.mc_final_envset_setup_after_done_envcfg()
            self.mc_final_envset_setup_after_done_envcfg_try()
        
        # Setting the env cfg ended for current configuration
        mc_env_cfg_started = 0
       
        mc_env_cnt_wait.set("6")


    def mc_envset_button_code(self):
        global mc_envset_done
        global mc_env_no_cur
        global mc_env_no_max
        global mc_envset_button_code_on
        global mc_curr_env_mon_arr 
        global mc_curr_env_scb_arr
        global mc_global_env_mon_arr
        global mc_global_env_scb_arr
        log.debug("mc_envset_button_code: Launching The Environment Setup widget\n")
       
        # Clearing/Setting to default value
        mc_curr_env_mon_arr = []
        mc_curr_env_scb_arr = []

        if (mc_env_no_cur == (mc_env_no_max-1)) and mc_env_no_cur > 0:
            mc_envset_done = 1

        self.mc_envset = Toplevel()
        self.mc_envset.wm_title("Environment Setup Window")
        self.mc_envset.geometry("+500+500")   
      
        # Code to delete the elements from mc_global_env_mon_arr and mc_global_env_scb_arr based on mc_env_no_cur

        # Loading the monitor components from env-agt into curr and global mon pool
        if self.mce5.get() != '':
            agt_arr = (self.mce5.get()).split(",")
        else:
            agt_arr = ''
        agt_arr_cnt = 0
        agt_find_idx = None
        log.debug("mc_envset_button_code : agt_arr_cnt %d agt_rr %s\n"%(agt_arr_cnt, agt_arr))

        if agt_arr != '':
            while agt_arr_cnt < int(agt_arr[0]):
                agt_find_ele = self.mce2.get()+','+str(agt_arr[agt_arr_cnt+1])
                agt_find_idx = self.find_index(agt_find_ele, mc_agt_cfg_pool)
                log.debug("mc_envset_button_code : agt_find_ele %s agt_find_idx %s\n"%(agt_find_ele, agt_find_idx))

                if agt_find_idx != None:
                    if mc_agt_cfg_pool[agt_find_idx[0]][4] != '':
                        mon_arr = mc_agt_cfg_pool[agt_find_idx[0]][4].split(",")
                    else:
                        mon_arr = ''
                    log.debug("mc_envset_button_code : mon_arr %s\n"%(mon_arr))

                    mon_arr_cnt = 0
                    if mon_arr != '':
                        # if int(mon_arr[0]) > 1: # NEEDFIX - Wrong condition
                        if len(mon_arr) > 1: #101919|SAT
                            while mon_arr_cnt < int(mon_arr[0]):
                                # mon_ele_load = str(mc_env_no_cur)+','+agt_find_ele+','+str(mon_arr[mon_arr_cnt+1])
                                mon_ele_load = agt_find_ele+','+str(mon_arr[mon_arr_cnt+1])
                                mc_curr_env_mon_arr.append(mon_ele_load)
                                log.debug("mc_envset_button_code : mon_ele_load %s mc_curr_env_mon_arr %s\n"%(mon_ele_load, mc_curr_env_mon_arr))
                                
                                # Loading into mc_global_env_mon_arr 
                                mon_find_idx = self.find_index(mon_ele_load, mc_global_env_mon_arr)
                                if mon_find_idx == None:
                                    mc_global_env_mon_arr.append(mon_ele_load)
                                else:
                                    log.debug("mc_envset_button_code: mon_find_idx != None. Monitor already exists in mc_global_env_mon_arr!\n")
                                
                                mon_arr_cnt += 1
                                log.debug("mc_envset_button_code : mon_find_idx %s mc_global_env_mon_arr %s mon_arr_cnt %d\n"%(mon_find_idx, mc_global_env_mon_arr, mon_arr_cnt))
                        else:
                                #mon_ele_load = str(mc_env_no_cur)+','+agt_find_ele+','+str(agt_arr[agt_arr_cnt+1])
                                mon_ele_load = agt_find_ele+','+str(agt_arr[agt_arr_cnt+1])
                                mc_curr_env_mon_arr.append(mon_ele_load)
                                
                                # Loading into mc_global_env_mon_arr 
                                mon_find_idx = self.find_index(mon_ele_load, mc_global_env_mon_arr)
                                if mon_find_idx == None:
                                    mc_global_env_mon_arr.append(mon_ele_load)
                                else:
                                    log.debug("mc_envset_button_code: mon_find_idx != None. Monitor already exists in mc_global_env_mon_arr!\n")
                                log.debug("mc_envset_button_code : mon_find_idx %s mc_global_env_mon_arr %s\n"%(mon_find_idx, mc_global_env_mon_arr))
                    else:
                        log.debug("mc_envset_button_code: mon_arr == ''!\n")
                else:
                    log.debug("mc_envset_button_code: agt_find_idx == None !\n")
                agt_arr_cnt += 1
                log.debug("mc_envset_button_code : agt_arr_cnt %d mc_curr_env_mon_arr %s\n"%(agt_arr_cnt, mc_curr_env_mon_arr))
        else:
            log.debug("mc_envset_button_code : agt_arr is empty ! Nothing to load\n")

        # Loading the monitor components from env into curr and global mon pool
        if self.mce3.get() != '':
            mon_arr = (self.mce3.get()).split(",")
        else:
            mon_arr = ''
        log.debug("mc_envset_button_code : mon_arr %s\n"%(mon_arr))

        mon_arr_cnt = 0
        if mon_arr != '':
            if int(mon_arr[0]) > 1:
                while mon_arr_cnt < int(mon_arr[0]):
                    #mon_ele_load = str(mc_env_no_cur)+','+self.mce2.get()+','+str(mon_arr[mon_arr_cnt+1])
                    mon_ele_load = self.mce2.get()+','+str(mon_arr[mon_arr_cnt+1].split(":")[0])
                    mc_curr_env_mon_arr.append(mon_ele_load)
                    log.debug("mc_envset_button_code : mon_ele_load %s mc_curr_env_mon_arr %s\n"%(mon_ele_load, mc_curr_env_mon_arr))
            
                    # Loading into mc_global_env_mon_arr 
                    mon_find_idx = self.find_index(mon_ele_load, mc_global_env_mon_arr)
                    if mon_find_idx == None:
                        mc_global_env_mon_arr.append(mon_ele_load)
                    else:
                        log.debug("mc_envset_button_code: mon_find_idx != None. Monitor already exists in mc_global_env_mon_arr!\n")
                    
                    mon_arr_cnt += 1
                    log.debug("mc_envset_button_code : mon_find_idx %s mc_global_env_mon_arr %s mon_arr_cnt %d\n"%(mon_find_idx, mc_global_env_mon_arr, mon_arr_cnt))
            else:
                    mon_ele_name = self.mce3.get().split(",")
                    log.debug("mc_envset_button_code : mon_ele_name %s mc_curr_env_mon_arr %s\n"%(mon_ele_name, mc_curr_env_mon_arr))
                    #mon_ele_load = str(mc_env_no_cur)+','+self.mce2.get()+','+str(mon_ele_name[len(mon_ele_name)-1])
                    mon_ele_load = self.mce2.get()+','+str(mon_ele_name[len(mon_ele_name)-1].split(":")[0])
                    mc_curr_env_mon_arr.append(mon_ele_load)
                    log.debug("mc_envset_button_code : mon_ele_load %s mc_curr_env_mon_arr %s\n"%(mon_ele_load, mc_curr_env_mon_arr))
                    
                    # Loading into mc_global_env_mon_arr 
                    mon_find_idx = self.find_index(mon_ele_load, mc_global_env_mon_arr)
                    if mon_find_idx == None:
                        mc_global_env_mon_arr.append(mon_ele_load)
                    else:
                        log.debug("mc_envset_button_code: mon_find_idx != None. Monitor already exists in mc_global_env_mon_arr!\n")
                    log.debug("mc_envset_button_code : mon_find_idx %s mc_global_env_mon_arr %s\n"%(mon_find_idx, mc_global_env_mon_arr))
        else:
            log.debug("mc_envset_button_code: mon_arr == ''!\n")

        
        # Code to load the scoreboard into mc_curr_env_scb_arr and mc_global_env_scb_arr
        if self.mce4.get() != '':
            scb_arr = (self.mce4.get()).split(",")
        else:
            scb_arr = ''
        log.debug("mc_envset_button_code : scb_arr %s\n"%(scb_arr))

        scb_arr_cnt = 0
        if scb_arr != '':
            if int(scb_arr[0]) > 1:
                while scb_arr_cnt < int(scb_arr[0]):
                    #scb_ele_load = str(mc_env_no_cur)+','+self.mce2.get()+','+str(scb_arr[scb_arr_cnt+1])
                    scb_ele_load = self.mce2.get()+','+str(scb_arr[scb_arr_cnt+1].split(":")[0])
                    mc_curr_env_scb_arr.append(scb_ele_load)
                    log.debug("mc_envset_button_code : scb_ele_load %s mc_curr_env_scb_arr %s\n"%(scb_ele_load, mc_curr_env_scb_arr))
            
                    # Loading into mc_global_env_scb_arr 
                    scb_find_idx = self.find_index(scb_ele_load, mc_global_env_scb_arr)
                    if scb_find_idx == None:
                        mc_global_env_scb_arr.append(scb_ele_load)
                    else:
                        log.debug("mc_envset_button_code: scb_find_idx != None. scoreboard already exists in mc_global_env_scb_arr!\n")
                    
                    scb_arr_cnt += 1
                    log.debug("mc_envset_button_code : scb_find_idx %s mc_global_env_scb_arr %s scb_arr_cnt %d\n"%(scb_find_idx, mc_global_env_scb_arr, scb_arr_cnt))
            else:
                    scb_ele_name = self.mce4.get().split(",")
                    log.debug("mc_envset_button_code : scb_ele_name %s mc_curr_env_scb_arr %s\n"%(scb_ele_name, mc_curr_env_scb_arr))
                    #scb_ele_load = str(mc_env_no_cur)+','+self.mce2.get()+','+str(scb_ele_name[len(scb_ele_name)-1])
                    scb_ele_load = self.mce2.get()+','+str(scb_ele_name[len(scb_ele_name)-1].split(":")[0])
                    mc_curr_env_scb_arr.append(scb_ele_load)
                    log.debug("mc_envset_button_code : scb_ele_load %s mc_curr_env_scb_arr %s\n"%(scb_ele_load, mc_curr_env_scb_arr))
                    
                    # Loading into mc_global_env_scb_arr 
                    scb_find_idx = self.find_index(scb_ele_load, mc_global_env_scb_arr)
                    if scb_find_idx == None:
                        mc_global_env_scb_arr.append(scb_ele_load)
                    else:
                        log.debug("mc_envset_button_code: scb_find_idx != None. scoreboard already exists in mc_global_env_scb_arr!\n")
                    log.debug("mc_envset_button_code : scb_find_idx %s mc_global_env_scb_arr %s\n"%(scb_find_idx, mc_global_env_scb_arr))
        else:
            log.debug("mc_envset_button_code: scb_arr == ''!\n")


        # Code to form the window widget structure based on the monitor and scoreboard for connectivity
        if len(mc_curr_env_mon_arr)>=1 and len(mc_curr_env_scb_arr)>=1:
            log.debug("mc_envset_button_code: Launching the API to build the mon-scb connectivity widgets !\n")
            #self.mc_mon_scb_widget_build_cb(self.mc_envset, mc_curr_env_mon_arr, mc_curr_env_scb_arr)
            self.mc_mon_scb_widget_build_cb_try(self.mc_envset, mc_curr_env_mon_arr, mc_curr_env_scb_arr)

            # Save Button to save the env_setup configurations
            if not (self.mc_mon_scb_con_save_button): 
                self.mc_mon_scb_con_save_button = Button(self.mc_envset, font=MyFontBtn, background="goldenrod1", activebackground="goldenrod3", text="SAVE ENV SETUP", command=self.mc_mon_scb_con_save_button_code, highlightbackground='black', highlightthickness='2')
                self.mc_mon_scb_con_save_button.grid(row=len(mc_curr_env_mon_arr)+2, column=0, columnspan=len(mc_curr_env_scb_arr)+2, sticky='WE')
                # self.mc_mon_scb_con_save_button.rowconfigure(0,weight=1)
            else:
                self.mc_mon_scb_con_save_button.grid_forget(); self.mc_mon_scb_con_save_button = None
                self.mc_mon_scb_con_save_button = Button(self.mc_envset, font=MyFontBtn, background="goldenrod1", activebackground="goldenrod3", text="SAVE ENV SETUP", command=self.mc_mon_scb_con_save_button_code, highlightbackground='black', highlightthickness='2')
                self.mc_mon_scb_con_save_button.grid(row=len(mc_curr_env_mon_arr)+2, column=0, columnspan=len(mc_curr_env_scb_arr)+2, sticky='WE')
                # self.mc_mon_scb_con_save_button.rowconfigure(0,weight=1)
        
            # Setting variable to indicated that mc_envset_button_code was executed
            mc_envset_button_code_on = 1

            if (mc_env_no_cur == (mc_env_no_max-1)) and mc_env_no_cur > 0:
                # Waiting for envset_done var
                log.debug("mc_envset_button_code : Going to wait for mc_mon_scb_con_wait %d !"%(mc_mon_scb_con_wait.get()))
                root.wait_variable(mc_mon_scb_con_wait)
                log.debug("mc_envset_button_code : Wait done for mc_env_cnt_wait %d !"%(mc_mon_scb_con_wait.get()))
                
                # Calling the API to kill buttons for env layout
                self.mc_win_layout_return_exit_load_prev_next_done_buttons_kcb()
                
                # Calling the API to build buttons for env layout
                self.mc_win_layout_return_exit_load_prev_next_done_buttons()
        else:
            log.debug("mc_envset_button_code: Not Launching the API to build the mon-scb connectivity widgets ! Bcoz mc_curr_env_mon_arr / mc_curr_env_scb_arr is not >= 1\n")
            # Killing the mon-scb connectivity widgets
            self.mc_mon_scb_widget_kill_cb(mc_curr_env_mon_arr, mc_curr_env_scb_arr)
           
            # CHECKITOUT : Trying fix for final env_setup not opening if the last env has no connection : 110519|TUE
            if (mc_env_no_cur == (mc_env_no_max-1)) and mc_env_no_cur > 0:
                # Calling the API to build buttons for env layout
                self.mc_win_layout_return_exit_load_prev_next_done_buttons()
       

    def mc_mon_scb_save_button_cb(self):
        global mc_curr_env_mon_arr
        global mc_curr_env_scb_arr
        
        # Save Button to save the env_setup configurations
        if not (self.mc_mon_scb_con_save_button): 
            self.mc_mon_scb_con_save_button = Button(self.mc_envset, font=MyFontBtn, background="goldenrod1", activebackground="goldenrod3", text="SAVE ENV SETUP", command=self.mc_mon_scb_con_save_button_code, highlightbackground='black', highlightthickness='2')
            self.mc_mon_scb_con_save_button.grid(row=len(mc_curr_env_mon_arr)+2, column=0, columnspan=len(mc_curr_env_scb_arr)+2, sticky='WE')
            # self.mc_mon_scb_con_save_button.rowconfigure(0,weight=1)
        else:
            self.mc_mon_scb_con_save_button.grid_forget(); self.mc_mon_scb_con_save_button = None
            self.mc_mon_scb_con_save_button = Button(self.mc_envset, font=MyFontBtn, background="goldenrod1", activebackground="goldenrod3", text="SAVE ENV SETUP", command=self.mc_mon_scb_con_save_button_code, highlightbackground='black', highlightthickness='2')
            self.mc_mon_scb_con_save_button.grid(row=len(mc_curr_env_mon_arr)+2, column=0, columnspan=len(mc_curr_env_scb_arr)+2, sticky='WE')
            # self.mc_mon_scb_con_save_button.rowconfigure(0,weight=1)
   
    
    def mc_mon_scb_final_save_button_cb(self):
        global mc_global_env_mon_arr
        global mc_global_env_scb_arr
        
        # Save Button to save the env_setup configurations
        if not (self.mc_mon_scb_con_save_button): 
            self.mc_mon_scb_con_save_button = Button(self.mc_final_envset, font=MyFontBtn, background="goldenrod1", activebackground="goldenrod3", text="SAVE ENV SETUP", command=self.mc_mon_scb_con_save_button_code, highlightbackground='black', highlightthickness='2')
            self.mc_mon_scb_con_save_button.grid(row=len(mc_global_env_mon_arr)+2, column=0, columnspan=len(mc_global_env_scb_arr)+2, sticky='WE')
            # self.mc_mon_scb_con_save_button.rowconfigure(0,weight=1)
        else:
            self.mc_mon_scb_con_save_button.grid_forget(); self.mc_mon_scb_con_save_button = None
            self.mc_mon_scb_con_save_button = Button(self.mc_final_envset, font=MyFontBtn, background="goldenrod1", activebackground="goldenrod3", text="SAVE ENV SETUP", command=self.mc_mon_scb_con_save_button_code, highlightbackground='black', highlightthickness='2')
            self.mc_mon_scb_con_save_button.grid(row=len(mc_global_env_mon_arr)+2, column=0, columnspan=len(mc_global_env_scb_arr)+2, sticky='WE')
            # self.mc_mon_scb_con_save_button.rowconfigure(0,weight=1)


    def mc_mon_scb_save_button_kcb(self):
        global mc_curr_env_mon_arr
        global mc_curr_env_scb_arr

        if (self.mc_mon_scb_con_save_button):
            self.mc_mon_scb_con_save_button.grid_forget(); self.mc_mon_scb_con_save_button = None

    def mc_mon_scb_widget_build_cb(self, which_envset, mon_list = [], scb_list = [], *args):
        global mc_global_env_mon_scb_con_arr 
        log.debug("mc_mon_scb_widget_build_cb: mon_list_len %d mon_list %s scb_list_len %d scb_list %s\n"%(len(mon_list), mon_list, len(scb_list), scb_list))

        for row in range(len(mon_list)+1):
            for column in range(len(scb_list)+1):
                # self.mc_mon_scb_widget_arr.append([])
                if row == 0 and column == 0:
                    self.mc_mon_scb_widget_arr[row,column] = CustomLabel(which_envset, "Scoreboard", "Monitor", background="SteelBlue4")
                elif row in range (1, len(mon_list)+1) and column == 0:
                    self.mc_mon_scb_widget_arr[row,column] = Label(which_envset, text=mon_list[row-1], background="SteelBlue3")
                elif row == 0 and column in range (1, len(scb_list)+1):
                    self.mc_mon_scb_widget_arr[row,column] = Label(which_envset, text=scb_list[column-1], background="SteelBlue3")
                else:
                    log.debug("mc_mon_scb_widget_build_cb: row %d mon_list_len %d mon_list %s column %d scb_list_len %d scb_list %s\n"%(row, len(mon_list), mon_list, column, len(scb_list), scb_list))
                    # self.mc_mon_scb_con_list.append([])
                    # self.mc_mon_scb_con_val.append([])
                    log.debug("mc_mon_scb_widget_build_cb: self.mc_mon_scb_con_list %s self.mc_mon_scb_widget_arr %s\n"%(self.mc_mon_scb_con_list, self.mc_mon_scb_widget_arr))
                    # self.mc_mon_scb_con_list[j] = {}

                    # self.mc_mon_scb_con_list[row,column].clear()
                    #self.mc_mon_scb_con_list[row,column] = {"Analysis Port-Export FIFO Based":1, "Analysis Port Write Function":2, "Click Drop-Down For Options":0}
                    self.mc_mon_scb_con_list[row,column] = {"Analysis Port-Export FIFO Based":1, "Analysis Port Write Function":2}
                    
                    # Search for existing connectivity details from mc_global_env_mon_scb_con_arr
                    mon_scb_to_be_searched = mon_list[row-1]+'-'+scb_list[column-1]+'-'
                    mon_scb_to_be_searched_idx = self.find_index_sub_string(mon_scb_to_be_searched, mc_global_env_mon_scb_con_arr)
                    log.debug("mc_mon_scb_widget_build_cb: row %d column %d mon_scb_to_be_searched %s mon_scb_to_be_searched_idx %s mc_global_env_mon_scb_con_arr %s\n"%(row, column, mon_scb_to_be_searched, mon_scb_to_be_searched_idx, mc_global_env_mon_scb_con_arr))

                    if mon_scb_to_be_searched_idx == []:
                        self.mc_mon_scb_con_val[row,column] = StringVar()
                        self.mc_mon_scb_con_val[row,column].set("Click Drop-Down For Options")
                        log.debug("mc_mon_scb_widget_build_cb: self.mc_mon_scb_con_val %s\n"%(self.mc_mon_scb_con_val))
                    else:
                        self.mc_mon_scb_con_val[row,column] = StringVar()
                        mon_scb_searched_ele = str(mc_global_env_mon_scb_con_arr[mon_scb_to_be_searched_idx[0]]).split("-")
                        log.debug("mc_mon_scb_widget_build_cb: self.mc_mon_scb_con_val %s\n"%(self.mc_mon_scb_con_val))
                        log.debug("mc_mon_scb_widget_build_cb: mon_scb_searched_ele %s\n"%(mon_scb_searched_ele))
                        
                        if int(mon_scb_searched_ele[2]) == 1:
                            self.mc_mon_scb_con_val[row,column].set("Analysis Port-Export FIFO Based")
                        elif int(mon_scb_searched_ele[2]) == 2:  
                            self.mc_mon_scb_con_val[row,column].set("Analysis Port Write Function")
                        else:    
                            self.mc_mon_scb_con_val[row,column].set("Click Drop-Down For Options")
                        
                        log.debug("mc_mon_scb_widget_build_cb: mon_scb_to_be_searched %s mon_scb_to_be_searched_idx %s mon_scb_searched_ele %s mon_scb_searched_ele[2] %s\n"%(mon_scb_to_be_searched, mon_scb_to_be_searched_idx, mon_scb_searched_ele, mon_scb_searched_ele[2]))
                        log.debug("mc_mon_scb_widget_build_cb: self.mc_mon_scb_con_val[row,column] %s\n"%(self.mc_mon_scb_con_val[row,column].get()))
                        
                    if mon_scb_to_be_searched_idx == []:
                        self.mc_mon_scb_widget_arr[row,column] = OptionMenu(which_envset, self.mc_mon_scb_con_val[row,column], *self.mc_mon_scb_con_list[row,column])
                        #self.mc_mon_scb_widget_arr[row,column].configure(width=39, activebackground="gray50", font=MyFontH2)
                        self.mc_mon_scb_widget_arr[row,column].configure(background="gray70")
                        menu = self.mc_mon_scb_widget_arr[row,column].nametowidget(self.mc_mon_scb_widget_arr[row,column].menuname)
                        menu.config(font=MyFontH2, background="gray50")
                    else:
                        self.mc_mon_scb_widget_arr[row,column] = OptionMenu(which_envset, self.mc_mon_scb_con_val[row,column], *self.mc_mon_scb_con_list[row,column])
                        #self.mc_mon_scb_widget_arr[row,column].configure(width=39, activebackground="gray50", font=MyFontH2)
                        self.mc_mon_scb_widget_arr[row,column].configure(background="gray50")
                        menu = self.mc_mon_scb_widget_arr[row,column].nametowidget(self.mc_mon_scb_widget_arr[row,column].menuname)
                        menu.config(font=MyFontH2, background="gray50")
                    log.debug("mc_mon_scb_widget_build_cb: self.mc_mon_scb_widget_arr[row,column] %s\n"%(self.mc_mon_scb_widget_arr[row,column]))
                
                self.mc_mon_scb_widget_arr[row,column].grid(row=row, column=column, sticky="nsew", padx=1, pady=1)
                log.debug("mc_mon_scb_widget_build_cb: self.mc_mon_scb_widget_arr %s\n"%self.mc_mon_scb_widget_arr)
        
        for row in range(len(mon_list)+1):
            which_envset.grid_rowconfigure(row, uniform="row")
        
        for column in range(len(scb_list)+1):
            which_envset.grid_columnconfigure(column, uniform="column")
 
    
    def mc_mon_scb_widget_build_cb_try(self, which_envset, mon_list = [], scb_list = [], *args):
        global mc_mon_scb_port_range
        global mc_global_env_mon_scb_con_arr 
        log.debug("mc_mon_scb_widget_build_cb: mon_list_len %d mon_list %s scb_list_len %d scb_list %s\n"%(len(mon_list), mon_list, len(scb_list), scb_list))

        for row in range(len(mon_list)+1):
            for column in range(len(scb_list)+1):
                # self.mc_mon_scb_widget_arr.append([])
                if row == 0 and column == 0:
                    self.mc_mon_scb_widget_arr[row,column] = CustomLabel(which_envset, "Scoreboard", "Monitor", background="SteelBlue4")
                elif row in range (1, len(mon_list)+1) and column == 0:
                    self.mc_mon_scb_widget_arr[row,column] = Label(which_envset, text=mon_list[row-1], background="SteelBlue3", highlightbackground='black', highlightthickness=2)
                elif row == 0 and column in range (1, len(scb_list)+1):
                    self.mc_mon_scb_widget_arr[row,column] = Label(which_envset, text=scb_list[column-1], background="SteelBlue3", highlightbackground='black', highlightthickness=2)
                else:
                    log.debug("mc_mon_scb_widget_build_cb: row %d mon_list_len %d mon_list %s column %d scb_list_len %d scb_list %s\n"%(row, len(mon_list), mon_list, column, len(scb_list), scb_list))
                    
                    self.mc_mon_scb_con_list[row,column] = {key: None for key in range(mc_mon_scb_port_range)}
                    log.debug("mc_mon_scb_widget_build_cb: self.mc_mon_scb_con_list %s self.mc_mon_scb_widget_arr %s\n"%(self.mc_mon_scb_con_list, self.mc_mon_scb_widget_arr))
                    
                    # Search for existing connectivity details from mc_global_env_mon_scb_con_arr
                    mon_scb_to_be_searched = mon_list[row-1]+'-'+scb_list[column-1]+'-'
                    mon_scb_to_be_searched_idx = self.find_index_sub_string(mon_scb_to_be_searched, mc_global_env_mon_scb_con_arr)
                    log.debug("mc_mon_scb_widget_build_cb: row %d column %d mon_scb_to_be_searched %s mon_scb_to_be_searched_idx %s mc_global_env_mon_scb_con_arr %s\n"%(row, column, mon_scb_to_be_searched, mon_scb_to_be_searched_idx, mc_global_env_mon_scb_con_arr))

                    if mon_scb_to_be_searched_idx == []:
                        
                        self.mc_mon_scb_con_val[row,column] = StringVar()
                        self.mc_mon_scb_con_val[row,column].set("0")
                        
                        log.debug("mc_mon_scb_widget_build_cb: row %d column %d self.mc_mon_scb_con_val %s\n"%(row, column, self.mc_mon_scb_con_val[row,column].get()))
                    else:
                        self.mc_mon_scb_con_val[row,column] = StringVar()
                        
                        mon_scb_searched_ele = str(mc_global_env_mon_scb_con_arr[mon_scb_to_be_searched_idx[0]]).split("-")
                        log.debug("mc_mon_scb_widget_build_cb: mon_scb_searched_ele %s\n"%(mon_scb_searched_ele))
                        self.mc_mon_scb_con_val[row,column].set(len(str(mon_scb_searched_ele[2]).split("/")))
                        self.mc_mon_scb_con_list[row,column][int(self.mc_mon_scb_con_val[row,column].get())] = str(mon_scb_searched_ele[2])
                        
                        log.debug("mc_mon_scb_widget_build_cb: row %d column %d self.mc_mon_scb_con_val %s\n"%(row, column, self.mc_mon_scb_con_val[row,column].get()))
                        log.debug("mc_mon_scb_widget_build_cb: mon_scb_to_be_searched %s mon_scb_to_be_searched_idx %s mon_scb_searched_ele %s mon_scb_searched_ele[2] %s\n"%(mon_scb_to_be_searched, mon_scb_to_be_searched_idx, mon_scb_searched_ele, mon_scb_searched_ele[2]))
                        log.debug("mc_mon_scb_widget_build_cb: self.mc_mon_scb_con_list[%d,%d] %s"%(row,column, self.mc_mon_scb_con_list[row,column]))

                    if mon_scb_to_be_searched_idx == []:
                        self.mc_mon_scb_widget_arr[row,column] = ttk.Combobox(which_envset, textvariable=self.mc_mon_scb_con_val[row,column], values=list(self.mc_mon_scb_con_list[row,column].keys()))
                        #self.mc_mon_scb_widget_arr[row,column].option_add('*TCombobox*Listbox.selectBackground','gray70')
                        #self.mc_mon_scb_widget_arr[row,column].option_add('*TCombobox*Listbox.Background','gray70')
                        self.mc_mon_scb_label_list[row,column] = StringVar()
                        self.mc_mon_scb_label_list[row,column] = str(self.mc_mon_scb_widget_arr[row,0]['text'])+'-'+str(self.mc_mon_scb_widget_arr[0,column]['text'])
                        self.mc_mon_scb_widget_arr[row,column].bind("<<ComboboxSelected>>", lambda event, row=row, column=column : self.mc_mon_scb_con_capture(event, row, column, which_envset, mon_list, scb_list))
                        #self.mc_mon_scb_widget_arr[row,column].bind("<<ComboboxSelected>>", self.mc_mon_scb_con_capture)
                    else:
                        self.mc_mon_scb_widget_arr[row,column] = ttk.Combobox(which_envset, textvariable=self.mc_mon_scb_con_val[row,column], values=list(self.mc_mon_scb_con_list[row,column].keys()))
                        #self.mc_mon_scb_widget_arr[row,column].option_add('*TCombobox*Listbox.Background','gray50')
                        self.mc_mon_scb_label_list[row,column] = StringVar()
                        self.mc_mon_scb_label_list[row,column] = str(self.mc_mon_scb_widget_arr[row,0]['text'])+'-'+str(self.mc_mon_scb_widget_arr[0,column]['text'])
                        self.mc_mon_scb_widget_arr[row,column].bind("<<ComboboxSelected>>", lambda event, row=row, column=column : self.mc_mon_scb_con_capture(event, row, column, which_envset, mon_list, scb_list))
                    log.debug("mc_mon_scb_widget_build_cb: self.mc_mon_scb_widget_arr[row,column] %s\n"%(self.mc_mon_scb_widget_arr[row,column]))
                
                self.mc_mon_scb_widget_arr[row,column].grid(row=row, column=column, sticky="nsew", padx=1, pady=1)
                log.debug("mc_mon_scb_widget_build_cb: self.mc_mon_scb_widget_arr %s\n"%self.mc_mon_scb_widget_arr)
        
        for row in range(len(mon_list)+1):
            which_envset.grid_rowconfigure(row, uniform="row")
        
        for column in range(len(scb_list)+1):
            which_envset.grid_columnconfigure(column, uniform="column")


    def mc_mon_scb_con_capture(self, event, row, column, which_envset, mon_list = [], scb_list = [], *args):
        log.debug("mc_mon_scb_con_capture: Going to launch the function to capture the mon-scb connectivity! row %d column %d mon_list %s scb_list %s\n"%(row, column, mon_list, scb_list))
        log.debug("mc_mon_scb_con_capture: self.mc_mon_scb_label_list[%d,%d] %s"%(row,column,self.mc_mon_scb_label_list[row,column]))
        log.debug("mc_mon_scb_con_capture: self.mc_mon_scb_widget_arr[%d,%d] %s"%(row,column,self.mc_mon_scb_widget_arr[row,column]))
        log.debug("mc_mon_scb_con_capture: self.mc_mon_scb_con_val[%d,%d] %s"%(row,column,self.mc_mon_scb_con_val[row,column]))
        log.debug("mc_mon_scb_con_capture: self.mc_mon_scb_con_list[%d,%d] %s"%(row,column,self.mc_mon_scb_con_list[row,column]))
        log.debug("mc_mon_scb_con_capture: Going to launch the function to capture the mon-scb connectivity!\n")
        #log.debug("mc_mon_scb_con_capture: which_envset %s row %d column %d row_size %d column_size %d!\n"%(which_envset, row, column, row_size, column_size))

        # Calling the kill cb of the mc mon_scb save button
        self.mc_mon_scb_save_button_kcb()
        
        # Killing previously existing port frame related widgets and variables clean up
        self.mc_mon_scb_port_frame_code_kcb()

        # Label Value is for the window
        label_text = str(self.mc_mon_scb_label_list[row,column])
        row_size = len(mon_list)
        column_size = len(scb_list)
        log.debug("mc_mon_scb_con_capture : value of label_text %s!\n"%label_text)

        # Creating a frame to hold the port information
        if (self.mc_mon_scb_port_frame):
            self.mc_mon_scb_port_frame.grid_forget(); self.mc_mon_scb_port_frame = None
        
        #self.mc_mon_scb_port_frame = Frame(which_envset, bg='dark goldenrod', highlightbackground='dark goldenrod', highlightthickness='3')
        self.mc_mon_scb_port_frame = Frame(which_envset)
        self.mc_mon_scb_port_frame.grid(row=row_size+1, column=0, columnspan=column_size+1, sticky='WE')
        self.mc_mon_scb_port_frame.rowconfigure(row_size+1,weight=1)
        self.mc_mon_scb_port_frame.columnconfigure(0,weight=1)

        if (self.mc_mon_scb_port_label):
            self.mc_mon_scb_port_label.grid_forget(); self.mc_mon_scb_port_label = None
            
        self.mc_mon_scb_port_label = Label(self.mc_mon_scb_port_frame, text=label_text, anchor="center", highlightbackground='black', highlightthickness=2)
        self.mc_mon_scb_port_label.grid(row=0, column=0, columnspan=column_size+1, sticky='WE')
        self.mc_mon_scb_port_label.rowconfigure(0, weight=1)

        # Storing the lenght of mc_mon_scb_widget_arr 
        mc_mon_scb_widget_arr_cur_len =  int(self.mc_mon_scb_widget_arr[row,column].get())
        
        # Creating the port entry and loading up the value if already exists
        for i in range (int(self.mc_mon_scb_widget_arr[row,column].get())):
            self.mc_mon_scb_port_capture_cb(row, column, mon_list, scb_list)
   
        # Button port entry frame codes
        self.mc_mon_scb_port_button_frame_code_cb(row, column, mon_list, scb_list) 
    

    def mc_mon_scb_port_button_frame_code_cb(self, row, column, mon_list = [], scb_list = []):
        global mc_mon_scb_port_loop
        global mc_mon_scb_port_loop_arr
        log.debug("mc_mon_scb_port_button_frame_code_cb: Going to create the button frame for mon scb port capture!!\n")
        log.debug("mc_mon_scb_port_button_frame_code_cb: row {}, column {}, mon_list {}, scb_list {}!!\n".format(row, column, mon_list, scb_list))
        
        # Incrementing by 1 to add a nwe entry
        mc_mon_scb_port_loop += 1

        if (self.mc_mon_scb_port_button_frame):
            self.mc_mon_scb_port_button_frame.grid_forget(); self.mc_mon_scb_port_button_frame = None
            
        self.mc_mon_scb_port_button_frame = Frame(self.mc_mon_scb_port_frame)
        self.mc_mon_scb_port_button_frame.grid(row=mc_mon_scb_port_loop, column=0, columnspan=len(scb_list)+1, sticky='WE')
        self.mc_mon_scb_port_button_frame.rowconfigure(mc_mon_scb_port_loop,weight=1)
        self.mc_mon_scb_port_button_frame.columnconfigure((0,1,2),weight=1)
       
        if (self.mc_mon_scb_port_return_button):
            self.mc_mon_scb_port_return_button.grid_forget(); self.mc_mon_scb_port_return_button = None
            
        self.mc_mon_scb_port_return_button = Button(self.mc_mon_scb_port_button_frame, font=MyFontBtn, background="goldenrod1", activebackground="goldenrod3", text="RETURN PORT", command=self.mc_mon_scb_port_return_button_cb, highlightbackground='black', highlightthickness=2)
        self.mc_mon_scb_port_return_button.grid(row=0, column=0, sticky='WE')
        self.mc_mon_scb_port_return_button.rowconfigure(0, weight=1)

        if (self.mc_mon_scb_port_add_button):
            self.mc_mon_scb_port_add_button.grid_forget(); self.mc_mon_scb_port_add_button = None
            
        self.mc_mon_scb_port_add_button = Button(self.mc_mon_scb_port_button_frame, font=MyFontBtn, background="goldenrod1", activebackground="goldenrod3", text="ADD PORT", command = lambda : self.mc_mon_scb_port_add_button_cb(row, column, mon_list, scb_list), highlightbackground='black', highlightthickness=2)
        self.mc_mon_scb_port_add_button.grid(row=0, column=1, sticky='WE')
        self.mc_mon_scb_port_add_button.rowconfigure(0, weight=1)


        if (self.mc_mon_scb_port_store_button):
            self.mc_mon_scb_port_store_button.grid_forget(); self.mc_mon_scb_port_store_button = None
            
        self.mc_mon_scb_port_store_button = Button(self.mc_mon_scb_port_button_frame, font=MyFontBtn, background="goldenrod1", activebackground="goldenrod3", text="STORE PORT", command = lambda : self.mc_mon_scb_port_store_button_cb(row, column), highlightbackground='black', highlightthickness=2)
        self.mc_mon_scb_port_store_button.grid(row=0, column=2, sticky='WE')
        self.mc_mon_scb_port_store_button.rowconfigure(0, weight=1)
        
    
    def mc_mon_scb_port_button_frame_code_kcb(self):
        log.debug("mc_mon_scb_port_button_frame_code_kcb: Going to launch the function to Kill the mon-scb connectivity!\n")
        
        if (self.mc_mon_scb_port_return_button):
            self.mc_mon_scb_port_return_button.grid_forget(); self.mc_mon_scb_port_return_button = None
        
        if (self.mc_mon_scb_port_add_button):
            self.mc_mon_scb_port_add_button.grid_forget(); self.mc_mon_scb_port_add_button = None
        
        if (self.mc_mon_scb_port_store_button):
            self.mc_mon_scb_port_store_button.grid_forget(); self.mc_mon_scb_port_store_button = None
        
        if (self.mc_mon_scb_port_button_frame):
            self.mc_mon_scb_port_button_frame.grid_forget(); self.mc_mon_scb_port_button_frame = None
            
    
    def mc_mon_scb_port_frame_code_kcb(self):
        global mc_mon_scb_port_loop
        global mc_mon_scb_port_loop_arr
        log.debug("mc_mon_scb_port_frame_code_kcb: Going to launch the function to Kill the mon-scb connectivity!\n")
        
        # Setting the port loop to 0
        mc_mon_scb_port_loop = 0
        mc_mon_scb_port_loop_arr = 0
        
        if (self.mc_mon_scb_port_return_button):
            self.mc_mon_scb_port_return_button.grid_forget(); self.mc_mon_scb_port_return_button = None
        
        if (self.mc_mon_scb_port_add_button):
            self.mc_mon_scb_port_add_button.grid_forget(); self.mc_mon_scb_port_add_button = None
        
        if (self.mc_mon_scb_port_store_button):
            self.mc_mon_scb_port_store_button.grid_forget(); self.mc_mon_scb_port_store_button = None
        
        if (self.mc_mon_scb_port_button_frame):
            self.mc_mon_scb_port_button_frame.grid_forget(); self.mc_mon_scb_port_button_frame = None
            
        if (self.mc_mon_scb_port_entry):
            self.mc_mon_scb_port_entry = []
            # log.debug("mc_mon_scb_port_capture_cb: len(self.mc_mon_scb_port_entry) %d, self.mc_mon_scb_port_entry %s !\n"%(len(self.mc_mon_scb_port_entry), self.mc_mon_scb_port_entry))
            # for i in range (len(self.mc_mon_scb_port_entry)):
            #     if (self.mc_mon_scb_port_entry[i]):
            #         self.mc_mon_scb_port_entry[i].grid_forget(); self.mc_mon_scb_port_entry[i] = None
            # log.debug("mc_mon_scb_port_capture_cb: len(self.mc_mon_scb_port_entry) %d, self.mc_mon_scb_port_entry %s !\n"%(len(self.mc_mon_scb_port_entry), self.mc_mon_scb_port_entry))
            
        if (self.mc_mon_scb_port_dd):
            self.mc_mon_scb_port_dd = []
            # log.debug("mc_mon_scb_port_capture_cb: len(self.mc_mon_scb_port_dd) %d, self.mc_mon_scb_port_dd %s !\n"%(len(self.mc_mon_scb_port_dd), self.mc_mon_scb_port_dd))
            # for i in range (len(self.mc_mon_scb_port_dd)):
            #     if (self.mc_mon_scb_port_dd[i]):
            #         self.mc_mon_scb_port_dd[i].grid_forget(); self.mc_mon_scb_port_dd[i] = None
            # log.debug("mc_mon_scb_port_capture_cb: len(self.mc_mon_scb_port_dd) %d, self.mc_mon_scb_port_dd %s !\n"%(len(self.mc_mon_scb_port_dd), self.mc_mon_scb_port_dd))
        
        if (self.mc_mon_scb_port_dd_val):
            self.mc_mon_scb_port_dd_val.clear()

        if (self.mc_mon_scb_port_dd_list):
            self.mc_mon_scb_port_dd_list.clear()

        if (self.mc_mon_scb_port_label):
            self.mc_mon_scb_port_label.grid_forget(); self.mc_mon_scb_port_label = None
        
        if (self.mc_mon_scb_port_frame):
            self.mc_mon_scb_port_frame.grid_forget(); self.mc_mon_scb_port_frame = None


    def mc_mon_scb_port_return_button_cb(self):
        global mc_mon_scb_port_loop
        global mc_mon_scb_port_loop_arr
        global mc_envset_button_code_on
        global mc_final_envset_button_code_on
        
        log.debug("mc_mon_scb_port_return_button_cb: Going to launch the function to return and capture the mon-scb connectivity!\n")
        self.mc_mon_scb_port_frame_code_kcb()
        
        # Setting the port loop to 0
        mc_mon_scb_port_loop = 0
        mc_mon_scb_port_loop_arr = 0

        if mc_envset_button_code_on:
            # Return button kills the port entry and respective buttons. Once that is done need to call the save button
            self.mc_mon_scb_save_button_cb()
        elif mc_final_envset_button_code_on:
            # Return button kills the port entry and respective buttons. Once that is done need to call the save button
            self.mc_mon_scb_final_save_button_cb()


    def mc_mon_scb_port_add_button_cb(self, row, column, mon_list = [], scb_list = []):
        global mc_mon_scb_port_loop
        global mc_mon_scb_port_loop_arr
        log.debug("mc_mon_scb_port_add_button_cb: Going to launch the function to add and capture the mon-scb connectivity!\n")
        
        # Kill the port frame button code
        self.mc_mon_scb_port_button_frame_code_kcb()

        # Decrementing the mc_mon_scb_port_loop and mc_mon_scb_port_loop_arr values bcoz while adding 
        # new port need to decrement the values bcoz those got incremented while adding the port frame buttons
        mc_mon_scb_port_loop -= 1
        mc_mon_scb_port_loop_arr -= 1

        # Adding new port entry
        self.mc_mon_scb_port_capture_cb(row, column, mon_list, scb_list)
        
        # Button port entry frame codes
        self.mc_mon_scb_port_button_frame_code_cb(row, column, mon_list, scb_list) 


    def mc_mon_scb_port_store_button_cb(self, row, column):
        global mc_mon_scb_port_loop
        global mc_global_env_mon_scb_con_arr
        log.debug("mc_mon_scb_port_store_button_cb: Going to launch the function to store and capture the mon-scb connectivity!\n")
        log.debug("mc_mon_scb_port_store_button_cb: row {}, column {}!\n".format(row, column))
    
        # Create the list of mon-scb connectivity
        mon_scb_con_list = StringVar ()

        log.debug("mc_mon_scb_port_store_button_cb: len(self.mc_mon_scb_port_entry) %d, self.mc_mon_scb_port_entry %s, self.mc_mon_scb_port_dd_val %s, self.mc_mon_scb_port_dd_list %s!\n"%(len(self.mc_mon_scb_port_entry), self.mc_mon_scb_port_entry, self.mc_mon_scb_port_dd_val, self.mc_mon_scb_port_dd_list))
        for i in range (len(self.mc_mon_scb_port_entry)): 
            mon_scb_con_ele = self.mc_mon_scb_port_entry[i].get()+","+str(self.mc_mon_scb_port_dd_list[i].get(self.mc_mon_scb_port_dd_val[i].get()))
            log.debug("mc_mon_scb_port_store_button_cb: self.mc_mon_scb_port_entry[%d] %s self.mc_mon_scb_port_dd_val[%d] %s self.mc_mon_scb_port_dd_list[%d] %s!\n"%(i, self.mc_mon_scb_port_entry[i].get(), i,  self.mc_mon_scb_port_dd_val[i].get(), i,  self.mc_mon_scb_port_dd_list[i]))
            
            if i == 0 and len(self.mc_mon_scb_port_entry) == 1:
                mon_scb_con_list = mon_scb_con_ele 
            elif i == 0 and len(self.mc_mon_scb_port_entry) > 1:
                mon_scb_con_list = mon_scb_con_ele+'/'
            elif i <= len(self.mc_mon_scb_port_entry)-2:
                mon_scb_con_list = mon_scb_con_list+mon_scb_con_ele+'/'
            else: 
                mon_scb_con_list = mon_scb_con_list+mon_scb_con_ele
            
            log.debug("mc_mon_scb_port_store_button_cb: mon_scb_con_ele %s mon_scb_con_list %s!\n"%(mon_scb_con_ele, mon_scb_con_list))
        log.debug("mc_mon_scb_port_store_button_cb: mon_scb_con_list %s!\n"%mon_scb_con_list)
   
        # Storing the value on the required key entry for the mon-scb connectivity
        self.mc_mon_scb_con_val[row,column].set(len(str(mon_scb_con_list).split("/")))
        self.mc_mon_scb_con_list[row,column][len(self.mc_mon_scb_port_entry)] = str(mon_scb_con_list)
        log.debug("mc_mon_scb_port_store_button_cb: self.mc_mon_scb_con_val[%d,%d] %s, self.mc_mon_scb_con_list[%d,%d] %s!\n"%(row,column,self.mc_mon_scb_con_val[row,column].get(), row,column,self.mc_mon_scb_con_list[row,column]))
        
        # Killing the complete mon scb port related widgets
        self.mc_mon_scb_port_frame_code_kcb()
        
        # Setting the port loop to 0
        mc_mon_scb_port_loop = 0
        mc_mon_scb_port_loop_arr = 0
        log.debug("mc_mon_scb_port_store_button_cb: While storing and closing : mc_mon_scb_port_loop %d  mc_mon_scb_port_loop_arr %d!\n"%(mc_mon_scb_port_loop, mc_mon_scb_port_loop_arr))

        if mc_envset_button_code_on:
            # Return button kills the port entry and respective buttons. Once that is done need to call the save button
            self.mc_mon_scb_save_button_cb()
        elif mc_final_envset_button_code_on:
            # Return button kills the port entry and respective buttons. Once that is done need to call the save button
            self.mc_mon_scb_final_save_button_cb()


    def mc_mon_scb_port_capture_cb(self, row, column, mon_list = [], scb_list = []):
        global mc_mon_scb_port_loop
        global mc_global_env_mon_scb_con_arr
        log.debug("mc_mon_scb_port_capture_cb: Going to launch the function to build and capture the mon-scb connectivity!\n")
        log.debug("mc_mon_scb_port_capture_cb: row {}, column {}, mon_list {}, scb_list{}!\n".format(row, column, mon_list, scb_list))
        
        # Incrementing by 1 to add a nwe entry
        mc_mon_scb_port_loop += 1
        mc_mon_scb_port_loop_arr = mc_mon_scb_port_loop-1 
        log.debug("mc_mon_scb_port_capture_cb: mc_mon_scb_port_loop %d mc_mon_scb_port_loop_arr %d!\n"%(mc_mon_scb_port_loop, mc_mon_scb_port_loop_arr))

        # Adding new entry    
        self.mc_mon_scb_port_entry.append([])
        self.mc_mon_scb_port_dd.append([])
        log.debug("mc_mon_scb_port_capture_cb: self.mc_mon_scb_port_entry %s  self.mc_mon_scb_port_dd %s!\n"%(self.mc_mon_scb_port_entry, self.mc_mon_scb_port_dd))

        #self.mc_mon_scb_port_dd_list[mc_mon_scb_port_loop_arr] = {"Analysis Port-Export FIFO Based":1, "Analysis Port Write Function":2, "Click Drop-Down For Options":0}
        self.mc_mon_scb_port_dd_list[mc_mon_scb_port_loop_arr] = {"Analysis Port-Export FIFO Based":1, "Analysis Port Write Function":2}
        
        # Search for existing connectivity details from mc_global_env_mon_scb_con_arr
        mon_scb_to_be_searched = mon_list[row-1]+'-'+scb_list[column-1]+'-'
        mon_scb_to_be_searched_idx = self.find_index_sub_string(mon_scb_to_be_searched, mc_global_env_mon_scb_con_arr)
        log.debug("mc_mon_scb_widget_build_cb: row %d column %d mon_scb_to_be_searched %s mon_scb_to_be_searched_idx %s mc_global_env_mon_scb_con_arr %s\n"%(row, column, mon_scb_to_be_searched, mon_scb_to_be_searched_idx, mc_global_env_mon_scb_con_arr))

        if mon_scb_to_be_searched_idx == []:
            self.mc_mon_scb_port_dd_val[mc_mon_scb_port_loop_arr] = StringVar()
            self.mc_mon_scb_port_dd_val[mc_mon_scb_port_loop_arr].set("Click Drop-Down For Options")
            log.debug("mc_mon_scb_widget_build_cb: self.mc_mon_scb_port_dd_val %s\n"%(self.mc_mon_scb_port_dd_val))
        
            if (self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr]):
                self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr].grid_forget(); self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr] = None
            
            self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr] = Entry(self.mc_mon_scb_port_frame)
            self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr].grid(row=mc_mon_scb_port_loop, column=0, sticky='WE') 
            self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr].rowconfigure(mc_mon_scb_port_loop,weight=1)
            self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr].columnconfigure(0,weight=1)
        
            if (self.mc_mon_scb_port_dd[mc_mon_scb_port_loop_arr]):
                self.mc_mon_scb_port_dd[mc_mon_scb_port_loop_arr].grid_forget(); self.mc_mon_scb_port_dd[mc_mon_scb_port_loop_arr] = None
            
            self.mc_mon_scb_port_dd[mc_mon_scb_port_loop_arr] = OptionMenu(self.mc_mon_scb_port_frame, self.mc_mon_scb_port_dd_val[mc_mon_scb_port_loop_arr], *self.mc_mon_scb_port_dd_list[mc_mon_scb_port_loop_arr])
            self.mc_mon_scb_port_dd[mc_mon_scb_port_loop_arr].grid(row=mc_mon_scb_port_loop, column=1, sticky='WE') 
            self.mc_mon_scb_port_dd[mc_mon_scb_port_loop_arr].rowconfigure(mc_mon_scb_port_loop,weight=1)
            self.mc_mon_scb_port_dd[mc_mon_scb_port_loop_arr].columnconfigure(1,weight=1)
        else:
            self.mc_mon_scb_port_dd_val[mc_mon_scb_port_loop_arr] = StringVar()
            
            mon_scb_searched_ele = str(mc_global_env_mon_scb_con_arr[mon_scb_to_be_searched_idx[0]]).split("-")
            log.debug("mc_mon_scb_widget_build_cb: self.mc_mon_scb_port_dd_val %s\n"%(self.mc_mon_scb_port_dd_val))
            log.debug("mc_mon_scb_widget_build_cb: mon_scb_searched_ele %s\n"%(mon_scb_searched_ele))
          
            # This provide the mon scb connectivty info
            mon_scb_searched_ele_port = str(mon_scb_searched_ele[2]).split("/")
            
            if mc_mon_scb_port_loop_arr < len(mon_scb_searched_ele_port):
                # THis provides the mon scb connectivity type for connection by connection
                mon_scb_searched_ele_port_entry = str(mon_scb_searched_ele_port[mc_mon_scb_port_loop_arr]).split(",")[0] 
                mon_scb_searched_ele_port_type = str(mon_scb_searched_ele_port[mc_mon_scb_port_loop_arr]).split(",")[1] 

                if int(mon_scb_searched_ele_port_type) == 1:
                    self.mc_mon_scb_port_dd_val[mc_mon_scb_port_loop_arr].set("Analysis Port-Export FIFO Based")
                elif int(mon_scb_searched_ele_port_type) == 2:  
                    self.mc_mon_scb_port_dd_val[mc_mon_scb_port_loop_arr].set("Analysis Port Write Function")
                else:    
                    self.mc_mon_scb_port_dd_val[mc_mon_scb_port_loop_arr].set("Click Drop-Down For Options")
                log.debug("mc_mon_scb_widget_build_cb: mon_scb_searched_ele_port_entry %s  mon_scb_searched_ele_port_type %s\n"%(mon_scb_searched_ele_port_entry, mon_scb_searched_ele_port_type))
                
                log.debug("mc_mon_scb_widget_build_cb: mon_scb_to_be_searched %s mon_scb_to_be_searched_idx %s mon_scb_searched_ele %s mon_scb_searched_ele[2] %s\n"%(mon_scb_to_be_searched, mon_scb_to_be_searched_idx, mon_scb_searched_ele, mon_scb_searched_ele[2]))
                log.debug("mc_mon_scb_widget_build_cb: self.mc_mon_scb_port_dd_val[mc_mon_scb_port_loop_arr] %s\n"%(self.mc_mon_scb_port_dd_val[mc_mon_scb_port_loop_arr].get()))
                
                if (self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr]):
                    self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr].grid_forget(); self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr] = None
                
                self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr] = Entry(self.mc_mon_scb_port_frame)
                self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr].grid(row=mc_mon_scb_port_loop, column=0, sticky='WE') 
                self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr].rowconfigure(mc_mon_scb_port_loop,weight=1)
                self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr].delete(0,END)
                self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr].insert(0,str(mon_scb_searched_ele_port_entry))
                self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr].columnconfigure(0,weight=1)

                if (self.mc_mon_scb_port_dd[mc_mon_scb_port_loop_arr]):
                    self.mc_mon_scb_port_dd[mc_mon_scb_port_loop_arr].grid_forget(); self.mc_mon_scb_port_dd[mc_mon_scb_port_loop_arr] = None
                
                self.mc_mon_scb_port_dd[mc_mon_scb_port_loop_arr] = OptionMenu(self.mc_mon_scb_port_frame, self.mc_mon_scb_port_dd_val[mc_mon_scb_port_loop_arr], *self.mc_mon_scb_port_dd_list[mc_mon_scb_port_loop_arr])
                self.mc_mon_scb_port_dd[mc_mon_scb_port_loop_arr].grid(row=mc_mon_scb_port_loop, column=1, sticky='WE') 
                self.mc_mon_scb_port_dd[mc_mon_scb_port_loop_arr].rowconfigure(mc_mon_scb_port_loop,weight=1)
                self.mc_mon_scb_port_dd[mc_mon_scb_port_loop_arr].columnconfigure(1,weight=1)
            else:
                self.mc_mon_scb_port_dd_val[mc_mon_scb_port_loop_arr] = StringVar()
                self.mc_mon_scb_port_dd_val[mc_mon_scb_port_loop_arr].set("Click Drop-Down For Options")
                log.debug("mc_mon_scb_widget_build_cb: self.mc_mon_scb_port_dd_val %s\n"%(self.mc_mon_scb_port_dd_val))
        
                if (self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr]):
                    self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr].grid_forget(); self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr] = None
                
                self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr] = Entry(self.mc_mon_scb_port_frame)
                self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr].grid(row=mc_mon_scb_port_loop, column=0) 
                self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr].rowconfigure(mc_mon_scb_port_loop,weight=1)
                self.mc_mon_scb_port_entry[mc_mon_scb_port_loop_arr].columnconfigure(0,weight=1)
        
                if (self.mc_mon_scb_port_dd[mc_mon_scb_port_loop_arr]):
                    self.mc_mon_scb_port_dd[mc_mon_scb_port_loop_arr].grid_forget(); self.mc_mon_scb_port_dd[mc_mon_scb_port_loop_arr] = None
                
                self.mc_mon_scb_port_dd[mc_mon_scb_port_loop_arr] = OptionMenu(self.mc_mon_scb_port_frame, self.mc_mon_scb_port_dd_val[mc_mon_scb_port_loop_arr], *self.mc_mon_scb_port_dd_list[mc_mon_scb_port_loop_arr])
                self.mc_mon_scb_port_dd[mc_mon_scb_port_loop_arr].grid(row=mc_mon_scb_port_loop, column=1) 
                self.mc_mon_scb_port_dd[mc_mon_scb_port_loop_arr].rowconfigure(mc_mon_scb_port_loop,weight=1)
                self.mc_mon_scb_port_dd[mc_mon_scb_port_loop_arr].columnconfigure(1,weight=1)


    def mc_mon_scb_con_save_button_code(self):
        global mc_env_no_cur
        global mc_env_no_max 
        global mc_envset_button_code_on
        global mc_final_envset_button_code_on
        global mc_curr_env_mon_arr
        global mc_curr_env_scb_arr
        global mc_curr_env_mon_scb_con_arr
        global mc_global_env_mon_scb_con_arr
        del_cnt = 0
        log.debug("mc_mon_scb_con_save_button_code: Launching The mc_mon_scb_con_save_button_code to save env_setup configurations\n")
       
        # Code to extract the values from the mon_scb widgets and store the connectivity details int he respective env configurations
        if mc_envset_button_code_on:
            mc_global_env_mon_scb_con_arr_del_ele_idx = []
            mc_curr_env_mon_scb_con_arr = []
            
            log.debug("mc_mon_scb_con_save_button_code: mc_envset_button_code_on is set ! Going to delete the mon-scb connectivity for cur_env %d from mc_global_env_mon_scb_con_arr\n"%mc_env_no_cur)
            
            #   # Code to delete the mon-scb for cur_env from mc_global_env_mon_scb_con_arr            
            #   mc_global_env_mon_scb_con_arr_del_ele = str(mc_env_cfg_pool[mc_env_no_cur][0])+','
            #   
            #   mc_global_env_mon_scb_con_arr_del_idx = self.find_index_sub_string(mc_global_env_mon_scb_con_arr_del_ele, mc_global_env_mon_scb_con_arr)
            #   log.debug("mc_mon_scb_con_save_button_code: mc_global_env_mon_scb_con_arr_del_ele %s mc_global_env_mon_scb_con_arr_del_idx %s  mc_global_env_mon_scb_con_arr %s\n"%(mc_global_env_mon_scb_con_arr_del_ele, mc_global_env_mon_scb_con_arr_del_idx, mc_global_env_mon_scb_con_arr))

            #   while (mc_global_env_mon_scb_con_arr_del_idx != []):
            #       del mc_global_env_mon_scb_con_arr[mc_global_env_mon_scb_con_arr_del_idx[0]]
            #       mc_global_env_mon_scb_con_arr_del_idx = self.find_index_sub_string(mc_global_env_mon_scb_con_arr_del_ele, mc_global_env_mon_scb_con_arr)
            #       log.debug("mc_mon_scb_con_save_button_code: mc_global_env_mon_scb_con_arr_del_ele %s mc_global_env_mon_scb_con_arr_del_idx %s mc_global_env_mon_scb_con_arr %s\n"%(mc_global_env_mon_scb_con_arr_del_ele, mc_global_env_mon_scb_con_arr_del_idx, mc_global_env_mon_scb_con_arr))

            mc_global_env_mon_scb_con_arr_del_ele = re.compile("%s.*-%s.*"%(str(mc_env_cfg_pool[mc_env_no_cur][0]), str(mc_env_cfg_pool[mc_env_no_cur][0]))) 
            log.debug("mc_mon_scb_con_save_button_code: mc_global_env_mon_scb_con_arr_del_ele %s mc_global_env_mon_scb_con_arr %s\n"%(mc_global_env_mon_scb_con_arr_del_ele.pattern, mc_global_env_mon_scb_con_arr))
            
            for x in range (len(mc_global_env_mon_scb_con_arr)):
                if re.match(mc_global_env_mon_scb_con_arr_del_ele, mc_global_env_mon_scb_con_arr[x]):
                    mc_global_env_mon_scb_con_arr_del_ele_idx.append(x) 
            log.debug("mc_mon_scb_con_save_button_code: mc_global_env_mon_scb_con_arr_del_ele_idx %s\n"%(mc_global_env_mon_scb_con_arr_del_ele_idx))
            
            while (mc_global_env_mon_scb_con_arr_del_ele_idx != []): 
                del mc_global_env_mon_scb_con_arr[mc_global_env_mon_scb_con_arr_del_ele_idx[0]]
                mc_global_env_mon_scb_con_arr_del_ele_idx = []
                for x in range (len(mc_global_env_mon_scb_con_arr)):
                    if re.match(mc_global_env_mon_scb_con_arr_del_ele, mc_global_env_mon_scb_con_arr[x]):
                        mc_global_env_mon_scb_con_arr_del_ele_idx.append(x) 
                log.debug("mc_mon_scb_con_save_button_code: mc_global_env_mon_scb_con_arr %s\n"%(mc_global_env_mon_scb_con_arr))

            
            log.debug("mc_mon_scb_con_save_button_code: mc_envset_button_code_on is set ! Going to save the mon_scb conn config in corresponding env %d\n"%mc_env_no_cur)
            for row in range(len(mc_curr_env_mon_arr)+1):
                for column in range(len(mc_curr_env_scb_arr)+1):
                    if row == 0 and column == 0:
                        log.debug("mc_mon_scb_con_save_button_code: row = %d column %d ! Not required Widget !\n"%(row, column))
                    elif row in range (1, len(mc_curr_env_mon_arr)+1) and column == 0:
                        log.debug("mc_mon_scb_con_save_button_code: row = %d column %d ! Not required Widget !\n"%(row, column))
                    elif row == 0 and column in range (1, len(mc_curr_env_scb_arr)+1):
                        log.debug("mc_mon_scb_con_save_button_code: row = %d column %d ! Not required Widget !\n"%(row, column))
                    else:
                        log.debug("mc_mon_scb_con_save_button_code: row = %d column %d ! mc_curr_env_mon_arr %s mc_curr_env_scb_arr %s self.mc_mon_scb_con_list[row,column] %s self.mc_mon_scb_con_val[row,column] %s!\n"%(row, column, mc_curr_env_mon_arr, mc_curr_env_scb_arr, self.mc_mon_scb_con_list[row,column], self.mc_mon_scb_con_val[row,column]))
                        log.debug("mc_mon_scb_con_save_button_code: value of self.mc_mon_scb_con_val[row,column].get() %s"%self.mc_mon_scb_con_val[row,column].get())
                        
                        log.debug(self.mc_mon_scb_con_list[row,column].get(int(self.mc_mon_scb_con_val[row,column].get())))
                        log.debug(self.mc_mon_scb_con_list[row,column].get(2))

                        mc_mon_scb_con_ele = mc_curr_env_mon_arr[row-1]+'-'+mc_curr_env_scb_arr[column-1]+'-'+str(self.mc_mon_scb_con_list[row,column].get(int(self.mc_mon_scb_con_val[row,column].get())))
                        
                        log.debug("mc_mon_scb_con_save_button_code: mc_mon_scb_con_ele %s"%mc_mon_scb_con_ele)
                        log.debug(str(mc_mon_scb_con_ele.split("-")[2]))
                        log.debug(mc_mon_scb_con_ele.split("-")[2])

                        if str(mc_mon_scb_con_ele.split("-")[2]) != 'None': 
                            log.debug("mc_mon_scb_con_save_button_code: mc_mon_scb_con_ele %s mc_mon_scb_con_ele[2] %s"%(mc_mon_scb_con_ele, str(mc_mon_scb_con_ele.split("-")[2])))
                            mc_curr_env_mon_scb_con_arr.append(mc_mon_scb_con_ele)
                            mc_global_env_mon_scb_con_arr.append(mc_mon_scb_con_ele) #ERROR CHECKITOUT
                        else:
                            log.debug("mc_mon_scb_con_save_button_code: Mon-Scb Connection Type is None ! No Need to load into mc_curr_env_mon_scb_con_arr !\n")
                        log.debug("mc_mon_scb_con_save_button_code: row = %d column %d ! mc_mon_scb_con_ele %s mc_curr_env_mon_scb_con_arr %s mc_global_env_mon_scb_con_arr %s!\n"%(row, column, mc_mon_scb_con_ele, mc_curr_env_mon_scb_con_arr, mc_global_env_mon_scb_con_arr))

        
        # Code to extract the values from the mon_scb widgets and store the connectivity details int he respective env configurations
        if mc_final_envset_button_code_on:
            log.debug("mc_mon_scb_con_save_button_code: mc_final_envset_button_code_on is set !\n")
            for row in range(len(mc_global_env_mon_arr)+1):
                for column in range(len(mc_global_env_scb_arr)+1):
                    if row == 0 and column == 0:
                        log.debug("mc_mon_scb_con_save_button_code: row = %d column %d ! Not required Widget !\n"%(row, column))
                    elif row in range (1, len(mc_global_env_mon_arr)+1) and column == 0:
                        log.debug("mc_mon_scb_con_save_button_code: row = %d column %d ! Not required Widget !\n"%(row, column))
                    elif row == 0 and column in range (1, len(mc_global_env_scb_arr)+1):
                        log.debug("mc_mon_scb_con_save_button_code: row = %d column %d ! Not required Widget !\n"%(row, column))
                    else:
                        log.debug("mc_mon_scb_con_save_button_code: row = %d column %d ! mc_global_env_mon_arr %s mc_global_env_scb_arr %s self.mc_mon_scb_con_list %s self.mc_mon_scb_con_val %s!\n"%(row, column, mc_global_env_mon_arr, mc_global_env_scb_arr, self.mc_mon_scb_con_list, self.mc_mon_scb_con_val))
                        log.debug("mc_mon_scb_con_save_button_code: value of self.mc_mon_scb_con_val[row,column].get() %s"%self.mc_mon_scb_con_val[row,column].get())
                        
                        mc_global_mon_scb_con_ele = mc_global_env_mon_arr[row-1]+'-'+mc_global_env_scb_arr[column-1]+'-'
                        mc_global_mon_scb_con_ele_idx = self.find_index_sub_string(mc_global_mon_scb_con_ele, mc_global_env_mon_scb_con_arr)
                        log.debug("mc_mon_scb_con_save_button_code: mc_global_mon_scb_con_ele %s, mc_global_mon_scb_con_ele_idx %s,  mc_global_env_mon_scb_con_arr %s\n"%(mc_global_mon_scb_con_ele, mc_global_mon_scb_con_ele_idx, mc_global_env_mon_scb_con_arr))
            
                        if mc_global_mon_scb_con_ele_idx != []:
                            mc_global_mon_scb_con_ele = mc_global_env_mon_arr[row-1]+'-'+mc_global_env_scb_arr[column-1]+'-'+str(self.mc_mon_scb_con_list[row,column].get(int(self.mc_mon_scb_con_val[row,column].get()))) 
                            log.debug("mc_mon_scb_con_save_button_code: mc_global_mon_scb_con_ele %s, mc_global_env_mon_scb_con_arr %s\n"%(mc_global_mon_scb_con_ele, mc_global_env_mon_scb_con_arr[mc_global_mon_scb_con_ele_idx[0]]))
                            if mc_global_mon_scb_con_ele != mc_global_env_mon_scb_con_arr[mc_global_mon_scb_con_ele_idx[0]]:
                                del mc_global_env_mon_scb_con_arr[mc_global_mon_scb_con_ele_idx[0]]
                                log.debug("mc_mon_scb_con_save_button_code: Different Element! mc_global_mon_scb_con_ele %s, mc_global_mon_scb_con_ele_idx %s,  mc_global_env_mon_scb_con_arr %s\n"%(mc_global_mon_scb_con_ele, mc_global_mon_scb_con_ele_idx, mc_global_env_mon_scb_con_arr))
                                #mc_global_env_mon_scb_con_arr[mc_global_mon_scb_con_ele_idx[0]] = mc_global_mon_scb_con_ele
                                #if ((mc_global_mon_scb_con_ele).split("-"))[2] != None and int(((mc_global_mon_scb_con_ele).split("-"))[2]) != 0:
                                if str(mc_global_mon_scb_con_ele.split("-")[2]) != 'None':
                                    mc_global_env_mon_scb_con_arr.append(mc_global_mon_scb_con_ele)
                                    log.debug("mc_mon_scb_con_save_button_code: Different Element! and connectivity option is not None or 0. Adding mc_global_mon_scb_con_ele %s into mc_global_env_mon_scb_con_arr\n"%(mc_global_mon_scb_con_ele))
                                else:
                                    log.debug("mc_mon_scb_con_save_button_code: Different Element! and connectivity option is either None or 0. So NOT adding mc_global_mon_scb_con_ele %s into mc_global_env_mon_scb_con_arr\n"%(mc_global_mon_scb_con_ele))
                            else:
                                log.debug("mc_mon_scb_con_save_button_code: Same Elements! mc_global_mon_scb_con_ele %s, mc_global_env_mon_scb_con_arr[%d] %s\n"%(mc_global_mon_scb_con_ele, mc_global_mon_scb_con_ele_idx[0], mc_global_env_mon_scb_con_arr[mc_global_mon_scb_con_ele_idx[0]]))
                        else:
                            mc_mon_scb_con_list_ele = self.mc_mon_scb_con_list[row,column].get(int(self.mc_mon_scb_con_val[row,column].get()))
                            log.debug("mc_mon_scb_con_save_button_code: value of element is %s\n"%mc_mon_scb_con_list_ele)
                            # if mc_mon_scb_con_list_ele != None and mc_mon_scb_con_list_ele != 0:
                            if str(mc_mon_scb_con_list_ele) != 'None':
                                mc_global_env_mon_scb_con_arr.append(mc_global_mon_scb_con_ele+str(self.mc_mon_scb_con_list[row,column].get(int(self.mc_mon_scb_con_val[row,column].get()))))
                                log.debug("mc_mon_scb_con_save_button_code: New Element mc_global_mon_scb_con_ele_idx %s Added  mc_global_env_mon_scb_con_arr %s\n"%(mc_global_mon_scb_con_ele+str(self.mc_mon_scb_con_list[row,column].get(int(self.mc_mon_scb_con_val[row,column].get()))), mc_global_env_mon_scb_con_arr))
                            else:
                                log.debug("mc_mon_scb_con_save_button_code: Mon-Scb Connection Type is None ! No Need to load into mc_global_env_mon_scb_con_arr !\n")
                            log.debug("mc_mon_scb_con_save_button_code: New Element! mc_global_mon_scb_con_ele %s, mc_global_mon_scb_con_ele_idx %s,  mc_global_env_mon_scb_con_arr %s\n"%(mc_global_mon_scb_con_ele, mc_global_mon_scb_con_ele_idx, mc_global_env_mon_scb_con_arr))


        if mc_envset_button_code_on:
            log.debug("mc_mon_scb_con_save_button_code: mc_envset_button_code_on is set ! Switching it off !\n")
            
            # Killing the mon-scb connectivity widgets
            self.mc_mon_scb_widget_kill_cb(mc_curr_env_mon_arr, mc_curr_env_scb_arr)

            mc_envset_button_code_on = 0
        
        if mc_final_envset_button_code_on:
            log.debug("mc_mon_scb_con_save_button_code: mc_final_envset_button_code_on is set ! Switching it off !\n")
            
            # Killing the mon-scb connectivity widgets
            self.mc_mon_scb_widget_kill_cb(mc_global_env_mon_arr, mc_global_env_scb_arr)
            
            mc_final_envset_button_code_on = 0
        
        if (mc_env_no_cur == (mc_env_no_max-1)) and mc_env_no_cur > 0:
            log.debug("mc_mon_scb_con_save_button_code: Setting the mc_mon_scb_con_wait Variable !\n")
            mc_mon_scb_con_wait.set("1")
    
    
    def mc_mon_scb_widget_kill_cb(self, mon_list = [], scb_list = [], *args):
        log.debug("mc_mon_scb_widget_kill_cb: Going To Kill The mon-scb connectivity widgets !\n")
       
        if len(mon_list)>=1 and len(scb_list)>=1:
            for row in range(len(mon_list)+1):
                for column in range(len(scb_list)+1):
                    if self.mc_mon_scb_widget_arr[row,column]:
                        self.mc_mon_scb_widget_arr[row,column].grid_forget(); 
                        self.mc_mon_scb_widget_arr[row,column] = None
        
        if (self.mc_mon_scb_con_save_button): 
            self.mc_mon_scb_con_save_button.grid_forget();
            self.mc_mon_scb_con_save_button = None
   
        if (self.mc_envset):
            self.mc_envset.destroy(); self.mc_envset = None
        
        if (self.mc_final_envset):
            self.mc_final_envset.destroy(); self.mc_final_envset = None


    def mc_final_envset_button_code(self):
        global mc_envset_done
        global mc_env_no_cur
        global mc_env_no_max
        global mc_global_env_mon_arr
        global mc_global_env_scb_arr
        global mc_final_envset_button_code_on
        log.debug("mc_final_envset_button_code: Launching The Final Environment widget\n")
        
        if (mc_env_no_cur == (mc_env_no_max-1)) and mc_env_no_cur > 0:
            mc_envset_done = 0
        
        self.mc_final_envset = Toplevel()
        self.mc_final_envset.wm_title("Final Environment Setup Window")
        self.mc_final_envset.geometry("+500+500")   
        
        if len(mc_global_env_mon_arr)>=1 and len(mc_global_env_scb_arr)>=1:
            # Code to form the window widget structure based on the monitor and scoreboard for connectivity
            # self.mc_mon_scb_widget_build_cb(self.mc_final_envset, mc_global_env_mon_arr, mc_global_env_scb_arr)
            self.mc_mon_scb_widget_build_cb_try(self.mc_final_envset, mc_global_env_mon_arr, mc_global_env_scb_arr)
            
            # Save Button to save the env_setup configurations
            if not (self.mc_mon_scb_con_save_button): 
                self.mc_mon_scb_con_save_button = Button(self.mc_final_envset, font=MyFontBtn, background="goldenrod1", activebackground="goldenrod3", text="SAVE ENV SETUP", command=self.mc_mon_scb_con_save_button_code, highlightbackground='black', highlightthickness='2')
                self.mc_mon_scb_con_save_button.grid(row=len(mc_global_env_mon_arr)+2, column=0, columnspan=len(mc_global_env_scb_arr)+2, sticky='WE')
                # self.mc_mon_scb_con_save_button.rowconfigure(0,weight=1)
            else:
                self.mc_mon_scb_con_save_button.grid_forget(); self.mc_mon_scb_con_save_button = None
                self.mc_mon_scb_con_save_button = Button(self.mc_final_envset, font=MyFontBtn, background="goldenrod1", activebackground="goldenrod3", text="SAVE ENV SETUP", command=self.mc_mon_scb_con_save_button_code, highlightbackground='black', highlightthickness='2')
                self.mc_mon_scb_con_save_button.grid(row=len(mc_global_env_mon_arr)+2, column=0, columnspan=len(mc_global_env_scb_arr)+2, sticky='WE')
                # self.mc_mon_scb_con_save_button.rowconfigure(0,weight=1)
        
            # Setting variable to indicated that mc_final_envset_button_code was executed
            mc_final_envset_button_code_on = 1
        else:
            log.debug("mc_envset_button_code: Not Launching the API to build the mon-scb connectivity widgets ! Bcoz mc_global_env_mon_arr / mc_global_env_mon_arr is not >= 1\n")
            # Killing the mon-scb connectivity widgets
            self.mc_mon_scb_widget_kill_cb(mc_global_env_mon_arr, mc_global_env_scb_arr)
        

    
    def mc_final_envset_setup_after_done_envcfg(self):
        global mc_env_cfg_pool
        global mc_global_env_mon_scb_con_arr
        env_cnt = 0
        ele_len = 0
        con_len = 0
        con_mon_arr = []
        con_scb_arr = []
        log.debug("mc_final_envset_setup_after_done_envcfg: Launching API to do the final ENV Configuration Setup !\n")

        log.debug("mc_final_envset_setup_after_done_envcfg: mc_env_cfg_pool %s!\n"%mc_env_cfg_pool)
        
        # Take a local copy of the mc_global_env_mon_scb_con_arr and do the processing on it.
        mc_global_env_mon_scb_con_arr_l = mc_global_env_mon_scb_con_arr
        log.debug("mc_final_envset_setup_after_done_envcfg: mc_global_env_mon_scb_con_arr %s, mc_global_env_mon_scb_con_arr_l %s!\n"%(mc_global_env_mon_scb_con_arr, mc_global_env_mon_scb_con_arr_l))

        # Code to cycle through all the env configuration for the connectivity
        while env_cnt < len(mc_env_cfg_pool):
            log.debug("mc_final_envset_setup_after_done_envcfg: mc_env_cfg_pool %s! env_cnt %d len(mc_env_cfg_pool) %d\n"%(mc_env_cfg_pool, env_cnt, len(mc_env_cfg_pool)))
            # Code to loop through the len of the connectivity array inside each mc_env_cfg_pool[][6]
            
            #Default Value for local variable
            ele_len = 0

            while ele_len < len(mc_env_cfg_pool[env_cnt][5]): 
                # For the particular environment, discard all the already existing connectivity from the env configuration pool 
                ele_find = mc_env_cfg_pool[env_cnt][5][ele_len]
                log.debug("mc_final_envset_setup_after_done_envcfg: ele_find %s!\n"%ele_find)

                ele_idx = self.find_index(ele_find, mc_global_env_mon_scb_con_arr_l)
                log.debug("mc_final_envset_setup_after_done_envcfg: ele_idx %s!\n"%ele_idx)

                if ele_idx:
                    log.debug("mc_final_envset_setup_after_done_envcfg: B4 : ele_idx %s, mc_global_env_mon_scb_con_arr_l %s!\n"%(ele_idx, mc_global_env_mon_scb_con_arr_l))
                    del mc_global_env_mon_scb_con_arr_l[ele_idx[0]]
                    log.debug("mc_final_envset_setup_after_done_envcfg: After : ele_idx %s, mc_global_env_mon_scb_con_arr_l %s!\n"%(ele_idx, mc_global_env_mon_scb_con_arr_l))
                else:
                    log.debug("mc_final_envset_setup_after_done_envcfg: Element From env %d Not FOund in mc_global_env_mon_scb_con_arr_l!\n"%env_cnt)

                # Incrementing the env_cnt value
                ele_len += 1
            # Incrementing the env_cnt value
            env_cnt += 1
            
        #Default Value for local variable
        env_cnt = 0
        ele_len = 0
                    
        # FOr any of the originating connectivity i.e. mon->scb or scb-> from the current env, run the LCA algorithm and find where it fits,
        # Add that connectivity in the respective env and discard the connection
        while con_len < len(mc_global_env_mon_scb_con_arr_l):
            mon_idx = 0
            scb_idx = 0
            con_loc = str(mc_global_env_mon_scb_con_arr_l[con_len]).split("-") 
            mon_no = int(con_loc[0][0]) 
            scb_no = int(con_loc[1][0])
            log.debug("mc_final_envset_setup_after_done_envcfg: con_len %d, len(mc_global_env_mon_scb_con_arr_l) %d, con_loc %s, mon_no %d, scb_no %d!\n"%(con_len, len(mc_global_env_mon_scb_con_arr_l), con_loc, mon_no, scb_no))

            # Find the root element for the mon 
            log.debug("mc_final_envset_setup_after_done_envcfg: %s !\n"%(mc_env_cfg_pool[mon_no][0]))
            log.debug("mc_final_envset_setup_after_done_envcfg: %s !\n"%((mc_env_cfg_pool[mon_no][0]).split(",")))
            log.debug("mc_final_envset_setup_after_done_envcfg: %s !\n"%(((mc_env_cfg_pool[mon_no][0]).split(","))[0]))
            while True:
                env_ele = (mc_env_cfg_pool[mon_no][0]).split(",") 
                con_mon_arr.append(str(mon_no)+','+str(env_ele))
                ele_to_search = ','+env_ele[0] 
                log.debug("mc_final_envset_setup_after_done_envcfg: env_ele %s, ele_to_search %s, mon_no %s, mc_env_cfg_pool[mon_no][0] %s!\n"%(env_ele, ele_to_search, mon_no, mc_env_cfg_pool[mon_no][0]))
                if (((mc_env_cfg_pool[mon_no][0]).split(","))[0] == "top"):
                    break
                
                while mon_idx < len(mc_env_cfg_pool):
                    if  self.find_index_sub_string(ele_to_search, mc_env_cfg_pool[mon_idx]) != []:
                        mon_no = mon_idx 
                        log.debug("mc_final_envset_setup_after_done_envcfg: mon_idx %d!\n"%(mon_idx))
                        break
                    else:
                        mon_idx += 1

            log.debug("mc_final_envset_setup_after_done_envcfg: con_mon_arr %s!\n"%(con_mon_arr))

            # Find the root element for the scb 
            # log.debug("mc_final_envset_setup_after_done_envcfg: ((mc_env_cfg_pool[scb_no][0]).split(","))[0] %s !\n"%(((mc_env_cfg_pool[scb_no][0]).split(","))[0]))
            while True:
                env_ele = (mc_env_cfg_pool[scb_no][0]).split(",") 
                con_scb_arr.append(str(scb_no)+','+str(env_ele))
                ele_to_search = ','+env_ele[0] 
                log.debug("mc_final_envset_setup_after_done_envcfg: env_ele %s, ele_to_search %s, scb_no %s!\n"%(env_ele, ele_to_search, scb_no))
                if (((mc_env_cfg_pool[scb_no][0]).split(","))[0] == "top"):
                    break
                
                while scb_idx < len(mc_env_cfg_pool):
                    if  self.find_index_sub_string(ele_to_search, mc_env_cfg_pool[scb_idx]) != []:
                        scb_no = scb_idx 
                        log.debug("mc_final_envset_setup_after_done_envcfg: scb_idx %d!\n"%(scb_idx))
                        break
                    else:
                        scb_idx += 1
            
            log.debug("mc_final_envset_setup_after_done_envcfg: con_scb_arr %s!\n"%(con_scb_arr))


            # Code to find the common point / array in con_mon_arr and con_scb_arr, load the connectivity into respective mc_env_cfg_pool
            mon_len = 0; scb_len = 0

            while scb_len < len(con_scb_arr):
                while mon_len < len(con_mon_arr):
                    log.debug("mc_final_envset_setup_after_done_envcfg: len(con_scb_arr) %d, len(con_mon_arr) %d, mon_len %d, scb_len %d, con_scb_arr[%d] %s, con_mon_arr[%d] %s!\n"%(len(con_scb_arr), len(con_mon_arr), mon_len, scb_len, scb_len, con_scb_arr[scb_len], mon_len, con_mon_arr[mon_len]))
                    if con_scb_arr[scb_len] != con_mon_arr[mon_len]:
                        mon_len += 1
                    else:
                        mc_env_cfg_pool[int(con_mon_arr[mon_len][0])][5].append(mc_global_env_mon_scb_con_arr_l[con_len])
                        # Don't delete the multi env connectivity, it adds confusion
                        # del mc_global_env_mon_scb_con_arr_l[con_len]
                        log.debug("mc_final_envset_setup_after_done_envcfg: Goint to break out !! mc_env_cfg_pool %s, mc_global_env_mon_scb_con_arr_l %s!\n"%(mc_env_cfg_pool, mc_global_env_mon_scb_con_arr_l))
                        break
                # Only if th mon_len break out is because it reached max mon_len
                if mon_len == len(con_mon_arr):        
                    scb_len += 1
                    log.debug("mc_final_envset_setup_after_done_envcfg: mon_len %d, len(con_mon_arr) %d, scb_len %d, len(con_scb_arr) %d!\n"%(mon_len, len(con_mon_arr), scb_len, len(con_scb_arr)))
                    mon_len = 0
                    log.debug("mc_final_envset_setup_after_done_envcfg: mon_len %d, len(con_mon_arr) %d, scb_len %d, len(con_scb_arr) %d!\n"%(mon_len, len(con_mon_arr), scb_len, len(con_scb_arr)))
                else:
                    log.debug("mc_final_envset_setup_after_done_envcfg: Looks Like mon-scb element search matched ! Breaking out of scb_len Loop !\n")
                    break

            # Incremnting the con_len
            con_len += 1
            log.debug("mc_final_envset_setup_after_done_envcfg: At the end of main while loop for mc_global_env_mon_scb_con_arr_l con_len %d, mc_global_env_mon_scb_con_arr_l %s!\n"%(con_len, mc_global_env_mon_scb_con_arr_l))

    
    def mc_final_envset_setup_after_done_envcfg_try(self):
        global mc_env_cfg_pool
        global mc_global_env_mon_scb_con_arr
        env_cnt = 0
        ele_len = 0
        con_len = 0
        con_mon_arr = []
        con_scb_arr = []
        mc_global_env_mon_scb_con_arr_l = []
        
        log.debug("mc_final_envset_setup_after_done_envcfg: Launching API to do the final ENV Configuration Setup !\n")

        log.debug("mc_final_envset_setup_after_done_envcfg: mc_env_cfg_pool %s!\n"%mc_env_cfg_pool)
        
        # Take a local copy of the mc_global_env_mon_scb_con_arr and do the processing on it.
        mc_global_env_mon_scb_con_arr_l = mc_global_env_mon_scb_con_arr[:]
        log.debug("mc_final_envset_setup_after_done_envcfg: mc_global_env_mon_scb_con_arr %s, mc_global_env_mon_scb_con_arr_l %s!\n"%(mc_global_env_mon_scb_con_arr, mc_global_env_mon_scb_con_arr_l))

        # Code to cycle through all the env configuration for the connectivity
        while env_cnt < len(mc_env_cfg_pool):
            log.debug("mc_final_envset_setup_after_done_envcfg: mc_env_cfg_pool %s! env_cnt %d len(mc_env_cfg_pool) %d\n"%(mc_env_cfg_pool, env_cnt, len(mc_env_cfg_pool)))
            # Code to loop through the len of the connectivity array inside each mc_env_cfg_pool[][6]
            
            #Default Value for local variable
            ele_len = 0

            while ele_len < len(mc_env_cfg_pool[env_cnt][5]): # WATCHOUT : vimo : 112019|WED 
                # For the particular environment, discard all the already existing connectivity from the env configuration pool 
                ele_find = mc_env_cfg_pool[env_cnt][5][ele_len]
                log.debug("mc_final_envset_setup_after_done_envcfg: ele_find %s!\n"%ele_find)
                
                ele_find = "-".join(str(ele_find).split("-")[:-1])
                log.debug("mc_final_envset_setup_after_done_envcfg: ele_find %s!\n"%ele_find)

                #ele_idx = self.find_index(ele_find, mc_global_env_mon_scb_con_arr_l)
                ele_idx = self.find_index_sub_string(ele_find, mc_global_env_mon_scb_con_arr_l)
                log.debug("mc_final_envset_setup_after_done_envcfg: ele_idx %s!\n"%ele_idx)

                if ele_idx:
                    if mc_global_env_mon_scb_con_arr_l[ele_idx[0]] != mc_env_cfg_pool[env_cnt][5][ele_len]:
                        log.debug("mc_final_envset_setup_after_done_envcfg: B4 : ele_len %d ele_idx %s, mc_global_env_mon_scb_con_arr_l %s mc_env_cfg_pool[%d][5] %s!\n"%(ele_len, ele_idx, mc_global_env_mon_scb_con_arr_l, env_cnt, mc_env_cfg_pool[env_cnt][5]))
                        del mc_env_cfg_pool[env_cnt][5][ele_len]
                        log.debug("mc_final_envset_setup_after_done_envcfg: After : ele_idx %d ele_idx %s, mc_global_env_mon_scb_con_arr_l %s mc_env_cfg_pool[%d][5] %s!\n"%(ele_len, ele_idx, mc_global_env_mon_scb_con_arr_l, env_cnt, mc_env_cfg_pool[env_cnt][5]))
                    else:
                        log.debug("mc_final_envset_setup_after_done_envcfg: B4 : ele_idx %d ele_idx %s, mc_global_env_mon_scb_con_arr_l %s!\n"%(ele_len, ele_idx, mc_global_env_mon_scb_con_arr_l))
                        del mc_global_env_mon_scb_con_arr_l[ele_idx[0]]
                        log.debug("mc_final_envset_setup_after_done_envcfg: After : ele_idx %d ele_idx %s, mc_global_env_mon_scb_con_arr_l %s!\n"%(ele_len, ele_idx, mc_global_env_mon_scb_con_arr_l))
                        ele_len += 1
                else:
                    log.debug("mc_final_envset_setup_after_done_envcfg: Element From env %d Not FOund in mc_global_env_mon_scb_con_arr_l!\n"%env_cnt)
                    ele_len += 1
        
                log.debug("mc_final_envset_setup_after_done_envcfg: mc_global_env_mon_scb_con_arr %s, mc_global_env_mon_scb_con_arr_l %s!\n"%(mc_global_env_mon_scb_con_arr, mc_global_env_mon_scb_con_arr_l))

                # Incrementing the env_cnt value
                # ele_len += 1
            # Incrementing the env_cnt value
            env_cnt += 1
            
        #Default Value for local variable
        env_cnt = 0
        ele_len = 0
                    
        # FOr any of the originating connectivity i.e. mon->scb or scb-> from the current env, run the LCA algorithm and find where it fits,
        # Add that connectivity in the respective env and discard the connection
        while con_len < len(mc_global_env_mon_scb_con_arr_l):
            mon_idx = 0
            scb_idx = 0
            con_loc = str(mc_global_env_mon_scb_con_arr_l[con_len]).split("-") 
            mon_ele = con_loc[0].split(",")
            scb_ele = con_loc[1].split(",")
            log.debug("mc_final_envset_setup_after_done_envcfg: mon_ele %s  scb_ele %s!\n"%(mon_ele, scb_ele))

            # Checking for monitor tree top
            mon_no = self.find_index((str(mon_ele[0])+','+str(mon_ele[1])), mc_env_cfg_pool)[0]
            log.debug("mc_final_envset_setup_after_done_envcfg: mon_no %s!\n"%(mon_no))
            while True:
                env_ele = (mc_env_cfg_pool[mon_no][0]).split(",")
                con_mon_arr.append(mc_env_cfg_pool[mon_no][0])
                ele_to_search = ','+env_ele[0] 
                log.debug("mc_final_envset_setup_after_done_envcfg: env_ele %s, ele_to_search %s, mon_no %s, mc_env_cfg_pool[mon_no][0] %s, con_mon_arr %s!\n"%(env_ele, ele_to_search, mon_no, mc_env_cfg_pool[mon_no][0], con_mon_arr))
                
                if (((mc_env_cfg_pool[mon_no][0]).split(","))[0] == "top"):
                    break
                
                while mon_idx < len(mc_env_cfg_pool):
                    # if  self.find_index_sub_string(ele_to_search, mc_env_cfg_pool[mon_idx][0]) != []:
                    if  ele_to_search in mc_env_cfg_pool[mon_idx][0]:
                        log.debug("mc_final_envset_setup_after_done_envcfg: ele_to_search %s, mc_env_cfg_pool[%d][0] %s!\n"%(ele_to_search, mon_idx, mc_env_cfg_pool[mon_idx][0]))
                        mon_no = mon_idx 
                        log.debug("mc_final_envset_setup_after_done_envcfg: mon_idx %d!\n"%(mon_idx))
                        mon_idx = 0
                        break
                    else:
                        log.debug(ele_to_search in mc_env_cfg_pool[mon_idx][0])
                        log.debug(self.find_index_sub_string(ele_to_search, mc_env_cfg_pool[mon_idx][0]))
                        log.debug("mc_final_envset_setup_after_done_envcfg: ele_to_search %s, mc_env_cfg_pool[%d][0] %s!\n"%(ele_to_search, mon_idx, mc_env_cfg_pool[mon_idx][0]))
                        mon_idx += 1
                
            log.debug("mc_final_envset_setup_after_done_envcfg: con_mon_arr %s!\n"%(con_mon_arr))

            # Find the root element for the scb 
            # log.debug("mc_final_envset_setup_after_done_envcfg: ((mc_env_cfg_pool[scb_no][0]).split(","))[0] %s !\n"%(((mc_env_cfg_pool[scb_no][0]).split(","))[0]))
            scb_no = self.find_index((str(scb_ele[0])+','+str(scb_ele[1])), mc_env_cfg_pool)[0]
            log.debug("mc_final_envset_setup_after_done_envcfg: scb_no %s!\n"%(scb_no))
            while True:
                env_ele = (mc_env_cfg_pool[scb_no][0]).split(",") 
                con_scb_arr.append(mc_env_cfg_pool[scb_no][0])
                ele_to_search = ','+env_ele[0] 
                log.debug("mc_final_envset_setup_after_done_envcfg: env_ele %s, ele_to_search %s, scb_no %s, con_scb_arr %s!\n"%(env_ele, ele_to_search, scb_no, con_scb_arr))
                
                if (((mc_env_cfg_pool[scb_no][0]).split(","))[0] == "top"):
                    break
                
                while scb_idx < len(mc_env_cfg_pool):
                    # if  self.find_index_sub_string(ele_to_search, mc_env_cfg_pool[scb_idx][0]) != []:
                    if  ele_to_search in mc_env_cfg_pool[scb_idx][0]:
                        log.debug("mc_final_envset_setup_after_done_envcfg: ele_to_search %s, mc_env_cfg_pool[%d][0] %s!\n"%(ele_to_search, scb_idx, mc_env_cfg_pool[scb_idx][0]))
                        scb_no = scb_idx 
                        log.debug("mc_final_envset_setup_after_done_envcfg: scb_idx %d!\n"%(scb_idx))
                        scb_idx = 0
                        break
                    else:
                        log.debug(ele_to_search in mc_env_cfg_pool[scb_idx][0])
                        log.debug(self.find_index_sub_string(ele_to_search, mc_env_cfg_pool[scb_idx][0]))
                        log.debug("mc_final_envset_setup_after_done_envcfg: ele_to_search %s, mc_env_cfg_pool[%d][0] %s!\n"%(ele_to_search, scb_idx, mc_env_cfg_pool[scb_idx][0]))
                        scb_idx += 1
            
            log.debug("mc_final_envset_setup_after_done_envcfg: con_scb_arr %s!\n"%(con_scb_arr))

            # Code to find the common point / array in con_mon_arr and con_scb_arr, load the connectivity into respective mc_env_cfg_pool
            mon_len = 0; scb_len = 0

            while scb_len < len(con_scb_arr):
                while mon_len < len(con_mon_arr):
                    log.debug("mc_final_envset_setup_after_done_envcfg: len(con_scb_arr) %d, len(con_mon_arr) %d, mon_len %d, scb_len %d, con_scb_arr[%d] %s, con_mon_arr[%d] %s!\n"%(len(con_scb_arr), len(con_mon_arr), mon_len, scb_len, scb_len, con_scb_arr[scb_len], mon_len, con_mon_arr[mon_len]))
                    if con_scb_arr[scb_len] != con_mon_arr[mon_len]:
                        mon_len += 1
                    else:
                        root_node_idx = self.find_index(con_mon_arr[mon_len], mc_env_cfg_pool)[0]
                        mc_env_cfg_pool[root_node_idx][5].append(mc_global_env_mon_scb_con_arr_l[con_len])
                        # Don't delete the multi env connectivity, it adds confusion
                        # del mc_global_env_mon_scb_con_arr_l[con_len]
                        log.debug("mc_final_envset_setup_after_done_envcfg: Going to break out !! root_node_idx %d mc_env_cfg_pool %s, mc_global_env_mon_scb_con_arr_l %s!\n"%(root_node_idx, mc_env_cfg_pool, mc_global_env_mon_scb_con_arr_l))
                        break
                # Only if th mon_len break out is because it reached max mon_len
                if mon_len == len(con_mon_arr):        
                    scb_len += 1
                    log.debug("mc_final_envset_setup_after_done_envcfg: mon_len %d, len(con_mon_arr) %d, scb_len %d, len(con_scb_arr) %d!\n"%(mon_len, len(con_mon_arr), scb_len, len(con_scb_arr)))
                    mon_len = 0
                    log.debug("mc_final_envset_setup_after_done_envcfg: mon_len %d, len(con_mon_arr) %d, scb_len %d, len(con_scb_arr) %d!\n"%(mon_len, len(con_mon_arr), scb_len, len(con_scb_arr)))
                else:
                    log.debug("mc_final_envset_setup_after_done_envcfg: Looks Like mon-scb element search matched ! Breaking out of scb_len Loop !\n")
                    break

            # Incremnting the con_len
            con_len += 1
            con_mon_arr = []
            con_scb_arr = []
            log.debug("mc_final_envset_setup_after_done_envcfg: At the end of main while loop for mc_global_env_mon_scb_con_arr_l con_len %d, mc_global_env_mon_scb_con_arr_l %s!\n"%(con_len, mc_global_env_mon_scb_con_arr_l))
        
        log.debug("mc_final_envset_setup_after_done_envcfg_try :\n, mc_env_cfg_pool %s\n\n, mc_global_env_mon_scb_con_arr %s\n"%(mc_env_cfg_pool, mc_global_env_mon_scb_con_arr))
   

    def mc_env_cfg_pool_exists(self):
        global mc_env_find_idx
        global mc_env_cfg_pool
        log.debug("mc_env_cfg_pool_exists : Going to Launch API To Check if the env already exists in the mc_env_cfg_pool\n")

        # Element to be searched
        mc_env_find_ele = str(self.mce2.get())
        log.debug("mc_env_cfg_pool_exists : Value of mc_env_find_ele %s"%(mc_env_find_ele))

        # Code to check if the particular env exists in the mc_env_cfg_pool
        mc_env_find_idx_tmp = self.find_index(mc_env_find_ele, mc_env_cfg_pool)

        if mc_env_find_idx_tmp != None:
            mc_env_find_idx = int(mc_env_find_idx_tmp[0])
        else:    
            mc_env_find_idx = mc_env_find_idx_tmp
        log.debug("mc_env_cfg_pool_exists : Value of mc_env_find_idx_tmp %s mc_env_find_idx %s"%(mc_env_find_idx_tmp, mc_env_find_idx))


    def mc_env_cfg_pool_load(self):
        global mc_env_find_idx
        global mc_env_no_cur
        global mc_env_cfg_pool_cnt
        global mc_agt_cfg_pool
        global mc_curr_env_mon_scb_con_arr
        log.debug("mc_env_cfg_pool_load : Going to Launch API To load the env config into the mc_env_cfg_pool\n")

        # Code to check if env already exists in the mc_env_cfg_pool
        self.mc_env_cfg_pool_exists()

        if mc_env_find_idx == None:
            # Loading the env name
            mc_env_cfg_pool[mc_env_no_cur][0] = self.mce2.get()

            # Loading the sub env details 
            mc_env_cfg_pool[mc_env_no_cur][1] = self.mce6.get()
        
            # Loading the agent details
            if self.mce5.get() != '':
                agt_arr = (self.mce5.get()).split(",")
            else:
                agt_arr = ''
            agt_arr_cnt = 0
            agt_find_idx = None
            log.debug("mc_env_cfg_pool_load : agt_arr_cnt %d agt_rr %s\n"%(agt_arr_cnt, agt_arr))

            # Loading the agent array details
            mc_env_cfg_pool[mc_env_no_cur][2].append(self.mce5.get())
            # Loading the agent details
            if agt_arr != '':
                while agt_arr_cnt < int(agt_arr[0]):
                    agt_find_ele = self.mce2.get()+','+str(agt_arr[agt_arr_cnt+1])
                    agt_find_idx = self.find_index(agt_find_ele, mc_agt_cfg_pool)
                    log.debug("mc_env_cfg_pool_load : agt_find_ele %s agt_find_idx %s\n"%(agt_find_ele, agt_find_idx))

                    if agt_find_idx != None:
                        mc_env_cfg_pool[mc_env_no_cur][2].append(mc_agt_cfg_pool[agt_find_idx[0]])

                    agt_arr_cnt += 1
                    log.debug("mc_env_cfg_pool_load : agt_arr_cnt %d mc_env_cfg_pool %s\n"%(agt_arr_cnt, mc_env_cfg_pool))
            else:
                log.debug("mc_env_cfg_pool_load : agt_arr is empty ! Nothing to load\n")


            # Loading the env monitor details 
            mc_env_cfg_pool[mc_env_no_cur][3] = self.mce3.get()

            # Loading the env scoreboard details
            mc_env_cfg_pool[mc_env_no_cur][4] = self.mce4.get()
        
            # Loading the monitor~scoreboard connection details 
            mc_env_cfg_pool[mc_env_no_cur][5] = mc_curr_env_mon_scb_con_arr 
            mc_curr_env_mon_scb_con_arr = []
            
            # Loading the directory Path
            if str(self.mce8.get()) == 'pwd':
                mc_env_cfg_pool[mc_env_no_cur][6] = str(os.popen('pwd').read()).strip()
                log.debug("mc_env_cfg_pool_load : env path is %s\n"%str(os.popen('pwd').read()).strip())
            else:
                mc_env_cfg_pool[mc_env_no_cur][6] = self.mce8.get() 
            log.debug("mc_env_cfg_pool_load : env path is %s\n"%mc_env_cfg_pool[mc_env_no_cur][6])

            # Env Interface Is already updated while parsing in the respective environment

            log.debug("mc_env_cfg_pool_load : mc_env_no_cur %d, mc_env_no_max %d, mc_curr_env_mon_scb_con_arr %s mc_env_cfg_pool %s\n"%(mc_env_no_cur, mc_env_no_max, mc_curr_env_mon_scb_con_arr, mc_env_cfg_pool))
        else:
            log.debug("mc_env_cfg_pool_load : Env already exists in mc_env_cfg_pool. Compare and if different re-load\n")
            mc_env_cfg_pool_tmp = [[] for x in range(mc_env_arr_range)];
            log.debug("mc_env_cfg_pool_load : Value of mc_env_cfg_pool_tmp %s\n"%mc_env_cfg_pool_tmp)

            # Loading the env name
            mc_env_cfg_pool_tmp[0] = self.mce2.get()

            # Loading the sub env details 
            mc_env_cfg_pool_tmp[1] = self.mce6.get()
        
            # Loading the agent details
            if self.mce5.get() != '':
                agt_arr = (self.mce5.get()).split(",")
            else:
                agt_arr = ''
            agt_arr_cnt = 0
            agt_find_idx = None

            # Loading the agent array details
            mc_env_cfg_pool_tmp[2].append(self.mce5.get())
            # Loading the agent details
            if agt_arr != '':
                while agt_arr_cnt < int(agt_arr[0]):
                    agt_find_ele = self.mce2.get()+','+str(agt_arr[agt_arr_cnt+1])
                    agt_find_idx = self.find_index(agt_find_ele, mc_agt_cfg_pool)

                    if agt_find_idx != None:
                        mc_env_cfg_pool_tmp[2].append(mc_agt_cfg_pool[agt_find_idx[0]])

                    agt_arr_cnt += 1
                    log.debug("mc_env_cfg_pool_load : agt_arr_cnt %d mc_env_cfg_pool_tmp %s\n"%(agt_arr_cnt, mc_env_cfg_pool_tmp))
            else:
                log.debug("mc_env_cfg_pool_load : agt_arr is empty ! Nothing to load\n")

            # Loading the env monitor details 
            mc_env_cfg_pool_tmp[3] = str(self.mce3.get())

            # Loading the env scoreboard details
            mc_env_cfg_pool_tmp[4] = str(self.mce4.get())
        
            # Loading the monitor~scoreboard connection details 
            mc_env_cfg_pool_tmp[5] = mc_curr_env_mon_scb_con_arr 
            mc_curr_env_mon_scb_con_arr = []
            log.debug("mc_env_cfg_pool_load : mc_env_no_cur %d, mc_env_no_max %d, mc_curr_env_mon_scb_con_arr %s mc_env_cfg_pool_tmp %s\n"%(mc_env_no_cur, mc_env_no_max, mc_curr_env_mon_scb_con_arr, mc_env_cfg_pool_tmp))

            # Loading the directory from the previous itself - expecting noting changed - WATCHIT
            if str(self.mce8.get()) == 'pwd':
                mc_env_cfg_pool_tmp[6] = str(os.popen('pwd').read()).strip()
                log.debug("mc_env_cfg_pool_load : env path is %s\n"%str(os.popen('pwd').read()).strip())
            else:
                mc_env_cfg_pool_tmp[6] = self.mce8.get() 
            log.debug("mc_env_cfg_pool_load : env path is %s\n"%mc_env_cfg_pool_tmp[6])

            # Loading the Env Interface details
            if self.mce9.get() != '':
                env_intf_arr = (self.mce9.get()).split(",")
            else:
                env_intf_arr = ''
            env_intf_arr_cnt = 0
            env_intf_find_idx = None

            # Loading the env intf details
            mc_env_cfg_pool_tmp[7].append(self.mce9.get())
            # Loading the env intf details
            if env_intf_arr != '':
                while env_intf_arr_cnt < int(env_intf_arr[0]):
                    env_intf_find_ele = self.mce2.get()+','+str(env_intf_arr[env_intf_arr_cnt+1])
                    env_intf_find_idx = self.find_index(env_intf_find_ele, mc_env_intf_cfg_pool)

                    if env_intf_find_idx != None:
                        mc_env_cfg_pool_tmp[7].append(mc_env_intf_cfg_pool[env_intf_find_idx[0]])

                    env_intf_arr_cnt += 1
                    log.debug("mc_env_cfg_pool_load : env_intf_arr_cnt %d mc_env_cfg_pool_tmp %s\n"%(env_intf_arr_cnt, mc_env_cfg_pool_tmp))
            else:
                log.debug("mc_env_cfg_pool_load : env_intf_arr is empty ! Nothing to load\n")

            # Compare the mc_env_cfg_pool_tmp and mc_env_cfg_pool, if different re-load
            if mc_env_cfg_pool_tmp != mc_env_cfg_pool[mc_env_find_idx]: 
                log.debug("mc_env_cfg_pool_load : mc_env_cfg_pool[%d] != mc_env_cfg_pool_tmp. Re-loading the pool\n"%(mc_env_find_idx))
                mc_env_cfg_pool[mc_env_find_idx] = mc_env_cfg_pool_tmp    
            else:
                log.debug("mc_env_cfg_pool_load : mc_env_cfg_pool[%d] == mc_env_cfg_pool_tmp. Not Re-loading the pool\n"%(mc_env_find_idx))
        
        log.debug("mc_env_cfg_pool_load : At the end. Value of mc_env_cfg_pool %s\n"%(mc_env_cfg_pool))
    

    def mc_new_win_layout_kcb(self):
        log.debug("mc_new_win_layout_kcb : Going to Launch API To Remove Label and Entry for Multi Cluster GUI\n")

        if (self.mcl2):
            self.mcl2.grid_forget(); self.mcl2 = None
        if (self.mcl3):
            self.mcl3.grid_forget(); self.mcl3 = None
        if (self.mcl4):
            self.mcl4.grid_forget(); self.mcl4 = None
        if (self.mcl5):
            self.mcl5.grid_forget(); self.mcl5 = None
        if (self.mcl6):
            self.mcl6.grid_forget(); self.mcl6 = None
        if (self.mcl7):
            self.mcl7.grid_forget(); self.mcl7 = None
        if (self.mcl8):
            self.mcl8.grid_forget(); self.mcl8 = None
        if (self.mcl9):
            self.mcl9.grid_forget(); self.mcl9 = None

        if (self.mce2):
            self.mce2.grid_forget(); self.mce2 = None
        if (self.mce3):
            self.mce3.grid_forget(); self.mce3 = None
        if (self.mce4):
            self.mce4.grid_forget(); self.mce4 = None
        if (self.mce5):
            self.mce5.grid_forget(); self.mce5 = None
        if (self.mce6):
            self.mce6.grid_forget(); self.mce6 = None
        if (self.mce7):
            self.mce7.grid_forget(); self.mce7 = None
        if (self.mce8):
            self.mce8.grid_forget(); self.mce8 = None
        if (self.mce9):
            self.mce9.grid_forget(); self.mce9 = None


    def mc_win_layout_return_exit_load_prev_next_done_buttons(self):
        global mc_env_no_cur 
        global mc_env_no_max
        global mc_envset_done
        log.debug("mc_win_layout_return_exit_load_prev_next_done_buttons : Creating all the necessary buttons!\n")

        # Code for return, exit, load widgets
        if not (self.mc_rlpe_frame):
            self.mc_rlpe_frame = Frame(root)
            self.mc_rlpe_frame.grid(row=40, column=0, columnspan=2, sticky='WE')
            self.mc_rlpe_frame.rowconfigure(40,weight=1)
            self.mc_rlpe_frame.columnconfigure((0,1,2),weight=1)
        else:
            log.debug("Multi Cluster Widget Frame already Exists\n")
            self.mc_rlpe_frame.grid_forget(); self.mc_rlpe_frame = None
            self.mc_rlpe_frame = Frame(root)
            self.mc_rlpe_frame.grid(row=40, column=0, columnspan=2, sticky='WE')
            self.mc_rlpe_frame.rowconfigure(40,weight=1)
            self.mc_rlpe_frame.columnconfigure((0,1,2),weight=1)
        
        log.debug("mc_win_layout_return_exit_load_prev_next_done_buttons : mc_env_no_cur %d mc_env_no_max %d mc_envset_done %d!\n"%(mc_env_no_cur, mc_env_no_max, mc_envset_done))

        # Button equations
        if (mc_env_no_cur == (mc_env_no_max-1)) and mc_env_no_cur == 0:
            # Return, Exit, Load, Done Buttons
            self.return_button_create_cb(5);
            self.exit_button_create_cb(2);
            self.mc_load_envcfg_button_create_cb();
            self.mc_done_envcfg_button_create_cb();
            self.mc_envset_button_create_cb();
        elif (mc_env_no_cur < (mc_env_no_max-1)) and mc_env_no_cur == 0:
            # Return, Exit, Load, Next Buttons
            self.return_button_create_cb(5);
            self.exit_button_create_cb(2);
            self.mc_load_envcfg_button_create_cb();
            self.mc_next_envcfg_button_create_cb();
            self.mc_envset_button_create_cb();
        elif (mc_env_no_cur < (mc_env_no_max-1)) and mc_env_no_cur > 0: 
            # Return, Exit, Load, Prev, Next Buttons
            self.return_button_create_cb(5);
            self.exit_button_create_cb(2);
            self.mc_load_envcfg_button_create_cb();
            self.mc_prev_envcfg_button_create_cb();
            self.mc_next_envcfg_button_create_cb();
            self.mc_envset_button_create_cb();
        elif (mc_env_no_cur == (mc_env_no_max-1)) and mc_env_no_cur > 0:
            # Return, Exit, Load, Prev, Done Buttons
            self.return_button_create_cb(5);
            self.exit_button_create_cb(2);
            self.mc_load_envcfg_button_create_cb();
            self.mc_prev_envcfg_button_create_cb();
            self.mc_done_envcfg_button_create_cb();
            if mc_envset_done == 0:
                self.mc_envset_button_create_cb();
            else:
                self.mc_final_envset_button_create_cb();
        
        log.debug("mc_win_layout_return_exit_load_prev_next_done_buttons : mc_env_no_cur %d mc_env_no_max %d mc_envset_done %d!\n"%(mc_env_no_cur, mc_env_no_max, mc_envset_done))

    def mc_win_layout_return_exit_load_prev_next_done_buttons_kcb(self):
        log.debug("mc_win_layout_return_exit_load_prev_next_done_buttons_kcb : Going to kill all the necessary buttons for mc env layout !\n")
            
        if (self.mc_rlpe_frame):
            self.mc_rlpe_frame.grid_forget(); self.mc_rlpe_frame = None
                
        if (self.return_button):
            self.return_button.grid_forget(); self.return_button = None

        if (self.exit_button): 
            self.exit_button.grid_forget(); self.exit_button = None
        
        if (self.mc_load_envcfg_button): 
            self.mc_load_envcfg_button.grid_forget(); self.mc_load_envcfg_button = None
        
        if (self.mc_prev_envcfg_button): 
            self.mc_prev_envcfg_button.grid_forget(); self.mc_prev_envcfg_button = None
        
        if (self.mc_done_envcfg_button): 
            self.mc_done_envcfg_button.grid_forget(); self.mc_done_envcfg_button = None
        
        if (self.mc_envset_button): 
            self.mc_envset_button.grid_forget(); self.mc_envset_button = None
        
        if (self.mc_final_envset_button): 
            self.mc_final_envset_button.grid_forget(); self.mc_final_envset_button = None


    def mc_env_agt_details(self, *args):
        global mc_agt_cfg_pool_cnt
        global mce5_arr
        global mce5_agt_cnt
        global mc_agt_find_idx
        global mc_agt_cfg_pool

        log.debug("Going to Agent Details for Multi Cluster VIP Environment\n")

        # Set default values for variables
        mce5_agt_cnt = 0

        # Decoding the Entry Variables For Agent Details 
        if self.mce5.get() != '':
            mce5_arr = (self.mce5.get()).split(",")
        else:
            mce5_arr = ''
        log.debug("multicluster : Value of mce5_arr %s"% mce5_arr)

        # Check if the entry is same or different
        if mce5_arr != '': 
            while mce5_agt_cnt < int(mce5_arr[0]):
                log.debug("mc_env_agt_details: Value of mce5_agt_cnt is %d\n"%mce5_agt_cnt)
                log.debug("mc_env_agt_details: Value of mc_agt_cnt_wait is %d\n"%mc_agt_cnt_wait.get())
                log.debug("mc_env_agt_details: Value of mc_agt_cfg_pool %s\n"%mc_agt_cfg_pool)
                
                # Find if the agent exists in the mc_agt_cfg_pool 
                self.mc_agt_cfg_pool_exists()

                # Creating The agent configuration layout
                self.mc_agt_new_win_layout() 

                # Code to re-fill up the entries or create a new agent entry based on existance of env-agt 
                if mc_agt_find_idx != None:
                    log.debug("mc_env_agt_details : Agt cfg with the env exists in mc_agt_cfg_pool. mc_agt_find_idx %s\n"%mc_agt_find_idx)
                
                    # Load the mc agt name into the entry window
                    if mc_agt_cfg_pool[mc_agt_find_idx][2] != '':
                        #mc_agt_name = str(mc_agt_cfg_pool[mc_agt_find_idx][1])+','+str(mc_agt_cfg_pool[mc_agt_find_idx][2])
                        mc_agt_name = str(mc_agt_cfg_pool[mc_agt_find_idx][1])+':'+str(mc_agt_cfg_pool[mc_agt_find_idx][2])
                    else:
                        mc_agt_name = mc_agt_cfg_pool[mc_agt_find_idx][1]

                    if self.mcae1.get() != None:
                       self.mcae1.delete(0, "end") # delete all the text in the entry
                    self.mcae1.insert(0, mc_agt_name);

                    # Load the mc agt number of driver~sequencer configuration
                    if self.mcae2.get() != None:
                       self.mcae2.delete(0, "end") # delete all the text in the entry
                    self.mcae2.insert(0, mc_agt_cfg_pool[mc_agt_find_idx][3]);
                    
                    # Load the mc agt number of monitor configuration
                    if self.mcae3.get() != None:
                       self.mcae3.delete(0, "end") # delete all the text in the entry
                    self.mcae3.insert(0, mc_agt_cfg_pool[mc_agt_find_idx][4]);

                    # Set the Interface Configuration For Agent
                    self.mc_agt_interface(); 
                else:
                    log.debug("mc_env_agt_details : Agt cfg with the env doesn't exists in mc_agt_cfg_pool. Creating New Entry\n")

                    # Check if any dummy agt pool exists, if not then create a new entry
                    if self.find_index(mc_agt_cfg_pool_dummy, mc_agt_cfg_pool) == None: 
                        # Creating default entry for agent
                        mc_agt_cfg_pool.append([[] for x in range(6)])
                    
                    # Load the mc agt name into the entry window
                    if self.mcae1.get() != None:
                       self.mcae1.delete(0, "end") # delete all the text in the entry
                    self.mcae1.insert(0, mce5_arr[mce5_agt_cnt+1]);

                # Waiting for the return or prev or next/done agt config to be finished
                log.debug("mc_env_agt_details : Going to wait for mc_agt_cnt_wait %d ! Value of mce5_agt_cnt %s"%(mc_agt_cnt_wait.get(),mce5_agt_cnt))
                root.wait_variable(mc_agt_cnt_wait)
                log.debug("mc_env_agt_details : Wait done0 for mc_agt_cnt_wait %d ! Value of mce5_agt_cnt %s"%(mc_agt_cnt_wait.get(),mce5_agt_cnt))
                
                # Code to increment mce5_agt_cnt based on mc_agt_cnt_wait value 
                if mc_agt_cnt_wait.get() != 3: mce5_agt_cnt += 1

                log.debug("mc_env_agt_details : Wait done for mc_agt_cnt_wait %d ! Value of mce5_agt_cnt %s"%(mc_agt_cnt_wait.get(),mce5_agt_cnt))
               
                # Increment the global agt pool cnt if the env-agt config doesnt exists
                if mc_agt_find_idx == None: 
                    # Check if any dummy agt pool exists, if not then increment mc_agt_cfg_pool_cnt 
                    if self.find_index(mc_agt_cfg_pool_dummy, mc_agt_cfg_pool) == None: 
                        log.debug("mc_env_agt_details : Value of mc_agt_cfg_pool_cnt %d mc_agt_cfg_pool %s"%(mc_agt_cfg_pool_cnt,mc_agt_cfg_pool))
                        mc_agt_cfg_pool_cnt+=1
                        log.debug("mc_env_agt_details : Value of mc_agt_cfg_pool_cnt %d mc_agt_cfg_pool %s"%(mc_agt_cfg_pool_cnt,mc_agt_cfg_pool))

            log.debug("mc_env_agt_details : Value of mc_agt_cfg_pool_cnt %d mc_agt_cfg_pool %s"%(mc_agt_cfg_pool_cnt,mc_agt_cfg_pool))
            # Setting default values at the end of mc_env_agt_details process
            mc_agt_cnt_wait.set("0")
        else:
            log.debug("mc_env_agt_details : Value of mce5_arr %s is empty!"%(mce5_arr))

    
    def mc_agt_cfg_pool_exists(self):
        global mc_agt_find_idx 
        global mce5_arr
        global mc_agt_cfg_pool 
        global mce5_agt_cnt

        # Element to be searched
        mc_agt_find_ele = self.mce2.get()+','+str(mce5_arr[mce5_agt_cnt+1])
        log.debug("mc_agt_cfg_pool_exists : Value of mc_agt_find_ele %s mc_agt_cfg_pool %s"%(mc_agt_find_ele, mc_agt_cfg_pool))

        # Code to check if the particular agent with env_setup is already available in the mc_agt_cfg_pool 
        mc_agt_find_idx_tmp = self.find_index(mc_agt_find_ele, mc_agt_cfg_pool) 
        log.debug("mc_agt_cfg_pool_exists : Value of mc_agt_find_idx_tmp %s\n"%mc_agt_find_idx_tmp)

        if mc_agt_find_idx_tmp != None:
            mc_agt_find_idx = int(mc_agt_find_idx_tmp[0])
        else:
            mc_agt_find_idx = mc_agt_find_idx_tmp
        log.debug("mc_agt_cfg_pool_exists : Value of mc_agt_find_idx_tmp %s mc_agt_find_idx %s"%(mc_agt_find_idx_tmp, mc_agt_find_idx))

    
    def mc_agt_new_win_layout(self):
        global mce5_arr
        global mce5_agt_cnt
            
        log.debug("mc_agt_new_win_layout: Value of mce5_agt_cnt is %d\n"%mce5_agt_cnt)
        
        # Removing the mc agt widgets if anything exists
        self.mc_agt_widget_forget_cb();
        
        self.mc_agt_nl = Toplevel()
        self.mc_agt_nl.wm_title("Agent Configuration Window")
        # Code to place the agent window away from main window
        self.mc_agt_nl.geometry("+500+500")   

        if not (self.mcal1):
            self.mcal1 = Label(self.mc_agt_nl, font=MyFontH2, text="Enter Agent Name: ")
            self.mcal1.grid(row=0, column=0, sticky='W')
            self.mcal1.rowconfigure(0,weight=1)
        else:
            self.mcal1.grid()
        
        if not (self.mcae1): 
            self.mcae1 = Entry(self.mc_agt_nl, font=MyFontH2)
            self.mcae1.grid(row=0, column=1, sticky='WE')
            self.mcae1.rowconfigure(0,weight=1)
        else:
            self.mcae1.grid()

        if not (self.mcal2):
            self.mcal2 = Label(self.mc_agt_nl, font=MyFontH2, text="Enter Required Number Of Driver~Sequencer: ")
            self.mcal2.grid(row=1, column=0, sticky='W')
            self.mcal2.rowconfigure(1,weight=1)
        else:
            self.mcal2.grid()
        
        if not (self.mcae2): 
            self.mcae2 = Entry(self.mc_agt_nl, font=MyFontH2)
            self.mcae2.delete(0, END)
            self.mcae2.insert(0, 'Enter no. of drivers,1st driver name,..,nth driver name')
            self.mcae2.bind('<Button-1>', self.mcae2_entry_click)
            self.mcae2.bind('<FocusOut>', self.mc_agt_interface)
            self.mcae2.grid(row=1, column=1, sticky='WE')
            self.mcae2.rowconfigure(1,weight=1)
        else:
            self.mcae2.grid()

        
        if not (self.mcal3):
            self.mcal3 = Label(self.mc_agt_nl, font=MyFontH2, text="Enter Required Number Of Monitor's: ")
            self.mcal3.grid(row=2, column=0, sticky='W')
            self.mcal3.rowconfigure(2,weight=1)
        else:
            self.mcal3.grid()
        
        if not (self.mcae3): 
            self.mcae3 = Entry(self.mc_agt_nl, font=MyFontH2)
            self.mcae3.grid(row=2, column=1, sticky='WE')
            self.mcae3.rowconfigure(2,weight=1)
        else:
            self.mcae3.grid()


        if not (self.mcal4):
            self.mcal4 = Label(self.mc_agt_nl, font=MyFontH2, text="Choose The Type Of Interface: ")
            self.mcal4.grid(row=3, column=0, sticky='W')
            self.mcal4.rowconfigure(3,weight=1)
        else:
            self.mcal4.grid()
        
        self.mc_choose_int_list.clear()
        self.mc_choose_int_val.set("Click Drop-Down For Options")
        #self.mc_choose_int_list = {"Default Interface":1, "User Defined Interface":2, "Load Interface":3}
        self.mc_choose_int_list = {"Default Interface":1, "Load Interface":3}

        if not (self.mcao1):
            self.mcao1 = OptionMenu(self.mc_agt_nl, self.mc_choose_int_val, *self.mc_choose_int_list, command=self.mc_choose_int_cmd_code)
            self.mcao1.configure(width=39, activebackground="gray50", font=MyFontH2)
            menu = self.mcao1.nametowidget(self.mcao1.menuname)
            menu.config(font=MyFontH2, activebackground="gray50") 
            self.mcao1.grid(row=3, column=1, sticky='WE')
            self.mcao1.rowconfigure(3,weight=1)
        else:
            self.mcao1.grid()
        
        
        # Calling the code for return to env menu, prev agt, nxt agt, done agt cfg button code
        self.mc_agt_win_layout_rem_nac_pac_dac_buttons()

    
    def mc_agt_win_layout_rem_nac_pac_dac_buttons(self):
        global mce5_agt_cnt
        global mce5_arr
        
        log.debug("mc_agt_win_layout_rem_nac_pac_dac_buttons: Going to create agt widget buttons\n")
        
        # MC Agent Button Frame Code
        if not (self.mc_agt_button_frame):
            self.mc_agt_button_frame = Frame(self.mc_agt_nl)
            self.mc_agt_button_frame.grid(row=4, column=0, columnspan=2, sticky='WE')
            #self.mc_agt_button_frame.rowconfigure(4,weight=1)
            self.mc_agt_button_frame.columnconfigure(0,weight=1)
        else:
            log.debug("Multi Cluster Agent Widget Frame already Exists\n")
            self.mc_agt_button_frame.grid() 

        # Codes for buttons
        if mce5_agt_cnt == (int(mce5_arr[0])-1) and mce5_agt_cnt == 0:
            if not (self.mc_return_to_env_menu_button): 
                self.mc_return_to_env_menu_button = Button(self.mc_agt_button_frame, font=MyFontBtn, background="royalblue1", activebackground="blue2", text="RETURN TO ENV MENU", command=self.mc_return_to_env_menu_button_code, highlightbackground='black', highlightthickness='2')
                self.mc_return_to_env_menu_button.grid(row=0, column=0, sticky='WE')
                # self.mc_return_to_env_menu_button.rowconfigure(0,weight=1)
            else:
                self.mc_return_to_env_menu_button.grid()
            
            if not (self.mc_done_agt_cfg_button): 
                self.mc_done_agt_cfg_button = Button(self.mc_agt_button_frame, font=MyFontBtn, background="mediumpurple1", activebackground="purple2", text="DONE AGENT CONFIGURATION", command=self.mc_done_agt_cfg_button_code, highlightbackground='black', highlightthickness='2')
                self.mc_done_agt_cfg_button.grid(row=0, column=1, sticky='WE')
                # self.mc_done_agt_cfg_button.rowconfigure(0,weight=1)
            else:
                self.mc_done_agt_cfg_button.grid()
        elif mce5_agt_cnt == (int(mce5_arr[0])-1) and mce5_agt_cnt > 0:
            if not (self.mc_return_to_env_menu_button): 
                self.mc_return_to_env_menu_button = Button(self.mc_agt_button_frame, font=MyFontBtn, background="royalblue1", activebackground="blue2", text="RETURN TO ENV MENU", command=self.mc_return_to_env_menu_button_code, highlightbackground='black', highlightthickness='2')    
                self.mc_return_to_env_menu_button.grid(row=0, column=0, sticky='WE')
                # self.mc_return_to_env_menu_button.rowconfigure(0,weight=1)
            else:
                self.mc_return_to_env_menu_button.grid()
            
            if not (self.mc_prev_agt_cfg_button): 
                self.mc_prev_agt_cfg_button = Button(self.mc_agt_button_frame, font=MyFontBtn, background="PeachPuff2", activebackground="PeachPuff4", text="PREVIOUS AGENT CONFIGURATION", command=self.mc_prev_agt_cfg_button_code, highlightbackground='black', highlightthickness='2')    
                self.mc_prev_agt_cfg_button.grid(row=0, column=1, sticky='WE')
                # self.mc_prev_agt_cfg_button.rowconfigure(0,weight=1)
            else:
                self.mc_prev_agt_cfg_button.grid()
            
            if not (self.mc_done_agt_cfg_button): 
                self.mc_done_agt_cfg_button = Button(self.mc_agt_button_frame, font=MyFontBtn, background="mediumpurple1", activebackground="purple2", text="DONE AGENT CONFIGURATION", command=self.mc_done_agt_cfg_button_code, highlightbackground='black', highlightthickness='2')    
                self.mc_done_agt_cfg_button.grid(row=0, column=2, sticky='WE')
                # self.mc_done_agt_cfg_button.rowconfigure(0,weight=1)
            else:
                self.mc_done_agt_cfg_button.grid()
        elif mce5_agt_cnt < (int(mce5_arr[0])-1) and mce5_agt_cnt == 0:
            if not (self.mc_return_to_env_menu_button): 
                self.mc_return_to_env_menu_button = Button(self.mc_agt_button_frame, font=MyFontBtn, background="royalblue1", activebackground="blue2", text="RETURN TO ENV MENU", command=self.mc_return_to_env_menu_button_code, highlightbackground='black', highlightthickness='2')    
                self.mc_return_to_env_menu_button.grid(row=0, column=0, sticky='WE')
                # self.mc_return_to_env_menu_button.rowconfigure(0,weight=1)
            else:
                self.mc_return_to_env_menu_button.grid()
            
            if not (self.mc_next_agt_cfg_button): 
                self.mc_next_agt_cfg_button = Button(self.mc_agt_button_frame, font=MyFontBtn, background="mediumpurple1", activebackground="purple2", text="NEXT AGENT CONFIGURATION", command=self.mc_next_agt_cfg_button_code, highlightbackground='black', highlightthickness='2')    
                self.mc_next_agt_cfg_button.grid(row=0, column=1, sticky='WE')
                # self.mc_next_agt_cfg_button.rowconfigure(0,weight=1)
            else:
                self.mc_next_agt_cfg_button.grid()
        elif mce5_agt_cnt < (int(mce5_arr[0])-1) and mce5_agt_cnt > 0:
            if not (self.mc_return_to_env_menu_button): 
                self.mc_return_to_env_menu_button = Button(self.mc_agt_button_frame, font=MyFontBtn, background="royalblue1", activebackground="blue2", text="RETURN TO ENV MENU", command=self.mc_return_to_env_menu_button_code, highlightbackground='black', highlightthickness='2')    
                self.mc_return_to_env_menu_button.grid(row=0, column=0, sticky='WE')
                # self.mc_return_to_env_menu_button.rowconfigure(0,weight=1)
            else:
                self.mc_return_to_env_menu_button.grid()
            
            if not (self.mc_prev_agt_cfg_button): 
                self.mc_prev_agt_cfg_button = Button(self.mc_agt_button_frame, font=MyFontBtn, background="PeachPuff2", activebackground="PeachPuff4", text="PREVIOUS AGENT CONFIGURATION", command=self.mc_prev_agt_cfg_button_code, highlightbackground='black', highlightthickness='2')    
                self.mc_prev_agt_cfg_button.grid(row=0, column=1, sticky='WE')
                # self.mc_prev_agt_cfg_button.rowconfigure(0,weight=1)
            else:
                self.mc_prev_agt_cfg_button.grid()
            
            if not (self.mc_next_agt_cfg_button): 
                self.mc_next_agt_cfg_button = Button(self.mc_agt_button_frame, font=MyFontBtn, background="mediumpurple1", activebackground="purple2", text="NEXT AGENT CONFIGURATION", command=self.mc_next_agt_cfg_button_code, highlightbackground='black', highlightthickness='2')    
                self.mc_next_agt_cfg_button.grid(row=0, column=2, sticky='WE')
                # self.mc_next_agt_cfg_button.rowconfigure(0,weight=1)
            else:
                self.mc_next_agt_cfg_button.grid()
    
    
    def mc_agt_win_layout_rem_nac_pac_dac_buttons_forget_cb(self, which_value):
        log.debug("mc_agt_win_layout_rem_nac_pac_dac_buttons_forget_cb: Going to grid_forget for agt widget buttons\n")

        if int(which_value) == 0:
            if (self.mc_return_to_env_menu_button):
                self.mc_return_to_env_menu_button.grid_forget(); self.mc_return_to_env_menu_button = None
       
            if (self.mc_prev_agt_cfg_button):
                self.mc_prev_agt_cfg_button.grid_forget(); self.mc_prev_agt_cfg_button = None

            if (self.mc_next_agt_cfg_button):
                self.mc_next_agt_cfg_button.grid_forget(); self.mc_next_agt_cfg_button =  None

            if (self.mc_done_agt_cfg_button):
                self.mc_done_agt_cfg_button.grid_forget(); self.mc_done_agt_cfg_button =  None

            if (self.mc_agt_button_frame):
                self.mc_agt_button_frame.grid_forget(); self.mc_agt_button_frame = None
        
        elif int(which_value) == 1:
            if (self.mc_return_to_env_menu_button):
                self.mc_return_to_env_menu_button.grid_forget()
       
            if (self.mc_prev_agt_cfg_button):
                self.mc_prev_agt_cfg_button.grid_forget()

            if (self.mc_next_agt_cfg_button):
                self.mc_next_agt_cfg_button.grid_forget()

            if (self.mc_done_agt_cfg_button):
                self.mc_done_agt_cfg_button.grid_forget()

            if (self.mc_agt_button_frame):
                self.mc_agt_button_frame.grid_forget()


    def mc_return_to_env_menu_button_code(self):
        log.debug("Going to mc_return_to_env_menu_button_code Agent Details for Multi Cluster VIP Environment\n")
        mc_agt_cnt_wait.set("1")
        self.mc_agt_widget_forget_cb();

    def mc_next_agt_cfg_button_code(self):
        global mce5_agt_cnt
        log.debug("Going to mc_next_agt_cfg_button_code Agent Details for Multi Cluster VIP Environment\n")
        
        # Loading the Agent configuration into mc_agt_cfg_pool
        self.mc_agt_cfg_pool_load() 
        
        log.debug("mc_next_agt_cfg_button_code: Value of mce5_agt_cnt is %d\n"%mce5_agt_cnt)
       
        # Setting the handshake b/w buttons and the loop for mc_agt_cnt
        mc_agt_cnt_wait.set("2")
        self.mc_agt_widget_forget_cb();
    
    def mc_prev_agt_cfg_button_code(self):
        global mce5_agt_cnt
        log.debug("Going to mc_prev_agt_cfg_button_code Agent Details for Multi Cluster VIP Environment\n")
        
        # Reducing the mce5_agt_cnt count
        mce5_agt_cnt -= 1
        
        log.debug("mc_prev_agt_cfg_button_code: Value of mce5_agt_cnt is %d\n"%mce5_agt_cnt)

        mc_agt_cnt_wait.set("3")
        self.mc_agt_widget_forget_cb();
    
    def mc_done_agt_cfg_button_code(self):
        log.debug("Going to mc_done_agt_cfg_button_code Agent Details for Multi Cluster VIP Environment\n")
        
        # Loading the agt cfg into mc_agt_cfg_pool for final agent
        self.mc_agt_cfg_pool_load()
        
        log.debug("mc_done_agt_cfg_button_code: Value of mce5_agt_cnt is %d\n"%mce5_agt_cnt)

        mc_agt_cnt_wait.set("4")
        self.mc_agt_widget_forget_cb();
  
    def mc_agt_cfg_pool_load(self):
        global mc_agt_find_idx 
        global mce5_agt_cnt
        global mc_agt_cfg_pool_cnt
        log.debug("mc_agt_cfg_pool_load : Going to mc_agt_cfg_pool_load Agent Details for Multi Cluster VIP Environment\n")

        # Code to check if the agent exists in the mc_agt_cfg_pool before loading
        self.mc_agt_cfg_pool_exists() 

        # Code to load up the mc_agt_cfg_pool database
        if mc_agt_find_idx == None:
            # Decoding the agent name and no. of instance
            #mc_agt_name_list = str(self.mcae1.get()).split(",")
            mc_agt_name_list = str(self.mcae1.get()).split(":")
            
            if len(mc_agt_name_list)>1:
                mc_agt_name = mc_agt_name_list[0]
                mc_agt_inst = mc_agt_name_list[1]
            else:
                mc_agt_name = mc_agt_name_list[0]
                mc_agt_inst = ''
            log.debug("mc_agt_cfg_pool_load: Value of mc_agt_name_list %s mc_agt_name %s mc_agt_inst %s\n"%(mc_agt_name_list, mc_agt_name, mc_agt_inst))
    
            # Loading the env-agent name
            mc_agt_cfg_pool[mc_agt_cfg_pool_cnt][0] = self.mce2.get()+','+str(mc_agt_name);
       
            # Loading the agent name
            mc_agt_cfg_pool[mc_agt_cfg_pool_cnt][1] = mc_agt_name; 

            # Loading the Agent N-Instance 
            mc_agt_cfg_pool[mc_agt_cfg_pool_cnt][2] = mc_agt_inst; 

            # Loading the driver~sequencer configuration
            if self.mcae2.get() != '' and self.mcae2.get() != None and self.mcae2.get() != 'Enter no. of drivers,1st driver name,..,nth driver name':
                mc_agt_cfg_pool[mc_agt_cfg_pool_cnt][3] = str(self.mcae2.get()); 
            else:    
                mc_agt_cfg_pool[mc_agt_cfg_pool_cnt][3] = '' 
            
            # Loading the monitor configuration
            if self.mcae3.get() != '' and self.mcae3.get() != None:
                mc_agt_cfg_pool[mc_agt_cfg_pool_cnt][4] = str(self.mcae3.get()); 
            else:    
                mc_agt_cfg_pool[mc_agt_cfg_pool_cnt][4] = '' 

            # Loading the Interface Configuration
            # mc_agt_cfg_pool[mc_agt_cfg_pool_cnt][5] = str(self.mcao1.get()); 
        else:
            log.debug("mc_agt_cfg_pool_load : Agent already exists in mc_agt_cfg_pool. Compare and if different re-load\n")
            mc_agt_cfg_pool_tmp = [[],[],[],[],[],[]];
            log.debug("mc_agt_cfg_pool_load : Value of mc_agt_cfg_pool_tmp %s\n"%mc_agt_cfg_pool_tmp)

            # Decoding the agent name and no. of instance
            #mc_agt_name_list = str(self.mcae1.get()).split(",")
            mc_agt_name_list = str(self.mcae1.get()).split(":")
            
            if len(mc_agt_name_list)>1:
                mc_agt_name = mc_agt_name_list[0]
                mc_agt_inst = mc_agt_name_list[1]
            else:
                mc_agt_name = mc_agt_name_list[0]
                mc_agt_inst = ''
            log.debug("mc_agt_cfg_pool_load: Value of mc_agt_name_list %s mc_agt_name %s mc_agt_inst %s\n"%(mc_agt_name_list, mc_agt_name, mc_agt_inst))
    
            # Loading the env-agent name
            mc_agt_cfg_pool_tmp[0] = self.mce2.get()+','+str(mc_agt_name);
       
            # Loading the agent name
            mc_agt_cfg_pool_tmp[1] = mc_agt_name; 

            # Loading the Agent N-Instance 
            mc_agt_cfg_pool_tmp[2] = mc_agt_inst; 

            # Loading the driver~sequencer configuration
            if self.mcae2.get() != ''and self.mcae2.get() != None  and self.mcae2.get() != 'Enter no. of drivers,1st driver name,..,nth driver name':
                mc_agt_cfg_pool_tmp[3] = str(self.mcae2.get()); 
            else:    
                mc_agt_cfg_pool_tmp[3] = '' 
            
            # Loading the monitor configuration
            if self.mcae3.get() != '' and self.mcae3.get() != None:
                mc_agt_cfg_pool_tmp[4] = str(self.mcae3.get()); 
            else:    
                mc_agt_cfg_pool_tmp[4] = '' 

            # Loading the Interface Configuration
            
            # Code to check if the particular agent with env_setup is already available in the mc_agt_cfg_pool 
            mc_agt_find_idx_prev_tmp = self.find_index(mc_agt_cfg_pool_tmp[0], mc_agt_cfg_pool_prev) 
            log.debug("mc_agt_cfg_pool_load : Value of mc_agt_find_idx_prev_tmp %s, mc_agt_cfg_pool_prev %s\n"%(mc_agt_find_idx_prev_tmp, mc_agt_cfg_pool_prev))

            if mc_agt_find_idx_prev_tmp != None:
                mc_agt_find_idx_prev = int(mc_agt_find_idx_prev_tmp[0])
            else:
                mc_agt_find_idx_prev = mc_agt_find_idx_prev_tmp
            log.debug("mc_agt_cfg_pool_load : Value of mc_agt_find_idx_prev_tmp %s mc_agt_find_idx_prev %s"%(mc_agt_find_idx_prev_tmp, mc_agt_find_idx_prev))
           
            if mc_agt_find_idx_prev != None:
                mc_agt_cfg_pool_tmp[5] = mc_agt_cfg_pool_prev[mc_agt_find_idx_prev][5] 
                
            log.debug("mc_agt_cfg_pool_load : mc_agt_cfg_pool[%d] %s, mc_agt_cfg_pool_tmp %s"%(mc_agt_find_idx, mc_agt_cfg_pool[mc_agt_find_idx], mc_agt_cfg_pool_tmp))

            if mc_agt_cfg_pool[mc_agt_find_idx] != mc_agt_cfg_pool_tmp:
                log.debug("mc_agt_cfg_pool_load : mc_agt_cfg_pool[mc_agt_find_idx] != mc_agt_cfg_pool_tmp. Re-loading the pool\n")
                mc_agt_cfg_pool[mc_agt_find_idx] = mc_agt_cfg_pool_tmp    
            else:
                log.debug("mc_agt_cfg_pool_load : mc_agt_cfg_pool[mc_agt_find_idx] == mc_agt_cfg_pool_tmp. Not Re-loading the pool\n")


    def mc_agt_interface(self, *args):
        global mcae2_drv_cnt_max 
        global mcae2_drv_cnt 
        global mcae2_arr
        global mcae2_drv_name 
        global mcae2_drv_intf_type 
        global mc_agt_find_idx   
        global mc_agt_drv_intf_find_idx

        # Finding the agent name which will be used for driver name
        #mc_agt_name_list = str(self.mcae1.get()).split(",")
        mc_agt_name_list = str(self.mcae1.get()).split(":")
        
        mc_agt_name = mc_agt_name_list[0]
        log.debug("mc_agt_interface : Value of mc_agt_name_list %s, mc_agt_name = %s\n"%(mc_agt_name_list, mc_agt_name))
       
        # Setting default values 
        mcae2_drv_cnt = 0

        # Decode the driver~sequencer entry widget
        if self.mcae2.get() != '' and self.mcae2.get() != None and self.mcae2.get() != 'Enter no. of drivers,1st driver name,..,nth driver name':
            mcae2_arr =  str(self.mcae2.get()).split(",")
            log.debug("mc_agt_interface : Value of mcae2_arr %s, len(mcae2_arr) %d\n"%(mcae2_arr, len(mcae2_arr)))
        else:
            mcae2_arr = ''

        # Max drv cnt set 
        log.debug("mc_agt_interface : self.mcae2 %s, mcae2_arr %s\n"%(self.mcae2.get(), mcae2_arr))
        if mcae2_arr != '':
            # if (len(mcae2_arr) == 1) and (int(mcae2_arr[0]) == 1):
            # WATCHOUT : Modifying to fix __c or __s if its 1 driver with agent name as driver name : 030820|SUN
            if ((len(mcae2_arr) == 1) and ((int(mcae2_arr[0]) == 1) or (mcae2_arr[0] == "1__c") or (mcae2_arr[0] == "1__s"))):
                mcae2_drv_name = mc_agt_name 
                # mcae2_drv_cnt_max = int(mcae2_arr[0]) 
                mcae2_drv_cnt_max = 1 
            else:
                mcae2_drv_cnt_max = int(mcae2_arr[0]) 
                mcae2_drv_name = mcae2_arr[mcae2_drv_cnt+1] 
            log.debug("mc_agt_interface : Value of mcae2_drv_name %s, mcae2_drv_cnt_max %d, mcae2_drv_cnt %d\n"%(mcae2_drv_name, mcae2_drv_cnt_max, mcae2_drv_cnt))


            # Temporary Try FIXIT : Note : Also need to launch when mc_agt_find_idx is set
            # if mc_agt_cnt_wait.get() == 3:
            if mc_agt_find_idx != None:
                # Element to be searched
                mc_agt_drv_intf_find_ele = self.mce2.get()+','+str(mce5_arr[mce5_agt_cnt+1])+','+mcae2_drv_name
                log.debug("mc_agt_interface : Value of mc_agt_drv_intf_find_ele %s mc_agt_drv_intf_cfg_pool %s"%(mc_agt_drv_intf_find_ele, mc_agt_drv_intf_cfg_pool))

                # Code to check if the particular agent with env_setup is already available in the mc_agt_cfg_pool 
                mc_agt_drv_intf_find_idx_tmp = self.find_index(mc_agt_drv_intf_find_ele, mc_agt_drv_intf_cfg_pool) 
                log.debug("mc_agt_interface : Value of mc_agt_drv_intf_find_idx_tmp %s\n"%mc_agt_drv_intf_find_idx_tmp)
                
                if mc_agt_drv_intf_find_idx_tmp != None:
                    mc_agt_drv_intf_find_idx = int(mc_agt_drv_intf_find_idx_tmp[0])
                else:
                    mc_agt_drv_intf_find_idx = mc_agt_drv_intf_find_idx_tmp
                log.debug("mc_agt_interface : Value of mc_agt_drv_intf_find_idx_tmp %s mc_agt_drv_intf_find_idx %s\n"%(mc_agt_drv_intf_find_idx_tmp, mc_agt_drv_intf_find_idx))
            
                # MC Agt Drv Interface Type  
                if mc_agt_drv_intf_find_idx != None:
                    mcae2_drv_intf_type = mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_find_idx][2] 
                else:
                    mcae2_drv_intf_type = 0
                log.debug("mc_agt_interface : Value of mcae2_drv_intf_type %s, mcae2_drv_cnt_max %d, mcae2_drv_cnt %d\n"%(mcae2_drv_intf_type, mcae2_drv_cnt_max, mcae2_drv_cnt))

            # Code for creating the new interface label and dropdown option widgets 
            # if mc_agt_cnt_wait.get() == 3:
            if mc_agt_find_idx != None:
                self.mc_agt_drv_intf_label_dd_option(mcae2_drv_intf_type)
            else:
                self.mc_agt_drv_intf_label_dd_option(0)

            # Going to forget the agt widget buttons 
            self.mc_agt_win_layout_rem_nac_pac_dac_buttons_forget_cb(1)

            # Going to create the agt drv intf widget buttons
            self.mc_agt_drv_intf_rem_pic_sic_buttons_cb()
       
        # NOTE: 110419|MON : its a try method to check if can go to nxt agt instead of saving n going in parse spreadsheet mode
        # if mcv.get() == 1:
        #     self.mc_agt_drv_intf_rem_pic_sic_buttons_cb()
        # elif mcv.get() == 2:
        #     self.mc_agt_drv_intf_rem_pic_sic_buttons_forget_cb(0)
        #     self.mc_agt_win_layout_rem_nac_pac_dac_buttons()


    def mc_agt_drv_intf_label_dd_option(self, which_value):
        global mcae2_drv_name 
        global mcae2_drv_cnt 
        global mcae2_drv_cnt_max 
        global mc_agt_drv_intf_cfg_pool_cnt
        global mcae2_arr
        global mcae2_drv_intf_type 
        global mc_agt_find_idx   
        global mc_agt_drv_intf_find_idx


        log.debug("mc_agt_drv_intf_label_dd_option: Going to create agt driver intf label dropdown option widgets\n")
        log.debug("mc_agt_drv_intf_label_dd_option: Value of which_value %s, mcae2_drv_name %s, mcae2_drv_cnt %s, mcae2_drv_cnt_max %s, mc_agt_drv_intf_cfg_pool_cnt %s\n"%(which_value, mcae2_drv_name, mcae2_drv_cnt, mcae2_drv_cnt_max, mc_agt_drv_intf_cfg_pool_cnt))

        # Remove any mcal4 - interface label if any exists
        if (self.mcal4):
            self.mcal4.grid_forget();  self.mcal4 = None 
       
        self.mcal4 = Label(self.mc_agt_nl, font=MyFontH2, text="Choose The Type Of Interface For %s Driver: "%(mcae2_drv_name))
        self.mcal4.grid(row=3, column=0, sticky='W')
        self.mcal4.rowconfigure(3,weight=1)
        
        self.mc_choose_int_list.clear()
        
        if int(which_value) == 0:
            self.mc_choose_int_val.set("Click Drop-Down For Options")
        elif int(which_value) == 1:
            self.mc_choose_int_val.set("Default Interface")
        #elif int(which_value) == 2:
        #    self.mc_choose_int_val.set("User Defined Interface")
        elif int(which_value) == 3:
            self.mc_choose_int_val.set("Load Interface")
        
        # self.mc_choose_int_list = {"Default Interface":1, "User Defined Interface":2, "Load Interface":3}
        self.mc_choose_int_list = {"Default Interface":1, "Load Interface":3}
        
        if (self.mcao1):
            self.mcao1.grid_forget(); self.mcao1 = None

        # if not (self.mcao1):
            log.debug("mc_agt_drv_intf_label_dd_option : Value of which_value %s self.mc_choose_int_val %s\n"%(which_value, self.mc_choose_int_val.get()))
            self.mcao1 = OptionMenu(self.mc_agt_nl, self.mc_choose_int_val, *self.mc_choose_int_list, command=self.mc_choose_int_cmd_code)
            self.mcao1.configure(width=39, activebackground="gray50", font=MyFontH2)
            menu = self.mcao1.nametowidget(self.mcao1.menuname)
            menu.config(font=MyFontH2, activebackground="gray50") 
            self.mcao1.grid(row=3, column=1, sticky='WE')
            self.mcao1.rowconfigure(3,weight=1)
        # else:
        #     self.mcao1.grid()


    def mc_agt_drv_intf_rem_pic_sic_buttons_cb(self):
        global mcae2_arr 
        global mcae2_drv_cnt
        global mcae2_drv_cnt_max
        
        log.debug("mc_agt_drv_intf_rem_pic_sic_buttons_cb: Going to create agt driver intf widget buttons\n")
        
        # Code to close the agt drv intf buttons
        self.mc_agt_drv_intf_rem_pic_sic_buttons_forget_cb(0)
        
        # MC Agent Button Frame Code
        if not (self.mc_agt_drv_intf_button_frame):
            self.mc_agt_drv_intf_button_frame = Frame(self.mc_agt_nl)
            self.mc_agt_drv_intf_button_frame.grid(row=4, column=0, columnspan=2, sticky='WE')
            #self.mc_agt_drv_intf_button_frame.rowconfigure(4,weight=1)
            self.mc_agt_drv_intf_button_frame.columnconfigure(0,weight=1)
        else:
            log.debug("mc_agt_drv_intf_rem_pic_sic_buttons_cb: Multi Cluster Agent Driver Intf Widget Frame already Exists\n")
            self.mc_agt_drv_intf_button_frame.grid() 

        # Codes for buttons
        if (mcae2_drv_cnt == 0) and (mcae2_drv_cnt == (mcae2_drv_cnt_max-1)):
            if (self.mc_agt_drv_intf_return_to_env_menu_button): 
                self.mc_agt_drv_intf_return_to_env_menu_button.grid_forget(); self.mc_agt_drv_intf_return_to_env_menu_button = None

            self.mc_agt_drv_intf_return_to_env_menu_button = Button(self.mc_agt_drv_intf_button_frame, font=MyFontBtn, background="royalblue1", activebackground="blue2", text="RETURN TO ENV MENU", command=self.mc_agt_drv_intf_return_to_env_menu_button_code, highlightbackground='black', highlightthickness='2')
            self.mc_agt_drv_intf_return_to_env_menu_button.grid(row=0, column=0, sticky='WE')
            # self.mc_agt_drv_intf_return_to_env_menu_button.rowconfigure(0,weight=1)
            # else:
            #     self.mc_agt_drv_intf_return_to_env_menu_button.grid()
            
            if (self.mc_agt_drv_intf_save_cfg_button): 
                self.mc_agt_drv_intf_save_cfg_button.grid_forget(); self.mc_agt_drv_intf_save_cfg_button = None
            
            self.mc_agt_drv_intf_save_cfg_button = Button(self.mc_agt_drv_intf_button_frame, font=MyFontBtn, background="goldenrod1", activebackground="goldenrod3", text="SAVE INTF CONFIG", command=self.mc_agt_drv_intf_save_cfg_button_code, highlightbackground='black', highlightthickness='2')
            self.mc_agt_drv_intf_save_cfg_button.grid(row=0, column=1, sticky='WE')
            # self.mc_agt_drv_intf_save_cfg_button.rowconfigure(0,weight=1)
            # else:
            #     self.mc_agt_drv_intf_save_cfg_button.grid()
        elif (mcae2_drv_cnt == 0) and (mcae2_drv_cnt < (mcae2_drv_cnt_max-1)):
            if (self.mc_agt_drv_intf_return_to_env_menu_button): 
                self.mc_agt_drv_intf_return_to_env_menu_button.grid_forget(); self.mc_agt_drv_intf_return_to_env_menu_button = None

            self.mc_agt_drv_intf_return_to_env_menu_button = Button(self.mc_agt_drv_intf_button_frame, font=MyFontBtn, background="royalblue1", activebackground="blue2", text="RETURN TO ENV MENU", command=self.mc_agt_drv_intf_return_to_env_menu_button_code, highlightbackground='black', highlightthickness='2')
            self.mc_agt_drv_intf_return_to_env_menu_button.grid(row=0, column=0, sticky='WE')
            # self.mc_agt_drv_intf_return_to_env_menu_button.rowconfigure(0,weight=1)
            # else:
            #     self.mc_agt_drv_intf_return_to_env_menu_button.grid()
            
            if (self.mc_agt_drv_intf_next_cfg_button): 
                self.mc_agt_drv_intf_next_cfg_button.grid_forget(); self.mc_agt_drv_intf_next_cfg_button = None
            
            self.mc_agt_drv_intf_next_cfg_button = Button(self.mc_agt_drv_intf_button_frame, font=MyFontBtn, background="goldenrod1", activebackground="goldenrod3", text="NEXT INTF CONFIG", command=self.mc_agt_drv_intf_final_after_int_cmd, highlightbackground='black', highlightthickness='2')
            self.mc_agt_drv_intf_next_cfg_button.grid(row=0, column=1, sticky='WE')
            # self.mc_agt_drv_intf_next_cfg_button.rowconfigure(0,weight=1)
            # else:
            #     self.mc_agt_drv_intf_next_cfg_button.grid()
        elif (mcae2_drv_cnt > 0) and (mcae2_drv_cnt < (mcae2_drv_cnt_max-1)):
            if (self.mc_agt_drv_intf_return_to_env_menu_button): 
                self.mc_agt_drv_intf_return_to_env_menu_button.grid_forget(); self.mc_agt_drv_intf_return_to_env_menu_button = None

            self.mc_agt_drv_intf_return_to_env_menu_button = Button(self.mc_agt_drv_intf_button_frame, font=MyFontBtn, background="royalblue1", activebackground="blue2", text="RETURN TO ENV MENU", command=self.mc_agt_drv_intf_return_to_env_menu_button_code, highlightbackground='black', highlightthickness='2')
            self.mc_agt_drv_intf_return_to_env_menu_button.grid(row=0, column=0, sticky='WE')
            # self.mc_agt_drv_intf_return_to_env_menu_button.rowconfigure(0,weight=1)
            # else:
            #     self.mc_agt_drv_intf_return_to_env_menu_button.grid()
            
            if (self.mc_agt_drv_intf_prev_cfg_button): 
                self.mc_agt_drv_intf_prev_cfg_button.grid_forget(); self.mc_agt_drv_intf_prev_cfg_button = None
            
            self.mc_agt_drv_intf_prev_cfg_button = Button(self.mc_agt_drv_intf_button_frame, font=MyFontBtn, background="PeachPuff2", activebackground="PeachPuff4", text="PREVIOUS INTF CONFIG", command=self.mc_agt_drv_intf_prev_cfg_button_code, highlightbackground='black', highlightthickness='2')
            self.mc_agt_drv_intf_prev_cfg_button.grid(row=0, column=1, sticky='WE')
            # self.mc_agt_drv_intf_prev_cfg_button.rowconfigure(0,weight=1)
            # else:
            #     self.mc_agt_drv_intf_prev_cfg_button.grid()
            
            if (self.mc_agt_drv_intf_next_cfg_button): 
                self.mc_agt_drv_intf_next_cfg_button.grid_forget(); self.mc_agt_drv_intf_next_cfg_button = None
            
            self.mc_agt_drv_intf_next_cfg_button = Button(self.mc_agt_drv_intf_button_frame, font=MyFontBtn, background="goldenrod1", activebackground="goldenrod3", text="NEXT INTF CONFIG", command=self.mc_agt_drv_intf_final_after_int_cmd, highlightbackground='black', highlightthickness='2')
            self.mc_agt_drv_intf_next_cfg_button.grid(row=0, column=2, sticky='WE')
            # self.mc_agt_drv_intf_next_cfg_button.rowconfigure(0,weight=1)
            # else:
            #     self.mc_agt_drv_intf_next_cfg_button.grid()
        elif (mcae2_drv_cnt > 0) and (mcae2_drv_cnt == (mcae2_drv_cnt_max-1)):
            if (self.mc_agt_drv_intf_return_to_env_menu_button): 
                self.mc_agt_drv_intf_return_to_env_menu_button.grid_forget(); self.mc_agt_drv_intf_return_to_env_menu_button = None

            self.mc_agt_drv_intf_return_to_env_menu_button = Button(self.mc_agt_drv_intf_button_frame, font=MyFontBtn, background="royalblue1", activebackground="blue2", text="RETURN TO ENV MENU", command=self.mc_agt_drv_intf_return_to_env_menu_button_code, highlightbackground='black', highlightthickness='2')
            self.mc_agt_drv_intf_return_to_env_menu_button.grid(row=0, column=0, sticky='WE')
            # self.mc_agt_drv_intf_return_to_env_menu_button.rowconfigure(0,weight=1)
            # else:
            #     self.mc_agt_drv_intf_return_to_env_menu_button.grid()
            
            if (self.mc_agt_drv_intf_prev_cfg_button): 
                self.mc_agt_drv_intf_prev_cfg_button.grid_forget(); self.mc_agt_drv_intf_prev_cfg_button = None
            
            self.mc_agt_drv_intf_prev_cfg_button = Button(self.mc_agt_drv_intf_button_frame, font=MyFontBtn, background="PeachPuff2", activebackground="PeachPuff4", text="PREVIOUS INTF CONFIG", command=self.mc_agt_drv_intf_prev_cfg_button_code, highlightbackground='black', highlightthickness='2')
            self.mc_agt_drv_intf_prev_cfg_button.grid(row=0, column=1, sticky='WE')
            # self.mc_agt_drv_intf_prev_cfg_button.rowconfigure(0,weight=1)
            # else:
            #     self.mc_agt_drv_intf_prev_cfg_button.grid()
            
            if (self.mc_agt_drv_intf_save_cfg_button): 
                self.mc_agt_drv_intf_save_cfg_button.grid_forget(); self.mc_agt_drv_intf_save_cfg_button = None
            
            self.mc_agt_drv_intf_save_cfg_button = Button(self.mc_agt_drv_intf_button_frame, font=MyFontBtn, background="goldenrod1", activebackground="goldenrod3", text="SAVE INTF CONFIG", command=self.mc_agt_drv_intf_save_cfg_button_code, highlightbackground='black', highlightthickness='2')
            self.mc_agt_drv_intf_save_cfg_button.grid(row=0, column=2, sticky='WE')
            # self.mc_agt_drv_intf_save_cfg_button.rowconfigure(0,weight=1)
            # else:
            #     self.mc_agt_drv_intf_save_cfg_button.grid()


    def mc_agt_drv_intf_return_to_env_menu_button_code(self):
        log.debug("mc_agt_drv_intf_return_to_env_menu_button_code: Returning to Env Configuration without saving any info for agt drv interface\n")
        self.mc_agt_widget_forget_cb();
    
    def mc_agt_drv_intf_prev_cfg_button_code(self):
        global mcae2_drv_cnt 
        global mcae2_drv_name 
        global mcae2_drv_intf_type 
        global mcae2_drv_cnt_max 
        global mc_agt_drv_intf_cfg_pool_cnt
        global mcae2_arr
        global mc_agt_find_idx   
        global mc_agt_drv_intf_find_idx

        
        log.debug("mc_agt_drv_intf_prev_cfg_button_code: Going to Previous state of agt drv intf configuration\n")
        
        # Reducing the mce5_agt_cnt count
        mcae2_drv_cnt -= 1
        
        # CHeck if already the env,agt,drv interface exists
        self.mc_agt_drv_intf_cfg_pool_exists()
            
        # MC Agt Drv Name  
        log.debug("mc_agt_interface : Value of mcae2_drv_name %s, mcae2_drv_cnt_max %d, mcae2_drv_cnt %d\n"%(mcae2_drv_name, mcae2_drv_cnt_max, mcae2_drv_cnt))
        mcae2_drv_name = mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_find_idx][1] 
        log.debug("mc_agt_interface : Value of mcae2_drv_name %s, mcae2_drv_cnt_max %d, mcae2_drv_cnt %d\n"%(mcae2_drv_name, mcae2_drv_cnt_max, mcae2_drv_cnt))
        
        # MC Agt Drv Interface Type  
        mcae2_drv_intf_type = int(mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_find_idx][2]) 
        log.debug("mc_agt_interface : Value of mcae2_drv_intf_type %d, mcae2_drv_cnt_max %d, mcae2_drv_cnt %d\n"%(int(mcae2_drv_intf_type), mcae2_drv_cnt_max, mcae2_drv_cnt))
        
        # Remove any mcal4 - interface label if any exists
        self.mc_agt_drv_intf_label_dd_option(mcae2_drv_intf_type)

        # Going to forget the agt widget buttons 
        self.mc_agt_win_layout_rem_nac_pac_dac_buttons_forget_cb(1)

        # Going to create the agt drv intf widget buttons
        self.mc_agt_drv_intf_rem_pic_sic_buttons_cb()

    
    def mc_agt_drv_intf_save_cfg_button_code(self):
        global mcae2_arr 
        global mce5_agt_cnt
        global mce5_arr
        global mc_agt_cfg_pool
        global mc_agt_find_idx 
        global mc_agt_cfg_pool_cnt
        global mcae2_drv_cnt 
        global mcae2_drv_name 
        global mcae2_drv_intf_type 
        global mcae2_drv_cnt_max 
        global mc_agt_drv_intf_cfg_pool_cnt
        global mcae2_arr
        global mc_agt_drv_intf_find_idx
        
        log.debug("mc_agt_drv_intf_save_cfg_button_code: Going to Save the agt drv intf configuration into mc_agt_drv_intf_cfg_pool\n")
    
        # Local Variable 
        agt_drv_intf_cnt = 0

        # Cleaning up the interface entry if any exists before saving the agent interface configurations
        if mc_agt_find_idx != None:
            log.debug("mc_agt_drv_intf_save_cfg_button_code: Before CLearning the mc_agt_find_idx = %d, mc_agt_cfg_pool = %s, mc_agt_cfg_pool_prev %s\n"%(mc_agt_find_idx, mc_agt_cfg_pool, mc_agt_cfg_pool_prev))
            if len(mc_agt_cfg_pool[mc_agt_find_idx])>5:
                if mc_agt_cfg_pool[mc_agt_find_idx][5] != []:
                    mc_agt_cfg_pool_prev.append(mc_agt_cfg_pool[mc_agt_find_idx])
                    del mc_agt_cfg_pool[mc_agt_find_idx][5][:]
                log.debug("mc_agt_drv_intf_save_cfg_button_code: After CLearning the mc_agt_find_idx = %d, mc_agt_cfg_pool = %s, mc_agt_cfg_pool_prev = %s\n"%(mc_agt_find_idx, mc_agt_cfg_pool, mc_agt_cfg_pool_prev))
        else:
            log.debug("mc_agt_drv_intf_save_cfg_button_code: Before CLearning the mc_agt_cfg_pool_cnt = %d, mc_agt_cfg_pool = %s, mc_agt_cfg_pool_prev = %s\n"%(mc_agt_cfg_pool_cnt, mc_agt_cfg_pool, mc_agt_cfg_pool_prev))
            if len(mc_agt_cfg_pool[mc_agt_cfg_pool_cnt])>5:
                if mc_agt_cfg_pool[mc_agt_cfg_pool_cnt][5] != []:
                    mc_agt_cfg_pool_prev.append(mc_agt_cfg_pool[mc_agt_cfg_pool_cnt])
                    del mc_agt_cfg_pool[mc_agt_cfg_pool_cnt][5][:]
                log.debug("mc_agt_drv_intf_save_cfg_button_code: After CLearning the mc_agt_cfg_pool_cnt = %d, mc_agt_cfg_pool = %s, mc_agt_cfg_pool_prev = %s\n"%(mc_agt_cfg_pool_cnt, mc_agt_cfg_pool, mc_agt_cfg_pool_prev))


        # Finding the agent name which will be used for driver name
        #mc_agt_name_list = str(self.mcae1.get()).split(",")
        mc_agt_name_list = str(self.mcae1.get()).split(":")
        
        mc_agt_name = mc_agt_name_list[0]

        if len(mcae2_arr)>1:
            while agt_drv_intf_cnt < int(mcae2_arr[0]): 
                # Finding the driver name 
                if (len(mcae2_arr) == 1) and (int(mcae2_arr[0]) == 1):
                    mcae2_drv_name = mc_agt_name 
                else:
                    mcae2_drv_name = mcae2_arr[agt_drv_intf_cnt+1] 
                log.debug("mc_agt_drv_intf_cfg_pool_exists : Value of mcae2_drv_name %s, mcae2_drv_cnt_max %d, agt_drv_intf_cnt %d, mcae2_arr %s\n"%(mcae2_drv_name, mcae2_drv_cnt_max, agt_drv_intf_cnt, mcae2_arr))

                # Element to be searched
                mc_agt_drv_intf_find_ele = self.mce2.get()+','+str(mce5_arr[mce5_agt_cnt+1])+','+mcae2_drv_name
                log.debug("mc_agt_drv_intf_save_cfg_button_code : Value of mc_agt_drv_intf_find_ele %s mc_agt_drv_intf_cfg_pool %s"%(mc_agt_drv_intf_find_ele, mc_agt_drv_intf_cfg_pool))

                # Code to check if the particular agent with env_setup is already available in the mc_agt_cfg_pool 
                mc_agt_drv_intf_find_idx_tmp = self.find_index(mc_agt_drv_intf_find_ele, mc_agt_drv_intf_cfg_pool) 
                log.debug("mc_agt_drv_intf_save_cfg_button_code : Value of mc_agt_drv_intf_find_idx_tmp %s\n"%mc_agt_drv_intf_find_idx_tmp)

                if mc_agt_drv_intf_find_idx_tmp != None:
                    mc_agt_drv_intf_find_idx = int(mc_agt_drv_intf_find_idx_tmp[0])
                else:
                    mc_agt_drv_intf_find_idx = mc_agt_drv_intf_find_idx_tmp
                log.debug("mc_agt_drv_intf_save_cfg_button_code : Value of mc_agt_drv_intf_find_idx_tmp %s mc_agt_drv_intf_find_idx %s"%(mc_agt_drv_intf_find_idx_tmp, mc_agt_drv_intf_find_idx))
                log.debug("mc_agt_drv_intf_save_cfg_button_code : Value of mc_agt_drv_intf_cfg_pool = %s"%(mc_agt_drv_intf_cfg_pool))

                if mc_agt_drv_intf_find_idx != None: 
                    if mc_agt_find_idx != None:
                        log.debug("mc_agt_drv_intf_save_cfg_button_code : Value of mc_agt_find_idx %d mc_agt_cfg_pool %s"%(mc_agt_find_idx, mc_agt_cfg_pool))
                        # Loading the Value of interface variables from mc_agt_drv_intf_cfg_pool to mc_agt_cfg_pool
                        mc_agt_cfg_pool[mc_agt_find_idx][5].append(mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_find_idx])
                        log.debug("mc_agt_drv_intf_save_cfg_button_code : Value of mc_agt_cfg_pool[%d][5] = %s"%(int(mc_agt_find_idx), mc_agt_cfg_pool[mc_agt_find_idx][5]))
                    else:
                        log.debug("mc_agt_drv_intf_save_cfg_button_code : Value of mc_agt_cfg_pool_cnt %d mc_agt_cfg_pool %s"%(mc_agt_cfg_pool_cnt, mc_agt_cfg_pool))
                        # Loading the Value of interface variables from mc_agt_drv_intf_cfg_pool to mc_agt_cfg_pool
                        mc_agt_cfg_pool[mc_agt_cfg_pool_cnt][5].append(mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_find_idx])
                        log.debug("mc_agt_drv_intf_save_cfg_button_code : Value of mc_agt_cfg_pool[%d][5] = %s"%(int(mc_agt_cfg_pool_cnt), mc_agt_cfg_pool[mc_agt_cfg_pool_cnt][5]))

                # Incremnting Local Variabel value
                agt_drv_intf_cnt += 1

                log.debug("mc_agt_drv_intf_save_cfg_button_code : Value of mc_agt_cfg_pool %s"%(mc_agt_cfg_pool))
        else:
            # Finding the driver name 
            # if (len(mcae2_arr) == 1) and (int(mcae2_arr[0]) == 1):
            # WATCHOUT : Modifying to fix __c or __s if its 1 driver with agent name as driver name : 030820|SUN
            if ((len(mcae2_arr) == 1) and ((int(mcae2_arr[0]) == 1) or (mcae2_arr[0] == "1__c") or (mcae2_arr[0] == "1__s"))):
                mcae2_drv_name = mc_agt_name 

            # Element to be searched
            mc_agt_drv_intf_find_ele = self.mce2.get()+','+str(mce5_arr[mce5_agt_cnt+1])+','+mcae2_drv_name
            log.debug("mc_agt_drv_intf_save_cfg_button_code : Value of mc_agt_drv_intf_find_ele %s mc_agt_drv_intf_cfg_pool %s"%(mc_agt_drv_intf_find_ele, mc_agt_drv_intf_cfg_pool))

            # Code to check if the particular agent with env_setup is already available in the mc_agt_cfg_pool 
            mc_agt_drv_intf_find_idx_tmp = self.find_index(mc_agt_drv_intf_find_ele, mc_agt_drv_intf_cfg_pool) 
            log.debug("mc_agt_drv_intf_save_cfg_button_code : Value of mc_agt_drv_intf_find_idx_tmp %s\n"%mc_agt_drv_intf_find_idx_tmp)

            if mc_agt_drv_intf_find_idx_tmp != None:
                mc_agt_drv_intf_find_idx = int(mc_agt_drv_intf_find_idx_tmp[0])
            else:
                mc_agt_drv_intf_find_idx = mc_agt_drv_intf_find_idx_tmp
            log.debug("mc_agt_drv_intf_save_cfg_button_code : Value of mc_agt_drv_intf_find_idx_tmp %s mc_agt_drv_intf_find_idx %s"%(mc_agt_drv_intf_find_idx_tmp, mc_agt_drv_intf_find_idx))
            log.debug("mc_agt_drv_intf_save_cfg_button_code : Value of mc_agt_drv_intf_cfg_pool = %s"%(mc_agt_drv_intf_cfg_pool))

            if mc_agt_drv_intf_find_idx != None: 
                if mc_agt_find_idx != None:
                    log.debug("mc_agt_drv_intf_save_cfg_button_code : Value of mc_agt_find_idx %d mc_agt_cfg_pool %s"%(mc_agt_find_idx, mc_agt_cfg_pool))
                    # Loading the Value of interface variables from mc_agt_drv_intf_cfg_pool to mc_agt_cfg_pool
                    mc_agt_cfg_pool[mc_agt_find_idx][5].append(mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_find_idx])
                    log.debug("mc_agt_drv_intf_save_cfg_button_code : Value of mc_agt_cfg_pool[%d][5] = %s"%(int(mc_agt_find_idx), mc_agt_cfg_pool[mc_agt_find_idx][5]))
                else:
                    log.debug("mc_agt_drv_intf_save_cfg_button_code : Value of mc_agt_cfg_pool_cnt %d mc_agt_cfg_pool %s"%(mc_agt_cfg_pool_cnt, mc_agt_cfg_pool))
                    # Loading the Value of interface variables from mc_agt_drv_intf_cfg_pool to mc_agt_cfg_pool
                    mc_agt_cfg_pool[mc_agt_cfg_pool_cnt][5].append(mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_find_idx])
                    log.debug("mc_agt_drv_intf_save_cfg_button_code : Value of mc_agt_cfg_pool[%d][5] = %s"%(int(mc_agt_cfg_pool_cnt), mc_agt_cfg_pool[mc_agt_cfg_pool_cnt][5]))

            log.debug("mc_agt_drv_intf_save_cfg_button_code : Value of mc_agt_cfg_pool %s"%(mc_agt_cfg_pool)) 


        # Code to close the agt drv intf buttons
        self.mc_agt_drv_intf_rem_pic_sic_buttons_forget_cb(0)
        
        # Going to forget the agt widget buttons 
        self.mc_agt_win_layout_rem_nac_pac_dac_buttons_forget_cb(0)
        
        # Calling the code for return to env menu, prev agt, nxt agt, done agt cfg button code
        self.mc_agt_win_layout_rem_nac_pac_dac_buttons()
   

    def mc_choose_int_cmd_code(self, *args):
        global mc_agt_drv_intf_cfg_pool_cnt
        global mc_agt_drv_intf_cfg_pool
        global mc_agt_drv_intf_find_idx
        global mcae2_drv_cnt
        global mcae2_drv_cnt_max
        global mcae2_drv_name
        global mcae2_drv_intf_type
        global mc_intf_arr_range
        global mcae2_arr 
        global mce5_agt_cnt
        global mce5_arr
        global mc_agt_cfg_pool
        global mc_agt_find_idx 
        global mc_agt_cfg_pool_cnt
        global mc_agt_drv_intf_find_idx
        
        log.debug("mc_choose_int_cmd_code: Launched when the interface dropdown option is choosen\n")

        # CHeck if already the env,agt,drv interface exists
        self.mc_agt_drv_intf_cfg_pool_exists()
                
        # Check if any dummy agt drv intf pool exists, if not then create a new entry
        if mc_agt_drv_intf_find_idx == None:
            if self.find_index(mc_agt_drv_intf_cfg_pool_dummy, mc_agt_drv_intf_cfg_pool) == None: 
                # Creating default entry for agent
                mc_agt_drv_intf_cfg_pool.append([[] for x in range(mc_intf_arr_range)])
                
                # Incremnting the count as well : TRY
                mc_agt_drv_intf_cfg_pool_cnt = (self.find_index(mc_agt_drv_intf_cfg_pool_dummy, mc_agt_drv_intf_cfg_pool))[0];
                log.debug("mc_choose_int_cmd_code: mc_agt_drv_intf_cfg_pool_cnt %d\n"% mc_agt_drv_intf_cfg_pool_cnt)
        
        log.debug("mc_choose_int_cmd_code: Value of mc_agt_drv_intf_cfg_pool %s\n"%mc_agt_drv_intf_cfg_pool)

        if self.mc_choose_int_list.get(self.mc_choose_int_val.get())==1:
            log.debug("mc_choose_int_cmd_code: Launching mc_default_interface\n")
            self.mc_default_interface()    
        elif self.mc_choose_int_list.get(self.mc_choose_int_val.get())==2:
            log.debug("mc_choose_int_cmd_code: Launching mc_user_defined_interface\n")
            self.mc_user_defined_interface() 
        elif self.mc_choose_int_list.get(self.mc_choose_int_val.get())==3:
            log.debug("mc_choose_int_cmd_code: Launching mc_load_interface\n")
            self.mc_load_interface() 
      

    def mc_agt_drv_intf_final_after_int_cmd(self):   
        global mc_agt_drv_intf_cfg_pool_cnt
        global mc_agt_drv_intf_cfg_pool
        global mc_agt_drv_intf_find_idx
        global mcae2_drv_cnt
        global mcae2_drv_cnt_max
        global mcae2_drv_name
        global mcae2_drv_intf_type
        global mcae2_arr 
        global mce5_agt_cnt
        global mce5_arr
        global mc_agt_cfg_pool
        global mc_agt_find_idx 
        global mc_agt_cfg_pool_cnt
        global mc_agt_drv_intf_find_idx
        
        log.debug("mc_agt_drv_intf_final_after_int_cmd: Launching the code after the int cmd is executed and for incrementing counts\n")
 
        # Increment the global agt pool cnt if the env-agt config doesnt exists
        # if mc_agt_drv_intf_find_idx == None:
        #     if self.find_index(mc_agt_drv_intf_cfg_pool_dummy, mc_agt_drv_intf_cfg_pool) == None: 
        #         # Creating default entry for agent : TRY
        #         # mc_agt_drv_intf_cfg_pool.append([[] for x in range(mc_intf_arr_range)])
        #         
        #         # Creating default entry for agent
        #         mc_agt_drv_intf_cfg_pool_cnt+=1
        #         log.debug("mc_agt_drv_intf_final_after_int_cmd: mc_agt_drv_intf_cfg_pool_cnt %d  mc_agt_drv_intf_cfg_pool %s\n"%(mc_agt_drv_intf_cfg_pool_cnt, mc_agt_drv_intf_cfg_pool))

        # Incremnting the mcae2_drv_cnt value at the end of process
        if (mcae2_drv_cnt < (mcae2_drv_cnt_max-1)):
            mcae2_drv_cnt += 1
        
            # CHeck if already the env,agt,drv interface exists.
            self.mc_agt_drv_intf_cfg_pool_exists()
            log.debug("mc_choose_int_cmd_code: Value of mcae2_drv_name %s, mcae2_drv_cnt %d, mc_agt_drv_intf_cfg_pool_cnt %d, mc_agt_drv_intf_cfg_pool %s\n"%(mcae2_drv_name, mcae2_drv_cnt, mc_agt_drv_intf_cfg_pool_cnt, mc_agt_drv_intf_cfg_pool))
        
            if mc_agt_drv_intf_find_idx == None:
                # Remove any mcal4 - interface label if any exists
                log.debug("mc_choose_int_cmd_code: Value of mcae2_drv_name %s, mcae2_drv_cnt %d, mc_agt_drv_intf_cfg_pool_cnt %d, mc_agt_drv_intf_cfg_pool %s\n"%(mcae2_drv_name, mcae2_drv_cnt, mc_agt_drv_intf_cfg_pool_cnt, mc_agt_drv_intf_cfg_pool))
                self.mc_agt_drv_intf_label_dd_option(0)
            else:   
                # MC Agt Drv Interface Type  
                mcae2_drv_intf_type = mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_find_idx][2] 
                log.debug("mc_agt_interface : Value of mcae2_drv_intf_type %s, mcae2_drv_cnt_max %d, mcae2_drv_cnt %d\n"%(mcae2_drv_intf_type, mcae2_drv_cnt_max, mcae2_drv_cnt))

                # Remove any mcal4 - interface label if any exists
                log.debug("mc_choose_int_cmd_code: Value of mcae2_drv_name %s, mcae2_drv_cnt %d, mc_agt_drv_intf_cfg_pool_cnt %d, mc_agt_drv_intf_cfg_pool %s\n"%(mcae2_drv_name, mcae2_drv_cnt, mc_agt_drv_intf_cfg_pool_cnt, mc_agt_drv_intf_cfg_pool))
                self.mc_agt_drv_intf_label_dd_option(mcae2_drv_intf_type)

        # Going to forget the agt widget buttons 
        self.mc_agt_win_layout_rem_nac_pac_dac_buttons_forget_cb(1)

        # Going to create the agt drv intf widget buttons
        self.mc_agt_drv_intf_rem_pic_sic_buttons_cb()


    def mc_default_interface(self):
        global mc_agt_drv_intf_find_idx 
        global mc_agt_drv_intf_cfg_pool_cnt
        global mc_agt_drv_intf_cfg_pool
        global mcae2_drv_name 
        global mcae2_drv_intf_type 
        global mcae2_drv_cnt
        global mc_intf_arr_range
        global mcae2_drv_cnt_max
        global mcae2_arr 
        global mce5_agt_cnt
        global mce5_arr
        global mc_agt_cfg_pool
        global mc_agt_find_idx 
        global mc_agt_cfg_pool_cnt
        
        log.debug("mc_default_interface: Launching mc_default_interface\n")
        
        # CHeck if already the env,agt,drv interface exists
        self.mc_agt_drv_intf_cfg_pool_exists()
        log.debug("mc_default_interface : mc_agt_drv_intf_find_idx %s  mc_agt_drv_intf_cfg_pool_cnt %d  mc_agt_drv_intf_cfg_pool %s"%(mc_agt_drv_intf_find_idx, mc_agt_drv_intf_cfg_pool_cnt, mc_agt_drv_intf_cfg_pool))

        if mc_agt_drv_intf_find_idx == None:
            # Loading up the env,agt,drv name 
            mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_cfg_pool_cnt][0] = self.mce2.get()+','+str(mce5_arr[mce5_agt_cnt+1])+','+mcae2_drv_name
            
            # MC Agt Drv Name  
            mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_cfg_pool_cnt][1] = mcae2_drv_name 
            
            # MC Agt Drv Interface Type  
            mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_cfg_pool_cnt][2] = 1 
            
            log.debug("mc_default_interface : mc_agt_drv_intf_cfg_pool %s\n"%mc_agt_drv_intf_cfg_pool)
        else:
            log.debug("mc_default_interface : Agent,Drv Intf already exists in mc_agt_drv_intf_cfg_pool. Compare and if different re-load\n")
            mc_agt_drv_intf_cfg_pool_tmp = [[] for x in range(mc_intf_arr_range)] # [[],[],[],[],[],[],[],[]];
            log.debug("mc_default_interface : Value of mc_agt_drv_intf_cfg_pool_tmp %s\n"%mc_agt_drv_intf_cfg_pool_tmp)
            
            # Loading up the env,agt,drv name 
            mc_agt_drv_intf_cfg_pool_tmp[0] = self.mce2.get()+','+str(mce5_arr[mce5_agt_cnt+1])+','+mcae2_drv_name
            
            # MC Agt Drv Name  
            mc_agt_drv_intf_cfg_pool_tmp[1] = mcae2_drv_name 
            
            # MC Agt Drv Interface Type  
            mc_agt_drv_intf_cfg_pool_tmp[2] = 1 
            
            log.debug("mc_default_interface : mc_agt_drv_intf_cfg_pool[%d] %s, mc_agt_drv_intf_cfg_pool_tmp %s"%(mc_agt_drv_intf_find_idx, mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_find_idx], mc_agt_drv_intf_cfg_pool_tmp))

            if mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_find_idx] != mc_agt_drv_intf_cfg_pool_tmp:
                log.debug("mc_default_interface : mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_find_idx] != mc_agt_drv_intf_cfg_pool_tmp. Re-loading the pool\n")
                mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_find_idx] = mc_agt_drv_intf_cfg_pool_tmp    
            else:
                log.debug("mc_default_interface : mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_find_idx] == mc_agt_drv_intf_cfg_pool_tmp. Not Re-loading the pool\n")
                mc_agt_drv_intf_cfg_pool_prev.append(mc_agt_drv_intf_cfg_pool_tmp) 
                log.debug("mc_default_interface : mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_find_idx] == mc_agt_drv_intf_cfg_pool_tmp. Appending into mc_agt_drv_intf_cfg_pool_prev %s\n"%mc_agt_drv_intf_cfg_pool_prev)

        # Calling the code to do count increment and button enablement
        # self.mc_agt_drv_intf_final_after_int_cmd()
        
        # Going to create the agt drv intf widget buttons
        self.mc_agt_drv_intf_rem_pic_sic_buttons_cb()


    def mc_user_defined_interface(self):
        global mc_udif_frame_loop
        log.debug("mc_user_defined_interface: Launching mc_user_defined_interface\n")
        
        # Code to close the agt drv intf buttons
        self.mc_agt_drv_intf_rem_pic_sic_buttons_forget_cb(0)
   
        # Incrementing the mc_udif_frame_loop as 0 is used for frame. 
        mc_udif_frame_loop = 1
        self.mc_udif_name_e.append([])
        self.mc_udif_type_e.append([])
        self.mc_udif_le_e.append([])
        self.mc_udif_re_e.append([])
        self.mc_udif_cb_e.append([])
        self.mc_udif_mp_e.append([])

        if not (self.mc_udif_frame):
            self.mc_udif_frame = Frame(self.mc_agt_nl, width=50, bg='dark goldenrod', highlightbackground='dark goldenrod', highlightthickness='3')
            self.mc_udif_frame.grid(row=4, column=0, columnspan=2, sticky='WE')
            self.mc_udif_frame.rowconfigure(4,weight=1)
        else:
            log.debug("Frame already Exists\n")
            self.mc_udif_frame.grid() 

        if not (self.mc_udif_name):
            self.mc_udif_name = Label(self.mc_udif_frame, font=MyFontH2, text="Signal Name", bg='goldenrod')
            self.mc_udif_name.grid(row=0, column=0, sticky='WE')
            self.mc_udif_name.rowconfigure(0, weight=1)
        else:
            self.mc_udif_name.grid()

        if not (self.mc_udif_type):
            self.mc_udif_type = Label(self.mc_udif_frame, font=MyFontH2, text="Signal Type", bg='goldenrod')
            self.mc_udif_type.grid(row=0, column=1, sticky='WE')
            self.mc_udif_type.rowconfigure(0, weight=1)
        else:
            self.mc_udif_type.grid()

        if not (self.mc_udif_le):
            self.mc_udif_le = Label(self.mc_udif_frame, font=MyFontH2, text="Packed Elements", bg='goldenrod')
            self.mc_udif_le.grid(row=0, column=2, sticky='WE')
            self.mc_udif_le.rowconfigure(0, weight=1)
        else:
            self.mc_udif_le.grid()

        if not (self.mc_udif_re):
            self.mc_udif_re = Label(self.mc_udif_frame, font=MyFontH2, text="Un Packed Elements", bg='goldenrod')
            self.mc_udif_re.grid(row=0, column=3, sticky='WE')
            self.mc_udif_re.rowconfigure(0, weight=1)
        else:
            self.mc_udif_re.grid()

        if not (self.mc_udif_cb):
            self.mc_udif_cb = Label(self.mc_udif_frame, font=MyFontH2, text="Clocking Block", bg='goldenrod')
            self.mc_udif_cb.grid(row=0, column=4, sticky='WE')
            self.mc_udif_cb.rowconfigure(0, weight=1)
        else:
            self.mc_udif_cb.grid()

        if not (self.mc_udif_mp):
            self.mc_udif_mp = Label(self.mc_udif_frame, font=MyFontH2, text="Modport", bg='goldenrod')
            self.mc_udif_mp.grid(row=0, column=5, sticky='WE')
            self.mc_udif_mp.rowconfigure(0, weight=1)
        else:
            self.mc_udif_mp.grid()

        # Calling the code for creating the mc user defined interface widget
        self.mc_user_defined_interface_entry_widgets()

        self.mc_udi_nxt = Button(self.mc_agt_nl, font=MyFontBtn, background="IndianRed1", activebackground="IndianRed3", text="NEXT INTERFACE CONFIG", command=self.mc_udif_next_interface_config)
        self.mc_udi_nxt.grid(row=5, column=0, sticky='WE')
        self.mc_udi_nxt.rowconfigure(5,weight=1)
        
        self.mc_udi_done = Button(self.mc_agt_nl, font=MyFontBtn, background="sienna1", activebackground="sienna3", text="DONE INTERFACE CONFIG", command=self.mc_udif_done_interface_config)
        self.mc_udi_done.pack(side=RIGHT)
        self.mc_udi_done.grid(row=5, column=1, sticky='WE')
        self.mc_udi_done.rowconfigure(5,weight=1)


    def mc_user_defined_interface_entry_widgets(self):
        global mc_udif_frame_loop
        log.debug("mc_user_defined_interface_entry_widgets: Launching / Building the Entry widget for mc user defined interface\n")
        
        self.mc_udif_name_e.append([])
        if not (self.mc_udif_name_e[mc_udif_frame_loop]):
            self.mc_udif_name_e[mc_udif_frame_loop] = Entry(self.mc_udif_frame, font=MyFontH2)
            self.mc_udif_name_e[mc_udif_frame_loop].grid(row=mc_udif_frame_loop, column=0)
            self.mc_udif_name_e[mc_udif_frame_loop].rowconfigure(1,weight=1)
        else:
            self.mc_udif_name_e[mc_udif_frame_loop].grid()    
        
        self.mc_udif_type_e.append([])
        if not (self.mc_udif_type_e[mc_udif_frame_loop]):
            self.mc_udif_type_e[mc_udif_frame_loop] = Entry(self.mc_udif_frame, font=MyFontH2)
            self.mc_udif_type_e[mc_udif_frame_loop].grid(row=mc_udif_frame_loop, column=1)
            self.mc_udif_type_e[mc_udif_frame_loop].rowconfigure(1,weight=1)
        else:
            self.mc_udif_type_e[mc_udif_frame_loop].grid()
        
        self.mc_udif_le_e.append([])
        if not (self.mc_udif_le_e[mc_udif_frame_loop]):
            self.mc_udif_le_e[mc_udif_frame_loop] = Entry(self.mc_udif_frame, font=MyFontH2)
            self.mc_udif_le_e[mc_udif_frame_loop].grid(row=mc_udif_frame_loop, column=2)
            self.mc_udif_le_e[mc_udif_frame_loop].rowconfigure(1,weight=1)
        else:
            self.mc_udif_le_e[mc_udif_frame_loop].grid()
        
        self.mc_udif_re_e.append([])
        if not (self.mc_udif_re_e[mc_udif_frame_loop]):
            self.mc_udif_re_e[mc_udif_frame_loop] = Entry(self.mc_udif_frame, font=MyFontH2)
            self.mc_udif_re_e[mc_udif_frame_loop].grid(row=mc_udif_frame_loop, column=3)
            self.mc_udif_re_e[mc_udif_frame_loop].rowconfigure(1,weight=1)
        else:
            self.mc_udif_re_e[mc_udif_frame_loop].grid()
        
        self.mc_udif_cb_e.append([])
        if not (self.mc_udif_cb_e[mc_udif_frame_loop]):
            self.mc_udif_cb_e[mc_udif_frame_loop] = Entry(self.mc_udif_frame, font=MyFontH2)
            self.mc_udif_cb_e[mc_udif_frame_loop].grid(row=mc_udif_frame_loop, column=4)
            self.mc_udif_cb_e[mc_udif_frame_loop].rowconfigure(1,weight=1)
        else:
            self.mc_udif_cb_e[mc_udif_frame_loop].grid()

        self.mc_udif_mp_e.append([])
        if not (self.mc_udif_mp_e[mc_udif_frame_loop]):
            self.mc_udif_mp_e[mc_udif_frame_loop] = Entry(self.mc_udif_frame, font=MyFontH2)
            self.mc_udif_mp_e[mc_udif_frame_loop].grid(row=mc_udif_frame_loop, column=5)
            self.mc_udif_mp_e[mc_udif_frame_loop].rowconfigure(1,weight=1)
        else:
            self.mc_udif_mp_e[mc_udif_frame_loop].grid() 


    def mc_load_interface(self):
        log.debug("mc_load_interface: Launching mc_load_interface\n")

        # Code to close the agt drv intf buttons
        self.mc_agt_drv_intf_rem_pic_sic_buttons_forget_cb(0)

        if not (self.mcal5):
            self.mcal5 = Label(self.mc_agt_nl, font=MyFontH2, text="Choose the Interface Spreadsheet To Load: ")
            self.mcal5.grid(row=4, column=0, sticky='W')
            self.mcal5.rowconfigure(4,weight=1)
        else:
            self.mcal5.grid_forget(); self.mcal5 = None
            self.mcal5 = Label(self.mc_agt_nl, font=MyFontH2, text="Choose the Interface Spreadsheet To Load: ")
            self.mcal5.grid(row=4, column=0, sticky='W')
            self.mcal5.rowconfigure(4,weight=1)
                
        if not (self.mcae5):    
            self.mcae5 = Entry(self.mc_agt_nl, font=MyFontH2, bg="goldenrod")
            self.mcae5.delete(0, END)
            self.mcae5.insert(0, 'Right Click To Load-Left Click To Enter')
            self.mcae5.bind('<Button-3>', self.mc_load_interface_file_dialog)
            self.mcae5.bind('<Button-1>', self.mc_load_interface_file_path)
            self.mcae5.grid(row=4, column=1, sticky='WE')
            self.mcae5.rowconfigure(4,weight=1)
        else:
            self.mcae5.grid_forget(); self.mcae5 = None
            self.mcae5 = Entry(self.mc_agt_nl, font=MyFontH2)
            self.mcae5.delete(0, END)
            self.mcae5.insert(0, 'Right Click To Load-Left Click To Enter')
            self.mcae5.bind('<Button-3>', self.mc_load_interface_file_dialog)
            self.mcae5.bind('<Button-1>', self.mc_load_interface_file_path)
            self.mcae5.grid(row=4, column=1, sticky='WE')
            self.mcae5.rowconfigure(4,weight=1)
        
        self.mc_udi_done = Button(self.mc_agt_nl, font=MyFontH2, background="sienna1", activebackground="sienna3", text="DONE INTERFACE CONFIG", command=self.mc_udif_done_interface_config)
        self.mc_udi_done.grid(row=5, column=0, columnspan=2, sticky='WE')
        self.mc_udi_done.rowconfigure(5,weight=1)

    def mc_load_interface_file_dialog(self, *args):
        self.mcae5.delete(0, END)
        #self.mcae5.insert(0, tkFileDialog.askopenfilename(initialdir = ".",title = "Select file",filetypes = (("xlsx files","*.xlsx"),("all files","*.*"))))
        self.mcae5.insert(0, filedialog.askopenfilename(initialdir = ".",title = "Select file",filetypes = (("xlsx files","*.xlsx"),("all files","*.*"))))
    
    def mc_load_interface_file_path(self, *args):
        if self.mcae5.get() == 'Right Click To Load-Left Click To Enter':
            self.mcae5.delete(0, END)
            self.mcae5.insert(0, '')
        else:
            self.mcae5.insert(0, '')

    def mc_udif_next_interface_config(self):
        global mc_udif_loop
        global mc_udif_frame_loop
        log.debug("mc_udif_next_interface_config: Launching mc_udif_next_interface_config\n")

        mc_udif_loop += 1;
        mc_udif_frame_loop += 1;
        self.mc_udi_nxt_kcb();
        self.mc_udi_done_kcb();

        # Calling the code for creating the mc user defined interface widget
        self.mc_user_defined_interface_entry_widgets()

        self.mc_udi_nxt = Button(self.mc_agt_nl, font=MyFontBtn, background="IndianRed1", activebackground="IndianRed3", text="NEXT INTERFACE CONFIG", command=self.mc_udif_next_interface_config)
        self.mc_udi_nxt.grid(row=5+mc_udif_loop, column=0, sticky='WE')
        self.mc_udi_nxt.rowconfigure(5+mc_udif_loop,weight=1)
        
        self.mc_udi_done = Button(self.mc_agt_nl, font=MyFontBtn, background="sienna1", activebackground="sienna3", text="DONE INTERFACE CONFIG", command=self.mc_udif_done_interface_config)
        self.mc_udi_done.pack(side=RIGHT)
        self.mc_udi_done.grid(row=5+mc_udif_loop, column=1, sticky='WE')
        self.mc_udi_done.rowconfigure(5+mc_udif_loop,weight=1)


    def mc_udif_done_interface_config(self):
        global mc_agt_drv_intf_find_idx 
        global mc_agt_drv_intf_cfg_pool_cnt
        global mc_agt_drv_intf_cfg_pool
        global mc_udif_frame_loop
        global mc_udif_cb_element_loop_tmp
        global mc_udif_mp_element_loop_tmp
        global mc_udif_clock_cfg_array
        global mc_udif_cb_element_loop 
        global mc_udif_mp_element_loop 
        global mc_udif_cb_element_loop_tmp 
        global mc_udif_mp_element_loop_tmp
        global mcae2_drv_name 
        global mcae2_drv_intf_type 
        global mcae2_drv_cnt
        global mcae2_drv_cnt_max
        global mcae2_arr 
        global mce5_agt_cnt
        global mce5_arr
        global mc_agt_cfg_pool
        global mc_agt_find_idx 
        global mc_agt_cfg_pool_cnt
        
        log.debug("mc_udif_done_interface_config: Launching mc_udif_done_interface_config\n")

        # Default/ Initial Settings
        mc_udif_cb_element_loop_tmp = 0
        mc_udif_mp_element_loop_tmp = 0
        mc_udif_cb_element_loop = 0 
        mc_udif_mp_element_loop = 0
        mc_udif_cb_cfg_array = []
        mc_udif_clock_cfg_array = []
        mc_udif_mp_cfg_array = []
        mc_udif_intf_cfg_array = []


        # Code for parsing through the loaded spreadsheet 
        if self.mc_choose_int_list.get(self.mc_choose_int_val.get())==3:
            # Storing the interface sheet path, name in local variable
            mc_intf_path_sheet = self.mcae5.get()
            
            # load_xls_file_path = self.sce2.get()    
            load_xls_file_path_tmp = (self.mcae5.get()).split(",") 
           
            if len(load_xls_file_path_tmp)>1:
                load_xls_file_path = str(load_xls_file_path_tmp[0]).strip()
                search_user_sheet  = str(load_xls_file_path_tmp[1]).strip()
            else:
                load_xls_file_path = str(load_xls_file_path_tmp[0])
                search_user_sheet  = None 
            log.debug("mc_udif_done_interface_config: Value of load_xls_file_path %s search_user_sheet %s"%(load_xls_file_path,search_user_sheet))

            if not os.path.isfile(load_xls_file_path):
                log.error("mc_udif_done_interface_config : Please Load a Proper Interface Spreadsheet For Generating The Output\n")

            # Not Opening and then Loading, Just Loading: 01032021SUN
            # load_xls_file = open(load_xls_file_path, "r") 
            # wb = load_workbook(load_xls_file) 
            wb = load_workbook(load_xls_file_path) 

            #sheet = wb.get_sheet_names()
            sheet = wb.sheetnames
            for ws in sheet:
                log.debug("Name of the sheet is : for %s"%ws)
                if search_user_sheet != None:
                    log.debug("into search_user_sheet %s ws %s"%(search_user_sheet,ws))
                    if ws == search_user_sheet:
                        #sheet = wb.get_sheet_by_name(ws)
                        sheet = wb[ws]
                        log.debug("Name of the sheet selected is %s"%sheet) 
                        break
                elif ws == "Sheet1":
                    #sheet = wb.get_sheet_by_name(ws)
                    sheet = wb[ws]
                    log.debug("Name of the sheet selected is %s"%sheet)
                    break
                else:
                    continue

            # if wb.active <> sheet:
            if wb.active != sheet:
                log.info("mc_udif_done_interface_config : Required Interface Definition Sheet Is Not Found In Spreadsheet. Please Re-load Proper File!\n")

            #sc_udie_frame_loop = sheet.max_row-1
            log.debug("Name of the sheet is %s"% sheet) 
            mc_udif_frame_loop = len(sheet['A'])
            #sc_udie_frame_loop -= 1
            log.debug("mc_udif_done_interface_config : Value of mc_udif_frame_loop from spreadsheet is %d"% mc_udif_frame_loop)

        
        # Creating array structure for the required variables
        #mc_udif_clock_cfg_array.append([])
        #mc_udif_cb_cfg_array.append([])
        #mc_udif_mp_cfg_array.append([])
        #mc_udif_cb_element_loop.append([])
        #mc_udif_mp_element_loop.append([])
        log.debug("mc_udif_done_interface_config : mc_udif_cb_cfg_array %s, mc_udif_clock_cfg_array %s, mc_udif_mp_cfg_array %s, mc_udif_cb_element_loop %s, mc_udif_mp_element_loop %s"%(mc_udif_cb_cfg_array, mc_udif_clock_cfg_array, mc_udif_mp_cfg_array, mc_udif_cb_element_loop, mc_udif_mp_element_loop))
        
        if self.mc_choose_int_list.get(self.mc_choose_int_val.get())==2:
            mc_udif_int_cfg_array = [[] for x in range(mc_udif_frame_loop)]
        elif self.mc_choose_int_list.get(self.mc_choose_int_val.get())==3:
            mc_udif_int_cfg_array = [[] for x in range(mc_udif_frame_loop-1)]
        log.debug("mc_udif_done_interface_config : 1. Value of mc_udif_int_cfg_array %s"% mc_udif_int_cfg_array)

    
        #if self.mc_choose_int_list.get(self.mc_choose_int_val.get())==2:
        #    mc_udif_intf_cfg_array.append([[] for x in range(mc_udif_frame_loop)])
        #elif self.mc_choose_int_list.get(self.mc_choose_int_val.get())==3:
        #    mc_udif_intf_cfg_array.append([[] for x in range(mc_udif_frame_loop-1)])
        #mc_udif_intf_cfg_array[0].insert(0,[])
        #log.debug("mc_udif_done_interface_config : 2. Value of mc_udif_intf_cfg_array %s"% mc_udif_intf_cfg_array)
        
        if self.mc_choose_int_list.get(self.mc_choose_int_val.get())==2:
            mc_udif_intf_cfg_array = [[] for x in range(mc_udif_frame_loop)]
        elif self.mc_choose_int_list.get(self.mc_choose_int_val.get())==3:
            mc_udif_intf_cfg_array = [[] for x in range(mc_udif_frame_loop-1)]
        mc_udif_intf_cfg_array.insert(0,[])
        log.debug("mc_udif_done_interface_config : 2. Value of mc_udif_intf_cfg_array %s"% mc_udif_intf_cfg_array)
    
        
        # Loading initial default values 
        if self.mc_choose_int_list.get(self.mc_choose_int_val.get())==2:
            mc_udif_intf_cfg_array[0] = (mc_udif_frame_loop) 
        elif self.mc_choose_int_list.get(self.mc_choose_int_val.get())==3:
            mc_udif_intf_cfg_array[0] = (mc_udif_frame_loop-1)
        log.debug("mc_udif_done_interface_config : 3. Value of mc_udif_intf_cfg_array %s"% mc_udif_intf_cfg_array)

        
        if self.mc_choose_int_list.get(self.mc_choose_int_val.get())==2:
            for n in range(mc_udif_frame_loop):
                mc_udif_int_cfg_array[n].append(self.mc_udif_name_e[n+1].get())
                mc_udif_int_cfg_array[n].append(self.mc_udif_type_e[n+1].get())
                if (self.mc_udif_le_e[n+1].get() != ''):
                    mc_udif_int_cfg_array[n].append('le')
                    mc_udif_le_tmp = (self.mc_udif_le_e[n+1].get()).split(",")
                    for i in range (len(mc_udif_le_tmp)):
                        mc_udif_int_cfg_array[n].append(mc_udif_le_tmp[i])
                if (self.mc_udif_re_e[n+1].get() != ''):
                    mc_udif_int_cfg_array[n].append('ree')
                    mc_udif_re_tmp = (self.mc_udif_re_e[n+1].get()).split(",")
                    for i in range (len(mc_udif_re_tmp)):
                        mc_udif_int_cfg_array[n].append(mc_udif_re_tmp[i])
                if (self.mc_udif_cb_e[n+1].get() != ''):
                    mc_udif_cb_tmp = (self.mc_udif_cb_e[n+1].get()).split(",")
                    for i in range (len(mc_udif_cb_tmp)):
                        mc_udif_int_cfg_array[n].append(mc_udif_cb_tmp[i])
                if (self.mc_udif_mp_e[n+1].get() != ''):
                    mc_udif_mp_tmp = (self.mc_udif_mp_e[n+1].get()).split(",")
                    for i in range (len(mc_udif_mp_tmp)):
                        mc_udif_int_cfg_array[n].append(mc_udif_mp_tmp[i])
                    
                log.debug("mc_udif_done_interface_config : 4. Value of mc_udif_int_cfg_array %s"%mc_udif_int_cfg_array)
                log.debug("mc_udif_done_interface_config : 4. Count of cb is  %d"% len(mc_udif_int_cfg_array[n]))
                log.debug("mc_udif_done_interface_config : 4. Value of mc_udif_frame_loop in mc_udif_done_interface_config is %d"% mc_udif_frame_loop)
                
                mc_udif_cb_cnt = len(mc_udif_int_cfg_array[n])
                log.debug("mc_udif_done_interface_config : 5. Value of mc_udif_cb_cnt %s"%mc_udif_cb_cnt)
             
                #mc_udif_intf_cfg_array[n+1] = mc_udif_int_cfg_array[n]
                #mc_udif_intf_cfg_array[1][n] = mc_udif_int_cfg_array[n]
                mc_udif_intf_cfg_array[n+1] = mc_udif_int_cfg_array[n]
                log.debug("mc_udif_done_interface_config : 6. mc_udif_intf_cfg_array %s, mc_udif_int_cfg_array %s"%(mc_udif_intf_cfg_array, mc_udif_int_cfg_array))

                for i in range (1, int(mc_udif_cb_cnt)):
                    if "-clk" in mc_udif_int_cfg_array[n][i]:
                        log.debug("Value of mc_udif_int_cfg_array[n][i] %s"% mc_udif_int_cfg_array[n][i])
                        if "-clk" == mc_udif_int_cfg_array[n][i]:
                            if (self.mc_udif_cb_e[n+1].get() != '') and  (self.mc_udif_mp_e[n+1].get() != ''):
                                mc_udif_clock_cfg_array.append([mc_udif_int_cfg_array[n][0], ''] + (self.mc_udif_cb_e[n+1].get()).split(",") + (self.mc_udif_mp_e[n+1].get()).split(","))
                            elif (self.mc_udif_cb_e[n+1].get() != '') and  (self.mc_udif_mp_e[n+1].get() == ''):
                                mc_udif_clock_cfg_array.append([mc_udif_int_cfg_array[n][0], ''] + (self.mc_udif_cb_e[n+1].get()).split(","))
                            elif (self.mc_udif_cb_e[n+1].get() == '') and  (self.mc_udif_mp_e[n+1].get() != ''):
                                mc_udif_clock_cfg_array.append([mc_udif_int_cfg_array[n][0], ''] + (self.mc_udif_mp_e[n+1].get()).split(","))
                            elif (self.mc_udif_cb_e[n+1].get() == '') and  (self.mc_udif_mp_e[n+1].get() == ''):
                                mc_udif_clock_cfg_array.append([mc_udif_int_cfg_array[n][0], ''])
                            log.debug("mc_udif_done_interface_config : 7. value of mc_udif_clock_cfg_array-1 %s"% mc_udif_clock_cfg_array)
                            log.debug("mc_udif_done_interface_config : 7. value of mc_udif_clock_cfg_array-1-full %s"% mc_udif_clock_cfg_array)
                        elif "-clk" in mc_udif_int_cfg_array[n][i]:                        
                            if (self.mc_udif_cb_e[n+1].get() != '') and  (self.mc_udif_mp_e[n+1].get() != ''):
                                mc_udif_clock_cfg_array.append([mc_udif_int_cfg_array[n][0], mc_udif_int_cfg_array[n][1].split("-")[0]] + (self.mc_udif_cb_e[n+1].get()).split(",") + (self.mc_udif_mp_e[n+1].get()).split(","))
                            elif (self.mc_udif_cb_e[n+1].get() != '') and  (self.mc_udif_mp_e[n+1].get() == ''):
                                mc_udif_clock_cfg_array.append([mc_udif_int_cfg_array[n][0], mc_udif_int_cfg_array[n][1].split("-")[0]] + (self.mc_udif_cb_e[n+1].get()).split(","))
                            elif (self.mc_udif_cb_e[n+1].get() == '') and  (self.mc_udif_mp_e[n+1].get() != ''):
                                mc_udif_clock_cfg_array.append([mc_udif_int_cfg_array[n][0], mc_udif_int_cfg_array[n][1].split("-")[0]] + (self.mc_udif_mp_e[n+1].get()).split(","))
                            elif (self.mc_udif_cb_e[n+1].get() == '') and  (self.mc_udif_mp_e[n+1].get() == ''):
                                mc_udif_clock_cfg_array.append([mc_udif_int_cfg_array[n][0], ''])
                            log.debug("mc_udif_done_interface_config : 8. value of mc_udif_clock_cfg_array-1a %s"% mc_udif_clock_cfg_array)
                            log.debug("mc_udif_done_interface_config : 8. value of mc_udif_clock_cfg_array-1a-full %s"% mc_udif_clock_cfg_array)
                
                        #log.debug("Value of cvagt_val_loop %d cvagt_val_loop_tmp %d"%(cvagt_val_loop, cvagt_val_loop_tmp))
                        log.debug("mc_udif_done_interface_config : 9. Value of mc_udif_clock_cfg_array %s"% mc_udif_clock_cfg_array)
                        log.debug("mc_udif_done_interface_config : 9. Value of mc_udif_cb_cfg_array %s"% mc_udif_cb_cfg_array)
                        log.debug("mc_udif_done_interface_config : 9. Value of mc_udif_mp_cfg_array %s"% mc_udif_mp_cfg_array)
                        log.debug("mc_udif_done_interface_config : 9. Value of mc_udif_cb_element_loop %s"% mc_udif_cb_element_loop)
                        log.debug("mc_udif_done_interface_config : 9. Value of mc_udif_mp_element_loop %s"% mc_udif_mp_element_loop)
                        break # The clocking and modport information is obtained for clock signal here itself
                    elif "_cb" in mc_udif_int_cfg_array[n][i]:
                        log.debug("mc_udif_done_interface_config : 10. 1st For Loop - mc_udif_cb_cfg_array %s"% mc_udif_cb_cfg_array)
                        log.debug("mc_udif_done_interface_config : 10. Type of cb is %s"%mc_udif_int_cfg_array[n][i])
                        out_cb = self.in_nested_list(mc_udif_int_cfg_array[n][i], mc_udif_cb_cfg_array)
                        if out_cb:
                            out_cb.append([mc_udif_int_cfg_array[n][0]])
                            out_cb.append([mc_udif_int_cfg_array[n][i+1]])
                            log.debug("mc_udif_done_interface_config : 11. Value of out_cb %s"%out_cb)
                        else:
                            mc_udif_cb_cfg_array.append([[mc_udif_int_cfg_array[n][i]], [mc_udif_int_cfg_array[n][0]], [mc_udif_int_cfg_array[n][i+1]]])
                            log.debug("mc_udif_cdone_interface_config : 12. 3rd else loop - mc_udif_cb_cfg_array %s"% mc_udif_cb_cfg_array)
                            mc_udif_cb_element_loop_tmp += 1
                            mc_udif_cb_element_loop = mc_udif_cb_element_loop_tmp
                        #log.debug("Value of cvagt_val_loop %d cvagt_val_loop_tmp %d"%(cvagt_val_loop, cvagt_val_loop_tmp))
                        log.debug("mc_udif_cdone_interface_config : 13. Value of mc_udif_clock_cfg_array %s"% mc_udif_clock_cfg_array)
                        log.debug("mc_udif_cdone_interface_config : 13. Value of mc_udif_cb_cfg_array %s"% mc_udif_cb_cfg_array)
                        log.debug("mc_udif_cdone_interface_config : 13. Value of mc_udif_mp_cfg_array %s"% mc_udif_mp_cfg_array)
                        log.debug("mc_udif_cdone_interface_config : 13. Value of mc_udif_cb_element_loop %s"% mc_udif_cb_element_loop)
                        log.debug("mc_udif_cdone_interface_config : 13. Value of mc_udif_mp_element_loop %s"% mc_udif_mp_element_loop)
                    elif "_mp" in mc_udif_int_cfg_array[n][i]:
                        log.debug("mc_udif_cdone_interface_config : 14. 1st For Loop - mc_udif_mp_cfg_array %s"% mc_udif_mp_cfg_array)
                        log.debug("mc_udif_cdone_interface_config : 14. Type of mp is %s"%mc_udif_int_cfg_array[n][i])
                        out_mp = self.in_nested_list(mc_udif_int_cfg_array[n][i], mc_udif_mp_cfg_array)
                        if out_mp: 
                            out_mp.append([mc_udif_int_cfg_array[n][0]])
                            out_mp.append([mc_udif_int_cfg_array[n][i+1]])
                            log.debug("mc_udif_cdone_interface_config : 15. Value of out_mp %s"%out_mp)
                        else:
                            mc_udif_mp_cfg_array.append([[mc_udif_int_cfg_array[n][i]], [mc_udif_int_cfg_array[n][0]], [mc_udif_int_cfg_array[n][i+1]]])
                            log.debug("mc_udif_cdone_interface_config : 16. 3rd else loop - mc_udif_mp_cfg_array %s"% mc_udif_mp_cfg_array)
                            mc_udif_mp_element_loop_tmp += 1
                            mc_udif_mp_element_loop = mc_udif_mp_element_loop_tmp
                        #log.debug("Value of cvagt_val_loop %d cvagt_val_loop_tmp %d"%(cvagt_val_loop, cvagt_val_loop_tmp))
                        log.debug("mc_udif_cdone_interface_config : 17. Value of mc_udif_clock_cfg_array %s"% mc_udif_clock_cfg_array)
                        log.debug("mc_udif_cdone_interface_config : 17. Value of mc_udif_cb_cfg_array %s"% mc_udif_cb_cfg_array)
                        log.debug("mc_udif_cdone_interface_config : 17. Value of mc_udif_mp_cfg_array %s"% mc_udif_mp_cfg_array)
                        log.debug("mc_udif_cdone_interface_config : 17. Value of mc_udif_cb_element_loop %s"% mc_udif_cb_element_loop)
                        log.debug("mc_udif_cdone_interface_config : 17. Value of mc_udif_mp_element_loop %s"% mc_udif_mp_element_loop)
                    # Removing The Else Part as this keeps printing for non cb or mp variables - Vimo - 050516
                    # else: 
                    #     # print "Not Found cb or mp"

                # Clearning The Global Variables
                le = 0
                ree = 0
                mc_element_loop = 0
                    
                log.debug("mc_udif_done_interface_config : 18. Value of mc_udif_cb_element_loop is %s"%mc_udif_cb_element_loop)
                log.debug("mc_udif_done_interface_config : 18. Value of mc_udif_mp_element_loop is %s"%mc_udif_mp_element_loop)

        elif self.mc_choose_int_list.get(self.mc_choose_int_val.get())==3:
            for n in range(1,mc_udif_frame_loop):
                mc_udif_int_cfg_array[n-1].append(str(sheet.cell(row=n+1, column=1).value))
                mc_udif_int_cfg_array[n-1].append(str(sheet.cell(row=n+1, column=2).value))
                
                if (sheet.cell(row=n+1, column=3).value != None):
                    mc_udif_int_cfg_array[n-1].append('le')
                    mc_udif_le_tmp = str(sheet.cell(row=n+1, column=3).value).split(",")
                    for i in range (len(mc_udif_le_tmp)):
                        mc_udif_int_cfg_array[n-1].append(str(mc_udif_le_tmp[i]).strip())
                if (sheet.cell(row=n+1, column=4).value != None):
                    mc_udif_int_cfg_array[n-1].append('ree')
                    mc_udif_re_tmp = (sheet.cell(row=n+1, column=4).value).split(",")
                    for i in range (len(mc_udif_re_tmp)):
                        mc_udif_int_cfg_array[n-1].append(str(mc_udif_re_tmp[i]).strip())
                if (sheet.cell(row=n+1, column=5).value != None):
                    mc_udif_cb_tmp = (sheet.cell(row=n+1, column=5).value).split(",")
                    for i in range (len(mc_udif_cb_tmp)):
                        mc_udif_int_cfg_array[n-1].append(str(mc_udif_cb_tmp[i]).strip())
                if (sheet.cell(row=n+1, column=6).value != None):
                    mc_udif_mp_tmp = (sheet.cell(row=n+1, column=6).value).split(",")
                    for i in range (len(mc_udif_mp_tmp)):
                        mc_udif_int_cfg_array[n-1].append(str(mc_udif_mp_tmp[i]).strip())
                    
                log.debug("mc_udif_done_interface_config : 19. Value of mc_udif_int_cfg_array %s"%mc_udif_int_cfg_array)
                log.debug("mc_udif_done_interface_config : 19. Count of cb is  %d"% len(mc_udif_int_cfg_array[n-1]))
                log.debug("mc_udif_done_interface_config : 19. Value of mc_udif_frame_loop in mc_udif_done_interface_config is %d"% mc_udif_frame_loop)
                mc_udif_cb_cnt = len(mc_udif_int_cfg_array[n-1])
                log.debug("mc_udif_done_interface_config : 20. Value of mc_udif_cb_cnt %s"%mc_udif_cb_cnt)
              
                #mc_udif_intf_cfg_array[1][n-1] = mc_udif_int_cfg_array[n-1]
                mc_udif_intf_cfg_array[n] = mc_udif_int_cfg_array[n-1]
                log.debug("mc_udif_done_interface_config : 21. 3 Value of mc_udif_intf_cfg_array %s"% mc_udif_intf_cfg_array )

                for i in range (1, int(mc_udif_cb_cnt)):
                    if "-clk" in mc_udif_int_cfg_array[n-1][i]:
                        log.debug("mc_udif_done_interface_config : 22. Value of mc_udif_int_cfg_array[n-1][i] %s"% mc_udif_int_cfg_array[n-1][i])
                        if "-clk" == mc_udif_int_cfg_array[n-1][i]:
                            if (sheet.cell(row=n+1, column=5).value != None) and (sheet.cell(row=n+1, column=6).value != None):
                                mc_udif_clock_cfg_array.append([mc_udif_int_cfg_array[n-1][0], ''] + str(sheet.cell(row=n+1, column=5).value).split(",") + str(sheet.cell(row=n+1, column=6).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value != None) and (sheet.cell(row=n+1, column=6).value == None):
                                mc_udif_clock_cfg_array.append([mc_udif_int_cfg_array[n-1][0], ''] + str(sheet.cell(row=n+1, column=5).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value == None) and (sheet.cell(row=n+1, column=6).value != None):
                                mc_udif_clock_cfg_array.append([mc_udif_int_cfg_array[n-1][0], ''] + str(sheet.cell(row=n+1, column=6).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value == None) and (sheet.cell(row=n+1, column=6).value == None):
                                mc_udif_clock_cfg_array.append([mc_udif_int_cfg_array[n-1][0], ''])
                            log.debug("mc_udif_done_interface_config : 23. value of mc_udif_clock_cfg_array-1 %s"% mc_udif_clock_cfg_array)
                        elif "-clk" in mc_udif_int_cfg_array[n-1][i]:                        
                            if (sheet.cell(row=n+1, column=5).value != None) and (sheet.cell(row=n+1, column=6).value != None):
                                mc_udif_clock_cfg_array.append([mc_udif_int_cfg_array[n-1][0], mc_udif_int_cfg_array[n-1][1].split("-")[0]] + str(sheet.cell(row=n+1, column=5).value).split(",") + str(sheet.cell(row=n+1, column=6).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value != None) and (sheet.cell(row=n+1, column=6).value == None):
                                mc_udif_clock_cfg_array.append([mc_udif_int_cfg_array[n-1][0], mc_udif_int_cfg_array[n-1][1].split("-")[0]] + str(sheet.cell(row=n+1, column=5).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value == None) and (sheet.cell(row=n+1, column=6).value != None):
                                mc_udif_clock_cfg_array.append([mc_udif_int_cfg_array[n-1][0], mc_udif_int_cfg_array[n-1][1].split("-")[0]] + str(sheet.cell(row=n+1, column=6).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value == None) and (sheet.cell(row=n+1, column=6).value == None):
                                mc_udif_clock_cfg_array.append([mc_udif_int_cfg_array[n-1][0], ''])
                            log.debug("mc_udif_done_interface_config : 24. value of mc_udif_clock_cfg_array-1a %s"% mc_udif_clock_cfg_array)
                        #log.debug("Value of cvagt_val_loop %d cvagt_val_loop_tmp %d"%(cvagt_val_loop, cvagt_val_loop_tmp))
                        log.debug("mc_udif_done_interface_config : 25. Value of mc_udif_clock_cfg_array %s"% mc_udif_clock_cfg_array)
                        log.debug("mc_udif_done_interface_config : 25. Value of mc_udif_cb_cfg_array %s"% mc_udif_cb_cfg_array)
                        log.debug("mc_udif_done_interface_config : 25. Value of mc_udif_mp_cfg_array %s"% mc_udif_mp_cfg_array)
                        log.debug("mc_udif_done_interface_config : 25. Value of mc_udif_cb_element_loop %s"% mc_udif_cb_element_loop)
                        log.debug("mc_udif_done_interface_config : 25. Value of mc_udif_mp_element_loop %s"% mc_udif_mp_element_loop)
                        break # The clocking and modport information is obtained for clock signal here itself
                    elif "_cb" in mc_udif_int_cfg_array[n-1][i]:
                        log.debug("mc_udif_done_interface_config : 26. 1st For Loop %s"% mc_udif_cb_cfg_array)
                        log.debug("mc_udif_done_interface_config : 26. Type of cb is %s"%mc_udif_int_cfg_array[n-1][i])
                        out_cb = self.in_nested_list(mc_udif_int_cfg_array[n-1][i], mc_udif_cb_cfg_array)
                        if out_cb:
                            out_cb.append([mc_udif_int_cfg_array[n-1][0]])
                            out_cb.append([mc_udif_int_cfg_array[n-1][i+1]])
                            log.debug("27. Value of out_cb %s"%out_cb)
                        else:
                            mc_udif_cb_cfg_array.append([[mc_udif_int_cfg_array[n-1][i]], [mc_udif_int_cfg_array[n-1][0]], [mc_udif_int_cfg_array[n-1][i+1]]])
                            mc_udif_cb_element_loop_tmp += 1
                            mc_udif_cb_element_loop = mc_udif_cb_element_loop_tmp
                        #log.debug("Value of cvagt_val_loop %d cvagt_val_loop_tmp %d"%(cvagt_val_loop, cvagt_val_loop_tmp))
                        log.debug("mc_udif_done_interface_config : 28. Value of mc_udif_clock_cfg_array %s"% mc_udif_clock_cfg_array)
                        log.debug("mc_udif_done_interface_config : 28. Value of mc_udif_cb_cfg_array %s"% mc_udif_cb_cfg_array)
                        log.debug("mc_udif_done_interface_config : 28. Value of mc_udif_mp_cfg_array %s"% mc_udif_mp_cfg_array)
                        log.debug("mc_udif_done_interface_config : 28. Value of mc_udif_cb_element_loop %s"% mc_udif_cb_element_loop)
                        log.debug("mc_udif_done_interface_config : 28. Value of mc_udif_mp_element_loop %s"% mc_udif_mp_element_loop)
                    elif "_mp" in mc_udif_int_cfg_array[n-1][i]:
                        log.debug("mc_udif_done_interface_config : 29. 1st For Loop %s"% mc_udif_mp_cfg_array)
                        log.debug("mc_udif_done_interface_config : 29. Type of mp is %s"%mc_udif_int_cfg_array[n-1][i])
                        out_mp = self.in_nested_list(mc_udif_int_cfg_array[n-1][i], mc_udif_mp_cfg_array)
                        if out_mp: 
                            out_mp.append([mc_udif_int_cfg_array[n-1][0]])
                            out_mp.append([mc_udif_int_cfg_array[n-1][i+1]])
                            log.debug("mc_udif_done_interface_config : 30. Value of out_mp %s"%out_mp)
                        else:
                            mc_udif_mp_cfg_array.append([[mc_udif_int_cfg_array[n-1][i]], [mc_udif_int_cfg_array[n-1][0]], [mc_udif_int_cfg_array[n-1][i+1]]])
                            log.debug("mc_udif_done_interface_config : 31. 3rd else loop %s"% mc_udif_mp_cfg_array)
                            mc_udif_mp_element_loop_tmp += 1
                            mc_udif_mp_element_loop = mc_udif_mp_element_loop_tmp
                        #log.debug("Value of cvagt_val_loop %d cvagt_val_loop_tmp %d"%(cvagt_val_loop, cvagt_val_loop_tmp))
                        log.debug("mc_udif_done_interface_config : 32. Value of mc_udif_clock_cfg_array %s"% mc_udif_clock_cfg_array)
                        log.debug("mc_udif_done_interface_config : 32. Value of mc_udif_cb_cfg_array %s"% mc_udif_cb_cfg_array)
                        log.debug("mc_udif_done_interface_config : 32. Value of mc_udif_mp_cfg_array %s"% mc_udif_mp_cfg_array)
                        log.debug("mc_udif_done_interface_config : 32. Value of mc_udif_cb_element_loop %s"% mc_udif_cb_element_loop)
                        log.debug("mc_udif_done_interface_config : 32. Value of mc_udif_mp_element_loop %s"% mc_udif_mp_element_loop)
                    # Removing The Else Part as this keeps printing for non cb or mp variables - Vimo - 050516
                    # else: 
                    #     # print "Not Found cb or mp"

                # Clearning The Global Variables
                le = 0
                ree = 0
                mc_element_loop = 0
            
        log.debug("mc_udif_done_interface_config : 33. mc_udif_done_interface_config: mc_udif_frame_loop %d, mc_udif_intf_cfg_array %s"%(mc_udif_frame_loop, mc_udif_intf_cfg_array))
        #self.mc_udif_loop_kcb();
        self.mc_udi_nxt_kcb();
        self.mc_udif_frame_kcb();
        self.mc_udi_done_kcb();
        self.mc_load_interface_kcb();

        
        # CHeck if already the env,agt,drv interface exists
        self.mc_agt_drv_intf_cfg_pool_exists()
   
        if mc_agt_drv_intf_find_idx == None:
            # Loading up the env,agt,drv name 
            mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_cfg_pool_cnt][0] = self.mce2.get()+','+str(mce5_arr[mce5_agt_cnt+1])+','+mcae2_drv_name
            
            # MC Agt Drv Name  
            mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_cfg_pool_cnt][1] = mcae2_drv_name 
            
            # MC Agt Drv Interface Type  
            if self.mc_choose_int_list.get(self.mc_choose_int_val.get())==2:
                mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_cfg_pool_cnt][2] = 2
            
                # Loading the Interface Variables Values - no. of elements in the sheet 
                mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_cfg_pool_cnt][3] = mc_udif_frame_loop 

            elif self.mc_choose_int_list.get(self.mc_choose_int_val.get())==3:
                mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_cfg_pool_cnt][2] = 3

                # Loading the Interface Variables Values - no. of elements in the sheet 
                mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_cfg_pool_cnt][3] = (mc_udif_frame_loop-1) 

            # Loading the interface values 
            mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_cfg_pool_cnt][4] = mc_udif_intf_cfg_array 
            mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_cfg_pool_cnt][5] = mc_udif_clock_cfg_array 
            mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_cfg_pool_cnt][6] = mc_udif_cb_cfg_array 
            mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_cfg_pool_cnt][7] = mc_udif_mp_cfg_array 

            # Loading the interface file path , sheet name
            if self.mc_choose_int_list.get(self.mc_choose_int_val.get())==3:
                mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_cfg_pool_cnt][8] = mc_intf_path_sheet 

            log.debug("mc_udif_done_interface_config : mc_agt_drv_intf_cfg_pool %s\n"%mc_agt_drv_intf_cfg_pool)
        else:
            log.debug("mc_udif_done_interface_config : Agent,Drv Intf already exists in mc_agt_drv_intf_cfg_pool. Compare and if different re-load\n")
            mc_agt_drv_intf_cfg_pool_tmp = [[] for x in range(mc_intf_arr_range)] # [[],[],[],[],[],[],[],[]];
            log.debug("mc_udif_done_interface_config : Value of mc_agt_drv_intf_cfg_pool_tmp %s\n"%mc_agt_drv_intf_cfg_pool_tmp)
            
            # Loading up the env,agt,drv name 
            mc_agt_drv_intf_cfg_pool_tmp[0] = self.mce2.get()+','+str(mce5_arr[mce5_agt_cnt+1])+','+mcae2_drv_name
            
            # MC Agt Drv Name  
            mc_agt_drv_intf_cfg_pool_tmp[1] = mcae2_drv_name 
            
            # MC Agt Drv Interface Type  
            if self.mc_choose_int_list.get(self.mc_choose_int_val.get())==2:
                mc_agt_drv_intf_cfg_pool_tmp[2] = 2 
            
                # Loading the Interface Variables Values - no. of elements in the sheet 
                mc_agt_drv_intf_cfg_pool_tmp[3] = mc_udif_frame_loop 

            elif self.mc_choose_int_list.get(self.mc_choose_int_val.get())==3:
                mc_agt_drv_intf_cfg_pool_tmp[2] = 3 
                
                # Loading the Interface Variables Values - no. of elements in the sheet 
                mc_agt_drv_intf_cfg_pool_tmp[3] = (mc_udif_frame_loop-1) 
            

            # Loading the interface values 
            mc_agt_drv_intf_cfg_pool_tmp[4] = mc_udif_intf_cfg_array 
            mc_agt_drv_intf_cfg_pool_tmp[5] = mc_udif_clock_cfg_array 
            mc_agt_drv_intf_cfg_pool_tmp[6] = mc_udif_cb_cfg_array 
            mc_agt_drv_intf_cfg_pool_tmp[7] = mc_udif_mp_cfg_array 
            
            # Loading the interface file path , sheet name
            if self.mc_choose_int_list.get(self.mc_choose_int_val.get())==3:
                mc_agt_drv_intf_cfg_pool_tmp[8] = mc_intf_path_sheet 
            
            log.debug("mc_udif_done_interface_config : mc_agt_drv_intf_cfg_pool[%d] %s, mc_agt_drv_intf_cfg_pool_tmp %s"%(mc_agt_drv_intf_find_idx, mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_find_idx], mc_agt_drv_intf_cfg_pool_tmp))

            if mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_find_idx] != mc_agt_drv_intf_cfg_pool_tmp:
                log.debug("mc_udif_done_interface_config : mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_find_idx] != mc_agt_drv_intf_cfg_pool_tmp. Re-loading the pool\n")
                mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_find_idx] = mc_agt_drv_intf_cfg_pool_tmp    
            else:
                log.debug("mc_udif_done_interface_config : mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_find_idx] == mc_agt_drv_intf_cfg_pool_tmp. Not Re-loading the pool\n")
                mc_agt_drv_intf_cfg_pool_prev.append(mc_agt_drv_intf_cfg_pool_tmp) 
                log.debug("mc_udif_done_interface_config : mc_agt_drv_intf_cfg_pool[mc_agt_drv_intf_find_idx] == mc_agt_drv_intf_cfg_pool_tmp. Appending into mc_agt_drv_intf_cfg_pool_prev %s\n"%mc_agt_drv_intf_cfg_pool_prev)

        # Calling the code to do count increment and button enablement
        # self.mc_agt_drv_intf_final_after_int_cmd()
        
        # Going to create the agt drv intf widget buttons
        self.mc_agt_drv_intf_rem_pic_sic_buttons_cb()


    def mc_agt_widget_forget_cb(self):
        log.debug("mc_agt_widget_forget_cb: Going to Remove all the MC Agent related Widgets\n")

        if (self.mcal1):
            self.mcal1.grid_forget();  self.mcal1 = None 
        if (self.mcal2):
            self.mcal2.grid_forget();  self.mcal2 = None 
        if (self.mcal3):
            self.mcal3.grid_forget();  self.mcal3 = None 
        if (self.mcal4):
            self.mcal4.grid_forget();  self.mcal4 = None 
        
        if (self.mcae1):
            self.mcae1.grid_forget();  self.mcae1 = None 
        if (self.mcae2):
            self.mcae2.grid_forget();  self.mcae2 = None 
        if (self.mcae3):
            self.mcae3.grid_forget();  self.mcae3 = None 
        if (self.mcao1):
            self.mcao1.grid_forget();  self.mcao1 = None 

        # Cleaning the mc_load_interface_kcb buttons
        self.mc_load_interface_kcb()

        # Going to forget the agt widget buttons 
        self.mc_agt_win_layout_rem_nac_pac_dac_buttons_forget_cb(0)
        
        if (self.mc_agt_nl):
            self.mc_agt_nl.destroy(); self.mc_agt_nl = None
        
        # Code to close the agt drv intf buttons
        self.mc_agt_drv_intf_rem_pic_sic_buttons_forget_cb(0)
        

    def mc_agt_drv_intf_rem_pic_sic_buttons_forget_cb(self, which_value):
        log.debug("mc_agt_drv_intf_rem_pic_sic_buttons_forget_cb: Going to Remove all the MC Agent drv intf related Widgets\n")
       
        if int(which_value) == 0:
            if (self.mc_agt_drv_intf_return_to_env_menu_button):
                self.mc_agt_drv_intf_return_to_env_menu_button.grid_forget(); self.mc_agt_drv_intf_return_to_env_menu_button = None
            
            if (self.mc_agt_drv_intf_prev_cfg_button):
                self.mc_agt_drv_intf_prev_cfg_button.grid_forget(); self.mc_agt_drv_intf_prev_cfg_button = None
            
            if (self.mc_agt_drv_intf_next_cfg_button):
                self.mc_agt_drv_intf_next_cfg_button.grid_forget(); self.mc_agt_drv_intf_next_cfg_button = None
            
            if (self.mc_agt_drv_intf_save_cfg_button):
                self.mc_agt_drv_intf_save_cfg_button.grid_forget(); self.mc_agt_drv_intf_save_cfg_button = None

            if (self.mc_agt_drv_intf_button_frame):
                self.mc_agt_drv_intf_button_frame.grid_forget(); self.mc_agt_drv_intf_button_frame = None
        
        elif int(which_value) == 1:
            if (self.mc_agt_drv_intf_return_to_env_menu_button):
                self.mc_agt_drv_intf_return_to_env_menu_button.grid_forget();
            
            if (self.mc_agt_drv_intf_prev_cfg_button):
                self.mc_agt_drv_intf_prev_cfg_button.grid_forget();
            
            if (self.mc_agt_drv_intf_next_cfg_button):
                self.mc_agt_drv_intf_next_cfg_button.grid_forget();
            
            if (self.mc_agt_drv_intf_save_cfg_button):
                self.mc_agt_drv_intf_save_cfg_button.grid_forget();

            if (self.mc_agt_drv_intf_button_frame):
                self.mc_agt_drv_intf_button_frame.grid_forget();

    
    def mc_agt_drv_intf_cfg_pool_exists(self):
        global mc_agt_drv_intf_find_idx 
        global mc_agt_drv_intf_cfg_pool 
        global mc_agt_drv_intf_cfg_pool_cnt 
        global mcae2_arr 
        global mcae2_drv_cnt 
        global mce5_arr
        global mce5_agt_cnt
        global mcae2_drv_name
        global mcae2_drv_intf_type 
        global mcae2_drv_cnt_max
        global mce5_arr
        global mc_agt_cfg_pool
        global mc_agt_find_idx 
        global mc_agt_cfg_pool_cnt


        log.debug("mc_agt_drv_intf_cfg_pool_exists : Value of mcae2_drv_name %s, mcae2_drv_cnt_max %d, mcae2_drv_cnt %d, mcae2_arr %s\n"%(mcae2_drv_name, mcae2_drv_cnt_max, mcae2_drv_cnt, mcae2_arr))
        
        # Finding the agent name which will be used for driver name
        #mc_agt_name_list = str(self.mcae1.get()).split(",")
        mc_agt_name_list = str(self.mcae1.get()).split(":")
        mc_agt_name = mc_agt_name_list[0]

        # Finding the driver name 
        # WATCHOUT : Modifying to fix __c or __s if its 1 driver with agent name as driver name : 030820|SUN
        # if (len(mcae2_arr) == 1) and (int(mcae2_arr[0]) == 1):
        if ((len(mcae2_arr) == 1) and ((int(mcae2_arr[0]) == 1) or (mcae2_arr[0] == "1__c") or (mcae2_arr[0] == "1__s"))):
            mcae2_drv_name = mc_agt_name 
        else:
            mcae2_drv_name = mcae2_arr[mcae2_drv_cnt+1] 
        log.debug("mc_agt_drv_intf_cfg_pool_exists : Value of mcae2_drv_name %s, mcae2_drv_cnt_max %d, mcae2_drv_cnt %d, mcae2_arr %s\n"%(mcae2_drv_name, mcae2_drv_cnt_max, mcae2_drv_cnt, mcae2_arr))

        # Element to be searched
        mc_agt_drv_intf_find_ele = self.mce2.get()+','+str(mce5_arr[mce5_agt_cnt+1])+','+mcae2_drv_name
        log.debug("mc_agt_drv_intf_cfg_pool_exists : Value of mc_agt_drv_intf_find_ele %s mc_agt_drv_intf_cfg_pool %s"%(mc_agt_drv_intf_find_ele, mc_agt_drv_intf_cfg_pool))

        # Code to check if the particular agent with env_setup is already available in the mc_agt_cfg_pool 
        mc_agt_drv_intf_find_idx_tmp = self.find_index(mc_agt_drv_intf_find_ele, mc_agt_drv_intf_cfg_pool) 
        log.debug("mc_agt_drv_intf_cfg_pool_exists : Value of mc_agt_drv_intf_find_idx_tmp %s\n"%mc_agt_drv_intf_find_idx_tmp)

        if mc_agt_drv_intf_find_idx_tmp != None:
            mc_agt_drv_intf_find_idx = int(mc_agt_drv_intf_find_idx_tmp[0])
        else:
            mc_agt_drv_intf_find_idx = mc_agt_drv_intf_find_idx_tmp
        log.debug("mc_agt_drv_intf_cfg_pool_exists : Value of mc_agt_drv_intf_find_idx_tmp %s mc_agt_drv_intf_find_idx %s"%(mc_agt_drv_intf_find_idx_tmp, mc_agt_drv_intf_find_idx))


    def mc_kill_all_widgets_cb(self):
        log.debug("mc_kill_all_widgets_cb : Callback to kill all the widgets created during the Multi CLuster VIP Development !\n") 
       
        # Clearning the mcv IntVar variable for setting the radio button
        if mcv.get() != None:
            mcv.set(None)

        # Killing the multi cluster vip opening page widgets 
        if (self.mcl1):
            self.mcl1.destroy(); self.mcl1 = None # self.mcl1.destroy(); self.mcl1 = None
        if self.multi_cluster_vip_buttons_dict['self.multi_cluster_vip_button_ss']:
            self.multi_cluster_vip_buttons_dict['self.multi_cluster_vip_button_ss'].grid_remove()
            self.multi_cluster_vip_buttons_dict['self.multi_cluster_vip_button_ss'] = None
        if self.multi_cluster_vip_buttons_dict['self.multi_cluster_vip_button_gui']:
            self.multi_cluster_vip_buttons_dict['self.multi_cluster_vip_button_gui'].grid_remove()
            self.multi_cluster_vip_buttons_dict['self.multi_cluster_vip_button_gui'] = None
        
        # Killing the mc initial screen widgets
        self.mc_initial_screen_kill_cb()

        # Killing the Environment Layout
        self.mc_new_win_layout_kcb();

        # Killing the mc interface widgets
        self.mc_load_interface_kcb();
        self.mc_udi_nxt_kcb();
        self.mc_udi_done_kcb();

        # Killing the agent widgets
        self.mc_agt_widget_forget_cb();

        # Killing the mon scb widgets
        self.mc_mon_scb_widget_kill_cb();

        # Killing the button widgets
        self.mc_win_layout_return_exit_load_prev_next_done_buttons_kcb();        
    
        # Killing the parse_ss related widgets 
        self.parse_ss_related_widgets_kcb()

        # Killing the final_rmg_frame 
        self.final_rmg_frame_kcb()

    def parse_interface_ss(self, arg1):
        global generic_udif_frame_loop
        global generic_udif_cb_element_loop_tmp
        global generic_udif_mp_element_loop_tmp
        global generic_udif_cb_element_loop 
        global generic_udif_mp_element_loop 
        global generic_udif_cb_element_loop_tmp 
        global generic_udif_mp_element_loop_tmp
        global generic_udif_clock_cfg_array
        global generic_udif_cb_cfg_array
        global generic_udif_mp_cfg_array
        global generic_udif_intf_cfg_array
        log.debug("parse_interface_ss: Launching parse_interface_ss\n")

        # Default/ Initial Settings
        generic_udif_cb_element_loop_tmp = 0
        generic_udif_mp_element_loop_tmp = 0
        generic_udif_cb_element_loop = 0 
        generic_udif_mp_element_loop = 0
        generic_udif_cb_cfg_array = []
        generic_udif_clock_cfg_array = []
        generic_udif_mp_cfg_array = []
        generic_udif_intf_cfg_array = []

        # Code for parsing through the loaded spreadsheet 
        load_xls_file_path_tmp = arg1.split(",") 
        log.debug("parse_interface_ss: Value of load_xls_file_path_tmp %s arg1 %s"%(load_xls_file_path_tmp,arg1))
        
        if len(load_xls_file_path_tmp)>1:
            load_xls_file_path = str(load_xls_file_path_tmp[0]).strip()
            search_user_sheet  = str(load_xls_file_path_tmp[1]).strip()
        else:
            load_xls_file_path = str(load_xls_file_path_tmp[0])
            search_user_sheet  = None 
        log.debug("parse_interface_ss: Value of load_xls_file_path %s search_user_sheet %s"%(load_xls_file_path,search_user_sheet))

        if not os.path.isfile(load_xls_file_path):
            log.error("parse_interface_ss : Please Load a Proper Interface Spreadsheet For Generating The Output\n")

        # Not Opening and then Loading, Just Loading: 01032021SUN
        # load_xls_file = open(load_xls_file_path, "r") 
        # wb = load_workbook(load_xls_file) 
        wb = load_workbook(load_xls_file_path) 

        #sheet = wb.get_sheet_names()
        sheet = wb.sheetnames
        for ws in sheet:
            log.debug("Name of the sheet is : for %s"%ws)
            if search_user_sheet != None:
                log.debug("into search_user_sheet %s ws %s"%(search_user_sheet,ws))
                if ws == search_user_sheet:
                    #sheet = wb.get_sheet_by_name(ws)
                    sheet = wb[ws]
                    log.debug("Name of the sheet selected is %s"%sheet) 
                    break
            elif ws == "Sheet1":
                #sheet = wb.get_sheet_by_name(ws)
                sheet = wb[ws]
                log.debug("Name of the sheet selected is %s"%sheet)
                break
            else:
                continue

        # if wb.active <> sheet:
        if wb.active != sheet:
            log.info("parse_interface_ss : Required Interface Definition Sheet Is Not Found In Spreadsheet. Please Re-load Proper File!\n")

        #sc_udie_frame_loop = sheet.max_row-1
        log.debug("Name of the sheet is %s"% sheet) 
        generic_udif_frame_loop = len(sheet['A'])
        #sc_udie_frame_loop -= 1
        log.debug("parse_interface_ss : Value of generic_udif_frame_loop from spreadsheet is %d"% generic_udif_frame_loop)

        
        generic_udif_int_cfg_array = [[] for x in range(generic_udif_frame_loop-1)]
        log.debug("parse_interface_ss : 1. Value of generic_udif_int_cfg_array %s"% generic_udif_int_cfg_array)
    
        #generic_udif_intf_cfg_array.append([[] for x in range(generic_udif_frame_loop-1)])
        #generic_udif_intf_cfg_array.insert(0,[])
        
        generic_udif_intf_cfg_array = [[] for x in range(generic_udif_frame_loop-1)]
        generic_udif_intf_cfg_array.insert(0,[])
        log.debug("parse_interface_ss : 2. Value of generic_udif_intf_cfg_array %s"% generic_udif_intf_cfg_array)
    
        
        # Loading initial default values 
        generic_udif_intf_cfg_array[0] = (generic_udif_frame_loop-1)
        log.debug("parse_interface_ss : 3. Value of generic_udif_intf_cfg_array %s"% generic_udif_intf_cfg_array)

        
        for n in range(1,generic_udif_frame_loop):
            generic_udif_int_cfg_array[n-1].append(str(sheet.cell(row=n+1, column=1).value))
            generic_udif_int_cfg_array[n-1].append(str(sheet.cell(row=n+1, column=2).value))
            
            if (sheet.cell(row=n+1, column=3).value != None):
                generic_udif_int_cfg_array[n-1].append('le')
                generic_udif_le_tmp = str(sheet.cell(row=n+1, column=3).value).split(",")
                for i in range (len(generic_udif_le_tmp)):
                    generic_udif_int_cfg_array[n-1].append(str(generic_udif_le_tmp[i]).strip())
            if (sheet.cell(row=n+1, column=4).value != None):
                generic_udif_int_cfg_array[n-1].append('ree')
                generic_udif_re_tmp = (sheet.cell(row=n+1, column=4).value).split(",")
                for i in range (len(generic_udif_re_tmp)):
                    generic_udif_int_cfg_array[n-1].append(str(generic_udif_re_tmp[i]).strip())
            if (sheet.cell(row=n+1, column=5).value != None):
                generic_udif_cb_tmp = (sheet.cell(row=n+1, column=5).value).split(",")
                for i in range (len(generic_udif_cb_tmp)):
                    generic_udif_int_cfg_array[n-1].append(str(generic_udif_cb_tmp[i]).strip())
            if (sheet.cell(row=n+1, column=6).value != None):
                generic_udif_mp_tmp = (sheet.cell(row=n+1, column=6).value).split(",")
                for i in range (len(generic_udif_mp_tmp)):
                    generic_udif_int_cfg_array[n-1].append(str(generic_udif_mp_tmp[i]).strip())
                
            log.debug("parse_interface_ss : 19. Value of generic_udif_int_cfg_array %s"%generic_udif_int_cfg_array)
            log.debug("parse_interface_ss : 19. Count of cb is  %d"% len(generic_udif_int_cfg_array[n-1]))
            log.debug("parse_interface_ss : 19. Value of generic_udif_frame_loop in parse_interface_ss is %d"% generic_udif_frame_loop)
            generic_udif_cb_cnt = len(generic_udif_int_cfg_array[n-1])
            log.debug("parse_interface_ss : 20. Value of generic_udif_cb_cnt %s"%generic_udif_cb_cnt)
          
            #generic_udif_intf_cfg_array[1][n-1] = generic_udif_int_cfg_array[n-1]
            generic_udif_intf_cfg_array[n] = generic_udif_int_cfg_array[n-1]
            log.debug("parse_interface_ss : 21. 3 Value of generic_udif_intf_cfg_array %s"% generic_udif_intf_cfg_array)

            for i in range (1, int(generic_udif_cb_cnt)):
                if "-clk" in generic_udif_int_cfg_array[n-1][i]:
                    log.debug("parse_interface_ss : 22. Value of generic_udif_int_cfg_array[n-1][i] %s"% generic_udif_int_cfg_array[n-1][i])
                    if "-clk" == generic_udif_int_cfg_array[n-1][i]:
                        if (sheet.cell(row=n+1, column=5).value != None) and (sheet.cell(row=n+1, column=6).value != None):
                            generic_udif_clock_cfg_array.append([generic_udif_int_cfg_array[n-1][0], ''] + str(sheet.cell(row=n+1, column=5).value).split(",") + str(sheet.cell(row=n+1, column=6).value).split(","))
                        elif (sheet.cell(row=n+1, column=5).value != None) and (sheet.cell(row=n+1, column=6).value == None):
                            generic_udif_clock_cfg_array.append([generic_udif_int_cfg_array[n-1][0], ''] + str(sheet.cell(row=n+1, column=5).value).split(","))
                        elif (sheet.cell(row=n+1, column=5).value == None) and (sheet.cell(row=n+1, column=6).value != None):
                            generic_udif_clock_cfg_array.append([generic_udif_int_cfg_array[n-1][0], ''] + str(sheet.cell(row=n+1, column=6).value).split(","))
                        elif (sheet.cell(row=n+1, column=5).value == None) and (sheet.cell(row=n+1, column=6).value == None):
                            generic_udif_clock_cfg_array.append([generic_udif_int_cfg_array[n-1][0], ''])
                        log.debug("parse_interface_ss : 23. value of generic_udif_clock_cfg_array-1 %s"% generic_udif_clock_cfg_array)
                    elif "-clk" in generic_udif_int_cfg_array[n-1][i]:                        
                        if (sheet.cell(row=n+1, column=5).value != None) and (sheet.cell(row=n+1, column=6).value != None):
                            generic_udif_clock_cfg_array.append([generic_udif_int_cfg_array[n-1][0], generic_udif_int_cfg_array[n-1][1].split("-")[0]] + str(sheet.cell(row=n+1, column=5).value).split(",") + str(sheet.cell(row=n+1, column=6).value).split(","))
                        elif (sheet.cell(row=n+1, column=5).value != None) and (sheet.cell(row=n+1, column=6).value == None):
                            generic_udif_clock_cfg_array.append([generic_udif_int_cfg_array[n-1][0], generic_udif_int_cfg_array[n-1][1].split("-")[0]] + str(sheet.cell(row=n+1, column=5).value).split(","))
                        elif (sheet.cell(row=n+1, column=5).value == None) and (sheet.cell(row=n+1, column=6).value != None):
                            generic_udif_clock_cfg_array.append([generic_udif_int_cfg_array[n-1][0], generic_udif_int_cfg_array[n-1][1].split("-")[0]] + str(sheet.cell(row=n+1, column=6).value).split(","))
                        elif (sheet.cell(row=n+1, column=5).value == None) and (sheet.cell(row=n+1, column=6).value == None):
                            generic_udif_clock_cfg_array.append([generic_udif_int_cfg_array[n-1][0], ''])
                        log.debug("parse_interface_ss : 24. value of generic_udif_clock_cfg_array-1a %s"% generic_udif_clock_cfg_array)
                    #log.debug("Value of cvagt_val_loop %d cvagt_val_loop_tmp %d"%(cvagt_val_loop, cvagt_val_loop_tmp))
                    log.debug("parse_interface_ss : 25. Value of generic_udif_clock_cfg_array %s"% generic_udif_clock_cfg_array)
                    log.debug("parse_interface_ss : 25. Value of generic_udif_cb_cfg_array %s"% generic_udif_cb_cfg_array)
                    log.debug("parse_interface_ss : 25. Value of generic_udif_mp_cfg_array %s"% generic_udif_mp_cfg_array)
                    log.debug("parse_interface_ss : 25. Value of generic_udif_cb_element_loop %s"% generic_udif_cb_element_loop)
                    log.debug("parse_interface_ss : 25. Value of generic_udif_mp_element_loop %s"% generic_udif_mp_element_loop)
                    break # The clocking and modport information is obtained for clock signal here itself
                elif "_cb" in generic_udif_int_cfg_array[n-1][i]:
                    log.debug("parse_interface_ss : 26. 1st For Loop %s"% generic_udif_cb_cfg_array)
                    log.debug("parse_interface_ss : 26. Type of cb is %s"%generic_udif_int_cfg_array[n-1][i])
                    out_cb = self.in_nested_list(generic_udif_int_cfg_array[n-1][i], generic_udif_cb_cfg_array)
                    if out_cb:
                        out_cb.append([generic_udif_int_cfg_array[n-1][0]])
                        out_cb.append([generic_udif_int_cfg_array[n-1][i+1]])
                        log.debug("27. Value of out_cb %s"%out_cb)
                    else:
                        generic_udif_cb_cfg_array.append([[generic_udif_int_cfg_array[n-1][i]], [generic_udif_int_cfg_array[n-1][0]], [generic_udif_int_cfg_array[n-1][i+1]]])
                        generic_udif_cb_element_loop_tmp += 1
                        generic_udif_cb_element_loop = generic_udif_cb_element_loop_tmp
                    #log.debug("Value of cvagt_val_loop %d cvagt_val_loop_tmp %d"%(cvagt_val_loop, cvagt_val_loop_tmp))
                    log.debug("parse_interface_ss : 28. Value of generic_udif_clock_cfg_array %s"% generic_udif_clock_cfg_array)
                    log.debug("parse_interface_ss : 28. Value of generic_udif_cb_cfg_array %s"% generic_udif_cb_cfg_array)
                    log.debug("parse_interface_ss : 28. Value of generic_udif_mp_cfg_array %s"% generic_udif_mp_cfg_array)
                    log.debug("parse_interface_ss : 28. Value of generic_udif_cb_element_loop %s"% generic_udif_cb_element_loop)
                    log.debug("parse_interface_ss : 28. Value of generic_udif_mp_element_loop %s"% generic_udif_mp_element_loop)
                elif "_mp" in generic_udif_int_cfg_array[n-1][i]:
                    log.debug("parse_interface_ss : 29. 1st For Loop %s"% generic_udif_mp_cfg_array)
                    log.debug("parse_interface_ss : 29. Type of mp is %s"%generic_udif_int_cfg_array[n-1][i])
                    out_mp = self.in_nested_list(generic_udif_int_cfg_array[n-1][i], generic_udif_mp_cfg_array)
                    if out_mp: 
                        out_mp.append([generic_udif_int_cfg_array[n-1][0]])
                        out_mp.append([generic_udif_int_cfg_array[n-1][i+1]])
                        log.debug("parse_interface_ss : 30. Value of out_mp %s"%out_mp)
                    else:
                        generic_udif_mp_cfg_array.append([[generic_udif_int_cfg_array[n-1][i]], [generic_udif_int_cfg_array[n-1][0]], [generic_udif_int_cfg_array[n-1][i+1]]])
                        log.debug("parse_interface_ss : 31. 3rd else loop %s"% generic_udif_mp_cfg_array)
                        generic_udif_mp_element_loop_tmp += 1
                        generic_udif_mp_element_loop = generic_udif_mp_element_loop_tmp
                    #log.debug("Value of cvagt_val_loop %d cvagt_val_loop_tmp %d"%(cvagt_val_loop, cvagt_val_loop_tmp))
                    log.debug("parse_interface_ss : 32. Value of generic_udif_clock_cfg_array %s"% generic_udif_clock_cfg_array)
                    log.debug("parse_interface_ss : 32. Value of generic_udif_cb_cfg_array %s"% generic_udif_cb_cfg_array)
                    log.debug("parse_interface_ss : 32. Value of generic_udif_mp_cfg_array %s"% generic_udif_mp_cfg_array)
                    log.debug("parse_interface_ss : 32. Value of generic_udif_cb_element_loop %s"% generic_udif_cb_element_loop)
                    log.debug("parse_interface_ss : 32. Value of generic_udif_mp_element_loop %s"% generic_udif_mp_element_loop)
                # Removing The Else Part as this keeps printing for non cb or mp variables - Vimo - 050516
                # else: 
                #     # print "Not Found cb or mp"

            # Clearning The Global Variables
            le = 0
            ree = 0
        
        log.debug("parse_interface_ss : final : Value of generic_udif_frame_loop %d"%(generic_udif_frame_loop))
        log.debug("parse_interface_ss : final : Value of generic_udif_intf_cfg_array %s"%(generic_udif_intf_cfg_array))
        log.debug("parse_interface_ss : final : Value of generic_udif_int_cfg_array %s"%generic_udif_int_cfg_array)
        log.debug("parse_interface_ss : final : Value of generic_udif_clock_cfg_array %s"% generic_udif_clock_cfg_array)
        log.debug("parse_interface_ss : final : Value of generic_udif_cb_cfg_array %s"% generic_udif_cb_cfg_array)
        log.debug("parse_interface_ss : final : Value of generic_udif_mp_cfg_array %s"% generic_udif_mp_cfg_array)
        log.debug("parse_interface_ss : final : Value of generic_udif_cb_element_loop %s"% generic_udif_cb_element_loop)
        log.debug("parse_interface_ss : final : Value of generic_udif_mp_element_loop %s"% generic_udif_mp_element_loop)
        
       
    def generate_button_operation(self):
        global sc_agtrow_val
        if v.get()==1:
            if sv.get()=="Interface" or sv.get()=="Agent":
                if not (self.genbtn):
                    self.genbtn = Button(root, font=MyFontBtn, background="lime green", activebackground="forest green", text="GENERATE CODE", command=self.generate_button_code, highlightbackground='black', highlightthickness='2')    
                    self.genbtn.grid(row=sc_agtrow_val+7, column=1, sticky='WE') #, columnspan=2, sticky='WE')
                    self.genbtn.rowconfigure(sc_agtrow_val+7,weight=1)
                else:
                    self.genbtn.grid_remove()
                    self.genbtn.grid()
            else:
                if not (self.genbtn):
                    self.genbtn = Button(self.sc_rm_ec_frame, font=MyFontBtn, width=32, background="lime green", activebackground="forest green", text="GENERATE CODE", command=self.generate_button_code, highlightbackground='black', highlightthickness='2')    
                    self.genbtn.grid(row=0, column=1, sticky='WE') #, columnspan=10, sticky='WE')
                    #self.genbtn.rowconfigure(0,weight=1)
                else:
                    self.genbtn.grid()

                #if not (self.genbtn):
                #    self.genbtn = Button(root, font=MyFontBtn, width=32, background="lime green", activebackground="forest green", text="GENERATE CODE", command=self.generate_button_code)    
                #    self.genbtn.grid(row=sc_agtrow_val+7, column=0, columnspan=2, sticky='E') #, columnspan=10, sticky='WE')
                #    self.genbtn.rowconfigure(sc_agtrow_val+7,weight=1)
                #else:
                #    self.genbtn.grid()

        if v.get()==2:
            if not (self.genbtn):
                self.return_button_cb();
                self.genbtn = Button(root, font=MyFontBtn, background="lime green", activebackground="forest green", text="GENERATE CODE", command=self.generate_button_code, highlightbackground='black', highlightthickness='2')    
                self.genbtn.grid(row=100, column=0, columnspan=2, sticky='WE')
                self.genbtn.rowconfigure(100,weight=1)
            else:
                self.genbtn.grid()
       
        # Generate button code for multi env support :111119|MON
        # if v.get()==3:
        #     if (self.genbtn):
        #         self.genbtn.grid_forget(); self.genbtn = None
        #     self.genbtn = Button(root, font=MyFontBtn, width=100, background="lime green", activebackground="forest green", text="GENERATE CODE", command=self.generate_button_code, highlightbackground='black', highlightthickness='2')    
        #     self.genbtn.grid(row=40, column=1, sticky='WE')
        #     self.genbtn.rowconfigure(40,weight=1)
        if v.get()==3:
            if (self.genbtn):
                self.genbtn.grid_forget(); self.genbtn = None
            self.genbtn = Button(self.final_rmg_frame, font=MyFontBtn, width=35, background="lime green", activebackground="forest green", text="GENERATE CODE", command=self.generate_button_code, highlightbackground='black', highlightthickness='2')    
            self.genbtn.grid(row=0, column=1, sticky='WE')
            self.genbtn.rowconfigure(0,weight=1)
            #self.genbtn.columnconfigure(1,weight=1)


    # This is the function that gets called when you FocusOut of the env interface widget
    def mc_env_intf_details(self, *args):
        global mc_env_intf_cnt_max
        global mc_env_intf_cnt 
        global mc_env_intf_arr
        global mc_env_intf_name
        global mc_env_intf_type 
        global mc_env_intf_find_idx
        global mc_env_find_idx
        global mc_env_intf_cfg_pool

        if self.mce9.get() != '':
            # Setting default values 
            mc_env_intf_cnt = 0

            # Decode the env intf entry widget 
            mc_env_intf_arr =  str(self.mce9.get()).split(",")
            log.debug("mc_env_intf_details : Value of mc_env_intf_arr %s, len(mc_env_intf_arr) %d\n"%(mc_env_intf_arr, len(mc_env_intf_arr)))

            # Finding the mc env intf count 
            if (len(mc_env_intf_arr) == 1) and (int(mc_env_intf_arr[0]) == 1):
                mc_env_intf_name = (str(self.mce2.get()).split(","))[1]
                mc_env_intf_cnt_max = int(mc_env_intf_arr[0]) 
            else:
                mc_env_intf_cnt_max = int(mc_env_intf_arr[0]) 
                mc_env_intf_name = mc_env_intf_arr[mc_env_intf_cnt+1] 
            log.debug("mc_env_intf_details : Value of mc_env_intf_name %s, mc_env_intf_cnt_max %d, mc_env_intf_cnt %d\n"%(mc_env_intf_name, mc_env_intf_cnt_max, mc_env_intf_cnt))

            # Calling the code to build the env intf widgt
            self.mc_env_intf_win_layout()

            # Code to check if env already exists in the mc_env_cfg_pool
            self.mc_env_cfg_pool_exists()

            if mc_env_find_idx != None:
                # Check if the env intf already exists
                self.mc_env_intf_cfg_pool_exists()

                # MC Env Interface Type  
                if mc_env_intf_find_idx != None:
                    mc_env_intf_type = mc_env_intf_cfg_pool[mc_env_intf_find_idx][2]
                    log.debug("mc_env_intf_details : Value of mc_env_intf_type %s, mc_env_intf_cnt_max %d, mc_env_intf_cnt %d\n"%(mc_env_intf_type, mc_env_intf_cnt_max, mc_env_intf_cnt))

            if mc_env_find_idx != None:
                if mc_env_intf_find_idx != None:
                    self.mc_env_intf_label_dd_option(mc_env_intf_type)
                else:
                    self.mc_env_intf_label_dd_option(0)
            else:
                self.mc_env_intf_label_dd_option(0)

            # Going to create the env intf widget buttons
            self.mc_env_intf_rem_pic_sic_buttons_cb()
        else:
            log.debug("mc_env_intf_details : mc env interface entry is empty ! No Interface Defined!\n")

    def mc_env_intf_win_layout(self):
        log.debug("mc_env_intf_win_layout: Creating the env intf win layout!\n")
        
        # Removing the mc agt widgets if anything exists
        self.mc_env_intf_win_layout_kcb();
        
        self.mc_env_intf_nl = Toplevel()
        self.mc_env_intf_nl.wm_title("Environment Interface Configuration Windown")
        
        # Code to place the agent window away from main window
        self.mc_env_intf_nl.geometry("+500+500")   

        if not (self.mcl10):
            self.mcl10 = Label(self.mc_env_intf_nl, font=MyFontH2, text="Choose The Type Of Interface: ")
            self.mcl10.grid(row=0, column=0, sticky='W')
            self.mcl10.rowconfigure(0,weight=1)
        else:
            self.mcl10.grid()
        
        self.mc_env_choose_int_list.clear()
        self.mc_env_choose_int_val.set("Click Drop-Down For Options")
        #self.mc_env_choose_int_list = {"Default Interface":1, "User Defined Interface":2, "Load Interface":3}
        self.mc_env_choose_int_list = {"Default Interface":1, "Load Interface":3}

        if not (self.mco1):
            self.mco1 = OptionMenu(self.mc_env_intf_nl, self.mc_env_choose_int_val, *self.mc_env_choose_int_list, command=self.mc_env_choose_int_cmd_code)
            self.mco1.configure(width=39, activebackground="gray50", font=MyFontH2)
            menu = self.mco1.nametowidget(self.mco1.menuname)
            menu.config(font=MyFontH2, activebackground="gray50") 
            self.mco1.grid(row=0, column=1, sticky='WE')
            self.mco1.rowconfigure(0,weight=1)
        else:
            self.mco1.grid()
        
        # Calling the code for return to env menu, prev agt, nxt agt, done agt cfg button code
        self.mc_env_intf_rem_pic_sic_buttons_cb()

    
    def mc_env_intf_label_dd_option(self, which_value):
        global mc_env_intf_name 
        global mc_env_intf_cnt 
        global mc_env_intf_cnt_max 
        global mc_env_intf_cfg_pool_cnt

        log.debug("mc_env_intf_label_dd_option: Going to create env intf label dropdown option widgets\n")
        log.debug("mc_env_intf_label_dd_option: Value of which_value %s, mc_env_intf_name %s, mc_env_intf_cnt %s, mc_env_intf_cnt_max %s, mc_env_intf_cfg_pool_cnt %s\n"%(which_value, mc_env_intf_name, mc_env_intf_cnt, mc_env_intf_cnt_max, mc_env_intf_cfg_pool_cnt))

        if (self.mcl10):
            self.mcl10.grid_forget();  self.mcl10 = None 
       
        self.mcl10 = Label(self.mc_env_intf_nl, font=MyFontH2, text="Choose The Type Of %s Environment Interface: "%(mc_env_intf_name))
        self.mcl10.grid(row=0, column=0, sticky='W')
        self.mcl10.rowconfigure(0,weight=1)
        
        self.mc_env_choose_int_list.clear()
        
        if int(which_value) == 0:
            self.mc_env_choose_int_val.set("Click Drop-Down For Options")
        elif int(which_value) == 1:
            self.mc_env_choose_int_val.set("Default Interface")
        #elif int(which_value) == 2:
        #    self.mc_env_choose_int_val.set("User Defined Interface")
        elif int(which_value) == 3:
            self.mc_env_choose_int_val.set("Load Interface")
        
        #self.mc_env_choose_int_list = {"Default Interface":1, "User Defined Interface":2, "Load Interface":3}
        self.mc_env_choose_int_list = {"Default Interface":1, "Load Interface":3}
        
        if (self.mco1):
            self.mco1.grid_forget(); self.mco1 = None

        log.debug("mc_env_intf_label_dd_option : Value of which_value %s self.mc_env_choose_int_val %s\n"%(which_value, self.mc_env_choose_int_val.get()))
        self.mco1 = OptionMenu(self.mc_env_intf_nl, self.mc_env_choose_int_val, *self.mc_env_choose_int_list, command=self.mc_env_choose_int_cmd_code)
        self.mco1.configure(width=39, activebackground="gray50", font=MyFontH2)
        menu = self.mco1.nametowidget(self.mco1.menuname)
        menu.config(font=MyFontH2, activebackground="gray50") 
        self.mco1.grid(row=0, column=1, sticky='WE')
        self.mco1.rowconfigure(0,weight=1)


    def mc_env_intf_win_layout_kcb(self):
        log.debug("mc_agt_widget_forget_cb: Going to Remove all the Env Interface related Widgets\n")

        if (self.mcl10):
            self.mcl10.grid_forget();  self.mcl10 = None 
        
        if (self.mco1):
            self.mco1.grid_forget();  self.mco1 = None 

        # Cleaning the mc_env_load_interface_kcb buttons
        self.mc_env_load_interface_kcb()

        # Code to close the env intf buttons
        self.mc_env_intf_rem_pic_sic_buttons_forget_cb(0)
        
        if (self.mc_env_intf_nl):
            self.mc_env_intf_nl.destroy(); self.mc_env_intf_nl = None


    def mc_env_intf_cfg_pool_exists(self):
        global mc_env_intf_find_idx 
        global mc_env_intf_arr 
        global mc_env_intf_cfg_pool 
        global mc_env_intf_cfg_pool_cnt 
        global mc_env_intf_cnt 
        global mc_env_intf_name

        log.debug("mc_env_intf_cfg_pool_exists : Value of mc_env_intf_name %s, mc_env_intf_cnt_max %d, mc_env_intf_cnt %d, mc_env_intf_arr %s\n"%(mc_env_intf_name, mc_env_intf_cnt_max, mc_env_intf_cnt, mc_env_intf_arr))
        
        # Mc env intf name
        if (len(mc_env_intf_arr) == 1) and (int(mc_env_intf_arr[0]) == 1):
            mc_env_intf_name = (str(self.mce2.get()).split(","))[1]
        else:
            mc_env_intf_name = mc_env_intf_arr[mc_env_intf_cnt+1] 
        log.debug("mc_env_intf_cfg_pool_exists : Value of mc_env_intf_name %s, mc_env_intf_cnt_max %d, mc_env_intf_cnt %d, mc_env_intf_arr %s\n"%(mc_env_intf_name, mc_env_intf_cnt_max, mc_env_intf_cnt, mc_env_intf_arr))

        # Element to be searched
        mc_env_intf_find_ele = self.mce2.get()+','+mc_env_intf_name
        log.debug("mc_env_intf_cfg_pool_exists : Value of mc_env_intf_find_ele %s mc_env_intf_cfg_pool %s"%(mc_env_intf_find_ele, mc_env_intf_cfg_pool))

        # Code to check if the particular agent with env_setup is already available in the mc_agt_cfg_pool 
        mc_env_intf_find_idx_tmp = self.find_index(mc_env_intf_find_ele, mc_env_intf_cfg_pool) 
        log.debug("mc_env_intf_cfg_pool_exists : Value of mc_env_intf_find_idx_tmp %s\n"%mc_env_intf_find_idx_tmp)

        if mc_env_intf_find_idx_tmp != None:
            mc_env_intf_find_idx = int(mc_env_intf_find_idx_tmp[0])
        else:
            mc_env_intf_find_idx = mc_env_intf_find_idx_tmp
        log.debug("mc_env_intf_cfg_pool_exists : Value of mc_env_intf_find_idx_tmp %s mc_env_intf_find_idx %s"%(mc_env_intf_find_idx_tmp, mc_env_intf_find_idx))


    def mc_env_intf_rem_pic_sic_buttons_cb(self):
        global mc_env_intf_cnt
        global mc_env_intf_cnt_max
        
        log.debug("mc_env_intf_rem_pic_sic_buttons_cb: Going to create env intf widget buttons\n")
        
        # Code to close the agt drv intf buttons
        self.mc_env_intf_rem_pic_sic_buttons_forget_cb(0)
        
        # MC ENv intf Frame Code
        if not (self.mc_env_intf_button_frame):
            self.mc_env_intf_button_frame = Frame(self.mc_env_intf_nl)
            self.mc_env_intf_button_frame.grid(row=1, column=0, columnspan=2, sticky='WE')
            #self.mc_env_intf_button_frame.rowconfigure(4,weight=1)
            self.mc_env_intf_button_frame.columnconfigure(0,weight=1)
        else:
            log.debug("mc_env_intf_rem_pic_sic_buttons_cb: Multi Cluster Agent Driver Intf Widget Frame already Exists\n")
            self.mc_env_intf_button_frame.grid() 

        # Codes for buttons
        if (mc_env_intf_cnt == 0) and (mc_env_intf_cnt == (mc_env_intf_cnt_max-1)):
            log.debug("mc_env_intf_rem_pic_sic_buttons_cb: if (mc_env_intf_cnt == 0) and (mc_env_intf_cnt == (mc_env_intf_cnt_max-1)) \n")
            if (self.mc_env_intf_return_to_env_menu_button): 
                self.mc_env_intf_return_to_env_menu_button.grid_forget(); self.mc_env_intf_return_to_env_menu_button = None

            self.mc_env_intf_return_to_env_menu_button = Button(self.mc_env_intf_button_frame, font=MyFontBtn, background="royalblue1", activebackground="blue2", text="RETURN TO ENV MENU", command=self.mc_env_intf_return_to_env_menu_button_code, highlightbackground='black', highlightthickness='2')
            self.mc_env_intf_return_to_env_menu_button.grid(row=0, column=0, sticky='WE')
            # self.mc_env_intf_return_to_env_menu_button.rowconfigure(0,weight=1)
            # else:
            #     self.mc_env_intf_return_to_env_menu_button.grid()
            
            if (self.mc_env_intf_save_cfg_button): 
                self.mc_env_intf_save_cfg_button.grid_forget(); self.mc_env_intf_save_cfg_button = None    
            
            self.mc_env_intf_save_cfg_button = Button(self.mc_env_intf_button_frame, font=MyFontBtn, background="goldenrod1", activebackground="goldenrod3", text="SAVE INTF CONFIG", command=self.mc_env_intf_save_cfg_button_code, highlightbackground='black', highlightthickness='2')
            self.mc_env_intf_save_cfg_button.grid(row=0, column=1, sticky='WE')
            # self.mc_env_intf_save_cfg_button.rowconfigure(0,weight=1)
            # else:
            #     self.mc_env_intf_save_cfg_button.grid()
        elif (mc_env_intf_cnt == 0) and (mc_env_intf_cnt < (mc_env_intf_cnt_max-1)):
            log.debug("mc_env_intf_rem_pic_sic_buttons_cb: elif (mc_env_intf_cnt == 0) and (mc_env_intf_cnt < (mc_env_intf_cnt_max-1)): \n")
            if (self.mc_env_intf_return_to_env_menu_button): 
                self.mc_env_intf_return_to_env_menu_button.grid_forget(); self.mc_env_intf_return_to_env_menu_button = None

            self.mc_env_intf_return_to_env_menu_button = Button(self.mc_env_intf_button_frame, font=MyFontBtn, background="royalblue1", activebackground="blue2", text="RETURN TO ENV MENU", command=self.mc_env_intf_return_to_env_menu_button_code, highlightbackground='black', highlightthickness='2')
            self.mc_env_intf_return_to_env_menu_button.grid(row=0, column=0, sticky='WE')
            # self.mc_env_intf_return_to_env_menu_button.rowconfigure(0,weight=1)
            # else:
            #     self.mc_env_intf_return_to_env_menu_button.grid()
            
            if (self.mc_env_intf_next_cfg_button):
                self.mc_env_intf_next_cfg_button.grid_forget(); self.mc_env_intf_next_cfg_button = None
                
            self.mc_env_intf_next_cfg_button = Button(self.mc_env_intf_button_frame, font=MyFontBtn, background="goldenrod1", activebackground="goldenrod3", text="NEXT INTF CONFIG", command=self.mc_env_intf_final_after_int_cmd, highlightbackground='black', highlightthickness='2')
            self.mc_env_intf_next_cfg_button.grid(row=0, column=1, sticky='WE')
            # self.mc_env_intf_next_cfg_button.rowconfigure(0,weight=1)
            # else:
            #     self.mc_env_intf_next_cfg_button.grid()
        elif (mc_env_intf_cnt > 0) and (mc_env_intf_cnt < (mc_env_intf_cnt_max-1)):
            log.debug("mc_env_intf_rem_pic_sic_buttons_cb: elif (mc_env_intf_cnt > 0) and (mc_env_intf_cnt < (mc_env_intf_cnt_max-1)): \n")
            if (self.mc_env_intf_return_to_env_menu_button): 
                self.mc_env_intf_return_to_env_menu_button.grid_forget(); self.mc_env_intf_return_to_env_menu_button = None

            self.mc_env_intf_return_to_env_menu_button = Button(self.mc_env_intf_button_frame, font=MyFontBtn, background="royalblue1", activebackground="blue2", text="RETURN TO ENV MENU", command=self.mc_env_intf_return_to_env_menu_button_code, highlightbackground='black', highlightthickness='2')
            self.mc_env_intf_return_to_env_menu_button.grid(row=0, column=0, sticky='WE')
            # self.mc_env_intf_return_to_env_menu_button.rowconfigure(0,weight=1)
            # else:
            #     self.mc_env_intf_return_to_env_menu_button.grid()
            
            if (self.mc_env_intf_prev_cfg_button): 
                self.mc_env_intf_prev_cfg_button.grid_forget(); self.mc_env_intf_prev_cfg_button = None
            
            self.mc_env_intf_prev_cfg_button = Button(self.mc_env_intf_button_frame, font=MyFontBtn, background="PeachPuff2", activebackground="PeachPuff4", text="PREVIOUS INTF CONFIG", command=self.mc_env_intf_prev_cfg_button_code, highlightbackground='black', highlightthickness='2')
            self.mc_env_intf_prev_cfg_button.grid(row=0, column=1, sticky='WE')
            # self.mc_env_intf_prev_cfg_button.rowconfigure(0,weight=1)
            # else:
            #     self.mc_env_intf_prev_cfg_button.grid()
            
            if (self.mc_env_intf_next_cfg_button):
                self.mc_env_intf_next_cfg_button.grid_forget(); self.mc_env_intf_next_cfg_button = None
                
            self.mc_env_intf_next_cfg_button = Button(self.mc_env_intf_button_frame, font=MyFontBtn, background="goldenrod1", activebackground="goldenrod3", text="NEXT INTF CONFIG", command=self.mc_env_intf_final_after_int_cmd, highlightbackground='black', highlightthickness='2')
            self.mc_env_intf_next_cfg_button.grid(row=0, column=2, sticky='WE')
            # self.mc_env_intf_next_cfg_button.rowconfigure(0,weight=1)
            # else:
            #     self.mc_env_intf_next_cfg_button.grid()
        elif (mc_env_intf_cnt > 0) and (mc_env_intf_cnt == (mc_env_intf_cnt_max-1)):
            log.debug("mc_env_intf_rem_pic_sic_buttons_cb: elif (mc_env_intf_cnt > 0) and (mc_env_intf_cnt == (mc_env_intf_cnt_max-1)): \n")
            if (self.mc_env_intf_return_to_env_menu_button): 
                self.mc_env_intf_return_to_env_menu_button.grid_forget(); self.mc_env_intf_return_to_env_menu_button = None

            self.mc_env_intf_return_to_env_menu_button = Button(self.mc_env_intf_button_frame, font=MyFontBtn, background="royalblue1", activebackground="blue2", text="RETURN TO ENV MENU", command=self.mc_env_intf_return_to_env_menu_button_code, highlightbackground='black', highlightthickness='2')
            self.mc_env_intf_return_to_env_menu_button.grid(row=0, column=0, sticky='WE')
            # self.mc_env_intf_return_to_env_menu_button.rowconfigure(0,weight=1)
            # else:
            #     self.mc_env_intf_return_to_env_menu_button.grid()
            
            if (self.mc_env_intf_prev_cfg_button): 
                self.mc_env_intf_prev_cfg_button.grid_forget(); self.mc_env_intf_prev_cfg_button = None
            
            self.mc_env_intf_prev_cfg_button = Button(self.mc_env_intf_button_frame, font=MyFontBtn, background="PeachPuff2", activebackground="PeachPuff4", text="PREVIOUS INTF CONFIG", command=self.mc_env_intf_prev_cfg_button_code, highlightbackground='black', highlightthickness='2')
            self.mc_env_intf_prev_cfg_button.grid(row=0, column=1, sticky='WE')
            # self.mc_env_intf_prev_cfg_button.rowconfigure(0,weight=1)
            # else:
            #     self.mc_env_intf_prev_cfg_button.grid()
            
            if (self.mc_env_intf_save_cfg_button): 
                self.mc_env_intf_save_cfg_button.grid_forget(); self.mc_env_intf_save_cfg_button = None    
            
            self.mc_env_intf_save_cfg_button = Button(self.mc_env_intf_button_frame, font=MyFontBtn, background="goldenrod1", activebackground="goldenrod3", text="SAVE INTF CONFIG", command=self.mc_env_intf_save_cfg_button_code, highlightbackground='black', highlightthickness='2')
            self.mc_env_intf_save_cfg_button.grid(row=0, column=2, sticky='WE')
            # self.mc_env_intf_save_cfg_button.rowconfigure(0,weight=1)
            # else:
            #     self.mc_env_intf_save_cfg_button.grid()
            
    
    def mc_env_intf_rem_pic_sic_buttons_forget_cb(self, which_value):
        log.debug("mc_env_intf_rem_pic_sic_buttons_forget_cb: Going to Remove all the MC Intf related Widgets\n")
       
        if int(which_value) == 0:
            if (self.mc_env_intf_return_to_env_menu_button):
                self.mc_env_intf_return_to_env_menu_button.grid_forget(); self.mc_env_intf_return_to_env_menu_button = None
            
            if (self.mc_env_intf_prev_cfg_button):
                self.mc_env_intf_prev_cfg_button.grid_forget(); self.mc_env_intf_prev_cfg_button = None
            
            if (self.mc_env_intf_next_cfg_button):
                self.mc_env_intf_next_cfg_button.grid_forget(); self.mc_env_intf_next_cfg_button = None
            
            if (self.mc_env_intf_save_cfg_button):
                self.mc_env_intf_save_cfg_button.grid_forget(); self.mc_env_intf_save_cfg_button = None

            if (self.mc_env_intf_button_frame):
                self.mc_env_intf_button_frame.grid_forget(); self.mc_env_intf_button_frame = None
        
        elif int(which_value) == 1:
            if (self.mc_env_intf_return_to_env_menu_button):
                self.mc_env_intf_return_to_env_menu_button.grid_forget();
            
            if (self.mc_env_intf_prev_cfg_button):
                self.mc_env_intf_prev_cfg_button.grid_forget();
            
            if (self.mc_env_intf_next_cfg_button):
                self.mc_env_intf_next_cfg_button.grid_forget();
            
            if (self.mc_env_intf_save_cfg_button):
                self.mc_env_intf_save_cfg_button.grid_forget();

            if (self.mc_env_intf_button_frame):
                self.mc_env_intf_button_frame.grid_forget();


    def mc_env_choose_int_cmd_code(self, *args):
        global mc_env_intf_cfg_pool_cnt
        global mc_env_intf_cfg_pool
        global mc_env_intf_find_idx
        global mc_env_intf_cnt
        global mc_env_intf_cnt_max
        global mc_env_intf_name
        global mc_env_intf_intf_type
        global mc_intf_arr_range
        log.debug("mc_env_choose_int_cmd_code: Launched when the interface dropdown option is choosen\n")

        # CHeck if already the env,agt,drv interface exists
        self.mc_env_intf_cfg_pool_exists()
                
        # Check if any dummy env intf pool exists, if not then create a new entry
        if mc_env_intf_find_idx == None:
            if self.find_index(mc_env_intf_cfg_pool_dummy, mc_env_intf_cfg_pool) == None: 
                # Creating default entry for agent
                mc_env_intf_cfg_pool.append([[] for x in range(mc_intf_arr_range)])
                
                # TRY
                mc_env_intf_cfg_pool_cnt = (self.find_index(mc_env_intf_cfg_pool_dummy, mc_env_intf_cfg_pool))[0];
                log.debug("mc_choose_int_cmd_code: mc_env_intf_cfg_pool_cnt %d\n"% mc_env_intf_cfg_pool_cnt)
        
        log.debug("mc_env_choose_int_cmd_code: Value of mc_env_intf_cfg_pool %s\n"%mc_env_intf_cfg_pool)

        if self.mc_env_choose_int_list.get(self.mc_env_choose_int_val.get())==1:
            log.debug("mc_env_choose_int_cmd_code: Launching mc_env_default_interface\n")
            self.mc_env_default_interface()    
        elif self.mc_env_choose_int_list.get(self.mc_env_choose_int_val.get())==2:
            log.debug("mc_env_choose_int_cmd_code: Launching mc_env_user_defined_interface\n")
            self.mc_env_user_defined_interface() 
        elif self.mc_env_choose_int_list.get(self.mc_env_choose_int_val.get())==3:
            log.debug("mc_env_choose_int_cmd_code: Launching mc_env_load_interface\n")
            self.mc_env_load_interface() 

    def mc_env_intf_return_to_env_menu_button_code(self):
        log.debug("mc_env_intf_return_to_env_menu_button_code: Returning to Env Configuration without saving any info for env interface\n")
        self.mc_env_intf_win_layout_kcb();

    def mc_env_intf_prev_cfg_button_code(self):
        global mc_env_intf_cnt 
        global mc_env_intf_name 
        global mc_env_intf_intf_type 
        global mc_env_intf_find_idx
        global mc_env_intf_type
        global mc_env_intf_cnt_max 
        global mc_env_intf_cfg_pool_cnt
        log.debug("mc_env_intf_prev_cfg_button_code: Going to Previous state of agt drv intf configuration\n")
        
        # Reducing the mc_env_intf_cnt count
        mc_env_intf_cnt -= 1
        
        # CHeck if already the env,agt,drv interface exists
        self.mc_env_intf_cfg_pool_exists()
            
        # env intf name 
        log.debug("mv_env_interface : Value of mc_env_intf_name %s, mc_env_intf_cnt_max %d, mc_env_intf_cnt %d\n"%(mc_env_intf_name, mc_env_intf_cnt_max, mc_env_intf_cnt))
        mc_env_intf_name = mc_env_intf_cfg_pool[mc_env_intf_find_idx][1] 
        log.debug("mv_env_interface : Value of mc_env_intf_name %s, mc_env_intf_cnt_max %d, mc_env_intf_cnt %d\n"%(mc_env_intf_name, mc_env_intf_cnt_max, mc_env_intf_cnt))
        
        # env Interface Type  
        mc_env_intf_intf_type = mc_env_intf_cfg_pool[mc_env_intf_find_idx][2] 
        log.debug("mv_env_interface : Value of mc_env_intf_intf_type %d, mc_env_intf_cnt_max %d, mc_env_intf_cnt %d\n"%(mc_env_intf_intf_type, mc_env_intf_cnt_max, mc_env_intf_cnt))
        
        # Remove any mcal4 - interface label if any exists
        self.mc_env_intf_label_dd_option(mc_env_intf_intf_type)

        # Going to create the agt drv intf widget buttons
        self.mc_env_intf_rem_pic_sic_buttons_cb()


    def mc_env_intf_save_cfg_button_code(self):
        global mc_env_intf_arr 
        global mc_env_cfg_pool
        global mc_env_find_idx 
        global mc_env_no_cur 
        global mc_env_intf_cfg_pool
        log.debug("mc_env_intf_save_cfg_button_code: Going to Save the env intf configuration into mc_env_intf_cfg_pool\n")
    
        # Local Variable 
        env_intf_cnt = 0

        # Cleaning up the interface entry if any exists before saving the env interface configurations
        if mc_env_find_idx != None:
            log.debug("mc_env_intf_save_cfg_button_code: Before CLearning the mc_env_find_idx = %d, mc_env_cfg_pool = %s, mc_env_cfg_pool_prev %s\n"%(mc_env_find_idx, mc_env_cfg_pool, mc_env_cfg_pool_prev))
            if mc_env_cfg_pool[mc_env_find_idx][7] != []:
                mc_env_cfg_pool_prev.append(mc_env_cfg_pool[mc_env_find_idx])
                del mc_env_cfg_pool[mc_env_find_idx][7][:]
            log.debug("mc_env_intf_save_cfg_button_code: After CLearning the mc_env_find_idx = %d, mc_env_cfg_pool = %s, mc_env_cfg_pool_prev = %s\n"%(mc_env_find_idx, mc_env_cfg_pool, mc_env_cfg_pool_prev))
        else:
            log.debug("mc_env_intf_save_cfg_button_code: Before CLearning the mc_env_no_cur = %d, mc_env_cfg_pool = %s, mc_env_cfg_pool_prev = %s\n"%(mc_env_no_cur, mc_env_cfg_pool, mc_env_cfg_pool_prev))
            if mc_env_cfg_pool[mc_env_no_cur][7] != []:
                mc_env_cfg_pool_prev.append(mc_env_cfg_pool[mc_env_no_cur])
                del mc_env_cfg_pool[mc_env_no_cur][7][:]
            log.debug("mc_env_intf_save_cfg_button_code: After CLearning the mc_env_no_cur = %d, mc_env_cfg_pool = %s, mc_env_cfg_pool_prev = %s\n"%(mc_env_no_cur, mc_env_cfg_pool, mc_env_cfg_pool_prev))

        # Finding the env name which will be used for env intf name 
        mc_env_name = (str(self.mce2.get()).split(","))[1]

        # Adding the details ofthe interface as the first element 
        if mc_env_find_idx != None:
            mc_env_cfg_pool[mc_env_find_idx][7].append(str(self.mce9.get()))
        else:
            mc_env_cfg_pool[mc_env_no_cur][7].append(str(self.mce9.get()))

        while env_intf_cnt < int(mc_env_intf_arr[0]): 
            # Finding the env name 
            if (len(mc_env_intf_arr) == 1) and (int(mc_env_intf_arr[0]) == 1):
                mc_env_intf_name = mc_env_name 
            else:
                mc_env_intf_name = mc_env_intf_arr[env_intf_cnt+1] 
            log.debug("mc_env_intf_cfg_pool_exists : Value of mc_env_intf_name %s, mc_env_intf_cnt_max %d, env_intf_cnt %d, mc_env_intf_arr %s\n"%(mc_env_intf_name, mc_env_intf_cnt_max, env_intf_cnt, mc_env_intf_arr))

            # Element to be searched
            mc_env_intf_find_ele = self.mce2.get()+','+mc_env_intf_name
            log.debug("mc_env_intf_save_cfg_button_code : Value of mc_env_intf_find_ele %s mc_env_intf_cfg_pool %s"%(mc_env_intf_find_ele, mc_env_intf_cfg_pool))

            # Code to check if the particular agent with env_setup is already available in the mc_env_cfg_pool 
            mc_env_intf_find_idx_tmp = self.find_index(mc_env_intf_find_ele, mc_env_intf_cfg_pool) 
            log.debug("mc_env_intf_save_cfg_button_code : Value of mc_env_intf_find_idx_tmp %s\n"%mc_env_intf_find_idx_tmp)

            if mc_env_intf_find_idx_tmp != None:
                mc_env_intf_find_idx = int(mc_env_intf_find_idx_tmp[0])
            else:
                mc_env_intf_find_idx = mc_env_intf_find_idx_tmp
            log.debug("mc_env_intf_save_cfg_button_code : Value of mc_env_intf_find_idx_tmp %s mc_env_intf_find_idx %s"%(mc_env_intf_find_idx_tmp, mc_env_intf_find_idx))
            log.debug("mc_env_intf_save_cfg_button_code : Value of mc_env_intf_cfg_pool[%d] = %s"%(int(mc_env_intf_find_idx), mc_env_intf_cfg_pool[mc_env_intf_find_idx]))

            if mc_env_intf_find_idx != None: 
                if mc_env_find_idx != None:
                    log.debug("mc_env_intf_save_cfg_button_code : Value of mc_env_find_idx %d mc_env_cfg_pool %s"%(mc_env_find_idx, mc_env_cfg_pool))
                    # Loading the Value of interface variables from mc_env_intf_cfg_pool to mc_env_cfg_pool
                    mc_env_cfg_pool[mc_env_find_idx][7].append(mc_env_intf_cfg_pool[mc_env_intf_find_idx])
                    log.debug("mc_env_intf_save_cfg_button_code : Value of mc_env_cfg_pool[%d][7] = %s"%(int(mc_env_find_idx), mc_env_cfg_pool[mc_env_find_idx][7]))
                else:
                    log.debug("mc_env_intf_save_cfg_button_code : Value of mc_env_no_cur %d mc_env_cfg_pool %s"%(mc_env_no_cur, mc_env_cfg_pool))
                    # Loading the Value of interface variables from mc_env_intf_cfg_pool to mc_env_cfg_pool
                    mc_env_cfg_pool[mc_env_no_cur][7].append(mc_env_intf_cfg_pool[mc_env_intf_find_idx])
                    log.debug("mc_env_intf_save_cfg_button_code : Value of mc_env_cfg_pool[%d][7] = %s"%(int(mc_env_no_cur), mc_env_cfg_pool[mc_env_no_cur][7]))
                    log.debug("mc_env_intf_save_cfg_button_code : Value of mc_env_cfg_pool %s"%(mc_env_cfg_pool))

            # Incremnting Local Variabel value
            env_intf_cnt += 1

            log.debug("mc_env_intf_save_cfg_button_code : Value of mc_env_cfg_pool %s"%(mc_env_cfg_pool))
        
        # Code to close the env intf buttons
        self.mc_env_intf_win_layout_kcb()
        

    def mc_env_intf_final_after_int_cmd(self):   
        global mc_env_intf_cfg_pool_cnt
        global mc_env_intf_cfg_pool
        global mc_env_intf_find_idx
        global mc_env_intf_cnt
        global mc_env_intf_cnt_max
        global mc_env_intf_name
        global mc_env_intf_intf_type
        log.debug("mc_env_intf_final_after_int_cmd: Launching the code after the int cmd is executed and for incrementing counts\n")
 
        #TRY # Increment the global agt pool cnt if the env-agt config doesnt exists
        #TRY if mc_env_intf_find_idx == None:
        #TRY     if self.find_index(mc_env_intf_cfg_pool_dummy, mc_env_intf_cfg_pool) == None: 
        #TRY         # Creating default entry for agent
        #TRY         mc_env_intf_cfg_pool_cnt+=1

        # Incremnting the mc_env_intf_cnt value at the end of process
        if (mc_env_intf_cnt < (mc_env_intf_cnt_max-1)):
            mc_env_intf_cnt += 1
        
            # CHeck if already the env,agt,drv interface exists.
            self.mc_env_intf_cfg_pool_exists()
            log.debug("mc_choose_int_cmd_code: Value of mc_env_intf_name %s, mc_env_intf_cnt %d, mc_env_intf_cfg_pool_cnt %d, mc_env_intf_cfg_pool %s\n"%(mc_env_intf_name, mc_env_intf_cnt, mc_env_intf_cfg_pool_cnt, mc_env_intf_cfg_pool))
        
            if mc_env_intf_find_idx == None:
                # Remove any mcal4 - interface label if any exists
                self.mc_env_intf_label_dd_option(0)
                log.debug("mc_choose_int_cmd_code: Value of mc_env_intf_name %s, mc_env_intf_cnt %d, mc_env_intf_cfg_pool_cnt %d, mc_env_intf_cfg_pool %s\n"%(mc_env_intf_name, mc_env_intf_cnt, mc_env_intf_cfg_pool_cnt, mc_env_intf_cfg_pool))
            else:   
                # MC Agt Drv Interface Type  
                mc_env_intf_intf_type = mc_env_intf_cfg_pool[mc_env_intf_find_idx][2] 
                log.debug("mc_agt_interface : Value of mc_env_intf_intf_type %s, mc_env_intf_cnt_max %d, mc_env_intf_cnt %d\n"%(mc_env_intf_intf_type, mc_env_intf_cnt_max, mc_env_intf_cnt))

                # Remove any mcal4 - interface label if any exists
                self.mc_env_intf_label_dd_option(mc_env_intf_intf_type)
                log.debug("mc_choose_int_cmd_code: Value of mc_env_intf_name %s, mc_env_intf_cnt %d, mc_env_intf_cfg_pool_cnt %d, mc_env_intf_cfg_pool %s\n"%(mc_env_intf_name, mc_env_intf_cnt, mc_env_intf_cfg_pool_cnt, mc_env_intf_cfg_pool))

        # Going to create the agt drv intf widget buttons
        self.mc_env_intf_rem_pic_sic_buttons_cb()

    def mc_env_default_interface(self):
        global mc_env_intf_find_idx
        global mc_env_intf_cfg_pool_cnt
        global mc_env_intf_cfg_pool
        global mc_env_intf_name 
        global mc_env_intf_cnt 
        global mc_env_intf_type
        log.debug("mc_default_interface: Launching mc_default_interface\n")
        
        # CHeck if already the env,agt,drv interface exists
        self.mc_env_intf_cfg_pool_exists()
   
        if mc_env_intf_find_idx == None:
            # Loading up the env,agt,drv name 
            mc_env_intf_cfg_pool[mc_env_intf_cfg_pool_cnt][0] = self.mce2.get()+','+mc_env_intf_name
            
            # MC Agt Drv Name  
            mc_env_intf_cfg_pool[mc_env_intf_cfg_pool_cnt][1] = mc_env_intf_name 
            
            # MC Agt Drv Interface Type  
            mc_env_intf_cfg_pool[mc_env_intf_cfg_pool_cnt][2] = 1 
            
            log.debug("mc_default_interface : mc_env_intf_cfg_pool %s\n"%mc_env_intf_cfg_pool)
        else:
            log.debug("mc_default_interface : Agent,Drv Intf already exists in mc_env_intf_cfg_pool. Compare and if different re-load\n")
            mc_env_intf_cfg_pool_tmp = [[] for x in range(mc_intf_arr_range)]  # [[],[],[],[],[],[],[],[]];
            log.debug("mc_default_interface : Value of mc_env_intf_cfg_pool_tmp %s\n"%mc_env_intf_cfg_pool_tmp)
            
            # Loading up the env,agt,drv name 
            mc_env_intf_cfg_pool_tmp[0] = self.mce2.get()+','+mc_env_intf_name
            
            # MC Agt Drv Name  
            mc_env_intf_cfg_pool_tmp[1] = mc_env_intf_name 
            
            # MC Agt Drv Interface Type  
            mc_env_intf_cfg_pool_tmp[2] = 1 
            
            log.debug("mc_default_interface : mc_env_intf_cfg_pool[%d] %s, mc_env_intf_cfg_pool_tmp %s"%(mc_env_intf_find_idx, mc_env_intf_cfg_pool[mc_env_intf_find_idx], mc_env_intf_cfg_pool_tmp))

            if mc_env_intf_cfg_pool[mc_env_intf_find_idx] != mc_env_intf_cfg_pool_tmp:
                log.debug("mc_default_interface : mc_env_intf_cfg_pool[mc_env_intf_find_idx] != mc_env_intf_cfg_pool_tmp. Re-loading the pool\n")
                mc_env_intf_cfg_pool[mc_env_intf_find_idx] = mc_env_intf_cfg_pool_tmp    
            else:
                log.debug("mc_default_interface : mc_env_intf_cfg_pool[mc_env_intf_find_idx] == mc_env_intf_cfg_pool_tmp. Not Re-loading the pool\n")
                mc_env_intf_cfg_pool_prev.append(mc_env_intf_cfg_pool_tmp) 
                log.debug("mc_default_interface : mc_env_intf_cfg_pool[mc_env_intf_find_idx] == mc_env_intf_cfg_pool_tmp. Appending into mc_env_intf_cfg_pool_prev %s\n"%mc_env_intf_cfg_pool_prev)

        # Calling the code to do count increment and button enablement
        # self.mc_env_intf_final_after_int_cmd()
            
        # Going to create the env intf widget buttons
        self.mc_env_intf_rem_pic_sic_buttons_cb()


    def mc_env_user_defined_interface(self):
        global mc_env_udif_frame_loop
        log.debug("mc_user_defined_interface: Launching mc_user_defined_interface\n")
        
        # Code to close the env intf buttons
        self.mc_env_intf_rem_pic_sic_buttons_forget_cb(0)
   
        # Incrementing the mc_env_udif_frame_loop as 0 is used for frame. 
        mc_env_udif_frame_loop = 1
        self.mc_env_udif_name_e.append([])
        self.mc_env_udif_type_e.append([])
        self.mc_env_udif_le_e.append([])
        self.mc_env_udif_re_e.append([])
        self.mc_env_udif_cb_e.append([])
        self.mc_env_udif_mp_e.append([])

        if not (self.mc_env_udif_frame):
            self.mc_env_udif_frame = Frame(self.mc_env_intf_nl, width=50, bg='dark goldenrod', highlightbackground='dark goldenrod', highlightthickness='3')
            self.mc_env_udif_frame.grid(row=1, column=0, columnspan=2, sticky='WE')
            self.mc_env_udif_frame.rowconfigure(1,weight=1)
        else:
            log.debug("Frame already Exists\n")
            self.mc_env_udif_frame.grid() 

        if not (self.mc_env_udif_name):
            self.mc_env_udif_name = Label(self.mc_env_udif_frame, font=MyFontH2, text="Signal Name", bg='goldenrod')
            self.mc_env_udif_name.grid(row=0, column=0, sticky='WE')
            self.mc_env_udif_name.rowconfigure(0, weight=1)
        else:
            self.mc_env_udif_name.grid()

        if not (self.mc_env_udif_type):
            self.mc_env_udif_type = Label(self.mc_env_udif_frame, font=MyFontH2, text="Signal Type", bg='goldenrod')
            self.mc_env_udif_type.grid(row=0, column=1, sticky='WE')
            self.mc_env_udif_type.rowconfigure(0, weight=1)
        else:
            self.mc_env_udif_type.grid()

        if not (self.mc_env_udif_le):
            self.mc_env_udif_le = Label(self.mc_env_udif_frame, font=MyFontH2, text="Packed Elements", bg='goldenrod')
            self.mc_env_udif_le.grid(row=0, column=2, sticky='WE')
            self.mc_env_udif_le.rowconfigure(0, weight=1)
        else:
            self.mc_env_udif_le.grid()

        if not (self.mc_env_udif_re):
            self.mc_env_udif_re = Label(self.mc_env_udif_frame, font=MyFontH2, text="Un Packed Elements", bg='goldenrod')
            self.mc_env_udif_re.grid(row=0, column=3, sticky='WE')
            self.mc_env_udif_re.rowconfigure(0, weight=1)
        else:
            self.mc_env_udif_re.grid()

        if not (self.mc_env_udif_cb):
            self.mc_env_udif_cb = Label(self.mc_env_udif_frame, font=MyFontH2, text="Clocking Block", bg='goldenrod')
            self.mc_env_udif_cb.grid(row=0, column=4, sticky='WE')
            self.mc_env_udif_cb.rowconfigure(0, weight=1)
        else:
            self.mc_env_udif_cb.grid()

        if not (self.mc_env_udif_mp):
            self.mc_env_udif_mp = Label(self.mc_env_udif_frame, font=MyFontH2, text="Modport", bg='goldenrod')
            self.mc_env_udif_mp.grid(row=0, column=5, sticky='WE')
            self.mc_env_udif_mp.rowconfigure(0, weight=1)
        else:
            self.mc_env_udif_mp.grid()

        # Calling the code for creating the mc user defined interface widget
        self.mc_env_user_defined_interface_entry_widgets()

        self.mc_env_udi_nxt = Button(self.mc_env_intf_nl, font=MyFontBtn, background="IndianRed1", activebackground="IndianRed3", text="NEXT INTERFACE CONFIG", command=self.mc_env_udif_next_interface_config)
        self.mc_env_udi_nxt.grid(row=2, column=0, sticky='WE')
        self.mc_env_udi_nxt.rowconfigure(2,weight=1)
        
        self.mc_env_udi_done = Button(self.mc_env_intf_nl, font=MyFontBtn, background="sienna1", activebackground="sienna3", text="DONE INTERFACE CONFIG", command=self.mc_env_udif_done_interface_config)
        self.mc_env_udi_done.pack(side=RIGHT)
        self.mc_env_udi_done.grid(row=2, column=1, sticky='WE')
        self.mc_env_udi_done.rowconfigure(2,weight=1)


    def mc_env_user_defined_interface_entry_widgets(self):
        global mc_env_udif_frame_loop
        log.debug("mc_env_user_defined_interface_entry_widgets: Launching / Building the Entry widget for mc user defined interface\n")
        
        self.mc_env_udif_name_e.append([])
        if not (self.mc_env_udif_name_e[mc_env_udif_frame_loop]):
            self.mc_env_udif_name_e[mc_env_udif_frame_loop] = Entry(self.mc_env_udif_frame, font=MyFontH2)
            self.mc_env_udif_name_e[mc_env_udif_frame_loop].grid(row=mc_env_udif_frame_loop, column=0)
            self.mc_env_udif_name_e[mc_env_udif_frame_loop].rowconfigure(1,weight=1)
        else:
            self.mc_env_udif_name_e[mc_env_udif_frame_loop].grid()    
        
        self.mc_env_udif_type_e.append([])
        if not (self.mc_env_udif_type_e[mc_env_udif_frame_loop]):
            self.mc_env_udif_type_e[mc_env_udif_frame_loop] = Entry(self.mc_env_udif_frame, font=MyFontH2)
            self.mc_env_udif_type_e[mc_env_udif_frame_loop].grid(row=mc_env_udif_frame_loop, column=1)
            self.mc_env_udif_type_e[mc_env_udif_frame_loop].rowconfigure(1,weight=1)
        else:
            self.mc_env_udif_type_e[mc_env_udif_frame_loop].grid()
        
        self.mc_env_udif_le_e.append([])
        if not (self.mc_env_udif_le_e[mc_env_udif_frame_loop]):
            self.mc_env_udif_le_e[mc_env_udif_frame_loop] = Entry(self.mc_env_udif_frame, font=MyFontH2)
            self.mc_env_udif_le_e[mc_env_udif_frame_loop].grid(row=mc_env_udif_frame_loop, column=2)
            self.mc_env_udif_le_e[mc_env_udif_frame_loop].rowconfigure(1,weight=1)
        else:
            self.mc_env_udif_le_e[mc_env_udif_frame_loop].grid()
        
        self.mc_env_udif_re_e.append([])
        if not (self.mc_env_udif_re_e[mc_env_udif_frame_loop]):
            self.mc_env_udif_re_e[mc_env_udif_frame_loop] = Entry(self.mc_env_udif_frame, font=MyFontH2)
            self.mc_env_udif_re_e[mc_env_udif_frame_loop].grid(row=mc_env_udif_frame_loop, column=3)
            self.mc_env_udif_re_e[mc_env_udif_frame_loop].rowconfigure(1,weight=1)
        else:
            self.mc_env_udif_re_e[mc_env_udif_frame_loop].grid()
        
        self.mc_env_udif_cb_e.append([])
        if not (self.mc_env_udif_cb_e[mc_env_udif_frame_loop]):
            self.mc_env_udif_cb_e[mc_env_udif_frame_loop] = Entry(self.mc_env_udif_frame, font=MyFontH2)
            self.mc_env_udif_cb_e[mc_env_udif_frame_loop].grid(row=mc_env_udif_frame_loop, column=4)
            self.mc_env_udif_cb_e[mc_env_udif_frame_loop].rowconfigure(1,weight=1)
        else:
            self.mc_env_udif_cb_e[mc_env_udif_frame_loop].grid()

        self.mc_env_udif_mp_e.append([])
        if not (self.mc_env_udif_mp_e[mc_env_udif_frame_loop]):
            self.mc_env_udif_mp_e[mc_env_udif_frame_loop] = Entry(self.mc_env_udif_frame, font=MyFontH2)
            self.mc_env_udif_mp_e[mc_env_udif_frame_loop].grid(row=mc_env_udif_frame_loop, column=5)
            self.mc_env_udif_mp_e[mc_env_udif_frame_loop].rowconfigure(1,weight=1)
        else:
            self.mc_env_udif_mp_e[mc_env_udif_frame_loop].grid() 

    
    def mc_env_udif_next_interface_config(self):
        global mc_env_udif_loop
        global mc_env_udif_frame_loop
        log.debug("mc_env_udif_next_interface_config: Launching mc_env_udif_next_interface_config\n")

        mc_env_udif_loop += 1;
        mc_env_udif_frame_loop += 1;
        self.mc_env_udi_nxt_kcb();
        self.mc_env_udi_done_kcb();

        # Calling the code for creating the mc user defined interface widget
        self.mc_env_user_defined_interface_entry_widgets()

        self.mc_env_udi_nxt = Button(self.mc_env_intf_nl, font=MyFontBtn, background="IndianRed1", activebackground="IndianRed3", text="NEXT INTERFACE CONFIG", command=self.mc_env_udif_next_interface_config)
        self.mc_env_udi_nxt.grid(row=2+mc_env_udif_loop, column=0, sticky='WE')
        self.mc_env_udi_nxt.rowconfigure(2+mc_env_udif_loop,weight=1)
        
        self.mc_env_udi_done = Button(self.mc_env_intf_nl, font=MyFontBtn, background="sienna1", activebackground="sienna3", text="DONE INTERFACE CONFIG", command=self.mc_env_udif_done_interface_config)
        self.mc_env_udi_done.pack(side=RIGHT)
        self.mc_env_udi_done.grid(row=2+mc_env_udif_loop, column=1, sticky='WE')
        self.mc_env_udi_done.rowconfigure(2+mc_env_udif_loop,weight=1)

    
    # Code for closing the mc user defined interface next config button in complete vip
    def mc_env_udi_nxt_kcb(self):
        if (self.mc_env_udi_nxt):
            self.mc_env_udi_nxt.grid_forget()
            #self.mc_env_udi_nxt.destroy()
        self.mc_env_udi_nxt = None

    # Code for closing the mc user defined interface done config button in complete vip
    def mc_env_udi_done_kcb(self):
        if (self.mc_env_udi_done):
            self.mc_env_udi_done.grid_forget()
            #self.mc_env_udi_done.destroy()
        self.mc_env_udi_done = None


    def mc_env_load_interface(self):
        log.debug("mc_env_load_interface: Going to create Env intf for Load interface defined interface\n")

        # Code to close the agt drv intf buttons
        self.mc_env_intf_rem_pic_sic_buttons_forget_cb(0)

        if not (self.mcl11):
            self.mcl11 = Label(self.mc_env_intf_nl, font=MyFontH2, text="Choose the Interface Spreadsheet To Load: ")
            self.mcl11.grid(row=1, column=0, sticky='W')
            self.mcl11.rowconfigure(1,weight=1)
        else:
            self.mcl11.grid_forget(); self.mcl11 = None
            self.mcl11 = Label(self.mc_env_intf_nl, font=MyFontH2, text="Choose the Interface Spreadsheet To Load: ")
            self.mcl11.grid(row=1, column=0, sticky='W')
            self.mcl11.rowconfigure(1,weight=1)
                
        if not (self.mce10):    
            self.mce10 = Entry(self.mc_env_intf_nl, font=MyFontH2, bg="goldenrod")
            self.mce10.delete(0, END)
            self.mce10.insert(0, 'Right Click To Load-Left Click To Enter')
            self.mce10.bind('<Button-3>', self.mc_env_load_interface_file_dialog)
            self.mce10.bind('<Button-1>', self.mc_env_load_interface_file_path)
            self.mce10.grid(row=1, column=1, sticky='WE')
            self.mce10.rowconfigure(1,weight=1)
        else:
            self.mce10.grid_forget(); self.mce10 = None
            self.mce10 = Entry(self.mc_env_intf_nl, font=MyFontH2)
            self.mce10.delete(0, END)
            self.mce10.insert(0, 'Right Click To Load-Left Click To Enter')
            self.mce10.bind('<Button-3>', self.mc_env_load_interface_file_dialog)
            self.mce10.bind('<Button-1>', self.mc_env_load_interface_file_path)
            self.mce10.grid(row=1, column=1, sticky='WE')
            self.mce10.rowconfigure(1,weight=1)
        
        self.mc_env_udi_done = Button(self.mc_env_intf_nl, font=MyFontH2, background="sienna1", activebackground="sienna3", text="DONE INTERFACE CONFIG", command=self.mc_env_udif_done_interface_config)
        self.mc_env_udi_done.grid(row=2, column=0, columnspan=2, sticky='WE')
        self.mc_env_udi_done.rowconfigure(2,weight=1)

    def mc_env_load_interface_file_dialog(self, *args):
        self.mce10.delete(0, END)
        #self.mce10.insert(0, tkFileDialog.askopenfilename(initialdir = ".",title = "Select file",filetypes = (("xlsx files","*.xlsx"),("all files","*.*"))))
        self.mce10.insert(0, filedialog.askopenfilename(initialdir = ".",title = "Select file",filetypes = (("xlsx files","*.xlsx"),("all files","*.*"))))
    
    def mc_env_load_interface_file_path(self, *args):
        if self.mce10.get() == 'Right Click To Load-Left Click To Enter':
            self.mce10.delete(0, END)
            self.mce10.insert(0, '')
        else:
            self.mce10.insert(0, '')
    
    def mc_env_load_interface_kcb(self):    
        if (self.mcl11):
            self.mcl11.grid_forget()
        self.mcl11 = None 
        if (self.mce10):
            self.mce10.grid_forget()
        self.mce10 = None

    def mc_env_udif_done_interface_config(self):
        global mc_env_intf_find_idx
        global mc_env_intf_cfg_pool 
        global mc_env_intf_cfg_pool_cnt
        global mc_env_udif_frame_loop
        global mc_env_udif_cb_element_loop_tmp
        global mc_env_udif_mp_element_loop_tmp
        global mc_env_udif_clock_cfg_array
        global mc_env_udif_cb_element_loop 
        global mc_env_udif_mp_element_loop 
        global mc_env_udif_cb_element_loop_tmp 
        global mc_env_udif_mp_element_loop_tmp
        log.debug("mc_env_udif_done_interface_config: Launching mc_env_udif_done_interface_config\n")

        # Default/ Initial Settings
        mc_env_udif_cb_element_loop_tmp = 0
        mc_env_udif_mp_element_loop_tmp = 0
        mc_env_udif_cb_element_loop = 0 
        mc_env_udif_mp_element_loop = 0
        mc_env_udif_cb_cfg_array = []
        mc_env_udif_clock_cfg_array = []
        mc_env_udif_mp_cfg_array = []
        mc_env_udif_intf_cfg_array = []

        # Code for parsing through the loaded spreadsheet 
        if self.mc_env_choose_int_list.get(self.mc_env_choose_int_val.get())==3:
            # Storing the env intf variables locally
            mc_env_intf_path_sheet = self.mce10.get()
            
            load_xls_file_path_tmp = (self.mce10.get()).split(",") 
           
            if len(load_xls_file_path_tmp)>1:
                load_xls_file_path = str(load_xls_file_path_tmp[0]).strip()
                search_user_sheet  = str(load_xls_file_path_tmp[1]).strip()
            else:
                load_xls_file_path = str(load_xls_file_path_tmp[0])
                search_user_sheet  = None 
            log.debug("mc_env_udif_done_interface_config: Value of load_xls_file_path %s search_user_sheet %s"%(load_xls_file_path,search_user_sheet))

            if not os.path.isfile(load_xls_file_path):
                log.error("mc_env_udif_done_interface_config : Please Load a Proper Interface Spreadsheet For Generating The Output\n")

            # Not Opening and then Loading, Just Loading: 01032021SUN
            # load_xls_file = open(load_xls_file_path, "r") 
            # wb = load_workbook(load_xls_file) 
            wb = load_workbook(load_xls_file_path) 

            #sheet = wb.get_sheet_names()
            sheet = wb.sheetnames
            for ws in sheet:
                log.debug("Name of the sheet is : for %s"%ws)
                if search_user_sheet != None:
                    log.debug("into search_user_sheet %s ws %s"%(search_user_sheet,ws))
                    if ws == search_user_sheet:
                        #sheet = wb.get_sheet_by_name(ws)
                        sheet = wb[ws]
                        log.debug("Name of the sheet selected is %s"%sheet) 
                        break
                elif ws == "Sheet1":
                    #sheet = wb.get_sheet_by_name(ws)
                    sheet = wb[ws]
                    log.debug("Name of the sheet selected is %s"%sheet)
                    break
                else:
                    continue

            # if wb.active <> sheet:
            if wb.active != sheet:
                log.info("mc_env_udif_done_interface_config : Required Interface Definition Sheet Is Not Found In Spreadsheet. Please Re-load Proper File!\n")

            log.debug("Name of the sheet is %s"% sheet) 
            mc_env_udif_frame_loop = len(sheet['A'])
            log.debug("mc_env_udif_done_interface_config : Value of mc_env_udif_frame_loop from spreadsheet is %d"% mc_env_udif_frame_loop)

        
        # Creating array structure for the required variables
        log.debug("mc_env_udif_done_interface_config : mc_env_udif_cb_cfg_array %s, mc_env_udif_clock_cfg_array %s, mc_env_udif_mp_cfg_array %s, mc_env_udif_cb_element_loop %s, mc_env_udif_mp_element_loop %s"%(mc_env_udif_cb_cfg_array, mc_env_udif_clock_cfg_array, mc_env_udif_mp_cfg_array, mc_env_udif_cb_element_loop, mc_env_udif_mp_element_loop))
        
        if self.mc_env_choose_int_list.get(self.mc_env_choose_int_val.get())==2:
            mc_env_udif_int_cfg_array = [[] for x in range(mc_env_udif_frame_loop)]
        elif self.mc_env_choose_int_list.get(self.mc_env_choose_int_val.get())==3:
            mc_env_udif_int_cfg_array = [[] for x in range(mc_env_udif_frame_loop-1)]
        log.debug("mc_env_udif_done_interface_config : 1. Value of mc_env_udif_int_cfg_array %s"% mc_env_udif_int_cfg_array)

    
        #if self.mc_env_choose_int_list.get(self.mc_env_choose_int_val.get())==2:
        #    mc_env_udif_intf_cfg_array.append([[] for x in range(mc_env_udif_frame_loop)])
        #elif self.mc_env_choose_int_list.get(self.mc_env_choose_int_val.get())==3:
        #    mc_env_udif_intf_cfg_array.append([[] for x in range(mc_env_udif_frame_loop-1)])
        #mc_env_udif_intf_cfg_array.insert(0,[])
        #log.debug("mc_env_udif_done_interface_config : 2. Value of mc_env_udif_intf_cfg_array %s"% mc_env_udif_intf_cfg_array)
        
        if self.mc_env_choose_int_list.get(self.mc_env_choose_int_val.get())==2:
            mc_env_udif_intf_cfg_array = [[] for x in range(mc_env_udif_frame_loop)]
        elif self.mc_env_choose_int_list.get(self.mc_env_choose_int_val.get())==3:
            mc_env_udif_intf_cfg_array = [[] for x in range(mc_env_udif_frame_loop-1)]
        mc_env_udif_intf_cfg_array.insert(0,[])
        log.debug("mc_env_udif_done_interface_config : 2. Value of mc_env_udif_intf_cfg_array %s"% mc_env_udif_intf_cfg_array)
    
        
        # Loading initial default values 
        if self.mc_env_choose_int_list.get(self.mc_env_choose_int_val.get())==2:
            mc_env_udif_intf_cfg_array[0] = (mc_env_udif_frame_loop) 
        elif self.mc_env_choose_int_list.get(self.mc_env_choose_int_val.get())==3:
            mc_env_udif_intf_cfg_array[0] = (mc_env_udif_frame_loop-1)
        log.debug("mc_env_udif_done_interface_config : 3. Value of mc_env_udif_intf_cfg_array %s"% mc_env_udif_intf_cfg_array)

        
        if self.mc_env_choose_int_list.get(self.mc_env_choose_int_val.get())==2:
            for n in range(mc_env_udif_frame_loop):
                mc_env_udif_int_cfg_array[n].append(self.mc_env_udif_name_e[n+1].get())
                mc_env_udif_int_cfg_array[n].append(self.mc_env_udif_type_e[n+1].get())
                if (self.mc_env_udif_le_e[n+1].get() != ''):
                    mc_env_udif_int_cfg_array[n].append('le')
                    mc_env_udif_le_tmp = (self.mc_env_udif_le_e[n+1].get()).split(",")
                    for i in range (len(mc_env_udif_le_tmp)):
                        mc_env_udif_int_cfg_array[n].append(mc_env_udif_le_tmp[i])
                if (self.mc_env_udif_re_e[n+1].get() != ''):
                    mc_env_udif_int_cfg_array[n].append('ree')
                    mc_env_udif_re_tmp = (self.mc_env_udif_re_e[n+1].get()).split(",")
                    for i in range (len(mc_env_udif_re_tmp)):
                        mc_env_udif_int_cfg_array[n].append(mc_env_udif_re_tmp[i])
                if (self.mc_env_udif_cb_e[n+1].get() != ''):
                    mc_env_udif_cb_tmp = (self.mc_env_udif_cb_e[n+1].get()).split(",")
                    for i in range (len(mc_env_udif_cb_tmp)):
                        mc_env_udif_int_cfg_array[n].append(mc_env_udif_cb_tmp[i])
                if (self.mc_env_udif_mp_e[n+1].get() != ''):
                    mc_env_udif_mp_tmp = (self.mc_env_udif_mp_e[n+1].get()).split(",")
                    for i in range (len(mc_env_udif_mp_tmp)):
                        mc_env_udif_int_cfg_array[n].append(mc_env_udif_mp_tmp[i])
                    
                log.debug("mc_env_udif_done_interface_config : 4. Value of mc_env_udif_int_cfg_array %s"%mc_env_udif_int_cfg_array)
                log.debug("mc_env_udif_done_interface_config : 4. Count of cb is  %d"% len(mc_env_udif_int_cfg_array[n]))
                log.debug("mc_env_udif_done_interface_config : 4. Value of mc_env_udif_frame_loop in mc_env_udif_done_interface_config is %d"% mc_env_udif_frame_loop)
                
                mc_env_udif_cb_cnt = len(mc_env_udif_int_cfg_array[n])
                log.debug("mc_env_udif_done_interface_config : 5. Value of mc_env_udif_cb_cnt %s"%mc_env_udif_cb_cnt)
             
                #mc_env_udif_intf_cfg_array[n+1] = mc_env_udif_int_cfg_array[n]
                #mc_env_udif_intf_cfg_array[1][n] = mc_env_udif_int_cfg_array[n]
                mc_env_udif_intf_cfg_array[n+1] = mc_env_udif_int_cfg_array[n]
                log.debug("mc_env_udif_done_interface_config : 6. mc_env_udif_intf_cfg_array %s, mc_env_udif_int_cfg_array %s"%(mc_env_udif_intf_cfg_array, mc_env_udif_int_cfg_array))

                for i in range (1, int(mc_env_udif_cb_cnt)):
                    if "-clk" in mc_env_udif_int_cfg_array[n][i]:
                        log.debug("Value of mc_env_udif_int_cfg_array[n][i] %s"% mc_env_udif_int_cfg_array[n][i])
                        if "-clk" == mc_env_udif_int_cfg_array[n][i]:
                            if (self.mc_env_udif_cb_e[n+1].get() != '') and  (self.mc_env_udif_mp_e[n+1].get() != ''):
                                mc_env_udif_clock_cfg_array.append([mc_env_udif_int_cfg_array[n][0], ''] + (self.mc_env_udif_cb_e[n+1].get()).split(",") + (self.mc_env_udif_mp_e[n+1].get()).split(","))
                            elif (self.mc_env_udif_cb_e[n+1].get() != '') and  (self.mc_env_udif_mp_e[n+1].get() == ''):
                                mc_env_udif_clock_cfg_array.append([mc_env_udif_int_cfg_array[n][0], ''] + (self.mc_env_udif_cb_e[n+1].get()).split(","))
                            elif (self.mc_env_udif_cb_e[n+1].get() == '') and  (self.mc_env_udif_mp_e[n+1].get() != ''):
                                mc_env_udif_clock_cfg_array.append([mc_env_udif_int_cfg_array[n][0], ''] + (self.mc_env_udif_mp_e[n+1].get()).split(","))
                            elif (self.mc_env_udif_cb_e[n+1].get() == '') and  (self.mc_env_udif_mp_e[n+1].get() == ''):
                                mc_env_udif_clock_cfg_array.append([mc_env_udif_int_cfg_array[n][0], ''])
                            log.debug("mc_env_udif_done_interface_config : 7. value of mc_env_udif_clock_cfg_array-1 %s"% mc_env_udif_clock_cfg_array)
                            log.debug("mc_env_udif_done_interface_config : 7. value of mc_env_udif_clock_cfg_array-1-full %s"% mc_env_udif_clock_cfg_array)
                        elif "-clk" in mc_env_udif_int_cfg_array[n][i]:                        
                            if (self.mc_env_udif_cb_e[n+1].get() != '') and  (self.mc_env_udif_mp_e[n+1].get() != ''):
                                mc_env_udif_clock_cfg_array.append([mc_env_udif_int_cfg_array[n][0], mc_env_udif_int_cfg_array[n][1].split("-")[0]] + (self.mc_env_udif_cb_e[n+1].get()).split(",") + (self.mc_env_udif_mp_e[n+1].get()).split(","))
                            elif (self.mc_env_udif_cb_e[n+1].get() != '') and  (self.mc_env_udif_mp_e[n+1].get() == ''):
                                mc_env_udif_clock_cfg_array.append([mc_env_udif_int_cfg_array[n][0], mc_env_udif_int_cfg_array[n][1].split("-")[0]] + (self.mc_env_udif_cb_e[n+1].get()).split(","))
                            elif (self.mc_env_udif_cb_e[n+1].get() == '') and  (self.mc_env_udif_mp_e[n+1].get() != ''):
                                mc_env_udif_clock_cfg_array.append([mc_env_udif_int_cfg_array[n][0], mc_env_udif_int_cfg_array[n][1].split("-")[0]] + (self.mc_env_udif_mp_e[n+1].get()).split(","))
                            elif (self.mc_env_udif_cb_e[n+1].get() == '') and  (self.mc_env_udif_mp_e[n+1].get() == ''):
                                mc_env_udif_clock_cfg_array.append([mc_env_udif_int_cfg_array[n][0], ''])
                            log.debug("mc_env_udif_done_interface_config : 8. value of mc_env_udif_clock_cfg_array-1a %s"% mc_env_udif_clock_cfg_array)
                            log.debug("mc_env_udif_done_interface_config : 8. value of mc_env_udif_clock_cfg_array-1a-full %s"% mc_env_udif_clock_cfg_array)
                
                        log.debug("mc_env_udif_done_interface_config : 9. Value of mc_env_udif_clock_cfg_array %s"% mc_env_udif_clock_cfg_array)
                        log.debug("mc_env_udif_done_interface_config : 9. Value of mc_env_udif_cb_cfg_array %s"% mc_env_udif_cb_cfg_array)
                        log.debug("mc_env_udif_done_interface_config : 9. Value of mc_env_udif_mp_cfg_array %s"% mc_env_udif_mp_cfg_array)
                        log.debug("mc_env_udif_done_interface_config : 9. Value of mc_env_udif_cb_element_loop %s"% mc_env_udif_cb_element_loop)
                        log.debug("mc_env_udif_done_interface_config : 9. Value of mc_env_udif_mp_element_loop %s"% mc_env_udif_mp_element_loop)
                        break # The clocking and modport information is obtained for clock signal here itself
                    elif "_cb" in mc_env_udif_int_cfg_array[n][i]:
                        log.debug("mc_env_udif_done_interface_config : 10. 1st For Loop - mc_env_udif_cb_cfg_array %s"% mc_env_udif_cb_cfg_array)
                        log.debug("mc_env_udif_done_interface_config : 10. Type of cb is %s"%mc_env_udif_int_cfg_array[n][i])
                        out_cb = self.in_nested_list(mc_env_udif_int_cfg_array[n][i], mc_env_udif_cb_cfg_array)
                        if out_cb:
                            out_cb.append([mc_env_udif_int_cfg_array[n][0]])
                            out_cb.append([mc_env_udif_int_cfg_array[n][i+1]])
                            log.debug("mc_env_udif_done_interface_config : 11. Value of out_cb %s"%out_cb)
                        else:
                            mc_env_udif_cb_cfg_array.append([[mc_env_udif_int_cfg_array[n][i]], [mc_env_udif_int_cfg_array[n][0]], [mc_env_udif_int_cfg_array[n][i+1]]])
                            log.debug("mc_env_udif_cdone_interface_config : 12. 3rd else loop - mc_env_udif_cb_cfg_array %s"% mc_env_udif_cb_cfg_array)
                            mc_env_udif_cb_element_loop_tmp += 1
                            mc_env_udif_cb_element_loop = mc_env_udif_cb_element_loop_tmp
                        log.debug("mc_env_udif_cdone_interface_config : 13. Value of mc_env_udif_clock_cfg_array %s"% mc_env_udif_clock_cfg_array)
                        log.debug("mc_env_udif_cdone_interface_config : 13. Value of mc_env_udif_cb_cfg_array %s"% mc_env_udif_cb_cfg_array)
                        log.debug("mc_env_udif_cdone_interface_config : 13. Value of mc_env_udif_mp_cfg_array %s"% mc_env_udif_mp_cfg_array)
                        log.debug("mc_env_udif_cdone_interface_config : 13. Value of mc_env_udif_cb_element_loop %s"% mc_env_udif_cb_element_loop)
                        log.debug("mc_env_udif_cdone_interface_config : 13. Value of mc_env_udif_mp_element_loop %s"% mc_env_udif_mp_element_loop)
                    elif "_mp" in mc_env_udif_int_cfg_array[n][i]:
                        log.debug("mc_env_udif_cdone_interface_config : 14. 1st For Loop - mc_env_udif_mp_cfg_array %s"% mc_env_udif_mp_cfg_array)
                        log.debug("mc_env_udif_cdone_interface_config : 14. Type of mp is %s"%mc_env_udif_int_cfg_array[n][i])
                        out_mp = self.in_nested_list(mc_env_udif_int_cfg_array[n][i], mc_env_udif_mp_cfg_array)
                        if out_mp: 
                            out_mp.append([mc_env_udif_int_cfg_array[n][0]])
                            out_mp.append([mc_env_udif_int_cfg_array[n][i+1]])
                            log.debug("mc_env_udif_cdone_interface_config : 15. Value of out_mp %s"%out_mp)
                        else:
                            mc_env_udif_mp_cfg_array.append([[mc_env_udif_int_cfg_array[n][i]], [mc_env_udif_int_cfg_array[n][0]], [mc_env_udif_int_cfg_array[n][i+1]]])
                            log.debug("mc_env_udif_cdone_interface_config : 16. 3rd else loop - mc_env_udif_mp_cfg_array %s"% mc_env_udif_mp_cfg_array)
                            mc_env_udif_mp_element_loop_tmp += 1
                            mc_env_udif_mp_element_loop = mc_env_udif_mp_element_loop_tmp
                        log.debug("mc_env_udif_cdone_interface_config : 17. Value of mc_env_udif_clock_cfg_array %s"% mc_env_udif_clock_cfg_array)
                        log.debug("mc_env_udif_cdone_interface_config : 17. Value of mc_env_udif_cb_cfg_array %s"% mc_env_udif_cb_cfg_array)
                        log.debug("mc_env_udif_cdone_interface_config : 17. Value of mc_env_udif_mp_cfg_array %s"% mc_env_udif_mp_cfg_array)
                        log.debug("mc_env_udif_cdone_interface_config : 17. Value of mc_env_udif_cb_element_loop %s"% mc_env_udif_cb_element_loop)
                        log.debug("mc_env_udif_cdone_interface_config : 17. Value of mc_env_udif_mp_element_loop %s"% mc_env_udif_mp_element_loop)
                    # Removing The Else Part as this keeps printing for non cb or mp variables - Vimo - 050516
                    # else: 
                    #     # print "Not Found cb or mp"

                # Clearning The Global Variables
                le = 0
                ree = 0
                mc_element_loop = 0
                    
                log.debug("mc_env_udif_done_interface_config : 18. Value of mc_env_udif_cb_element_loop is %s"%mc_env_udif_cb_element_loop)
                log.debug("mc_env_udif_done_interface_config : 18. Value of mc_env_udif_mp_element_loop is %s"%mc_env_udif_mp_element_loop)

        elif self.mc_env_choose_int_list.get(self.mc_env_choose_int_val.get())==3:
            for n in range(1,mc_env_udif_frame_loop):
                mc_env_udif_int_cfg_array[n-1].append(str(sheet.cell(row=n+1, column=1).value))
                mc_env_udif_int_cfg_array[n-1].append(str(sheet.cell(row=n+1, column=2).value))
                
                if (sheet.cell(row=n+1, column=3).value != None):
                    mc_env_udif_int_cfg_array[n-1].append('le')
                    mc_env_udif_le_tmp = str(sheet.cell(row=n+1, column=3).value).split(",")
                    for i in range (len(mc_env_udif_le_tmp)):
                        mc_env_udif_int_cfg_array[n-1].append(str(mc_env_udif_le_tmp[i]).strip())
                if (sheet.cell(row=n+1, column=4).value != None):
                    mc_env_udif_int_cfg_array[n-1].append('ree')
                    mc_env_udif_re_tmp = (sheet.cell(row=n+1, column=4).value).split(",")
                    for i in range (len(mc_env_udif_re_tmp)):
                        mc_env_udif_int_cfg_array[n-1].append(str(mc_env_udif_re_tmp[i]).strip())
                if (sheet.cell(row=n+1, column=5).value != None):
                    mc_env_udif_cb_tmp = (sheet.cell(row=n+1, column=5).value).split(",")
                    for i in range (len(mc_env_udif_cb_tmp)):
                        mc_env_udif_int_cfg_array[n-1].append(str(mc_env_udif_cb_tmp[i]).strip())
                if (sheet.cell(row=n+1, column=6).value != None):
                    mc_env_udif_mp_tmp = (sheet.cell(row=n+1, column=6).value).split(",")
                    for i in range (len(mc_env_udif_mp_tmp)):
                        mc_env_udif_int_cfg_array[n-1].append(str(mc_env_udif_mp_tmp[i]).strip())
                    
                log.debug("mc_env_udif_done_interface_config : 19. Value of mc_env_udif_int_cfg_array %s"%mc_env_udif_int_cfg_array)
                log.debug("mc_env_udif_done_interface_config : 19. Count of cb is  %d"% len(mc_env_udif_int_cfg_array[n-1]))
                log.debug("mc_env_udif_done_interface_config : 19. Value of mc_env_udif_frame_loop in mc_env_udif_done_interface_config is %d"% mc_env_udif_frame_loop)
                mc_env_udif_cb_cnt = len(mc_env_udif_int_cfg_array[n-1])
                log.debug("mc_env_udif_done_interface_config : 20. Value of mc_env_udif_cb_cnt %s"%mc_env_udif_cb_cnt)
              
                #mc_env_udif_intf_cfg_array[1][n-1] = mc_env_udif_int_cfg_array[n-1]
                mc_env_udif_intf_cfg_array[n] = mc_env_udif_int_cfg_array[n-1]
                log.debug("mc_env_udif_done_interface_config : 21. 3 Value of mc_env_udif_intf_cfg_array %s"% mc_env_udif_intf_cfg_array )

                for i in range (1, int(mc_env_udif_cb_cnt)):
                    if "-clk" in mc_env_udif_int_cfg_array[n-1][i]:
                        log.debug("mc_env_udif_done_interface_config : 22. Value of mc_env_udif_int_cfg_array[n-1][i] %s"% mc_env_udif_int_cfg_array[n-1][i])
                        if "-clk" == mc_env_udif_int_cfg_array[n-1][i]:
                            if (sheet.cell(row=n+1, column=5).value != None) and (sheet.cell(row=n+1, column=6).value != None):
                                mc_env_udif_clock_cfg_array.append([mc_env_udif_int_cfg_array[n-1][0], ''] + str(sheet.cell(row=n+1, column=5).value).split(",") + str(sheet.cell(row=n+1, column=6).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value != None) and (sheet.cell(row=n+1, column=6).value == None):
                                mc_env_udif_clock_cfg_array.append([mc_env_udif_int_cfg_array[n-1][0], ''] + str(sheet.cell(row=n+1, column=5).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value == None) and (sheet.cell(row=n+1, column=6).value != None):
                                mc_env_udif_clock_cfg_array.append([mc_env_udif_int_cfg_array[n-1][0], ''] + str(sheet.cell(row=n+1, column=6).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value == None) and (sheet.cell(row=n+1, column=6).value == None):
                                mc_env_udif_clock_cfg_array.append([mc_env_udif_int_cfg_array[n-1][0], ''])
                            log.debug("mc_env_udif_done_interface_config : 23. value of mc_env_udif_clock_cfg_array-1 %s"% mc_env_udif_clock_cfg_array)
                        elif "-clk" in mc_env_udif_int_cfg_array[n-1][i]:                        
                            if (sheet.cell(row=n+1, column=5).value != None) and (sheet.cell(row=n+1, column=6).value != None):
                                mc_env_udif_clock_cfg_array.append([mc_env_udif_int_cfg_array[n-1][0], mc_env_udif_int_cfg_array[n-1][1].split("-")[0]] + str(sheet.cell(row=n+1, column=5).value).split(",") + str(sheet.cell(row=n+1, column=6).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value != None) and (sheet.cell(row=n+1, column=6).value == None):
                                mc_env_udif_clock_cfg_array.append([mc_env_udif_int_cfg_array[n-1][0], mc_env_udif_int_cfg_array[n-1][1].split("-")[0]] + str(sheet.cell(row=n+1, column=5).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value == None) and (sheet.cell(row=n+1, column=6).value != None):
                                mc_env_udif_clock_cfg_array.append([mc_env_udif_int_cfg_array[n-1][0], mc_env_udif_int_cfg_array[n-1][1].split("-")[0]] + str(sheet.cell(row=n+1, column=6).value).split(","))
                            elif (sheet.cell(row=n+1, column=5).value == None) and (sheet.cell(row=n+1, column=6).value == None):
                                mc_env_udif_clock_cfg_array.append([mc_env_udif_int_cfg_array[n-1][0], ''])
                            log.debug("mc_env_udif_done_interface_config : 24. value of mc_env_udif_clock_cfg_array-1a %s"% mc_env_udif_clock_cfg_array)
                        log.debug("mc_env_udif_done_interface_config : 25. Value of mc_env_udif_clock_cfg_array %s"% mc_env_udif_clock_cfg_array)
                        log.debug("mc_env_udif_done_interface_config : 25. Value of mc_env_udif_cb_cfg_array %s"% mc_env_udif_cb_cfg_array)
                        log.debug("mc_env_udif_done_interface_config : 25. Value of mc_env_udif_mp_cfg_array %s"% mc_env_udif_mp_cfg_array)
                        log.debug("mc_env_udif_done_interface_config : 25. Value of mc_env_udif_cb_element_loop %s"% mc_env_udif_cb_element_loop)
                        log.debug("mc_env_udif_done_interface_config : 25. Value of mc_env_udif_mp_element_loop %s"% mc_env_udif_mp_element_loop)
                        break # The clocking and modport information is obtained for clock signal here itself
                    elif "_cb" in mc_env_udif_int_cfg_array[n-1][i]:
                        log.debug("mc_env_udif_done_interface_config : 26. 1st For Loop %s"% mc_env_udif_cb_cfg_array)
                        log.debug("mc_env_udif_done_interface_config : 26. Type of cb is %s"%mc_env_udif_int_cfg_array[n-1][i])
                        out_cb = self.in_nested_list(mc_env_udif_int_cfg_array[n-1][i], mc_env_udif_cb_cfg_array)
                        if out_cb:
                            out_cb.append([mc_env_udif_int_cfg_array[n-1][0]])
                            out_cb.append([mc_env_udif_int_cfg_array[n-1][i+1]])
                            log.debug("27. Value of out_cb %s"%out_cb)
                        else:
                            mc_env_udif_cb_cfg_array.append([[mc_env_udif_int_cfg_array[n-1][i]], [mc_env_udif_int_cfg_array[n-1][0]], [mc_env_udif_int_cfg_array[n-1][i+1]]])
                            mc_env_udif_cb_element_loop_tmp += 1
                            mc_env_udif_cb_element_loop = mc_env_udif_cb_element_loop_tmp
                        log.debug("mc_env_udif_done_interface_config : 28. Value of mc_env_udif_clock_cfg_array %s"% mc_env_udif_clock_cfg_array)
                        log.debug("mc_env_udif_done_interface_config : 28. Value of mc_env_udif_cb_cfg_array %s"% mc_env_udif_cb_cfg_array)
                        log.debug("mc_env_udif_done_interface_config : 28. Value of mc_env_udif_mp_cfg_array %s"% mc_env_udif_mp_cfg_array)
                        log.debug("mc_env_udif_done_interface_config : 28. Value of mc_env_udif_cb_element_loop %s"% mc_env_udif_cb_element_loop)
                        log.debug("mc_env_udif_done_interface_config : 28. Value of mc_env_udif_mp_element_loop %s"% mc_env_udif_mp_element_loop)
                    elif "_mp" in mc_env_udif_int_cfg_array[n-1][i]:
                        log.debug("mc_env_udif_done_interface_config : 29. 1st For Loop %s"% mc_env_udif_mp_cfg_array)
                        log.debug("mc_env_udif_done_interface_config : 29. Type of mp is %s"%mc_env_udif_int_cfg_array[n-1][i])
                        out_mp = self.in_nested_list(mc_env_udif_int_cfg_array[n-1][i], mc_env_udif_mp_cfg_array)
                        if out_mp: 
                            out_mp.append([mc_env_udif_int_cfg_array[n-1][0]])
                            out_mp.append([mc_env_udif_int_cfg_array[n-1][i+1]])
                            log.debug("mc_env_udif_done_interface_config : 30. Value of out_mp %s"%out_mp)
                        else:
                            mc_env_udif_mp_cfg_array.append([[mc_env_udif_int_cfg_array[n-1][i]], [mc_env_udif_int_cfg_array[n-1][0]], [mc_env_udif_int_cfg_array[n-1][i+1]]])
                            log.debug("mc_env_udif_done_interface_config : 31. 3rd else loop %s"% mc_env_udif_mp_cfg_array)
                            mc_env_udif_mp_element_loop_tmp += 1
                            mc_env_udif_mp_element_loop = mc_env_udif_mp_element_loop_tmp
                        log.debug("mc_env_udif_done_interface_config : 32. Value of mc_env_udif_clock_cfg_array %s"% mc_env_udif_clock_cfg_array)
                        log.debug("mc_env_udif_done_interface_config : 32. Value of mc_env_udif_cb_cfg_array %s"% mc_env_udif_cb_cfg_array)
                        log.debug("mc_env_udif_done_interface_config : 32. Value of mc_env_udif_mp_cfg_array %s"% mc_env_udif_mp_cfg_array)
                        log.debug("mc_env_udif_done_interface_config : 32. Value of mc_env_udif_cb_element_loop %s"% mc_env_udif_cb_element_loop)
                        log.debug("mc_env_udif_done_interface_config : 32. Value of mc_env_udif_mp_element_loop %s"% mc_env_udif_mp_element_loop)
                    # Removing The Else Part as this keeps printing for non cb or mp variables - Vimo - 050516
                    # else: 
                    #     # print "Not Found cb or mp"

                # Clearning The Global Variables
                le = 0
                ree = 0
                mc_element_loop = 0
            
        log.debug("mc_env_udif_done_interface_config : 33. mc_env_udif_done_interface_config: mc_env_udif_frame_loop %d, mc_env_udif_intf_cfg_array %s"%(mc_env_udif_frame_loop, mc_env_udif_intf_cfg_array))
        self.mc_env_udi_nxt_kcb();
        self.mc_env_udi_done_kcb();
        self.mc_env_udif_frame_kcb();
        self.mc_env_load_interface_kcb();

        # CHeck if already the env interface exists
        self.mc_env_intf_cfg_pool_exists()
   
        if mc_env_intf_find_idx == None:
            # Loading up the env,env intf name 
            mc_env_intf_cfg_pool[mc_env_intf_cfg_pool_cnt][0] = self.mce2.get()+','+mc_env_intf_name
            
            # env intf name 
            mc_env_intf_cfg_pool[mc_env_intf_cfg_pool_cnt][1] = mc_env_intf_name 
            
            # env Interface Type  
            if self.mc_env_choose_int_list.get(self.mc_env_choose_int_val.get())==2:
                mc_env_intf_cfg_pool[mc_env_intf_cfg_pool_cnt][2] = 2
            
                # Loading the Interface Variables Values - no. of elements in the sheet 
                mc_env_intf_cfg_pool[mc_env_intf_cfg_pool_cnt][3] = mc_env_udif_frame_loop 

            elif self.mc_env_choose_int_list.get(self.mc_env_choose_int_val.get())==3:
                mc_env_intf_cfg_pool[mc_env_intf_cfg_pool_cnt][2] = 3

                # Loading the Interface Variables Values - no. of elements in the sheet 
                mc_env_intf_cfg_pool[mc_env_intf_cfg_pool_cnt][3] = (mc_env_udif_frame_loop-1) 

            # Loading the interface values 
            mc_env_intf_cfg_pool[mc_env_intf_cfg_pool_cnt][4] = mc_env_udif_intf_cfg_array 
            mc_env_intf_cfg_pool[mc_env_intf_cfg_pool_cnt][5] = mc_env_udif_clock_cfg_array 
            mc_env_intf_cfg_pool[mc_env_intf_cfg_pool_cnt][6] = mc_env_udif_cb_cfg_array 
            mc_env_intf_cfg_pool[mc_env_intf_cfg_pool_cnt][7] = mc_env_udif_mp_cfg_array 
            
            # Loading the interface file path, sheet name
            if self.mc_env_choose_int_list.get(self.mc_env_choose_int_val.get())==3:
                mc_env_intf_cfg_pool[mc_env_intf_cfg_pool_cnt][8] = mc_env_intf_path_sheet 

            log.debug("mc_env_udif_done_interface_config : mc_env_intf_cfg_pool %s\n"%mc_env_intf_cfg_pool)
        else:
            log.debug("mc_env_udif_done_interface_config : Agent,Drv Intf already exists in mc_env_intf_cfg_pool. Compare and if different re-load\n")
            mc_env_intf_cfg_pool_tmp = [[] for x in range(mc_intf_arr_range)] # [[],[],[],[],[],[],[],[]];
            log.debug("mc_env_udif_done_interface_config : Value of mc_env_intf_cfg_pool_tmp %s\n"%mc_env_intf_cfg_pool_tmp)
            
            # Loading up the env, env intf name
            mc_env_intf_cfg_pool_tmp[0] = self.mce2.get()+','+mc_env_intf_name
            
            # Env intf Name  
            mc_env_intf_cfg_pool_tmp[1] = mc_env_intf_name 
            
            # MC Env Interface Type  
            if self.mc_env_choose_int_list.get(self.mc_env_choose_int_val.get())==2:
                mc_env_intf_cfg_pool_tmp[2] = 2 
            
                # Loading the Interface Variables Values - no. of elements in the sheet 
                mc_env_intf_cfg_pool_tmp[3] = mc_env_udif_frame_loop 

            elif self.mc_env_choose_int_list.get(self.mc_env_choose_int_val.get())==3:
                mc_env_intf_cfg_pool_tmp[2] = 3 
                
                # Loading the Interface Variables Values - no. of elements in the sheet 
                mc_env_intf_cfg_pool_tmp[3] = (mc_env_udif_frame_loop-1) 

            # Loading the interface values 
            mc_env_intf_cfg_pool_tmp[4] = mc_env_udif_intf_cfg_array 
            mc_env_intf_cfg_pool_tmp[5] = mc_env_udif_clock_cfg_array 
            mc_env_intf_cfg_pool_tmp[6] = mc_env_udif_cb_cfg_array 
            mc_env_intf_cfg_pool_tmp[7] = mc_env_udif_mp_cfg_array 
            
            # Loading the interface file path, sheet name
            if self.mc_env_choose_int_list.get(self.mc_env_choose_int_val.get())==3:
                mc_env_intf_cfg_pool_tmp[8] = mc_env_intf_path_sheet 

            log.debug("mc_env_udif_done_interface_config : mc_env_intf_cfg_pool[%d] %s, mc_env_intf_cfg_pool_tmp %s"%(mc_env_intf_find_idx, mc_env_intf_cfg_pool[mc_env_intf_find_idx], mc_env_intf_cfg_pool_tmp))

            if mc_env_intf_cfg_pool[mc_env_intf_find_idx] != mc_env_intf_cfg_pool_tmp:
                log.debug("mc_env_udif_done_interface_config : mc_env_intf_cfg_pool[mc_env_intf_find_idx] != mc_env_intf_cfg_pool_tmp. Re-loading the pool\n")
                mc_env_intf_cfg_pool[mc_env_intf_find_idx] = mc_env_intf_cfg_pool_tmp    
            else:
                log.debug("mc_env_udif_done_interface_config : mc_env_intf_cfg_pool[mc_env_intf_find_idx] == mc_env_intf_cfg_pool_tmp. Not Re-loading the pool\n")
                mc_env_intf_cfg_pool_prev.append(mc_env_intf_cfg_pool_tmp) 
                log.debug("mc_env_udif_done_interface_config : mc_env_intf_cfg_pool[mc_env_intf_find_idx] == mc_env_intf_cfg_pool_tmp. Appending into mc_env_intf_cfg_pool_prev %s\n"%mc_env_intf_cfg_pool_prev)

        # Calling the code to do count increment and button enablement
        # self.mc_env_intf_final_after_int_cmd()
            
        # Going to create the env intf widget buttons
        self.mc_env_intf_rem_pic_sic_buttons_cb()


    def generate_button_code(self):
        global mt_rm_sym
        global sc_agt_selected_started
        global sc_agt_intf_cnt
        global sc_agt_intf_cnt_tmp
        global sc_interface_pkg
        
        global sc_udie_loop
        global sc_udie_frame_loop
        global sc_udie_cb_element_loop
        global sc_udie_cb_cnt
        global cv_udie_cb_cnt
        global le
        global ree
        global sc_element_loop
        global cv_element_loop
       
        global sc_udie_int_cfg_array
        global sc_udie_clock_cfg_array
        global sc_udie_cb_cfg_array
        global sc_udie_mp_cfg_array
        global cv_tbtop_clock_array

        global cv_agt_selected_started
        global cv_agt_intf_cnt
        global cv_agt_intf_cnt_tmp
        global cv_interface_pkg
        
        global cv_udie_intf_cfg_array
        global cv_udie_clock_cfg_array
        global cv_udie_cb_cfg_array
        global cv_udie_mp_cfg_array
        
        global cvad_e4_temp

        # MC related variables
        global create_stitch
        global stitch_only
        global cxn_only
        global ei_only
        global mc_global_env_mon_scb_con_arr   

        if v.get()==1:
            obj_comp_entry_name = self.sce1.get()
            obj_comp_entry_name_pkg =  self.sce1.get()+"_pkg"
        
        if v.get()==1:
            if sv.get()=="Agent":
                sc_num_of_ds_l = self.scae1.get()
                sc_num_of_ds_a = sc_num_of_ds_l.split(",")
                sc_num_of_ds_l = "".join(sc_num_of_ds_l)
                
                sc_num_of_mon_l = self.scae2.get()
                sc_num_of_mon_a = sc_num_of_mon_l.split(",") 
                sc_num_of_mon_l = "".join(sc_num_of_mon_l)
                        
                log.debug("Agent: sc_num_of_ds_l %s sc_num_of_ds_a %s sc_num_of_mon_l %s sc_num_of_mon_a %s\n"%(sc_num_of_ds_l, sc_num_of_ds_a, sc_num_of_mon_l, sc_num_of_mon_a))

        if v.get()==1:
            # Local Variables Declaration
            drv_found_data_mem_decl = 0 
            drv_found_config_decl = 0 
            drv_found_intf_mem_decl = 0 
            drv_found_cc_decl = 0 
            
            mon_found_data_mem_decl = 0 
            mon_found_config_decl = 0 
            mon_found_intf_mem_decl = 0 
            mon_found_cc_decl = 0 
            
            agt_found_data_mem_decl = 0 
            agt_found_const_decl = 0 
            agt_found_const_decl_nxt_line = 0 
            agt_found_conn_decl = 0 
            agt_found_conn_decl_nxt_line = 0 
            agt_found_config_decl = 0 
            
            sc_udi_decl = 0
            sc_udi_var_temp = 0
            sc_udi_le_var_temp = [] 
            sc_udi_re_var_temp = [] 
            sc_udi_nolere_var_temp = []

            log.debug("Global: Value of sv is %s"% sv.get())
            
            if sv.get()=="Sequence Item":
                #os.system('$PROJ_ROOT/.bin/generate_sequence_item.csh  %s %s' % (str(obj_comp_entry_name), str(obj_comp_entry_name_pkg),))
                #os.system('$PROJ_ROOT/.bin_v3/generate_sequence_item.csh  %s %s' % (str(obj_comp_entry_name), str(obj_comp_entry_name_pkg),))
                self.generate_sequence_item(str(obj_comp_entry_name), str(obj_comp_entry_name_pkg))
            if sv.get()=="Sequence":
                #os.system('$PROJ_ROOT/.bin/generate_sequence.csh  %s %s' % (str(obj_comp_entry_name), str(obj_comp_entry_name_pkg),))
                #os.system('$PROJ_ROOT/.bin_v3/generate_sequence.csh  %s %s' % (str(obj_comp_entry_name), str(obj_comp_entry_name_pkg),))
                self.generate_sequence(str(obj_comp_entry_name), str(obj_comp_entry_name_pkg))
            if sv.get()=="Sequencer":
                #os.system('$PROJ_ROOT/.bin/generate_sequencer.csh  %s %s' % (str(obj_comp_entry_name), str(obj_comp_entry_name_pkg),))
                #os.system('$PROJ_ROOT/.bin_v3/generate_sequencer.csh  %s %s' % (str(obj_comp_entry_name), str(obj_comp_entry_name_pkg),))
                self.generate_sequencer(str(obj_comp_entry_name), str(obj_comp_entry_name_pkg))
            if sv.get()=="Driver":
                #os.system('$PROJ_ROOT/.bin/generate_driver.csh  %s %s' % (str(obj_comp_entry_name), str(obj_comp_entry_name_pkg),))
                #os.system('$PROJ_ROOT/.bin_v3/generate_driver.csh  %s %s' % (str(obj_comp_entry_name), str(obj_comp_entry_name_pkg),))
                self.generate_driver(str(obj_comp_entry_name), str(obj_comp_entry_name_pkg))
            if sv.get()=="Monitor":
                #os.system('$PROJ_ROOT/.bin/generate_monitor.csh  %s %s' % (str(obj_comp_entry_name), str(obj_comp_entry_name_pkg),))
                #os.system('$PROJ_ROOT/.bin_v3/generate_monitor.csh  %s %s' % (str(obj_comp_entry_name), str(obj_comp_entry_name_pkg),))
                self.generate_monitor(str(obj_comp_entry_name), str(obj_comp_entry_name_pkg))
            if sv.get()=="Agent":
                # Creating the Components First

                # Agent Creation 
                agtname = str(obj_comp_entry_name)
                agtpkg  = str(obj_comp_entry_name_pkg)
                self.mc_create_agent(agtname, agtpkg) 

                # Agent Sub-Component Creation    
                if sc_num_of_ds_a != []:
                    for x in range (int(sc_num_of_ds_a[0])):
                        if len(sc_num_of_ds_a) == 1:
                            agtdrvname = agtname
                        else:
                            agtdrvname = agtname+"_"+sc_num_of_ds_a[x+1]
                        
                        self.mc_create_driver(agtdrvname, agtpkg) 
                        self.mc_create_intf(agtdrvname, agtpkg) 
                        self.mc_create_sequencer(agtdrvname, agtpkg) 
                        self.mc_create_sequence(agtdrvname, agtpkg) 
                        self.mc_create_sequence_item(agtdrvname, agtpkg) 

                if sc_num_of_mon_a != []:
                    for x in range (int(sc_num_of_mon_a[0])):
                        if len(sc_num_of_mon_a) == 1:
                            agtmonname = agtname
                        else:
                            agtmonname = agtname+"_"+sc_num_of_mon_a[x+1]
                        
                        self.mc_create_mon(agtmonname, agtpkg) 
                        self.mc_create_sequence_item(agtmonname, agtpkg)

                # Editing the Component Files
               
                # Local Variables 
                agt_int_stg = ''

                #----------------------------------------------------------------------
                # OPENING THE AGENT CONFIG FILE AND EDIT
                #----------------------------------------------------------------------
                mc_agt_cfg_array = []
                        
                if not os.path.isfile('%s_agent_config.sv'%(agtname)):
                    log.error("%s_agent_config.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(agtname))
                else:
                    log.info("%s_agent_config.sv file does exists! Progressing Further.\n"%(agtname))
                    mc_agt_cfg_input_file = open("%s_agent_config.sv"%(agtname),"r+")

                    agt_cfg_stg = '' 
                    agt_int_stg = ''

                    for lines in mc_agt_cfg_input_file:
                        agt_cfg_stg = agt_cfg_stg+lines+'µ' 
                    log.debug("Agent: Value of agt_cfg_stg %s"%(agt_cfg_stg))

                    
                    #----------------------------------------------------------------------
                    # Code for Agent Interface Instantiation inside agt_cfg File
                    #----------------------------------------------------------------------
                    if sc_num_of_ds_l != '':
                        agtdrvname_arr = sc_num_of_ds_a 
                        log.debug("Agent : agtdrvname_arr %s!\n"%(agtdrvname_arr))
                        for e1 in range (int(agtdrvname_arr[0])):
                            if len(agtdrvname_arr) == 1:
                                agtdrvname = agtname 
                            else:
                                agtdrvname = agtname+"_"+agtdrvname_arr[e1+1]
                            agt_int_stg = agt_int_stg+("µ virtual %s_interface %s_vif;\n"%(agtdrvname, agtdrvname))
                            
                        pos = agt_cfg_stg.find(' // Agent Interface Instantiation\n')
                        apos = pos + len(' // Agent Interface Instantiation\n')+len('µ //------------------------------------------\n')
                        agt_cfg_stg = agt_cfg_stg[:apos]+agt_int_stg+agt_cfg_stg[apos:]

                    # Cleaning local vars
                    agt_int_stg = ''
                    #----------------------------------------------------------------------
      
                    
                    #----------------------------------------------------------------------
                    # Code for Agent Knobs inside agt_cfg File
                    #----------------------------------------------------------------------
                    if sc_num_of_ds_l != '':
                        agtdrvname_arr = sc_num_of_ds_a 
                        log.debug("Agent : agtdrvname_arr %s!\n"%(agtdrvname_arr))
                        for e1 in range (int(agtdrvname_arr[0])):
                            if len(agtdrvname_arr) == 1:
                                agtdrvname = agtname 
                            else:
                                agtdrvname = agtname+"_"+agtdrvname_arr[e1+1]
                            
                            agt_int_stg = agt_int_stg+("µ rand uvm_active_passive_enum %s_is_active = UVM_ACTIVE;\n"%(agtdrvname))
                            
                        pos = agt_cfg_stg.find(' // Agent Driver Knobs\n')
                        apos = pos + len(' // Agent Driver Knobs\n')+len('µ //------------------------------------------\n')
                        agt_cfg_stg = agt_cfg_stg[:apos]+agt_int_stg+agt_cfg_stg[apos:]

                    # Cleaning local vars
                    agt_int_stg = ''
                    #----------------------------------------------------------------------


                    #----------------------------------------------------------------------
                    # Code for Agent Knobs inside agt_cfg File
                    #----------------------------------------------------------------------
                    if sc_num_of_mon_l != '':
                        agtmonname_arr = sc_num_of_mon_a 
                        log.debug("Agent : agtmonname_arr %s!\n"%(agtmonname_arr))
                        for e1 in range (int(agtmonname_arr[0])):
                            if len(agtmonname_arr) == 1:
                                agtmonname = agtname 
                            else:
                                agtmonname = agtname+"_"+agtmonname_arr[e1+1]
                            
                            agt_int_stg = agt_int_stg+("µ rand uvm_active_passive_enum %s_is_active = UVM_ACTIVE;\n"%(agtmonname))
                            
                        pos = agt_cfg_stg.find(' // Agent Monitor Knobs\n')
                        apos = pos + len(' // Agent Monitor Knobs\n')+len('µ //------------------------------------------\n')
                        agt_cfg_stg = agt_cfg_stg[:apos]+agt_int_stg+agt_cfg_stg[apos:]

                    # Cleaning local vars
                    agt_int_stg = ''
                    #----------------------------------------------------------------------


                    #----------------------------------------------------------------------
                    # Loading up the Agnet array content into file 
                    #----------------------------------------------------------------------
                    log.debug("Agent: Value of agt_cfg_stg %s"%(agt_cfg_stg))
                    mc_agt_cfg_input_file = open("%s_agent_config.sv"%(agtname), "w")
                    mc_agt_cfg_array = agt_cfg_stg.split('µ')
                    for lines in mc_agt_cfg_array:
                        mc_agt_cfg_input_file.write(lines)
                    mc_agt_cfg_input_file.close()
                    #----------------------------------------------------------------------


                #----------------------------------------------------------------------
                # OPENING THE AGENT FILE AND EDIT
                #----------------------------------------------------------------------
                mc_agt_array = []
                
                if not os.path.isfile('%s_agent.sv'%(agtname)):
                    log.error("%s_agent.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(agtname))
                else:
                    log.info("%s_agent.sv file does exists! Progressing Further.\n"%(agtname))
                    mc_agt_input_file = open("%s_agent.sv"%(agtname),"r+")

                    agt_stg = '' 
                    agt_int_stg = ''
                    agt_loc_stg = ''

                    for lines in mc_agt_input_file:
                        agt_stg = agt_stg+lines+'µ' 
                    log.debug("generate_button_code: Value of agt_stg %s"%(agt_stg))
                        
                    
                    #----------------------------------------------------------------------
                    # Code for Instantiation Local Variables 
                    #----------------------------------------------------------------------
                    pos = agt_stg.find(' // Data Members\n')
                    apos = pos + len(' // Data Members\n') + len('µ //------------------------------------------\n')
                    agt_loc_stg = agt_loc_stg+'µ int unsigned %s_agent_id;\n'%(agtname)
                    agt_stg = agt_stg[:apos]+agt_loc_stg+agt_stg[apos:]
                    
                    # Cleaning local vars
                    agt_loc_stg = ''
                    #----------------------------------------------------------------------

                    
                    #----------------------------------------------------------------------
                    # Code for Agent Instantiation
                    #----------------------------------------------------------------------
                    pos = agt_stg.find(' // Agent Configuration Instantiation\n')
                    apos = pos + len(' // Agent Configuration Instantiation\n') + len('µ //------------------------------------------\n')
                    agt_loc_stg = agt_loc_stg+'µ %s_agent_config %s_agent_cfg;\n'%(agtname, agtname)
                    agt_stg = agt_stg[:apos]+agt_loc_stg+agt_stg[apos:]
                    
                    # Cleaning local vars
                    agt_loc_stg = ''
                    #----------------------------------------------------------------------

                    
                    #----------------------------------------------------------------------
                    # Code for Agent Codes - Component Instantiation 
                    #----------------------------------------------------------------------
                    if sc_num_of_ds_l != '':
                        agtdrvname_arr = sc_num_of_ds_a 
                        log.debug("Agent : agtdrvname_arr %s!\n"%(agtdrvname_arr))
                        for e1 in range (int(agtdrvname_arr[0])):
                            if len(agtdrvname_arr) == 1:
                                agtdrvname = agtname 
                            else:
                                agtdrvname = agtname+"_"+agtdrvname_arr[e1+1]
                            
                            agt_int_stg = agt_int_stg+("µ %s_sequencer  %s_sqr;\n"%(agtdrvname, agtdrvname))
                            agt_int_stg = agt_int_stg+("µ %s_driver  %s_drv;\n"%(agtdrvname, agtdrvname))
                            
                        pos = agt_stg.find(' // Agent Driver-Sequencer Instantiation\n')
                        apos = pos + len(' // Agent Driver-Sequencer Instantiation\n')+len('µ //------------------------------------------\n')
                        agt_stg = agt_stg[:apos]+agt_int_stg+agt_stg[apos:]

                    # Cleaning local vars
                    agt_int_stg = ''
                    #----------------------------------------------------------------------


                    #----------------------------------------------------------------------
                    # Code for Agent Codes - Component Instantiation 
                    #----------------------------------------------------------------------
                    if sc_num_of_mon_l != '':
                        agtmonname_arr = sc_num_of_mon_a 
                        log.debug("Agent : agtmonname_arr %s!\n"%(agtmonname_arr))
                        for e1 in range (int(agtmonname_arr[0])):
                            if len(agtmonname_arr) == 1:
                                agtmonname = agtname 
                            else:
                                agtmonname = agtname+"_"+agtmonname_arr[e1+1]
                            
                            agt_int_stg = agt_int_stg+("µ %s_monitor  %s_mon;\n"%(agtmonname, agtmonname))
                            
                        pos = agt_stg.find(' // Agent Monitor Instantiation\n')
                        apos = pos + len(' // Agent Monitor Instantiation\n')+len('µ //------------------------------------------\n')
                        agt_stg = agt_stg[:apos]+agt_int_stg+agt_stg[apos:]

                    # Cleaning local vars
                    agt_int_stg = ''
                    #----------------------------------------------------------------------


                    #----------------------------------------------------------------------
                    # Code for Registration The Variables In Factory 
                    #----------------------------------------------------------------------
                    pos = agt_stg.find(' // Add field configurations\n')
                    apos = pos + len(' // Add field configurations\n') + len('µ  // -----------------\n')
                    agt_loc_stg = agt_loc_stg+("µ `uvm_field_int(%s_agent_id, UVM_ALL_ON)\n"%(agtname))
                    agt_stg = agt_stg[:apos]+agt_loc_stg+agt_stg[apos:]
                    
                    # Cleaning local vars
                    agt_loc_stg = ''
                    #----------------------------------------------------------------------
            

                    #----------------------------------------------------------------------
                    # Code for Getting Agent Config Instantiation
                    #----------------------------------------------------------------------
                    agt_loc_stg = agt_loc_stg\
                    +('µ if (!uvm_config_db#(%s_agent_config)::get(this, "*", "%s_agent_config", %s_agent_cfg))\n'%(agtname, agtname, agtname))\
                    +('µ begin\n')\
                    +('µ  `uvm_error(get_type_name(), "%s_agent_config object is not found in config_db!");\n'%(agtname))\
                    +('µ end\n')\
                    +('µ else\n')\
                    +('µ begin\n')\
                    +('µ  %s_agent_cfg.print();\n'%(agtname))\
                    +('µ end\n')\
                        
                    pos = agt_stg.find(' // Get Agent Configuration\n')
                    apos = pos + len(' // Get Agent Configuration\n')
                    agt_stg = agt_stg[:apos]+agt_loc_stg+agt_stg[apos:]
 
                    # Cleaning local vars
                    agt_loc_stg = ''
                    #----------------------------------------------------------------------


                    #----------------------------------------------------------------------
                    # Code for Agent Codes - Component Instantiation 
                    #----------------------------------------------------------------------
                    if sc_num_of_mon_l != '':
                        agtmonname_arr = sc_num_of_mon_a 
                        log.debug("Agent : agtmonname_arr %s!\n"%(agtmonname_arr))
                        for e1 in range (int(agtmonname_arr[0])):
                            if len(agtmonname_arr) == 1:
                                agtmonname = agtname 
                            else:
                                agtmonname = agtname+"_"+agtmonname_arr[e1+1]
                           
                            agt_loc_stg = agt_loc_stg\
                            +('µ if (%s_agent_cfg.%s_is_active) %s_mon = %s_monitor::type_id::create("%s_mon",this);\n'%(agtname, agtmonname, agtmonname, agtmonname, agtmonname))
                            
                        pos = agt_stg.find(' // Construct Agent Monitors\n')
                        apos = pos + len(' // Construct Agent Monitors\n')
                        agt_stg = agt_stg[:apos]+agt_loc_stg+agt_stg[apos:]

                    # Cleaning local vars
                    agt_loc_stg = ''
                    #----------------------------------------------------------------------


                    #----------------------------------------------------------------------
                    # Code for Agent Codes - Driver Component Creation 
                    #----------------------------------------------------------------------
                    if sc_num_of_ds_l != '':
                        agtdrvname_arr = sc_num_of_ds_a 
                        log.debug("Agent : agtdrvname_arr %s!\n"%(agtdrvname_arr))
                        for e1 in range (int(agtdrvname_arr[0])):
                            if len(agtdrvname_arr) == 1:
                                agtdrvname = agtname 
                            else:
                                agtdrvname = agtname+"_"+agtdrvname_arr[e1+1]
                            
                            agt_loc_stg = agt_loc_stg\
                            +('µ if (%s_agent_cfg.%s_is_active) begin\n'%(agtname, agtdrvname))\
                            +('µ  %s_drv = %s_driver::type_id::create("%s_drv",this);\n'%(agtdrvname, agtdrvname, agtdrvname))\
                            +('µ  %s_sqr = %s_sequencer::type_id::create("%s_sqr",this);\n'%(agtdrvname, agtdrvname, agtdrvname))\
                            +('µ end\n')
                            
                        pos = agt_stg.find(' // Construct Agent Driver-Sequencers\n')
                        apos = pos + len(' // Construct Agent Driver-Sequencers\n')
                        agt_stg = agt_stg[:apos]+agt_loc_stg+agt_stg[apos:]

                    # Cleaning local vars
                    agt_loc_stg = ''
                    #----------------------------------------------------------------------


                    #----------------------------------------------------------------------
                    # Code for Agent Codes - Driver Component Connection 
                    #----------------------------------------------------------------------
                    if sc_num_of_ds_l != '':
                        agtdrvname_arr = sc_num_of_ds_a 
                        log.debug("Agent : agtdrvname_arr %s!\n"%(agtdrvname_arr))
                        for e1 in range (int(agtdrvname_arr[0])):
                            if len(agtdrvname_arr) == 1:
                                agtdrvname = agtname 
                            else:
                                agtdrvname = agtname+"_"+agtdrvname_arr[e1+1]
                            
                            agt_loc_stg = agt_loc_stg\
                            +('µ if (%s_agent_cfg.%s_is_active) begin\n'%(agtname, agtdrvname))\
                            +('µ  %s_drv.seq_item_port.connect(%s_sqr.seq_item_export);\n'%(agtdrvname, agtdrvname))\
                            +('µ end\n')
                            
                        pos = agt_stg.find(' // Connect Agent Driver-Sequencers\n')
                        apos = pos + len(' // Connect Agent Driver-Sequencers\n')
                        agt_stg = agt_stg[:apos]+agt_loc_stg+agt_stg[apos:]

                    # Cleaning local vars
                    agt_loc_stg = ''
                    #----------------------------------------------------------------------


                    #----------------------------------------------------------------------
                    # Loading up the Agnet array content into file 
                    #----------------------------------------------------------------------
                    log.debug("generate_button_code: Value of agt_stg %s"%(agt_stg))
                    mc_agt_input_file = open("%s_agent.sv"%(agtname), "w")
                    mc_agt_array = agt_stg.split('µ')
                    for lines in mc_agt_array:
                        mc_agt_input_file.write(lines)
                    mc_agt_input_file.close()
                    #----------------------------------------------------------------------


                #----------------------------------------------------------------------
                # OPENING THE DRIVER FILE AND EDIT
                #----------------------------------------------------------------------
                if sc_num_of_ds_l != '':
                    agtdrvname_arr = sc_num_of_ds_a 
                    log.debug("Agent : agtdrvname_arr %s!\n"%(agtdrvname_arr))
                    for e1 in range (int(agtdrvname_arr[0])):
                        if len(agtdrvname_arr) == 1:
                            agtdrvname = agtname 
                        else:
                            agtdrvname = agtname+"_"+agtdrvname_arr[e1+1]

                        mc_drv_array = []
                
                        if not os.path.isfile('%s_driver.sv'%(agtdrvname)):
                            log.error("%s_driver.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(agtdrvname))
                        else:
                            log.info("%s_driver.sv file does exists! Progressing Further.\n"%(agtdrvname))
                            mc_drv_input_file = open("%s_driver.sv"%(agtdrvname),"r+")

                            drv_stg = '' 
                            drv_loc_stg = ''

                            for lines in mc_drv_input_file:
                                drv_stg = drv_stg+lines+'µ' 
                            log.debug("generate_button_code: Value of drv_stg %s"%(drv_stg))

                            
                            #----------------------------------------------------------------------
                            # Code for Instantiation Local Variables 
                            #----------------------------------------------------------------------
                            pos = drv_stg.find(' // Data Members\n')
                            apos = pos + len(' // Data Members\n') + len('µ //------------------------------------------\n')
                            drv_loc_stg = drv_loc_stg+'µ int unsigned %s_agent_id;\n'%(agtname)
                            drv_stg = drv_stg[:apos]+drv_loc_stg+drv_stg[apos:]
                            
                            # Cleaning local vars
                            drv_loc_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            # Code for Driver Interface Instantiation inside agt_cfg File
                            #----------------------------------------------------------------------
                            drv_loc_stg = drv_loc_stg+("µ virtual %s_interface %s_vif;\n"%(agtdrvname, agtdrvname))
                                    
                            pos = drv_stg.find(' // Interface Instantiation\n')
                            apos = pos + len(' // Interface Instantiation\n')+len('µ //------------------------------------------\n')
                            drv_stg = drv_stg[:apos]+drv_loc_stg+drv_stg[apos:]

                            # Cleaning local vars
                            drv_loc_stg = ''
                            #----------------------------------------------------------------------

                                
                            #----------------------------------------------------------------------
                            # Code for Agent Configuration Instantiation
                            #----------------------------------------------------------------------
                            pos = drv_stg.find(' // Agent Configuration Instantiation\n')
                            apos = pos + len(' // Agent Configuration Instantiation\n') + len('µ //------------------------------------------\n')
                            drv_loc_stg = drv_loc_stg+'µ %s_agent_config %s_agent_cfg;\n'%(agtname, agtname)
                            drv_stg = drv_stg[:apos]+drv_loc_stg+drv_stg[apos:]
                            
                            # Cleaning local vars
                            drv_loc_stg = ''
                            #----------------------------------------------------------------------

                            
                            #----------------------------------------------------------------------
                            # Code for Registration The Variables In Factory 
                            #----------------------------------------------------------------------
                            pos = drv_stg.find(' // Add field configurations\n')
                            apos = pos + len(' // Add field configurations\n') + len('µ  // -----------------\n')
                            drv_loc_stg = drv_loc_stg+("µ `uvm_field_int(%s_agent_id, UVM_ALL_ON)\n"%(agtname))
                            drv_stg = drv_stg[:apos]+drv_loc_stg+drv_stg[apos:]
                            
                            # Cleaning local vars
                            drv_loc_stg = ''
                            #----------------------------------------------------------------------

                            
                            #----------------------------------------------------------------------
                            # Code for Getting Agent Config Instantiation
                            #----------------------------------------------------------------------
                            drv_loc_stg = drv_loc_stg\
                            +('µ if (!uvm_config_db#(%s_agent_config)::get(this, "*", "%s_agent_config", %s_agent_cfg))\n'%(agtname, agtname, agtname))\
                            +('µ begin\n')\
                            +('µ  `uvm_error(get_type_name(), "%s_agent_config object is not found in config_db!");\n'%(agtname))\
                            +('µ end\n')\
                            +('µ else\n')\
                            +('µ begin\n')\
                            +('µ  %s_agent_cfg.print();\n'%(agtname))\
                            +('µ end\n')\
                                
                            pos = drv_stg.find(' // Get Agent Configuration\n')
                            apos = pos + len(' // Get Agent Configuration\n')
                            drv_stg = drv_stg[:apos]+drv_loc_stg+drv_stg[apos:]
 
                            # Cleaning local vars
                            drv_loc_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            # Code for Making the vif assignment from config to local interface 
                            #----------------------------------------------------------------------
                            drv_loc_stg = drv_loc_stg+("µ %s_vif = %s_agent_cfg.%s_vif;\n"%(agtdrvname, agtname, agtdrvname))
                                    
                            pos = drv_stg.find(' // Configure children\n')
                            apos = pos + len(' // Configure children\n')+len('µ // ------------------\n')
                            drv_stg = drv_stg[:apos]+drv_loc_stg+drv_stg[apos:]

                            # Cleaning local vars
                            drv_loc_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            # Loading up the Driver array content into file 
                            #----------------------------------------------------------------------
                            log.debug("generate_button_code: Value of drv_stg %s"%(drv_stg))
                            mc_drv_input_file = open("%s_driver.sv"%(agtdrvname), "w")
                            mc_drv_array = drv_stg.split('µ')
                            for lines in mc_drv_array:
                                mc_drv_input_file.write(lines)
                            mc_drv_input_file.close()
                            #----------------------------------------------------------------------
                        
                
                #----------------------------------------------------------------------
                # Opening the Monitor File and Edit
                #----------------------------------------------------------------------
                if sc_num_of_mon_l != '':
                    agtmonname_arr = sc_num_of_mon_a 
                    log.debug("Agent : agtmonname_arr %s!\n"%(agtmonname_arr))
                    for e2 in range (int(agtmonname_arr[0])):
                        if len(agtmonname_arr) == 1:
                            agtmonname = agtname 
                        else:
                            agtmonname = agtname+"_"+agtmonname_arr[e2+1]

                        mc_mon_array = []
                        
                        if not os.path.isfile('%s_monitor.sv'%(agtmonname)):
                            log.error("%s_monitor.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(agtmonname))
                        else:
                            log.info("%s_monitor.sv file does exists! Progressing Further.\n"%(agtmonname))
                            mc_mon_input_file = open("%s_monitor.sv"%(agtmonname),"r+")

                            mon_stg = '' 
                            mon_loc_stg = ''
                            mon_por_stg = ''

                            for lines in mc_mon_input_file:
                                mon_stg = mon_stg+lines+'µ' 
                            log.debug("generate_button_code: Value of mon_stg %s"%(mon_stg))

                            
                            #----------------------------------------------------------------------
                            # Code for Instantiation Local Variables 
                            #----------------------------------------------------------------------
                            pos = mon_stg.find(' // Data Members\n')
                            apos = pos + len(' // Data Members\n') + len('µ //------------------------------------------\n')
                            mon_loc_stg = mon_loc_stg+'µ int unsigned %s_agent_id;\n'%(agtname)
                            mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
                            
                            # Cleaning local vars
                            mon_loc_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            # Code for Interface Instantiation inside Monitor File 
                            #----------------------------------------------------------------------
                            if sc_num_of_ds_l != '':
                                agtdrvname_arr = sc_num_of_ds_a 
                                log.debug("Agent : agtdrvname_arr %s!\n"%(agtdrvname_arr))
                                for e3 in range (int(agtdrvname_arr[0])):
                                    if len(agtdrvname_arr) == 1:
                                        agtdrvname = agtname 
                                    else:
                                        agtdrvname = agtname+"_"+agtdrvname_arr[e3+1]

                                    mon_loc_stg = mon_loc_stg+("µ virtual %s_interface %s_vif;\n"%(agtdrvname, agtdrvname))
                                    
                            pos = mon_stg.find(' // Interface Instantiation\n')
                            apos = pos + len(' // Interface Instantiation\n')+len('µ //------------------------------------------\n')
                            mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]

                            # Cleaning local vars
                            mon_loc_stg = ''
                            #----------------------------------------------------------------------

                
                            #----------------------------------------------------------------------
                            # Code for Agent Configuration Instantiation
                            #----------------------------------------------------------------------
                            pos = mon_stg.find(' // Agent Configuration Instantiation\n')
                            apos = pos + len(' // Agent Configuration Instantiation\n') + len('µ //------------------------------------------\n')
                            mon_loc_stg = mon_loc_stg+'µ %s_agent_config %s_agent_cfg;\n'%(agtname, agtname)
                            mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
                            
                            # Cleaning local vars
                            mon_loc_stg = ''
                            #----------------------------------------------------------------------
   
                            
                            #----------------------------------------------------------------------
                            # Code for Registration The Variables In Factory 
                            #----------------------------------------------------------------------
                            pos = mon_stg.find(' // Add field configurations\n')
                            apos = pos + len(' // Add field configurations\n') + len('µ  // -----------------\n')
                            mon_loc_stg = mon_loc_stg+("µ `uvm_field_int(%s_agent_id, UVM_ALL_ON)\n"%(agtname))
                            mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
                            
                            # Cleaning local vars
                            mon_loc_stg = ''
                            #----------------------------------------------------------------------

            
                            #----------------------------------------------------------------------
                            # Code for Getting Agent Config Instantiation
                            #----------------------------------------------------------------------
                            mon_loc_stg = mon_loc_stg\
                            +('µ if (!uvm_config_db#(%s_agent_config)::get(this, "*", "%s_agent_config", %s_agent_cfg))\n'%(agtname, agtname, agtname))\
                            +('µ begin\n')\
                            +('µ  `uvm_error(get_type_name(), "%s_agent_config object is not found in config_db!");\n'%(agtname))\
                            +('µ end\n')\
                            +('µ else\n')\
                            +('µ begin\n')\
                            +('µ  %s_agent_cfg.print();\n'%(agtname))\
                            +('µ end\n')\
                                
                            pos = mon_stg.find(' // Get Agent Configuration\n')
                            apos = pos + len(' // Get Agent Configuration\n')
                            mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
 
                            # Cleaning local vars
                            mon_loc_stg = ''
                            #----------------------------------------------------------------------

                            
                            #----------------------------------------------------------------------
                            # Code for Making the vif assignment from config to local interface 
                            #----------------------------------------------------------------------
                            if sc_num_of_ds_l != '':
                                agtdrvname_arr = sc_num_of_ds_a 
                                log.debug("Agent : agtdrvname_arr %s!\n"%(agtdrvname_arr))
                                for e3 in range (int(agtdrvname_arr[0])):
                                    if len(agtdrvname_arr) == 1:
                                        agtdrvname = agtname 
                                    else:
                                        agtdrvname = agtname+"_"+agtdrvname_arr[e3+1]

                                    mon_loc_stg = mon_loc_stg+("µ %s_vif = %s_agent_cfg.%s_vif;\n"%(agtdrvname, agtname, agtdrvname))
                                    
                            pos = mon_stg.find(' // Configure children\n')
                            apos = pos + len(' // Configure children\n')+len('µ // ------------------\n')
                            mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]

                            # Cleaning local vars
                            mon_loc_stg = ''
                            #----------------------------------------------------------------------
                       
                            
                            #----------------------------------------------------------------------
                            # Loading up the Monitor array content into file 
                            #----------------------------------------------------------------------
                            log.debug("generate_button_code: Value of mon_stg %s"%(mon_stg))
                            mc_mon_input_file = open("%s_monitor.sv"%(agtmonname), "w")
                            mc_mon_array = mon_stg.split('µ')
                            for lines in mc_mon_array:
                                mc_mon_input_file.write(lines)
                            mc_mon_input_file.close()
                            #----------------------------------------------------------------------


                #CHANGE os.system('$PROJ_ROOT/.bin/generate_agent.csh  %s %s %s %s' % (str(obj_comp_entry_name), str(obj_comp_entry_name_pkg), str(sc_num_of_ds_l), str(sc_num_of_mon_l),))
                #CHANGE 
                #CHANGE sc_agt_array = []
                #CHANGE sc_agt_input_file = open("%s_agent.sv" % (str(obj_comp_entry_name)), "r+")
               
                #CHANGE for lines in sc_agt_input_file:
                #CHANGE     sc_agt_array.append(lines)
                #CHANGE     # if lines.startswith(" uvm_active_passive_enum"):
                #CHANGE     if (agt_found_data_mem_decl == 0) and lines.startswith(" // Data Members"):
                #CHANGE         agt_found_data_mem_decl = 1
                #CHANGE     if (agt_found_data_mem_decl == 1) and lines.startswith(" //--"):
                #CHANGE         agt_found_data_mem_decl = 0
                #CHANGE         #sc_agt_array.append("\n")
                #CHANGE         sc_agt_array.append(" %s_config     %s_acfg;\n"%(str(obj_comp_entry_name), str(obj_comp_entry_name),))
                #CHANGE                                     
                #CHANGE         if (len(sc_num_of_mon_a) == 1 and int(sc_num_of_mon_a[0]) == 1):
                #CHANGE             sc_agt_array.append(" %s_monitor     %s_monr;\n"%(str(obj_comp_entry_name), str(obj_comp_entry_name),))
                #CHANGE         elif (len(sc_num_of_mon_a) > 1):
                #CHANGE             for i in range (1, int(sc_num_of_mon_a[0])+1):
                #CHANGE                 sc_agt_array.append(" %s_%s_monitor     %s_%s_monr;\n"%(str(obj_comp_entry_name), sc_num_of_mon_a[i], str(obj_comp_entry_name), sc_num_of_mon_a[i],))
                #CHANGE         
                #CHANGE         if (len(sc_num_of_ds_a) == 1 and int(sc_num_of_ds_a[0]) == 1):
                #CHANGE                 sc_agt_array.append(" %s_sequencer       %s_seqr;\n"%(str(obj_comp_entry_name), str(obj_comp_entry_name),))
                #CHANGE                 sc_agt_array.append(" %s_driver      %s_drvr;\n"%(str(obj_comp_entry_name), str(obj_comp_entry_name),))
                #CHANGE         elif (len(sc_num_of_ds_a) > 1):
                #CHANGE             for i in range (1, int(sc_num_of_ds_a[0])+1):
                #CHANGE                 sc_agt_array.append(" %s_%s_sequencer       %s_%s_seqr;\n"%(str(obj_comp_entry_name), sc_num_of_ds_a[i], str(obj_comp_entry_name), sc_num_of_ds_a[i],))
                #CHANGE                 sc_agt_array.append(" %s_%s_driver      %s_%s_drvr;\n"%(str(obj_comp_entry_name), sc_num_of_ds_a[i], str(obj_comp_entry_name), sc_num_of_ds_a[i],))
                #CHANGE     
                #CHANGE     if (agt_found_config_decl == 0) and lines.startswith(" // Get configuration"):
                #CHANGE         agt_found_config_decl = 1
                #CHANGE     if (agt_found_config_decl == 1) and lines.startswith(" // --"):
                #CHANGE         agt_found_config_decl = 0
                #CHANGE         sc_agt_array.append(' if (!uvm_config_db#(%s_config)::get(this, "*", "%s_config", %s_acfg))\n'%(str(obj_comp_entry_name), str(obj_comp_entry_name), str(obj_comp_entry_name)))
                #CHANGE         sc_agt_array.append(' begin\n')
                #CHANGE         sc_agt_array.append('  `uvm_error(get_type_name(), "%s_config object is not found in config_db!");\n'%(str(obj_comp_entry_name)))
                #CHANGE         sc_agt_array.append(' end\n')
                #CHANGE     
                #CHANGE     if (agt_found_const_decl == 0) and lines.startswith(" // Construct children"):
                #CHANGE         agt_found_const_decl = 1
                #CHANGE     if (agt_found_const_decl == 1) and lines.startswith(" // --"):
                #CHANGE         agt_found_const_decl = 0
                #CHANGE         agt_found_const_decl_nxt_line = 1 
                #CHANGE         
                #CHANGE         if (len(sc_num_of_mon_a) == 1 and int(sc_num_of_mon_a[0]) == 1):
                #CHANGE             sc_agt_array.append(" %s_monr = %s_monitor::type_id::create(\"%s_monr\", this);\n"%(str(obj_comp_entry_name), str(obj_comp_entry_name), str(obj_comp_entry_name),))
                #CHANGE         elif (len(sc_num_of_mon_a) > 1):
                #CHANGE             for i in range (1, int(sc_num_of_mon_a[0])+1):
                #CHANGE                 sc_agt_array.append(" %s_%s_monr = %s_%s_monitor::type_id::create(\"%s_%s_monr\", this);\n"%(str(obj_comp_entry_name), sc_num_of_mon_a[i], str(obj_comp_entry_name), sc_num_of_mon_a[i], str(obj_comp_entry_name), sc_num_of_mon_a[i],))
                #CHANGE     
                #CHANGE     #if (agt_found_const_decl_nxt_line == 1) and lines.startswith(" if(is_active == UVM_ACTIVE)"):
                #CHANGE     #    agt_found_const_decl_nxt_line = 0 
                #CHANGE         
                #CHANGE         sc_agt_array.append(' if (%s_acfg.is_active == UVM_ACTIVE) begin\n'%(str(obj_comp_entry_name)))
                #CHANGE         if (len(sc_num_of_ds_a) == 1 and int(sc_num_of_ds_a[0]) == 1):
                #CHANGE             sc_agt_array.append("  %s_seqr = %s_sequencer::type_id::create(\"%s_seqr\", this);\n"%(str(obj_comp_entry_name), str(obj_comp_entry_name), str(obj_comp_entry_name),))
                #CHANGE             sc_agt_array.append("  %s_drvr = %s_driver::type_id::create(\"%s_drvr\", this);\n"%(str(obj_comp_entry_name), str(obj_comp_entry_name), str(obj_comp_entry_name),))
                #CHANGE         elif (len(sc_num_of_ds_a) > 1):
                #CHANGE             for i in range (1, int(sc_num_of_ds_a[0])+1):
                #CHANGE                 sc_agt_array.append("  %s_%s_seqr = %s_%s_sequencer::type_id::create(\"%s_%s_seqr\", this);\n"%(str(obj_comp_entry_name), sc_num_of_ds_a[i], str(obj_comp_entry_name), sc_num_of_ds_a[i], str(obj_comp_entry_name), sc_num_of_ds_a[i],))
                #CHANGE                 sc_agt_array.append("  %s_%s_drvr = %s_%s_driver::type_id::create(\"%s_%s_drvr\", this);\n"%(str(obj_comp_entry_name), sc_num_of_ds_a[i], str(obj_comp_entry_name), sc_num_of_ds_a[i], str(obj_comp_entry_name), sc_num_of_ds_a[i],))
                #CHANGE         sc_agt_array.append(' end\n')
                #CHANGE     
                #CHANGE     if (agt_found_conn_decl == 0) and lines.startswith(" // Connect children"):
                #CHANGE         agt_found_conn_decl = 1
                #CHANGE     if (agt_found_conn_decl == 1) and lines.startswith(" // --"):
                #CHANGE         agt_found_conn_decl = 0
                #CHANGE     #    agt_found_conn_decl_nxt_line = 1
                #CHANGE     #if (agt_found_conn_decl_nxt_line == 1) and lines.startswith("  if(is_active == UVM_ACTIVE)"):
                #CHANGE     #    agt_found_conn_decl_nxt_line = 0
                #CHANGE         
                #CHANGE         sc_agt_array.append(' if (%s_acfg.is_active == UVM_ACTIVE) begin\n'%(str(obj_comp_entry_name)))
                #CHANGE         if (len(sc_num_of_ds_a) == 1 and int(sc_num_of_ds_a[0]) == 1):
                #CHANGE             sc_agt_array.append("   %s_drvr.seq_item_port.connect(%s_seqr.seq_item_export);\n"%(str(obj_comp_entry_name), str(obj_comp_entry_name),))
                #CHANGE         elif (len(sc_num_of_ds_a) > 1):
                #CHANGE             for i in range (1, int(sc_num_of_ds_a[0])+1):
                #CHANGE                 sc_agt_array.append("   %s_%s_drvr.seq_item_port.connect(%s_%s_seqr.seq_item_export);\n"%(str(obj_comp_entry_name), sc_num_of_ds_a[i], str(obj_comp_entry_name), sc_num_of_ds_a[i],))
                #CHANGE         sc_agt_array.append(' end\n')

                #CHANGE sc_agt_input_file = open("%s_agent.sv" % (str(obj_comp_entry_name)), "w")
                #CHANGE 
                #CHANGE for lines in sc_agt_array:
                #CHANGE     sc_agt_input_file.write(lines)
                #CHANGE 
                #CHANGE 
                #CHANGE #------------------------------------------------------------------------------------------- 
                #CHANGE # Code For Updating The Agent Config FIle 
                #CHANGE #------------------------------------------------------------------------------------------- 
                #CHANGE if self.sc_choose_int_list.get(self.sc_choose_int_val.get()) in (1,2,3):
                #CHANGE     sc_agt_cfg_array = []
                #CHANGE     sc_agt_cfg_input_file = open("%s_config.sv" % (str(obj_comp_entry_name)), "r+")
               
                #CHANGE     for lines in sc_agt_cfg_input_file:
                #CHANGE         sc_agt_cfg_array.append(lines)
                #CHANGE         if lines.startswith(' rand uvm_active_passive_enum is_active'):
                #CHANGE             if (len(sc_num_of_ds_a) == 1 and int(sc_num_of_ds_a[0]) == 1):
                #CHANGE                 sc_agt_cfg_array.append(" virtual %s_interface %s_vif;\n"%(str(obj_comp_entry_name), str(obj_comp_entry_name)))
                #CHANGE             elif (len(sc_num_of_ds_a) > 1):
                #CHANGE                 for j in range (1, int(sc_num_of_ds_a[0])+1):
                #CHANGE                     sc_agt_cfg_array.append(" virtual %s_%s_interface %s_%s_vif;\n"%(str(obj_comp_entry_name), sc_num_of_ds_a[j], str(obj_comp_entry_name), sc_num_of_ds_a[j]))
                #CHANGE     
                #CHANGE     sc_agt_cfg_input_file = open("%s_config.sv" % (str(obj_comp_entry_name)), "w")
                #CHANGE     
                #CHANGE     for lines in sc_agt_cfg_array:
                #CHANGE         sc_agt_cfg_input_file.write(lines)
                #CHANGE 
                #CHANGE #------------------------------------------------------------------------------------------- 
                #CHANGE # Code For Updating The Driver Files
                #CHANGE #------------------------------------------------------------------------------------------- 
                #CHANGE if (len(sc_num_of_ds_a) == 1 and int(sc_num_of_ds_a[0]) == 1):
                #CHANGE     sc_drv_array = []
                #CHANGE     sc_drv_input_file = open("%s_driver.sv" % (str(obj_comp_entry_name)), "r+")
               
                #CHANGE     for lines in sc_drv_input_file:
                #CHANGE         sc_drv_array.append(lines)
                #CHANGE         if (drv_found_data_mem_decl == 0) and lines.startswith(" // Data Members"):
                #CHANGE             drv_found_data_mem_decl = 1
                #CHANGE         if (drv_found_data_mem_decl == 1) and lines.startswith(" //--"):
                #CHANGE             drv_found_data_mem_decl = 0
                #CHANGE             sc_drv_array.append(" %s_config     %s_dcfg;\n"%(str(obj_comp_entry_name), str(obj_comp_entry_name)))
                #CHANGE         
                #CHANGE         if self.sc_choose_int_list.get(self.sc_choose_int_val.get()) in (1,2,3):
                #CHANGE             if (drv_found_intf_mem_decl == 0) and lines.startswith(" // Interface Instance"):
                #CHANGE                 drv_found_intf_mem_decl = 1
                #CHANGE             if (drv_found_intf_mem_decl == 1) and lines.startswith(" //--"):
                #CHANGE                 drv_found_intf_mem_decl = 0
                #CHANGE                 sc_drv_array.append(" virtual %s_interface %s_vif;\n"%(str(obj_comp_entry_name), str(obj_comp_entry_name)))
                #CHANGE         
                #CHANGE         if (drv_found_config_decl == 0) and lines.startswith(" // Get configuration"):
                #CHANGE             drv_found_config_decl = 1
                #CHANGE         if (drv_found_config_decl == 1) and lines.startswith(" // --"):
                #CHANGE             drv_found_config_decl = 0
                #CHANGE             sc_drv_array.append(' if (!uvm_config_db#(%s_config)::get(this, "*", "%s_config", %s_dcfg))\n'%(str(obj_comp_entry_name), str(obj_comp_entry_name), str(obj_comp_entry_name)))
                #CHANGE             sc_drv_array.append(' begin\n')
                #CHANGE             sc_drv_array.append('  `uvm_error(get_type_name(), "%s_config object is not found in config_db!");\n'%(str(obj_comp_entry_name)))
                #CHANGE             sc_drv_array.append(' end\n')
                #CHANGE         
                #CHANGE         if self.sc_choose_int_list.get(self.sc_choose_int_val.get()) in (1,2,3):
                #CHANGE             if (drv_found_cc_decl == 0) and lines.startswith(" // Configure children"):
                #CHANGE                 drv_found_cc_decl = 1
                #CHANGE             if (drv_found_cc_decl == 1) and lines.startswith(" // --"):
                #CHANGE                 drv_found_cc_decl = 0
                #CHANGE                 sc_drv_array.append(" %s_vif = %s_dcfg.%s_vif;\n"%(str(obj_comp_entry_name), str(obj_comp_entry_name), str(obj_comp_entry_name)))
                #CHANGE     
                #CHANGE     sc_drv_input_file = open("%s_driver.sv" % (str(obj_comp_entry_name)), "w")
                #CHANGE     for lines in sc_drv_array:
                #CHANGE         sc_drv_input_file.write(lines)
                #CHANGE elif (len(sc_num_of_ds_a) > 1):
                #CHANGE     for i in range (1, int(sc_num_of_ds_a[0])+1):
                #CHANGE         sc_drv_array = []
                #CHANGE         sc_drv_input_file = open("%s_%s_driver.sv"%(str(obj_comp_entry_name), sc_num_of_ds_a[i]), "r+")
               
                #CHANGE         for lines in sc_drv_input_file:
                #CHANGE             sc_drv_array.append(lines)
                #CHANGE             if (drv_found_data_mem_decl == 0) and lines.startswith(" // Data Members"):
                #CHANGE                 drv_found_data_mem_decl = 1
                #CHANGE             if (drv_found_data_mem_decl == 1) and lines.startswith(" //--"):
                #CHANGE                 drv_found_data_mem_decl = 0
                #CHANGE                 sc_drv_array.append(" %s_config     %s_dcfg;\n"%(str(obj_comp_entry_name), str(obj_comp_entry_name)))
                #CHANGE         
                #CHANGE             if self.sc_choose_int_list.get(self.sc_choose_int_val.get()) in (1,2,3):
                #CHANGE                 if (drv_found_intf_mem_decl == 0) and lines.startswith(" // Interface Instance"):
                #CHANGE                     drv_found_intf_mem_decl = 1
                #CHANGE                 if (drv_found_intf_mem_decl == 1) and lines.startswith(" //--"):
                #CHANGE                     drv_found_intf_mem_decl = 0
                #CHANGE                     sc_drv_array.append(" virtual %s_%s_interface %s_%s_vif;\n"%(str(obj_comp_entry_name), sc_num_of_ds_a[i], str(obj_comp_entry_name), sc_num_of_ds_a[i]))
                #CHANGE             
                #CHANGE             if (drv_found_config_decl == 0) and lines.startswith(" // Get configuration"):
                #CHANGE                 drv_found_config_decl = 1
                #CHANGE             if (drv_found_config_decl == 1) and lines.startswith(" // --"):
                #CHANGE                 drv_found_config_decl = 0
                #CHANGE                 sc_drv_array.append(' if (!uvm_config_db#(%s_config)::get(this, "*", "%s_config", %s_dcfg))\n'%(str(obj_comp_entry_name), str(obj_comp_entry_name), str(obj_comp_entry_name)))
                #CHANGE                 sc_drv_array.append(' begin\n')
                #CHANGE                 sc_drv_array.append('  `uvm_error(get_type_name(), "%s_config object is not found in config_db!");\n'%(str(obj_comp_entry_name)))
                #CHANGE                 sc_drv_array.append(' end\n')
                #CHANGE         
                #CHANGE             if self.sc_choose_int_list.get(self.sc_choose_int_val.get()) in (1,2,3):
                #CHANGE                 if (drv_found_cc_decl == 0) and lines.startswith(" // Configure children"):
                #CHANGE                     drv_found_cc_decl = 1
                #CHANGE                 if (drv_found_cc_decl == 1) and lines.startswith(" // --"):
                #CHANGE                     drv_found_cc_decl = 0
                #CHANGE                     sc_drv_array.append(" %s_%s_vif = %s_dcfg.%s_%s_vif;\n"%(str(obj_comp_entry_name), sc_num_of_ds_a[i], str(obj_comp_entry_name), str(obj_comp_entry_name), sc_num_of_ds_a[i]))
                #CHANGE         
                #CHANGE         sc_drv_input_file = open("%s_%s_driver.sv" % (str(obj_comp_entry_name) , sc_num_of_ds_a[i]), "w")
                #CHANGE         for lines in sc_drv_array:
                #CHANGE             sc_drv_input_file.write(lines)    

                #CHANGE 
                #CHANGE #------------------------------------------------------------------------------------------- 
                #CHANGE # Code For Updating The Monitor Files
                #CHANGE #------------------------------------------------------------------------------------------- 
                #CHANGE if (len(sc_num_of_mon_a) == 1 and int(sc_num_of_mon_a[0]) == 1):
                #CHANGE     sc_mon_array = []
                #CHANGE     sc_mon_input_file = open("%s_monitor.sv" % (str(obj_comp_entry_name)), "r+")
               
                #CHANGE     for lines in sc_mon_input_file:
                #CHANGE         sc_mon_array.append(lines)
                #CHANGE         if (mon_found_data_mem_decl == 0) and lines.startswith(" // Data Members"):
                #CHANGE             mon_found_data_mem_decl = 1
                #CHANGE         if (mon_found_data_mem_decl == 1) and lines.startswith(" //--"):
                #CHANGE             mon_found_data_mem_decl = 0
                #CHANGE             sc_mon_array.append(" %s_config     %s_mcfg;\n"%(str(obj_comp_entry_name), str(obj_comp_entry_name)))
                #CHANGE         
                #CHANGE         if self.sc_choose_int_list.get(self.sc_choose_int_val.get()) in (1,2,3):
                #CHANGE             if (mon_found_intf_mem_decl == 0) and lines.startswith(" // Interface Instance"):
                #CHANGE                 mon_found_intf_mem_decl = 1
                #CHANGE             if (mon_found_intf_mem_decl == 1) and lines.startswith(" //--"):
                #CHANGE                 mon_found_intf_mem_decl = 0
                #CHANGE                 if (len(sc_num_of_ds_a) == 1 and int(sc_num_of_ds_a[0]) == 1):
                #CHANGE                     sc_mon_array.append(" virtual %s_interface %s_vif;\n"%(str(obj_comp_entry_name), str(obj_comp_entry_name)))
                #CHANGE                 elif (len(sc_num_of_ds_a) > 1):
                #CHANGE                     for j in range (1, int(sc_num_of_ds_a[0])+1):
                #CHANGE                         sc_mon_array.append(" virtual %s_%s_interface %s_%s_vif;\n"%(str(obj_comp_entry_name), sc_num_of_ds_a[j], str(obj_comp_entry_name), sc_num_of_ds_a[j]))
                #CHANGE         
                #CHANGE         if (mon_found_config_decl == 0) and lines.startswith(" // Get configuration"):
                #CHANGE             mon_found_config_decl = 1
                #CHANGE         if (mon_found_config_decl == 1) and lines.startswith(" // --"):
                #CHANGE             mon_found_config_decl = 0
                #CHANGE             sc_mon_array.append(' if (!uvm_config_db#(%s_config)::get(this, "*", "%s_config", %s_mcfg))\n'%(str(obj_comp_entry_name), str(obj_comp_entry_name), str(obj_comp_entry_name)))
                #CHANGE             sc_mon_array.append(' begin\n')
                #CHANGE             sc_mon_array.append('  `uvm_error(get_type_name(), "%s_config object is not found in config_db!");\n'%(str(obj_comp_entry_name)))
                #CHANGE             sc_mon_array.append(' end\n')
                #CHANGE         
                #CHANGE         if self.sc_choose_int_list.get(self.sc_choose_int_val.get()) in (1,2,3):
                #CHANGE             if (mon_found_cc_decl == 0) and lines.startswith(" // Configure children"):
                #CHANGE                 mon_found_cc_decl = 1
                #CHANGE             if (mon_found_cc_decl == 1) and lines.startswith(" // --"):
                #CHANGE                 mon_found_cc_decl = 0
                #CHANGE                 if (len(sc_num_of_ds_a) == 1 and int(sc_num_of_ds_a[0]) == 1):
                #CHANGE                     sc_mon_array.append(" %s_vif = %s_mcfg.%s_vif;\n"%(str(obj_comp_entry_name), str(obj_comp_entry_name), str(obj_comp_entry_name)))
                #CHANGE                 elif (len(sc_num_of_ds_a) > 1):
                #CHANGE                     for j in range (1, int(sc_num_of_ds_a[0])+1):
                #CHANGE                         sc_mon_array.append(" %s_%s_vif = %s_mcfg.%s_%s_vif;\n"%(str(obj_comp_entry_name), sc_num_of_ds_a[j], str(obj_comp_entry_name), str(obj_comp_entry_name), sc_num_of_ds_a[j]))
                #CHANGE     
                #CHANGE     sc_mon_input_file = open("%s_monitor.sv" % (str(obj_comp_entry_name)), "w")
                #CHANGE     for lines in sc_mon_array:
                #CHANGE         sc_mon_input_file.write(lines)    
                #CHANGE elif (len(sc_num_of_mon_a) > 1):
                #CHANGE     for i in range (1, int(sc_num_of_mon_a[0])+1):
                #CHANGE         sc_mon_array = []
                #CHANGE         sc_mon_input_file = open("%s_%s_monitor.sv" % (str(obj_comp_entry_name), sc_num_of_mon_a[i]), "r+")
                #CHANGE         log.debug("Monitor: Opening the monitor file %s"%sc_num_of_mon_a[i])

                #CHANGE         for lines in sc_mon_input_file:
                #CHANGE             sc_mon_array.append(lines)
                #CHANGE             if (mon_found_data_mem_decl == 0) and lines.startswith(" // Data Members"):
                #CHANGE                 mon_found_data_mem_decl = 1
                #CHANGE             if (mon_found_data_mem_decl == 1) and lines.startswith(" //--"):
                #CHANGE                 mon_found_data_mem_decl = 0
                #CHANGE                 sc_mon_array.append(" %s_config     %s_mcfg;\n"%(str(obj_comp_entry_name), str(obj_comp_entry_name)))
                #CHANGE             
                #CHANGE             if (mon_found_intf_mem_decl == 0) and lines.startswith(" // Interface Instance"):
                #CHANGE                 mon_found_intf_mem_decl = 1
                #CHANGE             if (mon_found_intf_mem_decl == 1) and lines.startswith(" //--"):
                #CHANGE                 mon_found_intf_mem_decl = 0
                #CHANGE                 if (len(sc_num_of_ds_a) == 1 and int(sc_num_of_ds_a[0]) == 1):
                #CHANGE                     sc_mon_array.append(" virtual %s_interface %s_vif;\n"%(str(obj_comp_entry_name), str(obj_comp_entry_name)))
                #CHANGE                 elif (len(sc_num_of_ds_a) > 1):
                #CHANGE                     for j in range (1, int(sc_num_of_ds_a[0])+1):
                #CHANGE                         sc_mon_array.append(" virtual %s_%s_interface %s_%s_vif;\n"%(str(obj_comp_entry_name), sc_num_of_ds_a[j], str(obj_comp_entry_name), sc_num_of_ds_a[j]))
                #CHANGE             
                #CHANGE             if (mon_found_config_decl == 0) and lines.startswith(" // Get configuration"):
                #CHANGE                 mon_found_config_decl = 1
                #CHANGE             if (mon_found_config_decl == 1) and lines.startswith(" // --"):
                #CHANGE                 mon_found_config_decl = 0
                #CHANGE                 sc_mon_array.append(' if (!uvm_config_db#(%s_config)::get(this, "*", "%s_config", %s_mcfg))\n'%(str(obj_comp_entry_name), str(obj_comp_entry_name), str(obj_comp_entry_name)))
                #CHANGE                 sc_mon_array.append(' begin\n')
                #CHANGE                 sc_mon_array.append('  `uvm_error(get_type_name(), "%s_config object is not found in config_db!");\n'%(str(obj_comp_entry_name)))
                #CHANGE                 sc_mon_array.append(' end\n')
                #CHANGE             
                #CHANGE             if (mon_found_cc_decl == 0) and lines.startswith(" // Configure children"):
                #CHANGE                 mon_found_cc_decl = 1
                #CHANGE             if (mon_found_cc_decl == 1) and lines.startswith(" // --"):
                #CHANGE                 mon_found_cc_decl = 0
                #CHANGE                 if (len(sc_num_of_ds_a) == 1 and int(sc_num_of_ds_a[0]) == 1):
                #CHANGE                     sc_mon_array.append(" %s_vif = %s_mcfg.%s_vif;\n"%(str(obj_comp_entry_name), str(obj_comp_entry_name), str(obj_comp_entry_name)))
                #CHANGE                 elif (len(sc_num_of_ds_a) > 1):
                #CHANGE                     for j in range (1, int(sc_num_of_ds_a[0])+1):
                #CHANGE                         sc_mon_array.append(" %s_%s_vif = %s_mcfg.%s_%s_vif;\n"%(str(obj_comp_entry_name), sc_num_of_ds_a[j], str(obj_comp_entry_name), str(obj_comp_entry_name), sc_num_of_ds_a[j]))
                #CHANGE         
                #CHANGE         sc_mon_input_file = open("%s_%s_monitor.sv" % (str(obj_comp_entry_name), sc_num_of_mon_a[i]), "w")
                #CHANGE         for lines in sc_mon_array:
                #CHANGE             sc_mon_input_file.write(lines)
                #------------------------------------------------------------------------------------------- 

            if sv.get()=="Scoreboard":
                #os.system('$PROJ_ROOT/.bin/generate_scoreboard.csh  %s %s' % (str(obj_comp_entry_name), str(obj_comp_entry_name_pkg),))
                #os.system('$PROJ_ROOT/.bin_v3/generate_scoreboard.csh  %s %s' % (str(obj_comp_entry_name), str(obj_comp_entry_name_pkg),))
                self.generate_scoreboard(str(obj_comp_entry_name), str(obj_comp_entry_name_pkg))
            if sv.get()=="Environment":
                #os.system('$PROJ_ROOT/.bin/generate_env.csh  %s %s' % (str(obj_comp_entry_name), str(obj_comp_entry_name_pkg),))
                #os.system('$PROJ_ROOT/.bin_v3/generate_env.csh  %s %s' % (str(obj_comp_entry_name), str(obj_comp_entry_name_pkg),))
                
                envname = str(obj_comp_entry_name)
                envname_pkg = str(obj_comp_entry_name_pkg)
                self.mc_create_env(envname, envname_pkg) 
                
                # Code to edit the Environment File
                mc_env_array = []
                        
                if not os.path.isfile('%s_environment.sv'%(envname)):
                    log.error("%s_environment.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envname))
                else:
                    log.info("%s_environment.sv file does exists! Progressing Further.\n"%(envname))
                    mc_env_input_file = open("%s_environment.sv"%(envname),"r+")

                    env_stg = '' 
                    env_loc_stg = '' 
                    env_cfg_stg = ''
                    env_int_stg = '' 
                    env_mon_stg = '' 
                    env_scb_stg = '' 
                    env_agt_stg = '' 
                    id_temp = "%0d"
                    env_mon_scb_stg = ''

                    for lines in mc_env_input_file:
                        env_stg = env_stg+lines+'µ' 
                    log.debug("mc_create_phase: Value of env_stg %s"%(env_stg))

                    #----------------------------------------------------------------------
                    # Loading up the Env array content into file 
                    #----------------------------------------------------------------------
                    log.debug("mc_create_phase: Value of env_stg %s"%(env_stg))
                    mc_env_input_file = open("%s_environment.sv"%(envname), "w")
                    mc_env_array = env_stg.split('µ')
                    for lines in mc_env_array:
                        mc_env_input_file.write(lines)
                    mc_env_input_file.close()
                    #----------------------------------------------------------------------

            if sv.get()=="Test":
                #os.system('$PROJ_ROOT/.bin/generate_test.csh  %s %s' % (str(obj_comp_entry_name), str(obj_comp_entry_name_pkg),))
                #os.system('$PROJ_ROOT/.bin_v3/generate_test.csh  %s %s' % (str(obj_comp_entry_name), str(obj_comp_entry_name_pkg),))
                self.generate_test(str(obj_comp_entry_name), str(obj_comp_entry_name_pkg))
            if sv.get()=="Interface" or sv.get()=="Agent":
                log.debug("pre intf A: Value of sc_interface_pkg %s"% sc_interface_pkg)
                
                if sc_agt_selected_started:
                    sc_num_of_intf = len(sc_interface_pkg) 
                else:
                    sc_num_of_intf = 1
                
                for i in range (sc_num_of_intf): 
                    if sc_agt_selected_started:
                        if sc_interface_pkg[i][0] != str(obj_comp_entry_name):
                            sc_what_name = str(obj_comp_entry_name)+'_'+sc_interface_pkg[i][0]
                        else:
                            sc_what_name = sc_interface_pkg[i][0]

                        sc_what_type = sc_interface_pkg[i][1]
                        
                        # sc_udie_int_cfg_array[:] = []
                        # sc_udie_clock_cfg_array[:] = []
                        # sc_udie_cb_cfg_array[:] = []
                        # sc_udie_mp_cfg_array[:] = []
                        
                        if sc_what_type == 2 or sc_what_type == 3:
                            log.debug("pre intf A: Value of sc_interface_pkg %s"% sc_interface_pkg)
                            log.debug("pre intf: Value of sc_interface_pkg[%d][3] %s"%(i,str(sc_interface_pkg[i][3])))
                            log.debug("pre intf: Value of sc_interface_pkg[%d][4] %s"%(i,str(sc_interface_pkg[i][4])))
                            log.debug("pre intf: Value of sc_interface_pkg[%d][5] %s"%(i,str(sc_interface_pkg[i][5])))
                            log.debug("pre intf: Value of sc_interface_pkg[%d][6] %s"%(i,str(sc_interface_pkg[i][6])))
                            
                            sc_udie_int_cfg_array = sc_interface_pkg[i][3]
                            sc_udie_clock_cfg_array = sc_interface_pkg[i][4]
                            sc_udie_cb_cfg_array = sc_interface_pkg[i][5]
                            sc_udie_mp_cfg_array = sc_interface_pkg[i][6]
                            
                            log.debug("intf: Value of sc_udie_int_cfg_array %s"% sc_udie_int_cfg_array)
                            log.debug("intf: Value of sc_udie_clock_cfg_array %s"% sc_udie_clock_cfg_array)
                            log.debug("intf: Value of sc_udie_cb_cfg_array %s"% sc_udie_cb_cfg_array)
                            log.debug("intf: Value of sc_udie_mp_cfg_array %s"% sc_udie_mp_cfg_array)
                    else:
                        sc_what_name = str(obj_comp_entry_name)
                        sc_what_type = self.sc_choose_int_list.get(self.sc_choose_int_val.get())
                        
                    # if self.sc_choose_int_list.get(self.sc_choose_int_val.get())==1:
                    #     os.system('$PROJ_ROOT/.bin/generate_interface.csh  %s %s' % (str(obj_comp_entry_name), str(obj_comp_entry_name_pkg),))
                    # elif self.sc_choose_int_list.get(self.sc_choose_int_val.get())==2 or self.sc_choose_int_list.get(self.sc_choose_int_val.get())==3:
                    #     os.system('$PROJ_ROOT/.bin/generate_interface.csh  %s %s' % (str(obj_comp_entry_name), str(obj_comp_entry_name_pkg),))
                    
                    if sc_what_type==1:
                        #os.system('$PROJ_ROOT/.bin/generate_interface.csh  %s %s' % (str(sc_what_name), str(obj_comp_entry_name_pkg),))
                        #os.system('$PROJ_ROOT/.bin_v3/generate_interface.csh  %s %s' % (str(sc_what_name), str(obj_comp_entry_name_pkg),))
                        self.generate_interface(str(sc_what_name))
                    elif sc_what_type==2 or sc_what_type==3:
                        #os.system('$PROJ_ROOT/.bin/generate_interface.csh  %s %s' % (str(sc_what_name), str(obj_comp_entry_name_pkg),))
                        #os.system('$PROJ_ROOT/.bin_v3/generate_interface.csh  %s %s' % (str(sc_what_name), str(obj_comp_entry_name_pkg),))
                        self.generate_interface(str(sc_what_name))
                        
                        sc_udi_array = []
                        #sc_udi_input_file = open("%s_interface.sv" % (str(obj_comp_entry_name)), "r+")
                        sc_udi_input_file = open("%s_interface.sv" % (str(sc_what_name)), "r+")
                        
                        for lines in sc_udi_input_file:
                            sc_udi_array.append(lines)
                            if (sc_udi_decl == 0) and lines.startswith(" // Signal Instantiation"):
                                sc_udi_decl = 1
                            if (sc_udi_decl == 1) and lines.startswith(" //-"):
                                sc_udi_decl = 0
                                #for i in range (sc_udie_loop+1):
        
                                if not sc_agt_selected_started:
                                    if self.sc_choose_int_list.get(self.sc_choose_int_val.get())==3:
                                        sc_udie_frame_loop -= 1 
                                else:
                                    if sc_what_type == 2:
                                        sc_udie_frame_loop = sc_interface_pkg[i][2]
                                    elif sc_what_type == 3:    
                                        sc_udie_frame_loop = sc_interface_pkg[i][2]-1

                                for i in range (sc_udie_frame_loop):
                                    sc_udie_cb_cnt = len(sc_udie_int_cfg_array[i])
                                    log.debug("Value of sc_udie_cb_cnt is %d"% sc_udie_cb_cnt)
                                    log.debug("Value of sc_udie_int_cfg_array is %s"% sc_udie_int_cfg_array )
                                    #for x in range(2, sc_udie_cb_cnt):
                                    x=2
                                    while x<sc_udie_cb_cnt:
                                        log.debug("Inside Loop x %d"% x)
                                        if ("le" == sc_udie_int_cfg_array[i][x]):
                                            le = 1
                                            log.debug("loop value is %s"% sc_udie_int_cfg_array[i][x+1])
                                            while((x<sc_udie_cb_cnt and x+1<sc_udie_cb_cnt) and ((sc_udie_int_cfg_array[i][x+1] != 'ree') and ("_cb" not in sc_udie_int_cfg_array[i][x+1]) and ("_mp" not in sc_udie_int_cfg_array[i][x+1]))):
                                                log.debug("loop value is 2nd %s"% sc_udie_int_cfg_array[i][x+1])
                                                if sc_udie_int_cfg_array[i][x+1].isdigit() == True:
                                                    sc_udi_le_var_temp.append(int(sc_udie_int_cfg_array[i][x+1])-1)
                                                    x += 1    
                                                else:
                                                    sc_udi_le_var_temp.append(sc_udie_int_cfg_array[i][x+1])
                                                    x += 1    
                                        elif ("ree" == sc_udie_int_cfg_array[i][x]):
                                            ree = 1
                                            while((x<sc_udie_cb_cnt and x+1<sc_udie_cb_cnt) and ((sc_udie_int_cfg_array[i][x+1] != 'le') and ('_cb' not in sc_udie_int_cfg_array[i][x+1]) and ('_mp' not in sc_udie_int_cfg_array[i][x+1]))):
                                                if sc_udie_int_cfg_array[i][x+1].isdigit() == True:
                                                    sc_udi_re_var_temp.append(int(sc_udie_int_cfg_array[i][x+1])-1)
                                                    x += 1    
                                                else:    
                                                    sc_udi_re_var_temp.append(sc_udie_int_cfg_array[i][x+1])
                                                    x += 1    
                                        else:
                                            while(x<sc_udie_cb_cnt and (('_cb' not in sc_udie_int_cfg_array[i][x]) and ('_mp' not in sc_udie_int_cfg_array[i][x]) \
                                            and ('output' not in sc_udie_int_cfg_array[i][x]) and ('input' not in sc_udie_int_cfg_array[i][x]) \
                                            and ('inout' not in sc_udie_int_cfg_array[i][x]) and ('clocking' not in sc_udie_int_cfg_array[i][x]))):
                                                if ((le==1 or ree==1) and x+1<sc_udie_cb_cnt):
                                                    x+= 1
                                                else:
                                                    log.debug("Inside Loop : Value of x %d"% x)
                                                    if sc_udie_int_cfg_array[i][x].isdigit() == True:
                                                        sc_udi_nolere_var_temp.append(int(sc_udie_int_cfg_array[i][x])-1)
                                                        x += 1   
                                                        log.debug("Incremented x value %d"% x)
                                                    else:
                                                        sc_udi_nolere_var_temp.append(sc_udie_int_cfg_array[i][x])
                                                        x += 1   
                                        x += 1               
                                    
                                    log.debug("Value of sc_udi_le_var_temp %s"% sc_udi_le_var_temp)
                                    log.debug("Value of sc_udi_re_var_temp %s"% sc_udi_re_var_temp)
                                    log.debug("Value of sc_udi_nolere_var_temp %s"% sc_udi_nolere_var_temp)

                                    # if ((le == 1 and ree == 0) or (le == 0 and ree == 1)):
                                    #     sc_element_loop = 4
                                    # elif (le == 1 and ree == 1):
                                    #     sc_element_loop = 6
                                    # else: 
                                    #     sc_element_loop = 3

                                    if (le == 1 and ree == 0):
                                        le_temp = len(sc_udi_le_var_temp)
                                        le_temp_final = []
                                        le_temp_list = ['%s', '%s']
                                        le_temp_list_val = [str(sc_udie_int_cfg_array[i][1]), str(sc_udie_int_cfg_array[i][0])]
                                        for i in range (le_temp):
                                            if (str(sc_udi_le_var_temp[i]).isdigit() == True):
                                                le_temp_list.insert(1,'[%d:0]')
                                            else:
                                                le_temp_list.insert(1,'[%s-1:0]')
                                            le_temp_list_val.insert(1, sc_udi_le_var_temp[i])

                                        log.debug("value of le_temp_list %s"% le_temp_list        )
                                        log.debug("value of le_temp_list_val %s"% le_temp_list_val )
                                
                                        for x, y in zip(le_temp_list, le_temp_list_val):
                                            le_temp_final.append(x%y)
                                        # print(' '.join(le_temp_final) + ';')

                                        sc_udi_array.append(' '+' '.join(le_temp_final) + ';')
                                        sc_udi_array.append("\n")

                                        del le_temp_final[:] 
                                        del le_temp_list[:] 
                                        del le_temp_list_val[:] 
                                        del sc_udi_le_var_temp[:]

                                    elif (le == 0 and ree == 1):
                                        re_temp = len(sc_udi_re_var_temp)
                                        re_temp_final = []
                                        re_temp_list = ['%s', '%s']
                                        re_temp_list_val = [str(sc_udie_int_cfg_array[i][1]), str(sc_udie_int_cfg_array[i][0])]
                                        for i in range (re_temp):
                                            if (str(sc_udi_re_var_temp[i]).isdigit() == True):
                                                re_temp_list.insert(len(re_temp_list),'[%d:0]')
                                            else:
                                                re_temp_list.insert(len(re_temp_list),'[%s-1:0]')
                                            re_temp_list_val.insert(len(re_temp_list_val), sc_udi_re_var_temp[i])

                                        log.debug("value of re_temp_list %s"% re_temp_list        )
                                        log.debug("value of re_temp_list_val %s"% re_temp_list_val )
                                
                                        for x, y in zip(re_temp_list, re_temp_list_val):
                                            re_temp_final.append(x%y)
                                        # print(' '.join(re_temp_final) + ';')

                                        sc_udi_array.append(' '+' '.join(re_temp_final) + ';')
                                        sc_udi_array.append("\n")

                                        del re_temp_final[:] 
                                        del re_temp_list[:] 
                                        del re_temp_list_val[:] 
                                        del sc_udi_re_var_temp[:]
                                    
                                    elif (le == 1 and ree == 1): 
                                        le_temp = len(sc_udi_le_var_temp)
                                        re_temp = len(sc_udi_re_var_temp)
                                        
                                        lere_temp_final = []
                                        lere_temp_list = ['%s', '%s']
                                        lere_temp_list_val = [str(sc_udie_int_cfg_array[i][1]), str(sc_udie_int_cfg_array[i][0])]
                                        
                                        for i in range (le_temp):
                                            if (str(sc_udi_le_var_temp[i]).isdigit() == True):
                                                lere_temp_list.insert(1,'[%d:0]')
                                            else:
                                                lere_temp_list.insert(1,'[%s-1:0]')
                                            lere_temp_list_val.insert(1, sc_udi_le_var_temp[i])

                                        for i in range (re_temp):
                                            if (str(sc_udi_re_var_temp[i]).isdigit() == True):
                                                lere_temp_list.insert(len(lere_temp_list),'[%d:0]')
                                            else:
                                                lere_temp_list.insert(len(lere_temp_list),'[%s-1:0]')
                                            lere_temp_list_val.insert(len(lere_temp_list_val), sc_udi_re_var_temp[i])


                                        log.debug("value of lere_temp_list %s"% lere_temp_list)
                                        log.debug("value of lere_temp_list_val %s"% lere_temp_list_val)
                                
                                        for x, y in zip(lere_temp_list, lere_temp_list_val):
                                            lere_temp_final.append(x%y)
                                        # print(' '.join(lere_temp_final) + ';')

                                        sc_udi_array.append(' '+' '.join(lere_temp_final) + ';')
                                        sc_udi_array.append("\n")

                                        del lere_temp_final[:] 
                                        del lere_temp_list[:] 
                                        del lere_temp_list_val[:] 
                                        del sc_udi_le_var_temp[:] 
                                        del sc_udi_re_var_temp[:] 
                                    
                                    else:
                                        if "-clk" not in sc_udie_int_cfg_array[i][1]:
                                            nolere_temp = len(sc_udi_nolere_var_temp)
                                            nolere_temp_final = []
                                            nolere_temp_list = ['%s', '%s']
                                            nolere_temp_list_val = [str(sc_udie_int_cfg_array[i][1]), str(sc_udie_int_cfg_array[i][0])]
                                            for i in range (nolere_temp):
                                                if (str(sc_udi_nolere_var_temp[i]).isdigit() == True):
                                                    nolere_temp_list.insert(1,'[%d:0]')
                                                else:
                                                    nolere_temp_list.insert(1,'[%s-1:0]')
                                                nolere_temp_list_val.insert(1, sc_udi_nolere_var_temp[i])

                                            log.debug("value of nolere_temp_list %s"% nolere_temp_list)
                                            log.debug("value of nolere_temp_list_val %s"% nolere_temp_list_val)
                                
                                            for x, y in zip(nolere_temp_list, nolere_temp_list_val):
                                                nolere_temp_final.append(x%y)
                                            # print(' '.join(nolere_temp_final) + ';')

                                            sc_udi_array.append(' '+' '.join(nolere_temp_final) + ';')
                                            sc_udi_array.append("\n")

                                            del nolere_temp_final[:] 
                                            del nolere_temp_list[:] 
                                            del nolere_temp_list_val[:] 
                                            del sc_udi_nolere_var_temp[:]

                                    # if (sc_element_loop == 4 and (le == 1 and ree == 0)):
                                    #     if sc_udie_int_cfg_array[i][3].isdigit() == True:
                                    #         sc_udi_array.append(' %s [%d:0] %s;'%(str(sc_udie_int_cfg_array[i][1]), int(sc_udi_le_var_temp), str(sc_udie_int_cfg_array[i][0]), ))
                                    #         sc_udi_array.append("\n")
                                    #     else: 
                                    #         sc_udi_array.append(' %s [%s-1:0] %s;'%(str(sc_udie_int_cfg_array[i][1]), str(sc_udie_int_cfg_array[i][3]), str(sc_udie_int_cfg_array[i][0]), ))
                                    #         sc_udi_array.append("\n")
                                    # elif (sc_element_loop == 4 and (le == 0 and ree == 1)):
                                    #     if sc_udie_int_cfg_array[i][3].isdigit() == True:
                                    #         sc_udi_array.append(' %s %s [%d:0];'%(str(sc_udie_int_cfg_array[i][1]), str(sc_udie_int_cfg_array[i][0]), int(sc_udi_re_var_temp), ))
                                    #         sc_udi_array.append("\n")
                                    #     else: 
                                    #         sc_udi_array.append(' %s %s [%s-1:0];'%(str(sc_udie_int_cfg_array[i][1]), str(sc_udie_int_cfg_array[i][0]), str(sc_udie_int_cfg_array[i][3]), ))
                                    #         sc_udi_array.append("\n")
                                    # elif (sc_element_loop == 6 and (le == 1 and ree == 1)):
                                    #     if (sc_udie_int_cfg_array[i][3].isdigit() == True and sc_udie_int_cfg_array[i][5].isdigit() == True):
                                    #         sc_udi_array.append(' %s [%d:0] %s [%d:0];'%(str(sc_udie_int_cfg_array[i][1]), int(sc_udi_le_var_temp), str(sc_udie_int_cfg_array[i][0]), int(sc_udi_re_var_temp), ))
                                    #         sc_udi_array.append("\n")
                                    #     elif (sc_udie_int_cfg_array[i][3].isdigit() == True and sc_udie_int_cfg_array[i][5].isdigit() == False):
                                    #         sc_udi_array.append(' %s [%d:0] %s [%s-1:0];'%(str(sc_udie_int_cfg_array[i][1]), int(sc_udi_le_var_temp), str(sc_udie_int_cfg_array[i][0]), str(sc_udie_int_cfg_array[i][5]), ))
                                    #         sc_udi_array.append("\n")
                                    #     elif (sc_udie_int_cfg_array[i][3].isdigit() == False and sc_udie_int_cfg_array[i][5].isdigit() == True):
                                    #         sc_udi_array.append(' %s [%s-1:0] %s [%d:0];'%(str(sc_udie_int_cfg_array[i][1]), str(sc_udie_int_cfg_array[i][3]), str(sc_udie_int_cfg_array[i][0]), int(sc_udi_re_var_temp), ))
                                    #         sc_udi_array.append("\n")
                                    #     elif (sc_udie_int_cfg_array[i][3].isdigit() == False and sc_udie_int_cfg_array[i][5].isdigit() == False):
                                    #         sc_udi_array.append(' %s [%s-1:0] %s [%s-1:0];'%(str(sc_udie_int_cfg_array[i][1]), str(sc_udie_int_cfg_array[i][3]), str(sc_udie_int_cfg_array[i][0]), str(sc_udie_int_cfg_array[i][5]), ))
                                    #         sc_udi_array.append("\n")
                                    # else:
                                    #     if sc_udie_int_cfg_array[i][2].isdigit() == True:
                                    #         sc_udi_var_temp = (int(sc_udie_int_cfg_array[i][2])-1)
                                    #         sc_udi_array.append(' %s [%d:0] %s;'%(str(sc_udie_int_cfg_array[i][1]), int(sc_udi_var_temp), str(sc_udie_int_cfg_array[i][0]), ))
                                    #         sc_udi_array.append("\n")
                                    #     else: 
                                    #         sc_udi_array.append(' %s [%s-1:0] %s;'%(str(sc_udie_int_cfg_array[i][1]), str(sc_udie_int_cfg_array[i][2]), str(sc_udie_int_cfg_array[i][0]), ))
                                    #         sc_udi_array.append("\n")
            
                                    # Clearning The Global Variables
                                    le = 0
                                    ree = 0
                                    sc_element_loop = 0

                                # sc_udi_array.append("\n")
                                if sc_udie_cb_cfg_array:
                                    sc_udi_array.append("\n")
                                    sc_udi_array.append(" //------------------------------------------\n")
                                    sc_udi_array.append(" // Clocking Block Declaration\n")
                                    sc_udi_array.append(" //------------------------------------------\n")
                                    
                                    # Adding Logic For Updating Clocking Block
                                    for i in range (0,sc_udie_cb_element_loop):
                                        cb_ele_cnt = len(sc_udie_cb_cfg_array[i])
                                        cb_ele_cnt = cb_ele_cnt-1
                                        log.debug("Value of cb_ele_cnt %d"% cb_ele_cnt)
                                        log.debug("Value of sc_udie_cb_cfg_array %s"% sc_udie_cb_cfg_array[i])
                                        log.debug("Value of sc_udie_cb_cfg_array %s"% str(sc_udie_cb_cfg_array[i][0]))
                                        log.debug("Value of sc_udie_cb_cfg_array %s"% str(sc_udie_cb_cfg_array[i][0]).translate(mt_rm_sym))
                                        elem_cb_find = str(sc_udie_cb_cfg_array[i][0]).translate(mt_rm_sym)
                                        elem_cb_indx = self.find_index(elem_cb_find, sc_udie_clock_cfg_array)
                                        log.debug("Value of elem_cb_indx %s"% elem_cb_indx)
                                        if elem_cb_indx != None:
                                            sc_udi_array.append(' clocking %s@(%s %s);\n'%(str(sc_udie_cb_cfg_array[i][0]).translate(mt_rm_sym), sc_udie_clock_cfg_array[elem_cb_indx[0]][elem_cb_indx[1]+1], sc_udie_clock_cfg_array[elem_cb_indx[0]][0]))
                                        else:
                                            sc_udi_array.append(' clocking %s@();\n'%(str(sc_udie_cb_cfg_array[i][0]).translate(mt_rm_sym), ))
                                        for j in range (1, (cb_ele_cnt+1)):
                                            if (j%2):
                                                sc_udi_array.append('  %s       %s;\n'%(str(sc_udie_cb_cfg_array[i][j+1]).translate(mt_rm_sym), str(sc_udie_cb_cfg_array[i][j]).translate(mt_rm_sym), ))
                                        sc_udi_array.append(' endclocking: %s\n'%(str(sc_udie_cb_cfg_array[i][0]).translate(mt_rm_sym), ))
                                        if (i != (sc_udie_cb_element_loop-1)):
                                            sc_udi_array.append("\n")

                                # sc_udi_array.append("\n")
                                if sc_udie_mp_cfg_array:
                                    sc_udi_array.append("\n")
                                    sc_udi_array.append(" //------------------------------------------\n")
                                    sc_udi_array.append(" // Mod Port Declaration\n")
                                    sc_udi_array.append(" //------------------------------------------\n")
                                    
                                    # Adding Logic For Updating Modports        
                                    for i in range (0,sc_udie_mp_element_loop):
                                        mp_ele_cnt = len(sc_udie_mp_cfg_array[i])
                                        mp_ele_cnt = mp_ele_cnt-1
                                        sc_udi_array.append(' modport %s(\n'%(str(sc_udie_mp_cfg_array[i][0]).translate(mt_rm_sym), ))
                                        
                                        elem_mpcb_indx = self.find_index('clocking', sc_udie_mp_cfg_array[i])
                                        log.debug("Value of sc_udie_mp_cfg_array[%d] %s"%(i, sc_udie_mp_cfg_array[i]))
                                        if elem_mpcb_indx != None:
                                            log.debug("Value of sc_udie_mp_element_loop is %d"% sc_udie_mp_element_loop)
                                            log.debug("Value of mp is %s"% str(sc_udie_mp_cfg_array[i][0]).translate(mt_rm_sym))
                                            mp_ele_tmp = str(sc_udie_mp_cfg_array[i][0]).translate(mt_rm_sym)
                                            mp_ele_tmp = mp_ele_tmp.replace('mp','cb')
                                            elem_mp_indx = self.find_index(mp_ele_tmp, sc_udie_clock_cfg_array)
                                            
                                            if elem_mp_indx != None:
                                                # No Signal Type To be defined while defining the clock in modport - 081418|TUE
                                                # sc_udi_array.append('  input %s %s, clocking %s\n'%(sc_udie_clock_cfg_array[elem_mp_indx[0]][1], sc_udie_clock_cfg_array[elem_mp_indx[0]][0],  str(mp_ele_tmp), ))
                                                sc_udi_array.append('  input %s, clocking %s\n'%(sc_udie_clock_cfg_array[elem_mp_indx[0]][0],  str(mp_ele_tmp), ))
                                            else:    
                                                sc_udi_array.append('  clocking %s\n'%(str(mp_ele_tmp), ))
                                        else:
                                            for j in range (1, (mp_ele_cnt+1)):
                                                if (j%2):
                                                    # if "clocking" in sc_udie_mp_cfg_array[i][j+1]:
                                                    #     mp_ele_tmp = str(sc_udie_mp_cfg_array[i][0]).translate(mt_rm_sym)
                                                    #     mp_ele_tmp = mp_ele_tmp.replace('mp','cb')
                                                    #     sc_udi_array.append('  clocking %s\n'%(str(mp_ele_tmp), ))
                                                    # else:
                                                    
                                                    if (j == (mp_ele_cnt-1)):
                                                        # # print "hula j mp_ele_cnt", j, mp_ele_cnt
                                                        if 'clocking' not in str(sc_udie_mp_cfg_array[i][j+1]).translate(mt_rm_sym):
                                                            sc_udi_array.append('  %s       %s\n'%(str(sc_udie_mp_cfg_array[i][j+1]).translate(mt_rm_sym), str(sc_udie_mp_cfg_array[i][j]).translate(mt_rm_sym), ))
                                                    else: 
                                                        # # print "sj j mp_ele_cnt", j, mp_ele_cnt
                                                        if 'clocking' not in str(sc_udie_mp_cfg_array[i][j+1]).translate(mt_rm_sym):
                                                            sc_udi_array.append('  %s       %s,\n'%(str(sc_udie_mp_cfg_array[i][j+1]).translate(mt_rm_sym), str(sc_udie_mp_cfg_array[i][j]).translate(mt_rm_sym), ))

                                        sc_udi_array.append(' );\n')
                                        sc_udi_array.append("\n")

                        sc_udie_loop = 0;
                        sc_udie_frame_loop =0;
                        #sc_udi_input_file = open("%s_interface.sv" % (str(obj_comp_entry_name)), "w")
                        sc_udi_input_file = open("%s_interface.sv" % (str(sc_what_name)), "w")
                        
                        sc_udi_array_final = []
                        for lines in sc_udi_array:
                            if lines.startswith("interface "):
                                tmp = lines.split()
                                numelem = len(sc_udie_clock_cfg_array)
                                log.debug("Value of numelem %d"% numelem)
                                if numelem == 1:
                                    tmpstr = ('('+'input'+' '+sc_udie_clock_cfg_array[0][1]+' '+sc_udie_clock_cfg_array[0][0]+')')
                                    tmp.insert(2,tmpstr)
                                else:
                                    for i in range (numelem):
                                        if i == 0:
                                            tmpstr = ('input'+' '+sc_udie_clock_cfg_array[i][1]+' '+sc_udie_clock_cfg_array[i][0]+')')
                                        elif i == numelem-1:
                                            tmpstr = ('('+'input'+' '+sc_udie_clock_cfg_array[i][1]+' '+sc_udie_clock_cfg_array[i][0]+',')
                                        else:
                                            tmpstr = ('input'+' '+sc_udie_clock_cfg_array[i][1]+' '+sc_udie_clock_cfg_array[i][0]+',')
                                        tmp.insert(2,tmpstr)
                                sc_udi_array_final.append(' '.join(tmp)) 
                                sc_udi_array_final.append('\n') 
                            else:
                                sc_udi_array_final.append(lines)

                        for lines in sc_udi_array_final:
                            sc_udi_input_file.write(lines)

            sc_agt_selected_started = 0

            self.generate_button_cb();
            self.single_component_widget_clear();
            # self.exit_button.grid() 
            # Commenting the above exit_button state and using return_button to go to original state : vimo : 063018|SAT 
            self.return_button_code();
            
            # if not (self.exit_button): 
            #     self.exit_button = Button(root, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code)    
            #     self.exit_button.pack()
        
        
        if v.get()==2:
            # Local Variables Declaration
            scb_found_port_decl = 0
            scb_found_port_decl_nxt_line = 0
            scb_found_class_decl = 0
            scb_found_class_decl_nxt_line = 0
            env_found_class_decl = 0
            env_found_obj_decl = 0
            env_found_get_cfg_decl = 0
            env_found_class_decl_nxt_line = 0
            env_found_const_decl = 0 
            env_found_config_decl = 0;
            env_found_const_decl_nxt_line = 0 
            env_found_conn_anaport = 0 
            intf_found_in_pkg = 0
            intf_found_in_tst = 0
            cfg_found_in_tst = 0
            ccc_found_in_tst = 0
            tst_found_comp_decl = 0
            tst_found_const_decl = 0
            tst_found_get_cfg_decl = 0
            tst_found_cfg_chd = 0
            tst_found_upld_cfg = 0
            agt_found_const_decl = 0 
            agt_found_config_decl = 0 
            agt_found_data_mem_decl = 0 
            agt_found_const_decl_nxt_line = 0 
            agt_found_conn_decl = 0 
            agt_found_conn_decl_nxt_line = 0 
            cv_udi_decl = 0
            cv_udi_var_temp = 0
            env_cfg_found_1 = 0
            env_data_mem_found_1 = 0
            
            drv_found_data_mem_decl = 0 
            drv_found_config_decl = 0 
            drv_found_intf_mem_decl = 0 
            drv_found_cc_decl = 0 
            
            mon_found_data_mem_decl = 0 
            mon_found_config_decl = 0 
            mon_found_intf_mem_decl = 0 
            mon_found_cc_decl = 0 
            
            tbtop_fnd_udpkg_decl = 0
            tbtop_intf_inst_fnd = 0
            tbtop_clk_inst_fnd = 0
            tbtop_intf_vif_fnd = 0
            tbtop_def_conf_fnd = 0
            tbtop_loc_var_fnd = 0
            
            cv_udi_le_var_temp = [] 
            cv_udi_re_var_temp = []
            cv_udi_nolere_var_temp = []
            
            # N-Agt Variables : 090218|SUN
            agt_add_fld_decl = 0 
            drv_add_fld_decl = 0
            mon_add_fld_decl = 0
            env_cfg_add_fld_decl = 0
            env_get_cfg_found = 0
            env_udapi_found = 0

            
            comp_vip_entry_name = self.cve1.get()
            comp_vip_entry_name_pkg = self.cve1.get()+"_pkg"

            # Getting the Agent Configuration Values 
            cv_agent_cfg_list[cvagt_val_loop_tmp-1][0] = self.cvad_e1.get()
            cv_agent_cfg_list[cvagt_val_loop_tmp-1][1] = self.cvad_e2.get()
            cv_agent_cfg_list[cvagt_val_loop_tmp-1][2] = self.cvad_e3.get()
            
            cv_agent_cfg_array[cvagt_val_loop_tmp-1][0] = cv_agent_cfg_list[cvagt_val_loop_tmp-1][0].split(",")
            cv_agent_cfg_array[cvagt_val_loop_tmp-1][1] = cv_agent_cfg_list[cvagt_val_loop_tmp-1][1].split(",")
            cv_agent_cfg_array[cvagt_val_loop_tmp-1][2] = cv_agent_cfg_list[cvagt_val_loop_tmp-1][2].split(",")
            log.debug("Agt Instance Name : cv_agent_cfg_array %s,  cv_agent_cfg_list %s"%(cv_agent_cfg_array, cv_agent_cfg_list))
            
            # cv_agent_cfg_array[cvagt_val_loop_tmp-1][5] = self.cvad_e4.get()
            cvad_e4_temp = (self.cvad_e4.get()).split(",")
            # cvad_e4_temp = str((self.cvad_e4.get()).split(",")).strip()
            log.debug("Agt Instance Name : Value of cvad_e4 b4 split %s cvad_e4_temp %s"%(self.cvad_e4.get(), cvad_e4_temp))
            if len(cvad_e4_temp)>1:
                cv_agent_cfg_array[cvagt_val_loop_tmp-1][5] = str(cvad_e4_temp[0]).strip() 
                cv_agent_cfg_array[cvagt_val_loop_tmp-1][6] = str(cvad_e4_temp[1]).strip() 
                log.debug("Agt Instance Name : Value of cv_agent_cfg_array[%d-1] %s"%(cvagt_val_loop_tmp, cv_agent_cfg_array))
            else:
                cv_agent_cfg_array[cvagt_val_loop_tmp-1][5] = self.cvad_e4.get()
                log.debug("Agt Instance Name : Value of cv_agent_cfg_array[%d-1] %s"%(cvagt_val_loop_tmp, cv_agent_cfg_array))
            
            # # print "Value of cvo2 is ", self.cv_mon_scb_con_val.get()
            # # print "Value of cvo2 is ", self.cv_mon_scb_con_list.get(self.cv_mon_scb_con_val.get())

            #if cvs.get()==1:
            if self.cv_mon_scb_con_list.get(self.cv_mon_scb_con_val.get())==1:
                cv_agent_cfg_array[cvagt_val_loop_tmp-1][3] = 1
            elif self.cv_mon_scb_con_list.get(self.cv_mon_scb_con_val.get())==2:
                cv_agent_cfg_array[cvagt_val_loop_tmp-1][3] = 2
            
            # if cv.get()==1:
            #     cv_agent_cfg_array[cvagt_val_loop_tmp-1][4] = 1
            # else:
            #     cv_agent_cfg_array[cvagt_val_loop_tmp-1][4] = 2
            
            if self.cv_choose_int_list.get(self.cv_choose_int_val.get())==1:
                cv_agent_cfg_array[cvagt_val_loop_tmp-1][4] = 1
            elif self.cv_choose_int_list.get(self.cv_choose_int_val.get())==2:
                cv_agent_cfg_array[cvagt_val_loop_tmp-1][4] = 2
            elif self.cv_choose_int_list.get(self.cv_choose_int_val.get())==3:
                cv_agent_cfg_array[cvagt_val_loop_tmp-1][4] = 3
            
            if (self.cvad_l0):
                self.cvad_l0.grid_forget(); self.cvad_l0 = None # self.cvad_l0.destroy(); self.cvad_l0 = None
            if (self.cvad_l1):
                self.cvad_l1.grid_forget(); self.cvad_l1 = None # self.cvad_l1.destroy(); self.cvad_l1 = None
            if (self.cvad_l2):                                  
                self.cvad_l2.grid_forget(); self.cvad_l2 = None # self.cvad_l2.destroy(); self.cvad_l2 = None
            if (self.cvad_l3):                                  
                self.cvad_l3.grid_forget(); self.cvad_l3 = None # self.cvad_l3.destroy(); self.cvad_l3 = None
            if (self.cvad_l4):                                  
                self.cvad_l4.grid_forget(); self.cvad_l4 = None # self.cvad_l4.destroy(); self.cvad_l4 = None
            #if (self.cvad_l5):
            #    self.cvad_l5.grid_remove(); self.cvad_l5.destroy(); self.cvad_l5 = None
            if (self.cvad_e1):
                self.cvad_e1.grid_forget(); self.cvad_e1 = None # self.cvad_e1.destroy(); self.cvad_e1 = None
            if (self.cvad_e2):
                self.cvad_e2.grid_forget(); self.cvad_e2 = None # self.cvad_e2.destroy(); self.cvad_e2 = None
            if (self.cvad_e3):
                self.cvad_e3.grid_forget(); self.cvad_e3 = None # self.cvad_e3.destroy(); self.cvad_e3 = None
            if (self.cvad_e4):
                self.cvad_e4.grid_forget(); self.cvad_e4 = None # self.cvad_e4.destroy(); self.cvad_e4 = None
            if (self.cv_next_agt_cfg_button):
                self.cv_next_agt_cfg_button.grid_remove(); # self.cv_next_agt_cfg_button.destroy(); self.cv_next_agt_cfg_button = None
            if (self.cvl3):
                self.cvl3.grid_forget();  self.cvl3 = None
            if (self.cvl4):
                self.cvl4.grid_forget();  self.cvl4 = None
            if (self.cvr1):
                self.cvr1.grid_forget();  self.cvr1 = None
            if (self.cvr2):
                self.cvr2.grid_forget();  self.cvr2 = None
            if (self.cvr3):
                self.cvr3.grid_forget();  self.cvr3 = None
            if (self.cvr4):
                self.cvr4.grid_forget();  self.cvr4 = None

            # Creating Complete VIP Objects & Components 
            for agt_loop in range (1, int(cvagt_val_loop+1)):
                comp_vip_entry_name_agt = self.cve1.get()
                log.debug("1: generate_button_code: Value of comp_vip_entry_name_agt %s"%comp_vip_entry_name_agt)
                
                if cv_agent_cfg_array[agt_loop-1][5]:
                    comp_vip_entry_name_agt = comp_vip_entry_name_agt+"_%s"%cv_agent_cfg_array[agt_loop-1][5]    
                log.debug("2: generate_button_code: Value of comp_vip_entry_name_agt %s"%comp_vip_entry_name_agt)

                if cv_agt_selected_started:
                    cv_num_of_intf = len(cv_interface_pkg[agt_loop-1])
                    log.debug("2.a: generate_button_code: Value of cv_interface_pkg %s"%cv_interface_pkg)
                else:
                    cv_num_of_intf = 1 
                log.debug("3: generate_button_code: Value of cv_num_of_intf %d"%cv_num_of_intf)
                            
                # log.debug("b4 assigning: Value of agt_loop %d cv_num_of_intf %d"%(agt_loop, cv_num_of_intf))
                # log.debug("b4 assigning: Value of cv_udie_clock_cfg_array %s"% cv_udie_clock_cfg_array)
                # log.debug("b4 assigning: Value of cv_udie_cb_cfg_array %s"% cv_udie_cb_cfg_array)
                # log.debug("b4 assigning: Value of cv_udie_mp_cfg_array %s"% cv_udie_mp_cfg_array)
                # log.debug("b4 assigning: Value of cv_udie_cb_element_loop %s"% cv_udie_cb_element_loop)
                # log.debug("b4 assigning: Value of cv_udie_mp_element_loop %s"% cv_udie_mp_element_loop)

                for i in range (cv_num_of_intf):
                    if cv_agt_selected_started:
                        ## print "3.a: generate_button_code: Value of cv_interface_pkg[agt_loop-1][i]",cv_interface_pkg[agt_loop-1][i]
                        ## print "3.a: generate_button_code: Value of cv_interface_pkg[agt_loop-1][i][3]",cv_interface_pkg[agt_loop-1][i][3]
                        ## print "3.a: generate_button_code: Value of cv_udie_intf_cfg_array[agt_loop-1][i]",cv_udie_intf_cfg_array[agt_loop-1]

                        #if cv_interface_pkg[agt_loop-1][i][0] != str(comp_vip_entry_name_agt):
                        if cv_interface_pkg[agt_loop-1][i][0] != str(cv_agent_cfg_array[agt_loop-1][5]):
                            cv_what_name = str(comp_vip_entry_name_agt)+'_'+cv_interface_pkg[agt_loop-1][i][0]
                        else:
                            #cv_what_name = cv_interface_pkg[agt_loop-1][i][0]
                            cv_what_name = comp_vip_entry_name_agt 

                        cv_what_type = cv_interface_pkg[agt_loop-1][i][1]

                        if cv_what_type == 2 or cv_what_type == 3:
                            cv_udie_intf_cfg_array[agt_loop-1] = cv_interface_pkg[agt_loop-1][i][3]
                            cv_udie_clock_cfg_array[agt_loop-1] = cv_interface_pkg[agt_loop-1][i][4]
                            cv_udie_cb_cfg_array[agt_loop-1] = cv_interface_pkg[agt_loop-1][i][5]
                            cv_udie_mp_cfg_array[agt_loop-1] = cv_interface_pkg[agt_loop-1][i][6]
                                    
                            log.debug("assigning: Value of agt_loop %d cv_num_of_intf %d intf_num %d"%(agt_loop, cv_num_of_intf, i))
                            log.debug("assigning: Value of cv_udie_clock_cfg_array %s"% cv_udie_clock_cfg_array)
                            log.debug("assigning: Value of cv_udie_cb_cfg_array %s"% cv_udie_cb_cfg_array)
                            log.debug("assigning: Value of cv_udie_mp_cfg_array %s"% cv_udie_mp_cfg_array)
                            log.debug("assigning: Value of cv_udie_cb_element_loop %s"% cv_udie_cb_element_loop)
                            log.debug("assigning: Value of cv_udie_mp_element_loop %s"% cv_udie_mp_element_loop)
                            
                            log.debug("3: generate_button_code: cv_udie_intf_cfg_array[%d-1] %s"%(agt_loop, cv_udie_intf_cfg_array[agt_loop-1]))
                            log.debug("3: generate_button_code: cv_interface_pkg[%d-1][%d][3] %s"%(agt_loop, i, cv_interface_pkg[agt_loop-1][i][3]))
                            
                            log.debug("3: generate_button_code: cv_udie_clock_cfg_array[%d-1] %s"%(agt_loop, cv_udie_clock_cfg_array[agt_loop-1]))
                            log.debug("3: generate_button_code: cv_interface_pkg[%d-1][%d][4] %s"%(agt_loop, i, cv_interface_pkg[agt_loop-1][i][4]))
                            
                            log.debug("3: generate_button_code: cv_udie_cb_cfg_array[%d-1] %s"%(agt_loop, cv_udie_cb_cfg_array[agt_loop-1]))
                            log.debug("3: generate_button_code: cv_interface_pkg[%d-1][%d][5] %s"%(agt_loop, i, cv_interface_pkg[agt_loop-1][i][5]))
                            
                            log.debug("3: generate_button_code: cv_udie_mp_cfg_array[%d-1] %s"%(agt_loop, cv_udie_mp_cfg_array[agt_loop-1]))
                            log.debug("3: generate_button_code: cv_interface_pkg[%d-1][%d][6] %s"%(agt_loop, i, cv_interface_pkg[agt_loop-1][i][6]))
                    else:
                        cv_what_name = str(comp_vip_entry_name_agt)
                        cv_what_type = cv_agent_cfg_array[agt_loop-1][4].get()
                    
                    log.debug("4: generate_button_code: cv_what_name %s cv_what_type %s"%(str(cv_what_name), str(cv_what_type)))

                    # if cv_agent_cfg_array[agt_loop-1][4] == 1:
                    #     os.system('$PROJ_ROOT/.bin/generate_interface.csh  %s %s' % (str(comp_vip_entry_name_agt), str(comp_vip_entry_name_pkg),))
                    # elif cv_agent_cfg_array[agt_loop-1][4] == 2 or cv_agent_cfg_array[agt_loop-1][4] == 3:
                    #     os.system('$PROJ_ROOT/.bin/generate_interface.csh  %s %s' % (str(comp_vip_entry_name_agt), str(comp_vip_entry_name_pkg),))
                
                    
                    #------------------------------------------------------------------------------------------- 
                    # Code For Updating The Interface Files 
                    #------------------------------------------------------------------------------------------- 
                    log.debug("assigning: Value of agt_loop %d cv_num_of_intf %d intf_num %d"%(agt_loop, cv_num_of_intf, i))
                    
                    if cv_what_type == 1:
                        os.system('$PROJ_ROOT/.bin/generate_interface.csh  %s %s' % (str(cv_what_name), str(comp_vip_entry_name_pkg)))
                    elif cv_what_type == 2 or cv_what_type == 3: 
                        os.system('$PROJ_ROOT/.bin/generate_interface.csh  %s %s' % (str(cv_what_name), str(comp_vip_entry_name_pkg)))
                    
                        cv_udi_array = []
                        #cv_udi_input_file = open("%s_interface.sv" % (str(comp_vip_entry_name_agt)), "r+")
                        cv_udi_input_file = open("%s_interface.sv" % (str(cv_what_name)), "r+")
                                    
                        log.debug("4: generate_button_code : cv_udie_intf_cfg_array %s"% cv_udie_intf_cfg_array[agt_loop-1])
                        log.debug("5: generate_button_code : cv_udie_clock_cfg_array %s"% cv_udie_clock_cfg_array[agt_loop-1])
                        log.debug("6: generate_button_code : cv_udie_cb_cfg_array %s"% cv_udie_cb_cfg_array[agt_loop-1])
                        log.debug("7: generate_button_code : cv_udie_mp_cfg_array %s"% cv_udie_mp_cfg_array[agt_loop-1])
                        
                        for lines in cv_udi_input_file:
                            cv_udi_array.append(lines)
                            if (cv_udi_decl == 0) and lines.startswith(" // Signal Instantiation"):
                                cv_udi_decl = 1
                            if (cv_udi_decl == 1) and lines.startswith(" //-"):
                                cv_udi_decl = 0
                                
                                for i in range (1,(cv_udie_intf_cfg_array[agt_loop-1][0]+1)):
                                    cv_udie_cb_cnt =  len(cv_udie_intf_cfg_array[agt_loop-1][i])    
                                   
                                    log.debug("Value of cv_udie_cb_cnt is %d"% cv_udie_cb_cnt)
                                    log.debug("Value of cv_udie_int_cfg_array is %s"% cv_udie_intf_cfg_array[agt_loop-1])
                                    
                                    #for x in range(2, cv_udie_cb_cnt):
                                    x=2
                                    while x<cv_udie_cb_cnt:
                                        log.debug("Inside Loop x %d"% x)
                                        if ("le" == cv_udie_intf_cfg_array[agt_loop-1][i][x]):
                                            le = 1
                                            log.debug("loop value is %s"% cv_udie_intf_cfg_array[agt_loop-1][i][x+1])
                                            while((x<cv_udie_cb_cnt and x+1<cv_udie_cb_cnt) and ((cv_udie_intf_cfg_array[agt_loop-1][i][x+1] != 'ree') and ("_cb" not in cv_udie_intf_cfg_array[agt_loop-1][i][x+1]) and ("_mp" not in cv_udie_intf_cfg_array[agt_loop-1][i][x+1]))):
                                                log.debug("loop value is 2nd %s"% cv_udie_intf_cfg_array[agt_loop-1][i][x+1])
                                                if cv_udie_intf_cfg_array[agt_loop-1][i][x+1].isdigit() == True:
                                                    cv_udi_le_var_temp.append(int(cv_udie_intf_cfg_array[agt_loop-1][i][x+1])-1)
                                                    x += 1    
                                                else:
                                                    cv_udi_le_var_temp.append(cv_udie_intf_cfg_array[agt_loop-1][i][x+1])
                                                    x += 1    
                                        elif ("ree" == cv_udie_intf_cfg_array[agt_loop-1][i][x]):
                                            ree = 1
                                            while((x<cv_udie_cb_cnt and x+1<cv_udie_cb_cnt) and ((cv_udie_intf_cfg_array[agt_loop-1][i][x+1] != 'le') and ('_cb' not in cv_udie_intf_cfg_array[agt_loop-1][i][x+1]) and ('_mp' not in cv_udie_intf_cfg_array[agt_loop-1][i][x+1]))):
                                                if cv_udie_intf_cfg_array[agt_loop-1][i][x+1].isdigit() == True:
                                                    cv_udi_re_var_temp.append(int(cv_udie_intf_cfg_array[agt_loop-1][i][x+1])-1)
                                                    x += 1    
                                                else:    
                                                    cv_udi_re_var_temp.append(cv_udie_intf_cfg_array[agt_loop-1][i][x+1])
                                                    x += 1    
                                        else:
                                            while(x<cv_udie_cb_cnt and (('_cb' not in cv_udie_intf_cfg_array[agt_loop-1][i][x]) and ('_mp' not in cv_udie_intf_cfg_array[agt_loop-1][i][x]) \
                                            and ('output' not in cv_udie_intf_cfg_array[agt_loop-1][i][x]) and ('input' not in cv_udie_intf_cfg_array[agt_loop-1][i][x]) \
                                            and ('inout' not in cv_udie_intf_cfg_array[agt_loop-1][i][x]) and ('clocking' not in cv_udie_intf_cfg_array[agt_loop-1][i][x]))):
                                                if ((le==1 or ree==1) and x+1<cv_udie_cb_cnt):
                                                    x+= 1
                                                else:
                                                    log.debug("Inside Loop : Value of x %d"% x)
                                                    if cv_udie_intf_cfg_array[agt_loop-1][i][x].isdigit() == True:
                                                        cv_udi_nolere_var_temp.append(int(cv_udie_intf_cfg_array[agt_loop-1][i][x])-1)
                                                        x += 1   
                                                        log.debug("Incremented x value %d"% x)
                                                    else:
                                                        cv_udi_nolere_var_temp.append(cv_udie_intf_cfg_array[agt_loop-1][i][x])
                                                        x += 1   
                                        x += 1               
                                    
                                    log.debug("Value of cv_udi_le_var_temp %s"% cv_udi_le_var_temp)
                                    log.debug("Value of cv_udi_re_var_temp %s"% cv_udi_re_var_temp)
                                    log.debug("Value of cv_udi_nolere_var_temp %s"% cv_udi_nolere_var_temp)

                                    # for x in range(cv_udie_cb_cnt):
                                    #     if ("le" == cv_udie_intf_cfg_array[agt_loop-1][i][x]):
                                    #         le = 1
                                    #         if cv_udie_intf_cfg_array[agt_loop-1][i][x+1].isdigit() == True:
                                    #             cv_udi_le_var_temp = (int(cv_udie_intf_cfg_array[agt_loop-1][i][x+1])-1)
                                    #         else:
                                    #             cv_udi_le_var_temp = (cv_udie_intf_cfg_array[agt_loop-1][i][x+1])
                                    #     if ("ree" == cv_udie_intf_cfg_array[agt_loop-1][i][x]):
                                    #         ree = 1
                                    #         if cv_udie_intf_cfg_array[agt_loop-1][i][x+1].isdigit() == True:
                                    #             cv_udi_re_var_temp = (int(cv_udie_intf_cfg_array[agt_loop-1][i][x+1])-1)
                                    #         else:    
                                    #             cv_udi_re_var_temp = (cv_udie_intf_cfg_array[agt_loop-1][i][x+1])
                                    
                                    # if ((le == 1 and ree == 0) or (le == 0 and ree == 1)):
                                    #     cv_element_loop = 4
                                    # elif (le == 1 and ree == 1):
                                    #     cv_element_loop = 6
                                    # else: 
                                    #     cv_element_loop = 3

                                    if (le == 1 and ree == 0):
                                        le_temp = len(cv_udi_le_var_temp)
                                        le_temp_final = []
                                        le_temp_list = ['%s', '%s']
                                        le_temp_list_val = [str(cv_udie_intf_cfg_array[agt_loop-1][i][1]), str(cv_udie_intf_cfg_array[agt_loop-1][i][0])]
                                        for i in range (le_temp):
                                            if (str(cv_udi_le_var_temp[i]).isdigit() == True):
                                                le_temp_list.insert(1,'[%d:0]')
                                            else:
                                                le_temp_list.insert(1,'[%s-1:0]')
                                            le_temp_list_val.insert(1, cv_udi_le_var_temp[i])

                                        log.debug("value of le_temp_list %s"% le_temp_list)
                                        log.debug("value of le_temp_list_val %s"% le_temp_list_val )
                                
                                        for x, y in zip(le_temp_list, le_temp_list_val):
                                            le_temp_final.append(x%y)
                                        # print(' '.join(le_temp_final) + ';')

                                        cv_udi_array.append(' '+' '.join(le_temp_final) + ';')
                                        cv_udi_array.append("\n")

                                        del le_temp_final[:] 
                                        del le_temp_list[:] 
                                        del le_temp_list_val[:] 
                                        del cv_udi_le_var_temp[:]
                                        del cv_udi_re_var_temp[:]
                                        del cv_udi_nolere_var_temp[:]

                                    elif (le == 0 and ree == 1):
                                        re_temp = len(cv_udi_re_var_temp)
                                        re_temp_final = []
                                        re_temp_list = ['%s', '%s']
                                        re_temp_list_val = [str(cv_udie_intf_cfg_array[agt_loop-1][i][1]), str(cv_udie_intf_cfg_array[agt_loop-1][i][0])]
                                        for i in range (re_temp):
                                            if (str(cv_udi_re_var_temp[i]).isdigit() == True):
                                                re_temp_list.insert(len(re_temp_list),'[%d:0]')
                                            else:
                                                re_temp_list.insert(len(re_temp_list),'[%s-1:0]')
                                            re_temp_list_val.insert(len(re_temp_list_val), cv_udi_re_var_temp[i])

                                        log.debug("value of re_temp_list %s"% re_temp_list)
                                        log.debug("value of re_temp_list_val %s"% re_temp_list_val)
                                
                                        for x, y in zip(re_temp_list, re_temp_list_val):
                                            re_temp_final.append(x%y)
                                        # print(' '.join(re_temp_final) + ';')

                                        cv_udi_array.append(' '+' '.join(re_temp_final) + ';')
                                        cv_udi_array.append("\n")

                                        del re_temp_final[:] 
                                        del re_temp_list[:] 
                                        del re_temp_list_val[:] 
                                        del cv_udi_le_var_temp[:]
                                        del cv_udi_re_var_temp[:]
                                        del cv_udi_nolere_var_temp[:]
                                    
                                    elif (le == 1 and ree == 1): 
                                        le_temp = len(cv_udi_le_var_temp)
                                        re_temp = len(cv_udi_re_var_temp)
                                        
                                        lere_temp_final = []
                                        lere_temp_list = ['%s', '%s']
                                        lere_temp_list_val = [str(cv_udie_intf_cfg_array[agt_loop-1][i][1]), str(cv_udie_intf_cfg_array[agt_loop-1][i][0])]
                                        
                                        for i in range (le_temp):
                                            if (str(cv_udi_le_var_temp[i]).isdigit() == True):
                                                lere_temp_list.insert(1,'[%d:0]')
                                            else:
                                                lere_temp_list.insert(1,'[%s-1:0]')
                                            lere_temp_list_val.insert(1, cv_udi_le_var_temp[i])

                                        for i in range (re_temp):
                                            if (str(cv_udi_re_var_temp[i]).isdigit() == True):
                                                lere_temp_list.insert(len(lere_temp_list),'[%d:0]')
                                            else:
                                                lere_temp_list.insert(len(lere_temp_list),'[%s-1:0]')
                                            lere_temp_list_val.insert(len(lere_temp_list_val), cv_udi_re_var_temp[i])


                                        log.debug("value of lere_temp_list %s"% lere_temp_list)
                                        log.debug("value of lere_temp_list_val %s"% lere_temp_list_val)
                                
                                        for x, y in zip(lere_temp_list, lere_temp_list_val):
                                            lere_temp_final.append(x%y)
                                        # print(' '.join(lere_temp_final) + ';')

                                        cv_udi_array.append(' '+' '.join(lere_temp_final) + ';')
                                        cv_udi_array.append("\n")

                                        del lere_temp_final[:] 
                                        del lere_temp_list[:] 
                                        del lere_temp_list_val[:] 
                                        del cv_udi_le_var_temp[:] 
                                        del cv_udi_re_var_temp[:] 
                                        del cv_udi_nolere_var_temp[:] 
                                    
                                    else:
                                        if "-clk" not in cv_udie_intf_cfg_array[agt_loop-1][i][1]:
                                            nolere_temp = len(cv_udi_nolere_var_temp)
                                            nolere_temp_final = []
                                            nolere_temp_list = ['%s', '%s']
                                            nolere_temp_list_val = [str(cv_udie_intf_cfg_array[agt_loop-1][i][1]), str(cv_udie_intf_cfg_array[agt_loop-1][i][0])]
                                            for i in range (nolere_temp):
                                                if (str(cv_udi_nolere_var_temp[i]).isdigit() == True):
                                                    nolere_temp_list.insert(1,'[%d:0]')
                                                else:
                                                    nolere_temp_list.insert(1,'[%s-1:0]')
                                                nolere_temp_list_val.insert(1, cv_udi_nolere_var_temp[i])

                                            log.debug("value of nolere_temp_list %s"% nolere_temp_list)
                                            log.debug("value of nolere_temp_list_val %s"% nolere_temp_list_val)
                                
                                            for x, y in zip(nolere_temp_list, nolere_temp_list_val):
                                                nolere_temp_final.append(x%y)
                                            # print(' '.join(nolere_temp_final) + ';')

                                            cv_udi_array.append(' '+' '.join(nolere_temp_final) + ';')
                                            cv_udi_array.append("\n")

                                            del nolere_temp_final[:] 
                                            del nolere_temp_list[:] 
                                            del nolere_temp_list_val[:] 
                                            del cv_udi_le_var_temp[:]
                                            del cv_udi_re_var_temp[:]
                                            del cv_udi_nolere_var_temp[:]

                                    # if (cv_element_loop == 4 and (le == 1 and ree == 0)):
                                    #     if cv_udie_intf_cfg_array[agt_loop-1][i][3].isdigit() == True:
                                    #         cv_udi_array.append(' %s [%d:0] %s;'%(str(cv_udie_intf_cfg_array[agt_loop-1][i][1]), int(cv_udi_le_var_temp), str(cv_udie_intf_cfg_array[agt_loop-1][i][0]), ))
                                    #         cv_udi_array.append("\n")
                                    #     else: 
                                    #         cv_udi_array.append(' %s [%s-1:0] %s;'%(str(cv_udie_intf_cfg_array[agt_loop-1][i][1]), str(cv_udie_intf_cfg_array[agt_loop-1][i][3]), str(cv_udie_intf_cfg_array[agt_loop-1][i][0]), ))
                                    #         cv_udi_array.append("\n")
                                    # elif (cv_element_loop == 4 and (le == 0 and ree == 1)):
                                    #     if cv_udie_intf_cfg_array[agt_loop-1][i][3].isdigit() == True:
                                    #         cv_udi_array.append(' %s %s [%d:0];'%(str(cv_udie_intf_cfg_array[agt_loop-1][i][1]), str(cv_udie_intf_cfg_array[agt_loop-1][i][0]), int(cv_udi_re_var_temp), ))
                                    #         cv_udi_array.append("\n")
                                    #     else: 
                                    #         cv_udi_array.append(' %s %s [%s-1:0];'%(str(cv_udie_intf_cfg_array[agt_loop-1][i][1]), str(cv_udie_intf_cfg_array[agt_loop-1][i][0]), str(cv_udie_intf_cfg_array[agt_loop-1][i][3]), ))
                                    #         cv_udi_array.append("\n")
                                    # elif (cv_element_loop == 6 and (le == 1 and ree == 1)):
                                    #     if (cv_udie_intf_cfg_array[agt_loop-1][i][3].isdigit() == True and cv_udie_intf_cfg_array[agt_loop-1][i][5].isdigit() == True):
                                    #         cv_udi_array.append(' %s [%d:0] %s [%d:0];'%(str(cv_udie_intf_cfg_array[agt_loop-1][i][1]), int(cv_udi_le_var_temp), str(cv_udie_intf_cfg_array[agt_loop-1][i][0]), int(cv_udi_re_var_temp), ))
                                    #         cv_udi_array.append("\n")
                                    #     elif (cv_udie_intf_cfg_array[agt_loop-1][i][3].isdigit() == True and cv_udie_intf_cfg_array[agt_loop-1][i][5].isdigit() == False):
                                    #         cv_udi_array.append(' %s [%d:0] %s [%s-1:0];'%(str(cv_udie_intf_cfg_array[agt_loop-1][i][1]), int(cv_udi_le_var_temp), str(cv_udie_intf_cfg_array[agt_loop-1][i][0]), str(cv_udie_intf_cfg_array[agt_loop-1][i][5]), ))
                                    #         cv_udi_array.append("\n")
                                    #     elif (cv_udie_intf_cfg_array[agt_loop-1][i][3].isdigit() == False and cv_udie_intf_cfg_array[agt_loop-1][i][5].isdigit() == True):
                                    #         cv_udi_array.append(' %s [%s-1:0] %s [%d:0];'%(str(cv_udie_intf_cfg_array[agt_loop-1][i][1]), str(cv_udie_intf_cfg_array[agt_loop-1][i][3]), str(cv_udie_intf_cfg_array[agt_loop-1][i][0]), int(cv_udi_re_var_temp), ))
                                    #         cv_udi_array.append("\n")
                                    #     elif (cv_udie_intf_cfg_array[agt_loop-1][i][3].isdigit() == False and cv_udie_intf_cfg_array[agt_loop-1][i][5].isdigit() == False):
                                    #         cv_udi_array.append(' %s [%s-1:0] %s [%s-1:0];'%(str(cv_udie_intf_cfg_array[agt_loop-1][i][1]), str(cv_udie_intf_cfg_array[agt_loop-1][i][3]), str(cv_udie_intf_cfg_array[agt_loop-1][i][0]), str(cv_udie_intf_cfg_array[agt_loop-1][i][5]), ))
                                    #         cv_udi_array.append("\n")
                                    # else:
                                    #     if cv_udie_intf_cfg_array[agt_loop-1][i][2].isdigit() == True:
                                    #         cv_udi_var_temp = (int(cv_udie_intf_cfg_array[agt_loop-1][i][2])-1)
                                    #         cv_udi_array.append(' %s [%d:0] %s;'%(str(cv_udie_intf_cfg_array[agt_loop-1][i][1]), int(cv_udi_var_temp), str(cv_udie_intf_cfg_array[agt_loop-1][i][0]), ))
                                    #         cv_udi_array.append("\n")
                                    #     else: 
                                    #         cv_udi_array.append(' %s [%s-1:0] %s;'%(str(cv_udie_intf_cfg_array[agt_loop-1][i][1]), str(cv_udie_intf_cfg_array[agt_loop-1][i][2]), str(cv_udie_intf_cfg_array[agt_loop-1][i][0]), ))
                                    #         cv_udi_array.append("\n")
            
                                    # Clearning The Global Variables
                                    le = 0
                                    ree = 0
                                    cv_element_loop = 0

                                if cv_udie_cb_cfg_array[agt_loop-1]:
                                    cv_udi_array.append("\n")
                                    cv_udi_array.append(" //------------------------------------------\n")
                                    cv_udi_array.append(" // Clocking Block Declaration\n")
                                    cv_udi_array.append(" //------------------------------------------\n")
                        
                                    log.debug("Value of cv_udie_clock_cfg_array %s"% cv_udie_clock_cfg_array)
                                    log.debug("Value of cv_udie_cb_cfg_array %s"% cv_udie_cb_cfg_array)
                                    log.debug("Value of cv_udie_mp_cfg_array %s"% cv_udie_mp_cfg_array)
                                    log.debug("Value of cv_udie_cb_element_loop %s"% cv_udie_cb_element_loop)
                                    log.debug("Value of cv_udie_mp_element_loop %s"% cv_udie_mp_element_loop)
                                    
                                    # # Adding Logic For Updating Clocking Block
                                    # for i in range (0,cv_udie_cb_element_loop[agt_loop-1]):
                                    #     cb_ele_cnt = len(cv_udie_cb_cfg_array[agt_loop-1][i])
                                    #     cb_ele_cnt = cb_ele_cnt-1
                                    #     cv_udi_array.append(' clocking %s@();\n'%(str(cv_udie_cb_cfg_array[agt_loop-1][i][0]).translate(mt_rm_sym), ))
                                    #     for j in range (1, (cb_ele_cnt+1)):
                                    #         if (j%2):
                                    #             cv_udi_array.append('  %s       %s;\n'%(str(cv_udie_cb_cfg_array[agt_loop-1][i][j+1]).translate(mt_rm_sym), str(cv_udie_cb_cfg_array[agt_loop-1][i][j]).translate(mt_rm_sym), ))
                                    #     cv_udi_array.append(' endclocking: %s\n'%(str(cv_udie_cb_cfg_array[agt_loop-1][i][0]).translate(mt_rm_sym), ))
                                    #     if (i != (cv_udie_cb_element_loop[agt_loop-1])):
                                    #         cv_udi_array.append("\n")

                                    # Adding Logic For Updating Clocking Block
                                    # for i in range (0,cv_udie_cb_element_loop[agt_loop-1]):
                                    for i in range (0, len(cv_udie_cb_cfg_array[agt_loop-1])):
                                        cb_ele_cnt = len(cv_udie_cb_cfg_array[agt_loop-1][i])
                                        cb_ele_cnt = cb_ele_cnt-1
                                        log.debug("Value of cb_ele_cnt %d"% cb_ele_cnt)
                                        log.debug("Value of cv_udie_cb_cfg_array %s"% cv_udie_cb_cfg_array[agt_loop-1][i])
                                        log.debug("Value of cv_udie_cb_cfg_array %s"% str(cv_udie_cb_cfg_array[agt_loop-1][i][0]).translate(mt_rm_sym))
                                        elem_cb_find = str(cv_udie_cb_cfg_array[agt_loop-1][i][0]).translate(mt_rm_sym)
                                        elem_cb_indx = self.find_index(elem_cb_find, cv_udie_clock_cfg_array[agt_loop-1])
                                        log.debug("Value of elem_cb_indx %s"% elem_cb_indx)
                                        if elem_cb_indx != None:
                                            cv_udi_array.append(' clocking %s@(%s %s);\n'%(str(cv_udie_cb_cfg_array[agt_loop-1][i][0]).translate(mt_rm_sym), cv_udie_clock_cfg_array[agt_loop-1][elem_cb_indx[0]][elem_cb_indx[1]+1], cv_udie_clock_cfg_array[agt_loop-1][elem_cb_indx[0]][0]))
                                        else:
                                            cv_udi_array.append(' clocking %s@();\n'%(str(cv_udie_cb_cfg_array[agt_loop-1][i][0]).translate(mt_rm_sym), ))
                                        for j in range (1, (cb_ele_cnt+1)):
                                            if (j%2):
                                                cv_udi_array.append('  %s       %s;\n'%(str(cv_udie_cb_cfg_array[agt_loop-1][i][j+1]).translate(mt_rm_sym), str(cv_udie_cb_cfg_array[agt_loop-1][i][j]).translate(mt_rm_sym), ))
                                        cv_udi_array.append(' endclocking: %s\n'%(str(cv_udie_cb_cfg_array[agt_loop-1][i][0]).translate(mt_rm_sym), ))
                                        if (i != (cv_udie_cb_element_loop[agt_loop-1])):
                                            cv_udi_array.append("\n")
                                    

                                if cv_udie_mp_cfg_array[agt_loop-1]:
                                    cv_udi_array.append("\n")
                                    cv_udi_array.append(" //------------------------------------------\n")
                                    cv_udi_array.append(" // Mod Port Declaration\n")
                                    cv_udi_array.append(" //------------------------------------------\n")
                                    
                                    log.debug("Value of cv_udie_clock_cfg_array %s"% cv_udie_clock_cfg_array)
                                    log.debug("Value of cv_udie_cb_cfg_array %s"% cv_udie_cb_cfg_array)
                                    log.debug("Value of cv_udie_mp_cfg_array %s"% cv_udie_mp_cfg_array)
                                    log.debug("Value of cv_udie_cb_element_loop %s"% cv_udie_cb_element_loop)
                                    log.debug("Value of cv_udie_mp_element_loop %s"% cv_udie_mp_element_loop)
                                    
                                    #   # Adding Logic For Updating Modports        
                                    #   for i in range (0,cv_udie_mp_element_loop[agt_loop-1]):
                                    #       mp_ele_cnt = len(cv_udie_mp_cfg_array[agt_loop-1][i])
                                    #       mp_ele_cnt = mp_ele_cnt-1
                                    #       cv_udi_array.append(' modport %s(\n'%(str(cv_udie_mp_cfg_array[agt_loop-1][i][0]).translate(mt_rm_sym), ))
                                    #       for j in range (1, (mp_ele_cnt+1)):
                                    #           if (j%2):
                                    #               if "clocking" in cv_udie_mp_cfg_array[agt_loop-1][i][j+1]:
                                    #                   mp_ele_tmp = str(cv_udie_mp_cfg_array[agt_loop-1][i][0]).translate(mt_rm_sym)
                                    #                   mp_ele_tmp = mp_ele_tmp.replace('mp','cb')
                                    #                   cv_udi_array.append('  clocking %s\n'%(str(mp_ele_tmp), ))
                                    #               else:
                                    #                   if (j == (mp_ele_cnt-1)):
                                    #                       # # print "hula j mp_ele_cnt", j, mp_ele_cnt
                                    #                       cv_udi_array.append('  %s       %s\n'%(str(cv_udie_mp_cfg_array[agt_loop-1][i][j+1]).translate(mt_rm_sym), str(cv_udie_mp_cfg_array[agt_loop-1][i][j]).translate(mt_rm_sym), ))
                                    #                   else: 
                                    #                       # # print "sj j mp_ele_cnt", j, mp_ele_cnt
                                    #                       cv_udi_array.append('  %s       %s,\n'%(str(cv_udie_mp_cfg_array[agt_loop-1][i][j+1]).translate(mt_rm_sym), str(cv_udie_mp_cfg_array[agt_loop-1][i][j]).translate(mt_rm_sym), ))

                                    #       cv_udi_array.append(' );\n')
                                    #       cv_udi_array.append("\n")

                                    # Adding Logic For Updating Modports        
                                    # for i in range (0,cv_udie_mp_element_loop[agt_loop-1]):
                                    for i in range (0, len(cv_udie_mp_cfg_array[agt_loop-1])):
                                        mp_ele_cnt = len(cv_udie_mp_cfg_array[agt_loop-1][i])
                                        mp_ele_cnt = mp_ele_cnt-1
                                        cv_udi_array.append(' modport %s(\n'%(str(cv_udie_mp_cfg_array[agt_loop-1][i][0]).translate(mt_rm_sym), ))
                                        
                                        elem_mpcb_indx = self.find_index('clocking', cv_udie_mp_cfg_array[agt_loop-1][i])
                                        log.debug("Value of cv_udie_mp_cfg_array[%d] %s"%(i, cv_udie_mp_cfg_array[agt_loop-1][i]))
                                        if elem_mpcb_indx != None:
                                            log.debug("Value of cv_udie_mp_element_loop is %s"% cv_udie_mp_element_loop[agt_loop-1])
                                            log.debug("Value of mp is %s"% str(cv_udie_mp_cfg_array[agt_loop-1][i][0]).translate(mt_rm_sym))
                                            mp_ele_tmp = str(cv_udie_mp_cfg_array[agt_loop-1][i][0]).translate(mt_rm_sym)
                                            mp_ele_tmp = mp_ele_tmp.replace('mp','cb')
                                            elem_mp_indx = self.find_index(mp_ele_tmp, cv_udie_clock_cfg_array[agt_loop-1])
                                            
                                            if elem_mp_indx != None:
                                                # No Signal Type To be defined while defining the clock in modport - 081418|TUE
                                                # cv_udi_array.append('  input %s %s, clocking %s\n'%(cv_udie_clock_cfg_array[agt_loop-1][elem_mp_indx[0]][1], cv_udie_clock_cfg_array[agt_loop-1][elem_mp_indx[0]][0],  str(mp_ele_tmp), ))
                                                cv_udi_array.append('  input %s, clocking %s\n'%(cv_udie_clock_cfg_array[agt_loop-1][elem_mp_indx[0]][0],  str(mp_ele_tmp), ))
                                            else:    
                                                cv_udi_array.append('  clocking %s\n'%(str(mp_ele_tmp), ))
                                        else:
                                            for j in range (1, (mp_ele_cnt+1)):
                                                if (j%2):
                                                    # if "clocking" in cv_udie_mp_cfg_array[agt_loop-1][i][j+1]:
                                                    #     mp_ele_tmp = str(cv_udie_mp_cfg_array[agt_loop-1][i][0]).translate(mt_rm_sym)
                                                    #     mp_ele_tmp = mp_ele_tmp.replace('mp','cb')
                                                    #     cv_udi_array.append('  clocking %s\n'%(str(mp_ele_tmp), ))
                                                    # else:
                                                    
                                                    if (j == (mp_ele_cnt-1)):
                                                        # # print "hula j mp_ele_cnt", j, mp_ele_cnt
                                                        if 'clocking' not in str(cv_udie_mp_cfg_array[agt_loop-1][i][j+1]).translate(mt_rm_sym):
                                                            cv_udi_array.append('  %s       %s\n'%(str(cv_udie_mp_cfg_array[agt_loop-1][i][j+1]).translate(mt_rm_sym), str(cv_udie_mp_cfg_array[agt_loop-1][i][j]).translate(mt_rm_sym), ))
                                                    else: 
                                                        # # print "sj j mp_ele_cnt", j, mp_ele_cnt
                                                        if 'clocking' not in str(cv_udie_mp_cfg_array[agt_loop-1][i][j+1]).translate(mt_rm_sym):
                                                            cv_udi_array.append('  %s       %s,\n'%(str(cv_udie_mp_cfg_array[agt_loop-1][i][j+1]).translate(mt_rm_sym), str(cv_udie_mp_cfg_array[agt_loop-1][i][j]).translate(mt_rm_sym), ))

                                        cv_udi_array.append(' );\n')
                                        cv_udi_array.append("\n")
                    
                        # cv_udie_loop = 0;
                        #cv_udi_input_file = open("%s_interface.sv" % (str(comp_vip_entry_name_agt)), "w")
                        cv_udi_input_file = open("%s_interface.sv" % (str(cv_what_name)), "w")
                        
                        cv_udi_array_final = []
                        for lines in cv_udi_array:
                            if lines.startswith("interface "):
                                tmp = lines.split()
                                numelem = len(cv_udie_clock_cfg_array[agt_loop-1])
                                log.debug("Value of numelem %d"% numelem)
                                if numelem == 1:
                                    tmpstr = ('('+'input'+' '+cv_udie_clock_cfg_array[agt_loop-1][0][1]+' '+cv_udie_clock_cfg_array[agt_loop-1][0][0]+')')
                                    tmp.insert(2,tmpstr)
                                else:
                                    for i in range (numelem):
                                        if i == 0:
                                            tmpstr = ('input'+' '+cv_udie_clock_cfg_array[agt_loop-1][i][1]+' '+cv_udie_clock_cfg_array[agt_loop-1][i][0]+')')
                                        elif i == numelem-1:
                                            tmpstr = ('('+'input'+' '+cv_udie_clock_cfg_array[agt_loop-1][i][1]+' '+cv_udie_clock_cfg_array[agt_loop-1][i][0]+',')
                                        else:
                                            tmpstr = ('input'+' '+cv_udie_clock_cfg_array[agt_loop-1][i][1]+' '+cv_udie_clock_cfg_array[agt_loop-1][i][0]+',')
                                        tmp.insert(2,tmpstr)
                                cv_udi_array_final.append(' '.join(tmp)) 
                                cv_udi_array_final.append('\n') 
                            else:
                                cv_udi_array_final.append(lines)
                        
                        for lines in cv_udi_array_final:
                            cv_udi_input_file.write(lines)
                        cv_udi_input_file.close()
                    
                    
                #------------------------------------------------------------------------------------------- 
                # Code For Updating The Agent Files 
                #------------------------------------------------------------------------------------------- 

                os.system('$PROJ_ROOT/.bin/generate_agent.csh  %s %s %s %s' % (str(comp_vip_entry_name_agt), str(comp_vip_entry_name_pkg), str(cv_agent_cfg_list[agt_loop-1][0]), str(cv_agent_cfg_list[agt_loop-1][1]),))
           
                cv_agt_array = []
                cv_agt_input_file = open("%s_agent.sv" % (str(comp_vip_entry_name_agt)), "r+")
                
                for lines in cv_agt_input_file:
                    cv_agt_array.append(lines)
                    # if lines.startswith(" uvm_active_passive_enum"):
                    if (agt_found_data_mem_decl == 0) and lines.startswith(" // Data Members"):
                        agt_found_data_mem_decl = 1
                    if (agt_found_data_mem_decl == 1) and lines.startswith(" //--"):
                        agt_found_data_mem_decl = 0
                        #cv_agt_array.append("\n")
                       
                        # For N-Agt : Adding ID : 090218|SUN
                        if cv_agent_cfg_array[agt_loop-1][6]:
                                cv_agt_array.append(" int unsigned  %s_agent_id;\n"%(comp_vip_entry_name_agt))
                        
                        cv_agt_array.append(" %s_config     %s_acfg;\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt),))
                                                    
                        if (len(cv_agent_cfg_array[agt_loop-1][1]) == 1 and int(cv_agent_cfg_array[agt_loop-1][1][0]) == 1):
                            cv_agt_array.append(" %s_monitor     %s_monr;\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt),))
                        elif (len(cv_agent_cfg_array[agt_loop-1][1]) > 1):
                            for i in range (1, int(cv_agent_cfg_array[agt_loop-1][1][0])+1):
                                cv_agt_array.append(" %s_%s_monitor     %s_%s_monr;\n"%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][1][i], str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][1][i],))
                        
                        if (len(cv_agent_cfg_array[agt_loop-1][0]) == 1 and int(cv_agent_cfg_array[agt_loop-1][0][0]) == 1):
                            cv_agt_array.append(" %s_sequencer       %s_seqr;\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt),))
                            cv_agt_array.append(" %s_driver      %s_drvr;\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt),))
                        elif (len(cv_agent_cfg_array[agt_loop-1][0]) > 1):
                            for i in range (1, int(cv_agent_cfg_array[agt_loop-1][0][0])+1):
                                cv_agt_array.append(" %s_%s_sequencer       %s_%s_seqr;\n"%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][i], str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][i],))
                                cv_agt_array.append(" %s_%s_driver      %s_%s_drvr;\n"%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][i], str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][i],))
                    
                    # For N-Agt : Adding ID : 090218|SUN
                    if cv_agent_cfg_array[agt_loop-1][6]:
                        if (agt_add_fld_decl == 0) and lines.startswith("  // Add field configurations"):
                            agt_add_fld_decl = 1
                        if (agt_add_fld_decl == 1) and lines.startswith("  // --"):
                            agt_add_fld_decl = 0
                            cv_agt_array.append("  `uvm_field_int(%s_agent_id, UVM_ALL_ON)\n"%(comp_vip_entry_name_agt))
                    
                    if (agt_found_config_decl == 0) and lines.startswith(" // Get configuration"):
                        agt_found_config_decl = 1
                    if (agt_found_config_decl == 1) and lines.startswith(" // --"):
                        agt_found_config_decl = 0
                        cv_agt_array.append(' if (!uvm_config_db#(%s_config)::get(this, "*", "%s_config", %s_acfg))\n'%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                        cv_agt_array.append(' begin\n')
                        cv_agt_array.append('  `uvm_error(get_type_name(), "%s_config object is not found in config_db!");\n'%(str(comp_vip_entry_name_agt)))
                        cv_agt_array.append(' end\n')
                    
                    if (agt_found_const_decl == 0) and lines.startswith(" // Construct children"):
                        agt_found_const_decl = 1
                    if (agt_found_const_decl == 1) and lines.startswith(" // --"):
                        agt_found_const_decl = 0
                        agt_found_const_decl_nxt_line = 1 
                        
                        if (len(cv_agent_cfg_array[agt_loop-1][1]) == 1 and int(cv_agent_cfg_array[agt_loop-1][1][0]) == 1):
                            cv_agt_array.append(" %s_monr = %s_monitor::type_id::create(\"%s_monr\", this);\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt),))
                        elif (len(cv_agent_cfg_array[agt_loop-1][1]) > 1):
                            for i in range (1, int(cv_agent_cfg_array[agt_loop-1][1][0])+1):
                                cv_agt_array.append(" %s_%s_monr = %s_%s_monitor::type_id::create(\"%s_%s_monr\", this);\n"%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][1][i], str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][1][i], str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][1][i],))
                    
                    #if (agt_found_const_decl_nxt_line == 1) and lines.startswith(" if(is_active == UVM_ACTIVE)"):
                    #    agt_found_const_decl_nxt_line = 0 
                        
                        cv_agt_array.append(' if (%s_acfg.is_active == UVM_ACTIVE) begin\n'%(str(comp_vip_entry_name_agt)))
                        if (len(cv_agent_cfg_array[agt_loop-1][0]) == 1 and int(cv_agent_cfg_array[agt_loop-1][0][0]) == 1):
                            cv_agt_array.append("  %s_seqr = %s_sequencer::type_id::create(\"%s_seqr\", this);\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt),))
                            cv_agt_array.append("  %s_drvr = %s_driver::type_id::create(\"%s_drvr\", this);\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt),))
                        elif (len(cv_agent_cfg_array[agt_loop-1][0]) > 1):
                            for i in range (1, int(cv_agent_cfg_array[agt_loop-1][0][0])+1):
                                cv_agt_array.append("  %s_%s_seqr = %s_%s_sequencer::type_id::create(\"%s_%s_seqr\", this);\n"%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][i], str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][i], str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][i],))
                                cv_agt_array.append("  %s_%s_drvr = %s_%s_driver::type_id::create(\"%s_%s_drvr\", this);\n"%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][i], str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][i], str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][i],))
                        cv_agt_array.append(' end\n')
                    
                    if (agt_found_conn_decl == 0) and lines.startswith(" // Connect children"):
                        agt_found_conn_decl = 1
                    if (agt_found_conn_decl == 1) and lines.startswith(" // --"):
                        agt_found_conn_decl = 0
                    #    agt_found_conn_decl_nxt_line = 1
                    #if (agt_found_conn_decl_nxt_line == 1) and lines.startswith(" if(is_active == UVM_ACTIVE)"):
                    #    agt_found_conn_decl_nxt_line = 0
                        
                        cv_agt_array.append(' if (%s_acfg.is_active == UVM_ACTIVE) begin\n'%(str(comp_vip_entry_name_agt)))
                        if (len(cv_agent_cfg_array[agt_loop-1][0]) == 1 and int(cv_agent_cfg_array[agt_loop-1][0][0]) == 1):
                            cv_agt_array.append("   %s_drvr.seq_item_port.connect(%s_seqr.seq_item_export);\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt),)) 
                        elif (len(cv_agent_cfg_array[agt_loop-1][0]) > 1):
                            for i in range (1, int(cv_agent_cfg_array[agt_loop-1][0][0])+1):
                                cv_agt_array.append("   %s_%s_drvr.seq_item_port.connect(%s_%s_seqr.seq_item_export);\n"%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][i], str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][i],)) 
                        cv_agt_array.append(' end\n')
                
                cv_agt_input_file = open("%s_agent.sv" % (str(comp_vip_entry_name_agt)), "w")
                
                for lines in cv_agt_array:
                    cv_agt_input_file.write(lines)
                cv_agt_input_file.close()
              

                #------------------------------------------------------------------------------------------- 
                # Code For Updating The Agent Config FIle 
                #------------------------------------------------------------------------------------------- 
                if cv_agent_cfg_array[agt_loop-1][4] in (1,2,3): 
                    cv_agt_cfg_array = []
                    cv_agt_cfg_input_file = open("%s_config.sv" % (str(comp_vip_entry_name_agt)), "r+")
               
                    for lines in cv_agt_cfg_input_file:
                        cv_agt_cfg_array.append(lines)
                        if lines.startswith(' rand uvm_active_passive_enum is_active'):
                            if (len(cv_agent_cfg_array[agt_loop-1][0]) == 1 and int(cv_agent_cfg_array[agt_loop-1][0][0]) == 1):
                                cv_agt_cfg_array.append(" virtual %s_interface %s_vif;\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                            elif (len(cv_agent_cfg_array[agt_loop-1][0]) > 1):
                                for j in range (1, int(cv_agent_cfg_array[agt_loop-1][0][0])+1):
                                    cv_agt_cfg_array.append(" virtual %s_%s_interface %s_%s_vif;\n"%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][j], str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][j]))
                    
                    cv_agt_cfg_input_file = open("%s_config.sv" % (str(comp_vip_entry_name_agt)), "w")
                    
                    for lines in cv_agt_cfg_array:
                        cv_agt_cfg_input_file.write(lines)
                    cv_agt_cfg_input_file.close()

                #------------------------------------------------------------------------------------------- 
                # Code For Updating The Driver Files
                #------------------------------------------------------------------------------------------- 
                if (len(cv_agent_cfg_array[agt_loop-1][0]) == 1 and int(cv_agent_cfg_array[agt_loop-1][0][0]) == 1):
                    cv_drv_array = []
                    cv_drv_input_file = open("%s_driver.sv" % (str(comp_vip_entry_name_agt)), "r+")
               
                    for lines in cv_drv_input_file:
                        cv_drv_array.append(lines)
                        if (drv_found_data_mem_decl == 0) and lines.startswith(" // Data Members"):
                            drv_found_data_mem_decl = 1
                        if (drv_found_data_mem_decl == 1) and lines.startswith(" //--"):
                            drv_found_data_mem_decl = 0
                        
                            # For N-Agt : Adding ID : 090218|SUN
                            if cv_agent_cfg_array[agt_loop-1][6]:
                                cv_drv_array.append(" int unsigned  %s_agent_id;\n"%(comp_vip_entry_name_agt))

                            cv_drv_array.append(" %s_config     %s_dcfg;\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                        
                        if cv_agent_cfg_array[agt_loop-1][4] in (1,2,3): 
                            if (drv_found_intf_mem_decl == 0) and lines.startswith(" // Interface Instance"):
                                drv_found_intf_mem_decl = 1
                            if (drv_found_intf_mem_decl == 1) and lines.startswith(" //--"):
                                drv_found_intf_mem_decl = 0
                                cv_drv_array.append(" virtual %s_interface %s_vif;\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                    
                        # For N-Agt : Adding ID : 090218|SUN
                        if cv_agent_cfg_array[agt_loop-1][6]:
                            if (drv_add_fld_decl == 0) and lines.startswith("  // Add field configurations"):
                                drv_add_fld_decl = 1
                            if (drv_add_fld_decl == 1) and lines.startswith("  // --"):
                                drv_add_fld_decl = 0
                                cv_drv_array.append("  `uvm_field_int(%s_agent_id, UVM_ALL_ON)\n"%(comp_vip_entry_name_agt))
                        
                        if (drv_found_config_decl == 0) and lines.startswith(" // Get configuration"):
                            drv_found_config_decl = 1
                        if (drv_found_config_decl == 1) and lines.startswith(" // --"):
                            drv_found_config_decl = 0
                            cv_drv_array.append(' if (!uvm_config_db#(%s_config)::get(this, "*", "%s_config", %s_dcfg))\n'%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                            cv_drv_array.append(' begin\n')
                            cv_drv_array.append('  `uvm_error(get_type_name(), "%s_config object is not found in config_db!");\n'%(str(comp_vip_entry_name_agt)))
                            cv_drv_array.append(' end\n')
                        
                        if cv_agent_cfg_array[agt_loop-1][4] in (1,2,3): 
                            if (drv_found_cc_decl == 0) and lines.startswith(" // Configure children"):
                                drv_found_cc_decl = 1
                            if (drv_found_cc_decl == 1) and lines.startswith(" // --"):
                                drv_found_cc_decl = 0
                                cv_drv_array.append(" %s_vif = %s_dcfg.%s_vif;\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                    
                    cv_drv_input_file = open("%s_driver.sv" % (str(comp_vip_entry_name_agt)), "w")
                    for lines in cv_drv_array:
                        cv_drv_input_file.write(lines)
                    cv_drv_input_file.close()
                elif (len(cv_agent_cfg_array[agt_loop-1][0]) > 1):
                    for i in range (1, int(cv_agent_cfg_array[agt_loop-1][0][0])+1):
                        cv_drv_array = []
                        cv_drv_input_file = open("%s_%s_driver.sv"%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][i]), "r+")
               
                        for lines in cv_drv_input_file:
                            cv_drv_array.append(lines)
                            if (drv_found_data_mem_decl == 0) and lines.startswith(" // Data Members"):
                                drv_found_data_mem_decl = 1
                            if (drv_found_data_mem_decl == 1) and lines.startswith(" //--"):
                                drv_found_data_mem_decl = 0
                                
                                # For N-Agt : Adding ID : 090218|SUN
                                if cv_agent_cfg_array[agt_loop-1][6]:
                                    cv_drv_array.append(" int unsigned  %s_agent_id;\n"%(comp_vip_entry_name_agt))
                                
                                cv_drv_array.append(" %s_config     %s_dcfg;\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                        
                            if cv_agent_cfg_array[agt_loop-1][4] in (1,2,3): 
                                if (drv_found_intf_mem_decl == 0) and lines.startswith(" // Interface Instance"):
                                    drv_found_intf_mem_decl = 1
                                if (drv_found_intf_mem_decl == 1) and lines.startswith(" //--"):
                                    drv_found_intf_mem_decl = 0
                                    cv_drv_array.append(" virtual %s_%s_interface %s_%s_vif;\n"%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][i], \
                                    str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][i]))
                            
                            # For N-Agt : Adding ID : 090218|SUN
                            if cv_agent_cfg_array[agt_loop-1][6]:
                                if (drv_add_fld_decl == 0) and lines.startswith("  // Add field configurations"):
                                    drv_add_fld_decl = 1
                                if (drv_add_fld_decl == 1) and lines.startswith("  // --"):
                                    drv_add_fld_decl = 0
                                    cv_drv_array.append("  `uvm_field_int(%s_agent_id, UVM_ALL_ON)\n"%(comp_vip_entry_name_agt))
                            
                            if (drv_found_config_decl == 0) and lines.startswith(" // Get configuration"):
                                drv_found_config_decl = 1
                            if (drv_found_config_decl == 1) and lines.startswith(" // --"):
                                drv_found_config_decl = 0
                                cv_drv_array.append(' if (!uvm_config_db#(%s_config)::get(this, "*", "%s_config", %s_dcfg))\n'%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                                cv_drv_array.append(' begin\n')
                                cv_drv_array.append('  `uvm_error(get_type_name(), "%s_config object is not found in config_db!");\n'%(str(comp_vip_entry_name_agt)))
                                cv_drv_array.append(' end\n')
                        
                            if cv_agent_cfg_array[agt_loop-1][4] in (1,2,3): 
                                if (drv_found_cc_decl == 0) and lines.startswith(" // Configure children"):
                                    drv_found_cc_decl = 1
                                if (drv_found_cc_decl == 1) and lines.startswith(" // --"):
                                    drv_found_cc_decl = 0
                                    cv_drv_array.append(" %s_%s_vif = %s_dcfg.%s_%s_vif;\n"%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][i], \
                                    str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][i]))
                        
                        cv_drv_input_file = open("%s_%s_driver.sv" % (str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][i]), "w")
                        for lines in cv_drv_array:
                            cv_drv_input_file.write(lines)
                        cv_drv_input_file.close()
                #------------------------------------------------------------------------------------------- 
               
                #------------------------------------------------------------------------------------------- 
                # Code For Updating The Monitor Files
                #------------------------------------------------------------------------------------------- 
                if (len(cv_agent_cfg_array[agt_loop-1][1]) == 1 and int(cv_agent_cfg_array[agt_loop-1][1][0]) == 1):
                    cv_mon_array = []
                    cv_mon_input_file = open("%s_monitor.sv" % (str(comp_vip_entry_name_agt)), "r+")
               
                    for lines in cv_mon_input_file:
                        cv_mon_array.append(lines)
                        if (mon_found_data_mem_decl == 0) and lines.startswith(" // Data Members"):
                            mon_found_data_mem_decl = 1
                        if (mon_found_data_mem_decl == 1) and lines.startswith(" //--"):
                            mon_found_data_mem_decl = 0
                                
                            # For N-Agt : Adding ID : 090218|SUN
                            if cv_agent_cfg_array[agt_loop-1][6]:
                                cv_drv_array.append(" int unsigned  %s_agent_id;\n"%(comp_vip_entry_name_agt))

                            cv_mon_array.append(" %s_config     %s_mcfg;\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                        
                        if cv_agent_cfg_array[agt_loop-1][4] in (1,2,3): 
                            if (mon_found_intf_mem_decl == 0) and lines.startswith(" // Interface Instance"):
                                mon_found_intf_mem_decl = 1
                            if (mon_found_intf_mem_decl == 1) and lines.startswith(" //--"):
                                mon_found_intf_mem_decl = 0
                                if (len(cv_agent_cfg_array[agt_loop-1][0]) == 1 and int(cv_agent_cfg_array[agt_loop-1][0][0]) == 1):
                                    cv_mon_array.append(" virtual %s_interface %s_vif;\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                                elif (len(cv_agent_cfg_array[agt_loop-1][0]) > 1):
                                    for j in range (1, int(cv_agent_cfg_array[agt_loop-1][0][0])+1):
                                        cv_mon_array.append(" virtual %s_%s_interface %s_%s_vif;\n"%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][j],\
                                        str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][j]))
                         
                        # For N-Agt : Adding ID : 090218|SUN
                        if cv_agent_cfg_array[agt_loop-1][6]:
                            if (mon_add_fld_decl == 0) and lines.startswith("  // Add field configurations"):
                                mon_add_fld_decl = 1
                            if (mon_add_fld_decl == 1) and lines.startswith("  // --"):
                                mon_add_fld_decl = 0
                                cv_drv_array.append("  `uvm_field_int(%s_agent_id, UVM_ALL_ON)\n"%(comp_vip_entry_name_agt))
                        
                        if (mon_found_config_decl == 0) and lines.startswith(" // Get configuration"):
                            mon_found_config_decl = 1
                        if (mon_found_config_decl == 1) and lines.startswith(" // --"):
                            mon_found_config_decl = 0
                            cv_mon_array.append(' if (!uvm_config_db#(%s_config)::get(this, "*", "%s_config", %s_mcfg))\n'%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                            cv_mon_array.append(' begin\n')
                            cv_mon_array.append('  `uvm_error(get_type_name(), "%s_config object is not found in config_db!");\n'%(str(comp_vip_entry_name_agt)))
                            cv_mon_array.append(' end\n')
                        
                        if cv_agent_cfg_array[agt_loop-1][4] in (1,2,3): 
                            if (mon_found_cc_decl == 0) and lines.startswith(" // Configure children"):
                                mon_found_cc_decl = 1
                            if (mon_found_cc_decl == 1) and lines.startswith(" // --"):
                                mon_found_cc_decl = 0
                                if (len(cv_agent_cfg_array[agt_loop-1][0]) == 1 and int(cv_agent_cfg_array[agt_loop-1][0][0]) == 1):
                                    cv_mon_array.append(" %s_vif = %s_mcfg.%s_vif;\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                                elif (len(cv_agent_cfg_array[agt_loop-1][0]) > 1):
                                    for j in range (1, int(cv_agent_cfg_array[agt_loop-1][0][0])+1):
                                        cv_mon_array.append(" %s_%s_vif = %s_mcfg.%s_%s_vif;\n"%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][j],\
                                        str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][j]))
                    
                    cv_mon_input_file = open("%s_monitor.sv" % (str(comp_vip_entry_name_agt)), "w")
                    for lines in cv_mon_array:
                        cv_mon_input_file.write(lines)    
                    cv_mon_input_file.close()
                elif (len(cv_agent_cfg_array[agt_loop-1][1]) > 1):
                    for i in range (1, int(cv_agent_cfg_array[agt_loop-1][1][0])+1):
                        cv_mon_array = []
                        cv_mon_input_file = open("%s_%s_monitor.sv" % (str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][1][i]), "r+")
               
                        for lines in cv_mon_input_file:
                            cv_mon_array.append(lines)
                            if (mon_found_data_mem_decl == 0) and lines.startswith(" // Data Members"):
                                mon_found_data_mem_decl = 1
                            if (mon_found_data_mem_decl == 1) and lines.startswith(" //--"):
                                mon_found_data_mem_decl = 0
                                
                                # For N-Agt : Adding ID : 090218|SUN
                                if cv_agent_cfg_array[agt_loop-1][6]:
                                    cv_drv_array.append(" int unsigned  %s_agent_id;\n"%(comp_vip_entry_name_agt))
                                
                                cv_mon_array.append(" %s_config     %s_mcfg;\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                            
                            if cv_agent_cfg_array[agt_loop-1][4] in (1,2,3): 
                                if (mon_found_intf_mem_decl == 0) and lines.startswith(" // Interface Instance"):
                                    mon_found_intf_mem_decl = 1
                                if (mon_found_intf_mem_decl == 1) and lines.startswith(" //--"):
                                    mon_found_intf_mem_decl = 0
                                    if (len(cv_agent_cfg_array[agt_loop-1][0]) == 1 and int(cv_agent_cfg_array[agt_loop-1][0][0]) == 1):
                                        cv_mon_array.append(" virtual %s_interface %s_vif;\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                                    elif (len(cv_agent_cfg_array[agt_loop-1][0]) > 1):
                                        for j in range (1, int(cv_agent_cfg_array[agt_loop-1][0][0])+1):
                                            cv_mon_array.append(" virtual %s_%s_interface %s_%s_vif;\n"%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][j],\
                                            str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][j]))
                        
                            # For N-Agt : Adding ID : 090218|SUN
                            if cv_agent_cfg_array[agt_loop-1][6]:
                                if (mon_add_fld_decl == 0) and lines.startswith("  // Add field configurations"):
                                    mon_add_fld_decl = 1
                                if (mon_add_fld_decl == 1) and lines.startswith("  // --"):
                                    mon_add_fld_decl = 0
                                    cv_drv_array.append("  `uvm_field_int(%s_agent_id, UVM_ALL_ON)\n"%(comp_vip_entry_name_agt))
                            
                            if (mon_found_config_decl == 0) and lines.startswith(" // Get configuration"):
                                mon_found_config_decl = 1
                            if (mon_found_config_decl == 1) and lines.startswith(" // --"):
                                mon_found_config_decl = 0
                                cv_mon_array.append(' if (!uvm_config_db#(%s_config)::get(this, "*", "%s_config", %s_mcfg))\n'%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                                cv_mon_array.append(' begin\n')
                                cv_mon_array.append('  `uvm_error(get_type_name(), "%s_config object is not found in config_db!");\n'%(str(comp_vip_entry_name_agt)))
                                cv_mon_array.append(' end\n')
                            
                            if cv_agent_cfg_array[agt_loop-1][4] in (1,2,3): 
                                if (mon_found_cc_decl == 0) and lines.startswith(" // Configure children"):
                                    mon_found_cc_decl = 1
                                if (mon_found_cc_decl == 1) and lines.startswith(" // --"):
                                    mon_found_cc_decl = 0
                                    if (len(cv_agent_cfg_array[agt_loop-1][0]) == 1 and int(cv_agent_cfg_array[agt_loop-1][0][0]) == 1):
                                        cv_mon_array.append(" %s_vif = %s_mcfg.%s_vif;\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                                    elif (len(cv_agent_cfg_array[agt_loop-1][0]) > 1):
                                        for j in range (1, int(cv_agent_cfg_array[agt_loop-1][0][0])+1):
                                            cv_mon_array.append(" %s_%s_vif = %s_mcfg.%s_%s_vif;\n"%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][j],\
                                            str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][0][j]))
                        
                        cv_mon_input_file = open("%s_%s_monitor.sv" % (str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][1][i]), "w")
                        for lines in cv_mon_array:
                            cv_mon_input_file.write(lines)
                        cv_mon_input_file.close()
                #------------------------------------------------------------------------------------------- 


                #------------------------------------------------------------------------------------------- 
                # Code For Updating The Scoreboard FIles 
                #------------------------------------------------------------------------------------------- 
                for scb_loop in range (1, int(cv_agent_cfg_array[agt_loop-1][2][0])+1):
                    comp_vip_entry_name_scb = comp_vip_entry_name_agt 
                   
                    if (len(cv_agent_cfg_array[agt_loop-1][2]) > 1):
                        comp_vip_entry_name_scb = comp_vip_entry_name_scb+"_%s"%cv_agent_cfg_array[agt_loop-1][2][scb_loop]    
                        log.debug("Value of cv_agent_cfg_array - gen scb %s"% cv_agent_cfg_array[agt_loop-1][2][scb_loop])
                    log.debug("Value of cv_agent_cfg_array - gen scb %s"% cv_agent_cfg_array)

                    os.system('$PROJ_ROOT/.bin/generate_scoreboard.csh  %s %s' % (str(comp_vip_entry_name_scb), str(comp_vip_entry_name_pkg),))

                    # Scoreboard Connection based on Analysis Port-Export FIFO Based
                    if (cv_agent_cfg_array[agt_loop-1][3] == 1):
                        cv_scb_array = []
                        cv_scb_input_file = open("%s_scoreboard.sv" % (str(comp_vip_entry_name_scb)), "r+")

                        for lines in cv_scb_input_file:
                            cv_scb_array.append(lines)
                            if (scb_found_port_decl == 0) and lines.startswith(" // Port Declaration"):
                                scb_found_port_decl = 1
                            if (scb_found_port_decl == 1) and lines.startswith(" //-"):
                                scb_found_port_decl = 0
                                
                                if (len(cv_agent_cfg_array[agt_loop-1][1]) == 1 and int(cv_agent_cfg_array[agt_loop-1][1][0]) == 1):
                                    cv_scb_array.append(' uvm_analysis_export #(%s_sequence_item_base) %s_scoreboard_analysis_export;'%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_scb),))
                                    cv_scb_array.append("\n")
                                    cv_scb_array.append(' local uvm_tlm_analysis_fifo #(%s_sequence_item_base) %s_scoreboard_analysis_fifo;'%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_scb),))
                                    cv_scb_array.append("\n")
                                elif (len(cv_agent_cfg_array[agt_loop-1][1]) > 1):
                                    for i in range (1, int(cv_agent_cfg_array[agt_loop-1][1][0])+1):
                                        cv_scb_array.append(' uvm_analysis_export #(%s_%s_sequence_item_base) %s_scoreboard_%s_analysis_export;'%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][1][i], str(comp_vip_entry_name_scb),cv_agent_cfg_array[agt_loop-1][1][i],))
                                        cv_scb_array.append("\n")
                                        cv_scb_array.append(' local uvm_tlm_analysis_fifo #(%s_%s_sequence_item_base) %s_scoreboard_%s_analysis_fifo;'%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][1][i],str(comp_vip_entry_name_scb), cv_agent_cfg_array[agt_loop-1][1][i],))
                                        cv_scb_array.append("\n")
                                        if (i != int(cv_agent_cfg_array[agt_loop-1][1][0])):
                                            cv_scb_array.append("\n")
                            
                            if lines.startswith(" super.new"):
                                if (len(cv_agent_cfg_array[agt_loop-1][1]) == 1 and int(cv_agent_cfg_array[agt_loop-1][1][0]) == 1):
                                    cv_scb_array.append(' %s_scoreboard_analysis_export = new("%s_scoreboard_analysis_export", this);'%(str(comp_vip_entry_name_scb), str(comp_vip_entry_name_scb),))
                                    cv_scb_array.append("\n")
                                    cv_scb_array.append(' %s_scoreboard_analysis_fifo = new("%s_scoreboard_analysis_fifo", this);'%(str(comp_vip_entry_name_scb), str(comp_vip_entry_name_scb),))
                                    cv_scb_array.append("\n")
                                elif (len(cv_agent_cfg_array[agt_loop-1][1]) > 1):
                                    for i in range (1, int(cv_agent_cfg_array[agt_loop-1][1][0])+1):
                                        cv_scb_array.append(' %s_scoreboard_%s_analysis_export = new("%s_scoreboard_%s_analysis_export", this);'%(str(comp_vip_entry_name_scb), cv_agent_cfg_array[agt_loop-1][1][i], str(comp_vip_entry_name_scb), cv_agent_cfg_array[agt_loop-1][1][i],))
                                        cv_scb_array.append("\n")
                                        cv_scb_array.append(' %s_scoreboard_%s_analysis_fifo = new("%s_scoreboard_%s_analysis_fifo", this);'%(str(comp_vip_entry_name_scb), cv_agent_cfg_array[agt_loop-1][1][i], str(comp_vip_entry_name_scb), cv_agent_cfg_array[agt_loop-1][1][i],))
                                        cv_scb_array.append("\n")
                                        if (i != int(cv_agent_cfg_array[agt_loop-1][1][0])):
                                            cv_scb_array.append("\n")
                            
                            if lines.startswith(" super.connect_phase"):
                                if (len(cv_agent_cfg_array[agt_loop-1][1]) == 1 and int(cv_agent_cfg_array[agt_loop-1][1][0]) == 1):
                                    cv_scb_array.append(' %s_scoreboard_analysis_export.connect(%s_scoreboard_analysis_fifo.analysis_export);'%(str(comp_vip_entry_name_scb), str(comp_vip_entry_name_scb),))
                                    cv_scb_array.append("\n")
                                elif (len(cv_agent_cfg_array[agt_loop-1][1]) > 1):
                                    for i in range (1, int(cv_agent_cfg_array[agt_loop-1][1][0])+1):
                                        cv_scb_array.append(' %s_scoreboard_%s_analysis_export.connect(%s_scoreboard_%s_analysis_fifo.analysis_export);'%(str(comp_vip_entry_name_scb), cv_agent_cfg_array[agt_loop-1][1][i], str(comp_vip_entry_name_scb), cv_agent_cfg_array[agt_loop-1][1][i],))
                                        cv_scb_array.append("\n")
                        
                        cv_scb_input_file = open("%s_scoreboard.sv" % (str(comp_vip_entry_name_scb)), "w")
                        for lines in cv_scb_array:
                            cv_scb_input_file.write(lines)
                        cv_scb_input_file.close()
                    elif (cv_agent_cfg_array[agt_loop-1][3] == 2):
                        cv_scb_array = []
                        cv_scb_input_file = open("%s_scoreboard.sv" % (str(comp_vip_entry_name_scb)), "r+")

                        for lines in cv_scb_input_file:
                            cv_scb_array.append(lines)
                            if (scb_found_class_decl == 0) and lines.startswith("// Class Description"):
                                scb_found_class_decl = 1
                            if (scb_found_class_decl == 1) and lines.startswith("//-"):
                                scb_found_class_decl_nxt_line = 1
                            if (scb_found_class_decl_nxt_line == 1) and lines == '\n': 
                                scb_found_class_decl = 0
                                scb_found_class_decl_nxt_line = 0
                                
                                if (len(cv_agent_cfg_array[agt_loop-1][1]) == 1 and int(cv_agent_cfg_array[agt_loop-1][1][0]) == 1):
                                    log.debug("scb con : writebased : Value of cv_agent_cfg_array is  %s"%cv_agent_cfg_array)
                                    if (len(cv_agent_cfg_array[agt_loop-1][2]) == 1): cv_scb_array.append('`uvm_analysis_imp_decl(_%s_scoreboard)'%(str(comp_vip_entry_name_agt)))
                                    else: cv_scb_array.append('`uvm_analysis_imp_decl(_%s_%s_scoreboard)'%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][2][scb_loop]))
                                    cv_scb_array.append("\n")
                                elif (len(cv_agent_cfg_array[agt_loop-1][1]) > 1):
                                    for i in range (1, int(cv_agent_cfg_array[agt_loop-1][1][0])+1):
                                        if (int(cv_agent_cfg_array[agt_loop-1][2][0])==1): cv_scb_array.append('`uvm_analysis_imp_decl(_%s_scoreboard)'%(cv_agent_cfg_array[agt_loop-1][1][i],))
                                        else: cv_scb_array.append('`uvm_analysis_imp_decl(_%s_%s_scoreboard)'%(cv_agent_cfg_array[agt_loop-1][1][i], cv_agent_cfg_array[agt_loop-1][2][scb_loop]))
                                        cv_scb_array.append("\n")
                                cv_scb_array.append("\n")
                            
                            if (scb_found_port_decl == 0) and lines.startswith(" // Port Declaration"):
                                scb_found_port_decl = 1
                            if (scb_found_port_decl == 1) and lines.startswith(" //-"):
                                scb_found_port_decl = 0
                                
                                if (len(cv_agent_cfg_array[agt_loop-1][1]) == 1 and int(cv_agent_cfg_array[agt_loop-1][1][0]) == 1):
                                    if (len(cv_agent_cfg_array[agt_loop-1][2]) == 1): cv_scb_array.append(' uvm_analysis_imp_%s_scoreboard #(%s_sequence_item_base, %s_scoreboard) %s_scoreboard_analysis_export;'%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_scb), str(comp_vip_entry_name_scb), str(comp_vip_entry_name_scb),))
                                    else: cv_scb_array.append(' uvm_analysis_imp_%s_%s_scoreboard #(%s_sequence_item_base, %s_scoreboard) %s_scoreboard_analysis_export;'%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name_agt), str(comp_vip_entry_name_scb), str(comp_vip_entry_name_scb)))
                                    cv_scb_array.append("\n")
                                elif (len(cv_agent_cfg_array[agt_loop-1][1]) > 1):
                                    for i in range (1, int(cv_agent_cfg_array[agt_loop-1][1][0])+1):
                                        if (int(cv_agent_cfg_array[agt_loop-1][2][0])==1): cv_scb_array.append(' uvm_analysis_imp_%s_scoreboard #(%s_%s_sequence_item_base, %s_scoreboard) %s_scoreboard_%s_analysis_export;'%(cv_agent_cfg_array[agt_loop-1][1][i], str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][1][i], str(comp_vip_entry_name_scb), str(comp_vip_entry_name_scb), cv_agent_cfg_array[agt_loop-1][1][i],))
                                        else: cv_scb_array.append(' uvm_analysis_imp_%s_%s_scoreboard #(%s_%s_sequence_item_base, %s_scoreboard) %s_scoreboard_%s_analysis_export;'%(cv_agent_cfg_array[agt_loop-1][1][i], cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][1][i], str(comp_vip_entry_name_scb), str(comp_vip_entry_name_scb), cv_agent_cfg_array[agt_loop-1][1][i]))
                                        cv_scb_array.append("\n")
                                cv_scb_array.append("\n")
                           
                            if lines.startswith(" super.new"):
                                if (len(cv_agent_cfg_array[agt_loop-1][1]) == 1 and int(cv_agent_cfg_array[agt_loop-1][1][0]) == 1):
                                    if (len(cv_agent_cfg_array[agt_loop-1][2]) == 1): cv_scb_array.append(' %s_scoreboard_analysis_export = new("%s_scoreboard_analysis_export", this);'%(str(comp_vip_entry_name_scb), str(comp_vip_entry_name_scb),))
                                    else: cv_scb_array.append(' %s_scoreboard_analysis_export = new("%s_scoreboard_analysis_export", this);'%(str(comp_vip_entry_name_scb), str(comp_vip_entry_name_scb)))
                                    cv_scb_array.append("\n")
                                elif (len(cv_agent_cfg_array[agt_loop-1][1]) > 1):
                                    for i in range (1, int(cv_agent_cfg_array[agt_loop-1][1][0])+1):
                                        cv_scb_array.append(' %s_scoreboard_%s_analysis_export = new("%s_scoreboard_%s_analysis_export", this);'%(str(comp_vip_entry_name_scb), cv_agent_cfg_array[agt_loop-1][1][i], str(comp_vip_entry_name_scb), cv_agent_cfg_array[agt_loop-1][1][i],))
                                        cv_scb_array.append("\n")
                                        if (i != int(cv_agent_cfg_array[agt_loop-1][1][0])):
                                            cv_scb_array.append("\n")

                            #if lines.startswith(" extern virtual task          run_phase(uvm_phase phase);"):
                            if lines.startswith(" extern virtual function void final_phase(uvm_phase phase);"):
                                if (len(cv_agent_cfg_array[agt_loop-1][1]) == 1 and int(cv_agent_cfg_array[agt_loop-1][1][0]) == 1):
                                    if (len(cv_agent_cfg_array[agt_loop-1][2]) == 1): cv_scb_array.append(' extern virtual function void write_%s_scoreboard(%s_sequence_item_base %s_seq_item_base);'%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt),))
                                    else: cv_scb_array.append(' extern virtual function void write_%s_%s_scoreboard(%s_sequence_item_base %s_seq_item_base);'%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt),))
                                    cv_scb_array.append("\n")
                                elif (len(cv_agent_cfg_array[agt_loop-1][1]) > 1):
                                    for i in range (1, int(cv_agent_cfg_array[agt_loop-1][1][0])+1):
                                         if (int(cv_agent_cfg_array[agt_loop-1][2][0])==1): cv_scb_array.append(' extern virtual function void write_%s_scoreboard(%s_%s_sequence_item_base %s_%s_seq_item_base);'%(cv_agent_cfg_array[agt_loop-1][1][i], str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][1][i], str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][1][i],))
                                         else: cv_scb_array.append(' extern virtual function void write_%s_%s_scoreboard(%s_%s_sequence_item_base %s_%s_seq_item_base);'%(cv_agent_cfg_array[agt_loop-1][1][i], cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][1][i], str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][1][i],))
                                         cv_scb_array.append("\n")
                            
                            #if lines.startswith("endtask: run_phase"):
                            if lines.startswith("endfunction: final_phase"):
                                if (len(cv_agent_cfg_array[agt_loop-1][1]) == 1 and int(cv_agent_cfg_array[agt_loop-1][1][0]) == 1):
                                     if (len(cv_agent_cfg_array[agt_loop-1][2]) == 1):   
                                        cv_scb_array.append("\n")
                                        cv_scb_array.append("//---------------------------------------------------------------\n")
                                        cv_scb_array.append("// Class Name               : %s_scoreboard\n"%(str(comp_vip_entry_name_scb),))
                                        cv_scb_array.append("// Function Name            : write_%s_scoreboard\n"%(str(comp_vip_entry_name_agt)))
                                        cv_scb_array.append("// Function Description     :\n")
                                        cv_scb_array.append("//---------------------------------------------------------------\n")
                                        cv_scb_array.append("\n")
                                        cv_scb_array.append("function void %s_scoreboard::write_%s_scoreboard(%s_sequence_item_base %s_seq_item_base);\n"%(str(comp_vip_entry_name_scb), str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt),))
                                        cv_scb_array.append("endfunction: write_%s_scoreboard\n"%(str(comp_vip_entry_name_agt)))
                                     else:
                                        cv_scb_array.append("\n")
                                        cv_scb_array.append("//---------------------------------------------------------------\n")
                                        cv_scb_array.append("// Class Name               : %s_scoreboard\n"%(str(comp_vip_entry_name_scb),))
                                        cv_scb_array.append("// Function Name            : write_%s_%s_scoreboard\n"%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][2][scb_loop]))
                                        cv_scb_array.append("// Function Description     :\n")
                                        cv_scb_array.append("//---------------------------------------------------------------\n")
                                        cv_scb_array.append("\n")
                                        if int(cv_agent_cfg_array[agt_loop-1][2][0]==1): cv_scb_array.append("function void %s_scoreboard::write_%s_scoreboard(%s_sequence_item_base %s_seq_item_base);\n"%(str(comp_vip_entry_name_scb), str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt),))
                                        else: cv_scb_array.append("function void %s_scoreboard::write_%s_%s_scoreboard(%s_sequence_item_base %s_seq_item_base);\n"%(str(comp_vip_entry_name_scb), str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                                        if int(cv_agent_cfg_array[agt_loop-1][2][0]==1): cv_scb_array.append("endfunction: write_%s_scoreboard\n"%(str(comp_vip_entry_name_agt)))
                                        else: cv_scb_array.append("endfunction: write_%s_%s_scoreboard\n"%(str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][2][scb_loop]))
                                elif (len(cv_agent_cfg_array[agt_loop-1][1]) > 1):
                                    for i in range (1, int(cv_agent_cfg_array[agt_loop-1][1][0])+1):
                                        cv_scb_array.append("\n")
                                        cv_scb_array.append("//---------------------------------------------------------------\n")
                                        cv_scb_array.append("// Class Name               : %s_scoreboard\n"%(str(comp_vip_entry_name_scb),))
                                        if (int(cv_agent_cfg_array[agt_loop-1][2][0])==1): cv_scb_array.append("// Function Name            : write_%s_scoreboard\n"%(cv_agent_cfg_array[agt_loop-1][1][i],))
                                        else: cv_scb_array.append("// Function Name            : write_%s_%s_scoreboard\n"%(cv_agent_cfg_array[agt_loop-1][1][i], cv_agent_cfg_array[agt_loop-1][2][scb_loop]))
                                        cv_scb_array.append("// Function Description     :\n")
                                        cv_scb_array.append("//---------------------------------------------------------------\n")
                                        cv_scb_array.append("\n")
                                        if (int(cv_agent_cfg_array[agt_loop-1][2][0])==1): cv_scb_array.append("function void %s_scoreboard::write_%s_scoreboard(%s_%s_sequence_item_base %s_%s_seq_item_base);\n"%(str(comp_vip_entry_name_scb), cv_agent_cfg_array[agt_loop-1][1][i], str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][1][i], str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][1][i],))
                                        else: cv_scb_array.append("function void %s_scoreboard::write_%s_%s_scoreboard(%s_%s_sequence_item_base %s_%s_seq_item_base);\n"%(str(comp_vip_entry_name_scb), cv_agent_cfg_array[agt_loop-1][1][i], cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][1][i], str(comp_vip_entry_name_agt), cv_agent_cfg_array[agt_loop-1][1][i],))
                                        if (int(cv_agent_cfg_array[agt_loop-1][2][0])==1): cv_scb_array.append("endfunction: write_%s_scoreboard\n"%(cv_agent_cfg_array[agt_loop-1][1][i],))
                                        else: cv_scb_array.append("endfunction: write_%s_%s_scoreboard\n"%(cv_agent_cfg_array[agt_loop-1][1][i], cv_agent_cfg_array[agt_loop-1][2][scb_loop]))
                                        cv_scb_array.append("\n")

                        cv_scb_input_file = open("%s_scoreboard.sv" % (str(comp_vip_entry_name_scb)), "w")
                        for lines in cv_scb_array:
                            cv_scb_input_file.write(lines)
                        cv_scb_input_file.close()
                
                
            #------------------------------------------------------------------------------------------- 
            # Code For Updating The Environment Files 
            #------------------------------------------------------------------------------------------- 
                            
            os.system('$PROJ_ROOT/.bin/generate_env.csh  %s %s' % (str(comp_vip_entry_name), str(comp_vip_entry_name_pkg),))
            
            cv_env_array = []
            cv_env_input_file = open("%s_environment.sv" % (str(self.cve1.get())), "r+")

            for lines in cv_env_input_file:
                cv_env_array.append(lines)
                if (env_found_class_decl == 0) and lines.startswith(" // Components Instantiation"):
                    env_found_class_decl = 1
                if (env_found_class_decl == 1) and lines.startswith(" //-"):
                    env_found_class_decl = 0
                    for i in range (1, int(cvagt_val_loop+1)):
                        if cv_agent_cfg_array[i-1][5]: 
                            if not cv_agent_cfg_array[i-1][6]:
                                cv_env_array.append(' %s_%s_agent %s_%s_agt;'%(str(comp_vip_entry_name), cv_agent_cfg_array[i-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[i-1][5],))
                            else:
                                cv_env_array.append(' %s_%s_agent %s_%s_agt[];'%(str(comp_vip_entry_name), cv_agent_cfg_array[i-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[i-1][5],))
                        else:
                            if not cv_agent_cfg_array[i-1][6]:
                                cv_env_array.append(' %s_agent %s_agt;'%(str(comp_vip_entry_name), str(comp_vip_entry_name), ))
                            else:
                                cv_env_array.append(' %s_agent %s_agt[];'%(str(comp_vip_entry_name), str(comp_vip_entry_name), ))
                        cv_env_array.append("\n")
                    cv_env_array.append("\n")
   
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        if (len(cv_agent_cfg_array[agt_loop-1][2]) == 1 and int(cv_agent_cfg_array[agt_loop-1][2][0]) == 1):
                            if cv_agent_cfg_array[agt_loop-1][5]:
                                if not cv_agent_cfg_array[agt_loop-1][6]:
                                    cv_env_array.append(' %s_%s_scoreboard %s_%s_scb;'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5],))
                                else:
                                    cv_env_array.append(' %s_%s_scoreboard %s_%s_scb[];'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5],))
                            else:
                                if not cv_agent_cfg_array[agt_loop-1][6]:
                                    cv_env_array.append(' %s_scoreboard %s_scb;'%(str(comp_vip_entry_name), str(comp_vip_entry_name), ))
                                else:    
                                    cv_env_array.append(' %s_scoreboard %s_scb[];'%(str(comp_vip_entry_name), str(comp_vip_entry_name), ))
                            cv_env_array.append("\n")
                        elif (len(cv_agent_cfg_array[agt_loop-1][2]) > 1):
                            for scb_loop in range (1, int(cv_agent_cfg_array[agt_loop-1][2][0])+1):
                                if cv_agent_cfg_array[agt_loop-1][5]:
                                    if not cv_agent_cfg_array[agt_loop-1][6]:
                                        cv_env_array.append(' %s_%s_%s_scoreboard %s_%s_%s_scb;'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop],))
                                    else:
                                        cv_env_array.append(' %s_%s_%s_scoreboard %s_%s_%s_scb[];'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop],))
                                else:
                                    if not cv_agent_cfg_array[agt_loop-1][6]:
                                        cv_env_array.append(' %s_%s_scoreboard %s_%s_scb;'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop],))
                                    else:
                                        cv_env_array.append(' %s_%s_scoreboard %s_%s_scb[];'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop],))
                                cv_env_array.append("\n")
                
                if (env_found_obj_decl == 0) and lines.startswith(" // Object Instantiation"):
                    env_found_obj_decl = 1
                if (env_found_obj_decl == 1) and lines.startswith(" //-"):
                    env_found_obj_decl = 0
                    cv_env_array.append(' %s_environment_config  %s_environment_tcfg;\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name)))
                
                if (env_found_get_cfg_decl == 0) and lines.startswith(" // Get configuration"):
                    env_found_get_cfg_decl = 1
                if (env_found_get_cfg_decl == 1) and lines.startswith(" // --"):
                    env_found_get_cfg_decl = 0
                    cv_env_array.append(' if (!uvm_config_db#(%s_environment_config)::get(this, "*", "%s_environment_config", %s_environment_tcfg))\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), str(comp_vip_entry_name)))
                    cv_env_array.append(' begin\n')
                    cv_env_array.append('  `uvm_error(get_type_name(), "%s_environment_config object is not found in config_db!");\n'%(str(comp_vip_entry_name)))
                    cv_env_array.append(' end\n')
                    cv_env_array.append(' else\n')
                    cv_env_array.append(' begin\n')
                    cv_env_array.append('  %s_environment_tcfg.print();\n'%(str(comp_vip_entry_name)))
                    cv_env_array.append(' end\n')

                # if lines.startswith(" super.build_phase"):
                if lines.startswith("function void %s_environment::build_phase"%(str(comp_vip_entry_name))):
                    cv_env_array.append(' string agent_inst_name, scb_inst_name;\n')
                
                if (env_found_const_decl == 0) and lines.startswith(" // Construct children"):
                    env_found_const_decl = 1
                if (env_found_const_decl == 1) and lines.startswith(" // --"):
                    env_found_const_decl = 0
                    for i in range (1, int(cvagt_val_loop+1)):
                        if not cv_agent_cfg_array[i-1][6]:
                            if cv_agent_cfg_array[i-1][5]: 
                                cv_env_array.append(' $sformat(agent_inst_name, "%s_%s_agt");\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[i-1][5]))
                                cv_env_array.append(' %s_%s_agt = %s_%s_agent::type_id::create(agent_inst_name,this);'%(str(comp_vip_entry_name), cv_agent_cfg_array[i-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[i-1][5]))
                            else:
                                cv_env_array.append(' $sformat(agent_inst_name, "%s_agt");\n'%(str(comp_vip_entry_name)))
                                cv_env_array.append(' %s_agt = %s_agent::type_id::create(agent_inst_name,this);'%(str(comp_vip_entry_name), str(comp_vip_entry_name)))
                        else:
                            if cv_agent_cfg_array[i-1][5]: 
                                comp_vip_entry_name_agt = comp_vip_entry_name+"_%s"%cv_agent_cfg_array[i-1][5]
                                cv_env_array.append(' %s_%s_agt = new[%s_environment_tcfg.no_of_%s_agt];\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[i-1][5], str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                               
                                cv_env_array.append(" for (int i = 0; i < %s_environment_tcfg.no_of_%s_agt; i++) begin\n"%(str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                                id_temp = "%0d"
                                cv_env_array.append('  $sformat(agent_inst_name, "%s_%s_agt[%s]", i);\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[i-1][5], str(id_temp)))
                                cv_env_array.append('  %s_%s_agt[i] = %s_%s_agent::type_id::create(agent_inst_name, this);\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[i-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[i-1][5]))
                                cv_env_array.append('  uvm_config_db#(int)::set(this, {agent_inst_name, "*"}, "%s_agent_id", i);\n'%(str(comp_vip_entry_name_agt)))
                                cv_env_array.append(" end\n")
                            else:
                                comp_vip_entry_name_agt = comp_vip_entry_name
                                cv_env_array.append(' %s_agt = new[%s_environment_tcfg.no_of_%s_agt];\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                                
                                cv_env_array.append(" for (int i = 0; i < %s_environment_tcfg.no_of_%s_agt; i++) begin\n"%(str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                                id_temp = "%0d"
                                cv_env_array.append('  $sformat(agent_inst_name, "%s_agt[%s], i");\n'%(str(comp_vip_entry_name), str(id_temp)))
                                cv_env_array.append('  %s_agt[i] = %s_agent::type_id::create(agent_inst_name, this);'%(str(comp_vip_entry_name), str(comp_vip_entry_name)))
                                cv_env_array.append('  uvm_config_db#(int)::set(this, {agent_inst_name, "*"}, "%s_agent_id", i);\n'%(str(comp_vip_entry_name_agt)))
                                cv_env_array.append(" end\n")
                        cv_env_array.append("\n")
                    cv_env_array.append("\n")
   
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        # Single Instance Agent
                        if not cv_agent_cfg_array[agt_loop-1][6]:
                            if (len(cv_agent_cfg_array[agt_loop-1][2]) == 1 and int(cv_agent_cfg_array[agt_loop-1][2][0]) == 1):
                                if cv_agent_cfg_array[agt_loop-1][5]:
                                    cv_env_array.append(' if (%s_environment_tcfg.%s_%s_scb_is_active) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), str(cv_agent_cfg_array[agt_loop-1][5]))) 
                                    cv_env_array.append('  %s_%s_scb = %s_%s_scoreboard::type_id::create("%s_%s_scb",this);\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5],))
                                    cv_env_array.append(' end\n')
                                else:
                                    cv_env_array.append(' if (%s_environment_tcfg.%s_scb_is_active) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name)))
                                    cv_env_array.append('  %s_scb = %s_scoreboard::type_id::create("%s_scb",this);\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), str(comp_vip_entry_name), ))
                                    cv_env_array.append(' end\n')
                                cv_env_array.append("\n")
                            elif (len(cv_agent_cfg_array[agt_loop-1][2]) > 1):
                                for scb_loop in range (1, int(cv_agent_cfg_array[agt_loop-1][2][0])+1):
                                    if cv_agent_cfg_array[agt_loop-1][5]:
                                        cv_env_array.append(' if (%s_environment_tcfg.%s_%s_%s_scb_is_active) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), str(cv_agent_cfg_array[agt_loop-1][5]), cv_agent_cfg_array[agt_loop-1][2][scb_loop]))
                                        cv_env_array.append('  %s_%s_%s_scb = %s_%s_%s_scoreboard::type_id::create("%s_%s_%s_scb",this);\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop],))
                                        cv_env_array.append(' end\n')
                                    else:
                                        cv_env_array.append(' if (%s_environment_tcfg.%s_%s_scb_is_active) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop]))
                                        cv_env_array.append('  %s_%s_scb = %s_%s_scoreboard::type_id::create("%s_%s_scb",this);\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop],))
                                        cv_env_array.append(' end\n')
                                    cv_env_array.append("\n")
                        # Multi Instance Agent
                        else:
                            if (len(cv_agent_cfg_array[agt_loop-1][2]) == 1 and int(cv_agent_cfg_array[agt_loop-1][2][0]) == 1):
                                if cv_agent_cfg_array[agt_loop-1][5]:
                                    comp_vip_entry_name_agt = comp_vip_entry_name+"_%s"%cv_agent_cfg_array[agt_loop-1][5]
                                    cv_env_array.append(' %s_%s_scb = new[%s_environment_tcfg.no_of_%s_agt];\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                                    
                                    cv_env_array.append(" for (int i = 0; i < %s_environment_tcfg.no_of_%s_agt; i++) begin\n"%(str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                                    cv_env_array.append('  if (%s_environment_tcfg.%s_%s_scb_is_active[i]) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), str(cv_agent_cfg_array[agt_loop-1][5]))) 
                                    id_temp = "%0d"
                                    cv_env_array.append('   $sformat(scb_inst_name, "%s_%s_scb[%s]", i);\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(id_temp)))
                                    cv_env_array.append('   %s_%s_scb[i] = %s_%s_scoreboard::type_id::create(scb_inst_name, this);\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5]))
                                    cv_env_array.append('  end\n')
                                    cv_env_array.append(' end\n')
                                else:
                                    comp_vip_entry_name_agt = comp_vip_entry_name
                                    cv_env_array.append(' %s_scb = new[%s_environment_tcfg.no_of_%s_agt];\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                                    
                                    cv_env_array.append(" for (int i = 0; i < %s_environment_tcfg.no_of_%s_agt; i++) begin\n"%(str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                                    cv_env_array.append('  if (%s_environment_tcfg.%s_scb_is_active[i]) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name)))
                                    id_temp = "%0d"
                                    cv_env_array.append('   $sformat(scb_inst_name, "%s_scb[%s]", i);\n'%(str(comp_vip_entry_name), str(id_temp)))
                                    cv_env_array.append('   %s_scb[i] = %s_scoreboard::type_id::create(scb_inst_name, this);\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name)))
                                    cv_env_array.append('  end\n')
                                    cv_env_array.append(' end\n')
                                cv_env_array.append("\n")
                            elif (len(cv_agent_cfg_array[agt_loop-1][2]) > 1):
                                for scb_loop in range (1, int(cv_agent_cfg_array[agt_loop-1][2][0])+1):
                                    if cv_agent_cfg_array[agt_loop-1][5]:
                                        comp_vip_entry_name_agt = comp_vip_entry_name+"_%s"%cv_agent_cfg_array[agt_loop-1][5]
                                        cv_env_array.append(' %s_%s_%s_scb = new[%s_environment_tcfg.no_of_%s_agt];\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                                        
                                        cv_env_array.append(" for (int i = 0; i < %s_environment_tcfg.no_of_%s_agt; i++) begin\n"%(str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                                        cv_env_array.append('  if (%s_environment_tcfg.%s_%s_%s_scb_is_active[i]) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), str(cv_agent_cfg_array[agt_loop-1][5]), cv_agent_cfg_array[agt_loop-1][2][scb_loop]))
                                        id_temp = "%0d"
                                        cv_env_array.append('   $sformat(scb_inst_name, "%s_%s_%s_scb[%s]", i);\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(id_temp)))
                                        cv_env_array.append('   %s_%s_%s_scb[i] = %s_%s_%s_scoreboard::type_id::create(scb_inst_name, this);\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop]))
                                        cv_env_array.append('  end\n')
                                        cv_env_array.append(' end\n')
                                    else:
                                        comp_vip_entry_name_agt = comp_vip_entry_name
                                        cv_env_array.append(' %s_%s_scb = new[%s_environment_tcfg.no_of_%s_agt];\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                                        
                                        cv_env_array.append(" for (int i = 0; i < %s_environment_tcfg.no_of_%s_agt; i++) begin\n"%(str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                                        cv_env_array.append('  if (%s_environment_tcfg.%s_%s_scb_is_active[i]) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop]))
                                        id_temp = "%0d"
                                        cv_env_array.append('   $sformat(scb_inst_name, "%s_%s_scb[%s]", i);\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(id_temp)))
                                        cv_env_array.append('   %s_%s_scb[i] = %s_%s_scoreboard::type_id::create(scb_inst_name, this);\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop]))
                                        cv_env_array.append('  end\n')
                                        cv_env_array.append(' end\n')
                                    cv_env_array.append("\n")

        

                if (env_found_config_decl == 0) and lines.startswith(" // Configure children"):
                    env_found_config_decl = 1
                if (env_found_config_decl == 1) and lines.startswith(" // --"):
                    env_found_config_decl = 0
                    for i in range (1, int(cvagt_val_loop+1)):
                        if not cv_agent_cfg_array[i-1][6]:
                            if cv_agent_cfg_array[i-1][5]: 
                                cv_env_array.append(' $sformat(agent_inst_name, "*%s_%s_agt*");\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[i-1][5]))
                                cv_env_array.append(' uvm_config_db#(%s_%s_config)::set(this, agent_inst_name, "%s_%s_config", %s_environment_tcfg.%s_%s_ecfg);\n'% \
                                (str(comp_vip_entry_name), cv_agent_cfg_array[i-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[i-1][5], str(comp_vip_entry_name),  \
                                str(comp_vip_entry_name), cv_agent_cfg_array[i-1][5]))
                            else:
                                cv_env_array.append(' $sformat(agent_inst_name, "*%s_agt*");\n'%(str(comp_vip_entry_name)))
                                cv_env_array.append(' uvm_config_db#(%s_config)::set(this, agent_inst_name, "%s_config", %s_environment_tcfg.%s_ecfg);\n'% \
                                (str(comp_vip_entry_name), str(comp_vip_entry_name), str(comp_vip_entry_name), str(comp_vip_entry_name)))
                            cv_env_array.append("\n")
                        else:
                            if cv_agent_cfg_array[i-1][5]: 
                                comp_vip_entry_name_agt = comp_vip_entry_name+"_%s"%cv_agent_cfg_array[i-1][5]
                                
                                cv_env_array.append(" for (int i = 0; i < %s_environment_tcfg.no_of_%s_agt; i++) begin\n"%(str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                                id_temp = "%0d"
                                cv_env_array.append('  $sformat(agent_inst_name, "*%s_%s_agt[%s]*", i);\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[i-1][5], str(id_temp)))
                                cv_env_array.append('  uvm_config_db#(%s_%s_config)::set(this, agent_inst_name, "%s_%s_config", %s_environment_tcfg.%s_%s_ecfg[i]);\n'% \
                                (str(comp_vip_entry_name), cv_agent_cfg_array[i-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[i-1][5], str(comp_vip_entry_name),  \
                                str(comp_vip_entry_name), cv_agent_cfg_array[i-1][5]))
                                cv_env_array.append(" end\n")
                            else:
                                comp_vip_entry_name_agt = comp_vip_entry_name
                                
                                cv_env_array.append(" for (int i = 0; i < %s_environment_tcfg.no_of_%s_agt; i++) begin\n"%(str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                                id_temp = "%0d"
                                cv_env_array.append('  $sformat(agent_inst_name, "*%s_agt[%s]*", i);\n'%(str(comp_vip_entry_name), str(id_temp)))
                                cv_env_array.append('  uvm_config_db#(%s_config)::set(this, agent_inst_name, "%s_config", %s_environment_tcfg.%s_ecfg[%s]);\n'% \
                                (str(comp_vip_entry_name), str(comp_vip_entry_name), str(comp_vip_entry_name), str(comp_vip_entry_name)))
                                cv_env_array.append(" end\n")
                            cv_env_array.append("\n")
                    cv_env_array.append("\n")

                if (env_found_conn_anaport == 0) and lines.startswith(" // Connect Analysis Port"):
                    env_found_conn_anaport = 1
                if (env_found_conn_anaport == 1) and lines.startswith(" // --"):
                    env_found_conn_anaport = 0
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        # Single Instance
                        if not cv_agent_cfg_array[agt_loop-1][6]:
                            if (len(cv_agent_cfg_array[agt_loop-1][2]) == 1 and int(cv_agent_cfg_array[agt_loop-1][2][0]) == 1):
                                if (len(cv_agent_cfg_array[agt_loop-1][1]) == 1 and int(cv_agent_cfg_array[agt_loop-1][1][0]) == 1):
                                    if cv_agent_cfg_array[agt_loop-1][5]:
                                        cv_env_array.append(' if (%s_environment_tcfg.%s_%s_scb_is_active) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), str(cv_agent_cfg_array[agt_loop-1][5]))) 
                                        cv_env_array.append('  %s_%s_agt.%s_%s_monr.%s_%s_monitor_analysis_port.connect(%s_%s_scb.%s_%s_scoreboard_analysis_export);\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5],))
                                        cv_env_array.append(' end\n')
                                    else:
                                        cv_env_array.append(' if (%s_environment_tcfg.%s_scb_is_active) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name)))
                                        cv_env_array.append('  %s_agt.%s_monr.%s_monitor_analysis_port.connect(%s_scb.%s_scoreboard_analysis_export);\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), str(comp_vip_entry_name), str(comp_vip_entry_name), str(comp_vip_entry_name), ))
                                        cv_env_array.append(' end\n')
                                    cv_env_array.append("\n")
                                elif (len(cv_agent_cfg_array[agt_loop-1][1]) > 1):
                                    for mon_loop in range (1, int(cv_agent_cfg_array[agt_loop-1][1][0])+1):
                                        if cv_agent_cfg_array[agt_loop-1][5]:
                                            if (mon_loop == 1): cv_env_array.append(' if (%s_environment_tcfg.%s_%s_scb_is_active) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), str(cv_agent_cfg_array[agt_loop-1][5]))) 
                                            if (mon_loop == int(cv_agent_cfg_array[agt_loop-1][1][0])):cv_env_array.append('  %s_%s_agt.%s_%s_%s_monr.%s_%s_%s_monitor_analysis_port.connect(%s_%s_scb.%s_%s_scoreboard_%s_analysis_export);\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][mon_loop],))
                                            else: cv_env_array.append('  %s_%s_agt.%s_%s_%s_monr.%s_%s_%s_monitor_analysis_port.connect(%s_%s_scb.%s_%s_scoreboard_%s_analysis_export);'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][mon_loop],))
                                            if (mon_loop == int(cv_agent_cfg_array[agt_loop-1][1][0])): cv_env_array.append(' end\n')
                                        else:
                                            if (mon_loop == 1): cv_env_array.append(' if (%s_environment_tcfg.%s_scb_is_active) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name)))
                                            if (mon_loop == int(cv_agent_cfg_array[agt_loop-1][1][0])): cv_env_array.append('  %s_agt.%s_%s_monr.%s_%s_monitor_analysis_port.connect(%s_scb.%s_scoreboard_%s_analysis_export);\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][mon_loop],))
                                            else: cv_env_array.append('  %s_agt.%s_%s_monr.%s_%s_monitor_analysis_port.connect(%s_scb.%s_scoreboard_%s_analysis_export);'%(str(comp_vip_entry_name), str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][mon_loop],))
                                            if (mon_loop == int(cv_agent_cfg_array[agt_loop-1][1][0])): cv_env_array.append(' end\n')
                                        cv_env_array.append("\n")
                                    cv_env_array.append("\n")
                            elif (len(cv_agent_cfg_array[agt_loop-1][2]) > 1):
                                for scb_loop in range (1, int(cv_agent_cfg_array[agt_loop-1][2][0])+1):
                                    if (len(cv_agent_cfg_array[agt_loop-1][1]) == 1 and int(cv_agent_cfg_array[agt_loop-1][1][0]) == 1):
                                        if cv_agent_cfg_array[agt_loop-1][5]:
                                            cv_env_array.append(' if (%s_environment_tcfg.%s_%s_%s_scb_is_active) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), str(cv_agent_cfg_array[agt_loop-1][5]), cv_agent_cfg_array[agt_loop-1][2][scb_loop])) 
                                            cv_env_array.append('  %s_%s_agt.%s_%s_monr.%s_%s_monitor_analysis_port.connect(%s_%s_%s_scb.%s_%s_%s_scoreboard_analysis_export);'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop],))
                                            cv_env_array.append(' end\n')
                                        else:
                                            cv_env_array.append(' if (%s_environment_tcfg.%s_%s_scb_is_active) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop])) 
                                            cv_env_array.append('  %s_agt.%s_monr.%s_monitor_analysis_port.connect(%s_%s_scb.%s_%s_scoreboard_analysis_export);'%(str(comp_vip_entry_name), str(comp_vip_entry_name), str(comp_vip_entry_name), str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop],))
                                            cv_env_array.append(' end\n')
                                        cv_env_array.append("\n")
                                    elif (len(cv_agent_cfg_array[agt_loop-1][1]) > 1):
                                        for mon_loop in range (1, int(cv_agent_cfg_array[agt_loop-1][1][0])+1):
                                            if cv_agent_cfg_array[agt_loop-1][5]:
                                                if (mon_loop == 1): cv_env_array.append(' if (%s_environment_tcfg.%s_%s_%s_scb_is_active) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), str(cv_agent_cfg_array[agt_loop-1][5]), cv_agent_cfg_array[agt_loop-1][2][scb_loop])) 
                                                if (mon_loop == int(cv_agent_cfg_array[agt_loop-1][1][0])): cv_env_array.append('  %s_%s_agt.%s_%s_%s_monr.%s_%s_%s_monitor_analysis_port.connect(%s_%s_%s_scb.%s_%s_%s_scoreboard_%s_analysis_export);\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop], cv_agent_cfg_array[agt_loop-1][1][mon_loop],))
                                                else: cv_env_array.append('  %s_%s_agt.%s_%s_%s_monr.%s_%s_%s_monitor_analysis_port.connect(%s_%s_%s_scb.%s_%s_%s_scoreboard_%s_analysis_export);'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop], cv_agent_cfg_array[agt_loop-1][1][mon_loop],))
                                                if (mon_loop == int(cv_agent_cfg_array[agt_loop-1][1][0])): cv_env_array.append(' end\n')
                                            else:
                                                if (mon_loop == 1): cv_env_array.append(' if (%s_environment_tcfg.%s_%s_scb_is_active) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop])) 
                                                if (mon_loop == int(cv_agent_cfg_array[agt_loop-1][1][0])): cv_env_array.append('  %s_agt.%s_%s_monr.%s_%s_monitor_analysis_port.connect(%s_%s_scb.%s_%s_scoreboard_%s_analysis_export);\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop], cv_agent_cfg_array[agt_loop-1][1][mon_loop],))
                                                else: cv_env_array.append('  %s_agt.%s_%s_monr.%s_%s_monitor_analysis_port.connect(%s_%s_scb.%s_%s_scoreboard_%s_analysis_export);'%(str(comp_vip_entry_name), str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop], cv_agent_cfg_array[agt_loop-1][1][mon_loop],))
                                                if (mon_loop == int(cv_agent_cfg_array[agt_loop-1][1][0])): cv_env_array.append(' end\n')
                                            cv_env_array.append("\n")
                                        cv_env_array.append("\n")
                        # Multi Instance
                        else:
                            if (len(cv_agent_cfg_array[agt_loop-1][2]) == 1 and int(cv_agent_cfg_array[agt_loop-1][2][0]) == 1):
                                if (len(cv_agent_cfg_array[agt_loop-1][1]) == 1 and int(cv_agent_cfg_array[agt_loop-1][1][0]) == 1):
                                    if cv_agent_cfg_array[agt_loop-1][5]:
                                        comp_vip_entry_name_agt = comp_vip_entry_name+"_%s"%cv_agent_cfg_array[agt_loop-1][5]
                                        
                                        cv_env_array.append(" for (int i = 0; i < %s_environment_tcfg.no_of_%s_agt; i++) begin\n"%(str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                                        cv_env_array.append('  if (%s_environment_tcfg.%s_%s_scb_is_active[i]) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), str(cv_agent_cfg_array[agt_loop-1][5]))) 
                                        cv_env_array.append('   %s_%s_agt[i].%s_%s_monr.%s_%s_monitor_analysis_port.connect(%s_%s_scb[i].%s_%s_scoreboard_analysis_export);\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5],))
                                        cv_env_array.append('  end\n')
                                        cv_env_array.append(' end\n')
                                    else:
                                        comp_vip_entry_name_agt = comp_vip_entry_name
                                        
                                        cv_env_array.append(" for (int i = 0; i < %s_environment_tcfg.no_of_%s_agt; i++) begin\n"%(str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                                        cv_env_array.append('  if (%s_environment_tcfg.%s_scb_is_active[i]) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name)))
                                        cv_env_array.append('   %s_agt[i].%s_monr.%s_monitor_analysis_port.connect(%s_scb[i].%s_scoreboard_analysis_export);\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), str(comp_vip_entry_name), str(comp_vip_entry_name), str(comp_vip_entry_name), ))
                                        cv_env_array.append('  end\n')
                                        cv_env_array.append(' end\n')
                                    cv_env_array.append("\n")
                                elif (len(cv_agent_cfg_array[agt_loop-1][1]) > 1):
                                    for mon_loop in range (1, int(cv_agent_cfg_array[agt_loop-1][1][0])+1):
                                        if cv_agent_cfg_array[agt_loop-1][5]:
                                            comp_vip_entry_name_agt = comp_vip_entry_name+"_%s"%cv_agent_cfg_array[agt_loop-1][5]
                                            
                                            if (mon_loop == 1): cv_env_array.append(" for (int i = 0; i < %s_environment_tcfg.no_of_%s_agt; i++) begin\n"%(str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                                            if (mon_loop == 1): cv_env_array.append('  if (%s_environment_tcfg.%s_%s_scb_is_active[i]) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), str(cv_agent_cfg_array[agt_loop-1][5]))) 
                                            if (mon_loop == int(cv_agent_cfg_array[agt_loop-1][1][0])):cv_env_array.append('   %s_%s_agt[i].%s_%s_%s_monr.%s_%s_%s_monitor_analysis_port.connect(%s_%s_scb[i].%s_%s_scoreboard_%s_analysis_export);\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][mon_loop],))
                                            else: cv_env_array.append('   %s_%s_agt[i].%s_%s_%s_monr.%s_%s_%s_monitor_analysis_port.connect(%s_%s_scb[i].%s_%s_scoreboard_%s_analysis_export);'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][mon_loop],))
                                            if (mon_loop == int(cv_agent_cfg_array[agt_loop-1][1][0])): cv_env_array.append('  end\n')
                                            if (mon_loop == int(cv_agent_cfg_array[agt_loop-1][1][0])): cv_env_array.append(' end\n')
                                        else:
                                            comp_vip_entry_name_agt = comp_vip_entry_name
                                            
                                            if (mon_loop == 1): cv_env_array.append(" for (int i = 0; i < %s_environment_tcfg.no_of_%s_agt; i++) begin\n"%(str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                                            if (mon_loop == 1): cv_env_array.append('  if (%s_environment_tcfg.%s_scb_is_active[i]) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name)))
                                            if (mon_loop == int(cv_agent_cfg_array[agt_loop-1][1][0])): cv_env_array.append('   %s_agt[i].%s_%s_monr.%s_%s_monitor_analysis_port.connect(%s_scb[i].%s_scoreboard_%s_analysis_export);\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][mon_loop],))
                                            else: cv_env_array.append('   %s_agt[i].%s_%s_monr.%s_%s_monitor_analysis_port.connect(%s_scb[i].%s_scoreboard_%s_analysis_export);'%(str(comp_vip_entry_name), str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][mon_loop],))
                                            if (mon_loop == int(cv_agent_cfg_array[agt_loop-1][1][0])): cv_env_array.append('  end\n')
                                            if (mon_loop == int(cv_agent_cfg_array[agt_loop-1][1][0])): cv_env_array.append(' end\n')
                                        cv_env_array.append("\n")
                                    cv_env_array.append("\n")
                            elif (len(cv_agent_cfg_array[agt_loop-1][2]) > 1):
                                for scb_loop in range (1, int(cv_agent_cfg_array[agt_loop-1][2][0])+1):
                                    if (len(cv_agent_cfg_array[agt_loop-1][1]) == 1 and int(cv_agent_cfg_array[agt_loop-1][1][0]) == 1):
                                        if cv_agent_cfg_array[agt_loop-1][5]:
                                            comp_vip_entry_name_agt = comp_vip_entry_name+"_%s"%cv_agent_cfg_array[agt_loop-1][5]
                                            
                                            cv_env_array.append(" for (int i = 0; i < %s_environment_tcfg.no_of_%s_agt; i++) begin\n"%(str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                                            cv_env_array.append('  if (%s_environment_tcfg.%s_%s_%s_scb_is_active[i]) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), str(cv_agent_cfg_array[agt_loop-1][5]), cv_agent_cfg_array[agt_loop-1][2][scb_loop])) 
                                            cv_env_array.append('   %s_%s_agt[i].%s_%s_monr.%s_%s_monitor_analysis_port.connect(%s_%s_%s_scb[i].%s_%s_%s_scoreboard_analysis_export);\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop],))
                                            cv_env_array.append('  end\n')
                                            cv_env_array.append(' end\n')
                                        else:
                                            comp_vip_entry_name_agt = comp_vip_entry_name
                                            
                                            cv_env_array.append(" for (int i = 0; i < %s_environment_tcfg.no_of_%s_agt; i++) begin\n"%(str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                                            cv_env_array.append('  if (%s_environment_tcfg.%s_%s_scb_is_active[i]) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop])) 
                                            cv_env_array.append('   %s_agt[i].%s_monr.%s_monitor_analysis_port.connect(%s_%s_scb[i].%s_%s_scoreboard_analysis_export);\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), str(comp_vip_entry_name), str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop],))
                                            cv_env_array.append('  end\n')
                                            cv_env_array.append(' end\n')
                                        cv_env_array.append("\n")
                                    elif (len(cv_agent_cfg_array[agt_loop-1][1]) > 1):
                                        for mon_loop in range (1, int(cv_agent_cfg_array[agt_loop-1][1][0])+1):
                                            if cv_agent_cfg_array[agt_loop-1][5]:
                                                comp_vip_entry_name_agt = comp_vip_entry_name+"_%s"%cv_agent_cfg_array[agt_loop-1][5]
                                                
                                                if (mon_loop == 1): cv_env_array.append(" for (int i = 0; i < %s_environment_tcfg.no_of_%s_agt; i++) begin\n"%(str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                                                if (mon_loop == 1): cv_env_array.append('  if (%s_environment_tcfg.%s_%s_%s_scb_is_active[i]) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), str(cv_agent_cfg_array[agt_loop-1][5]), cv_agent_cfg_array[agt_loop-1][2][scb_loop])) 
                                                if (mon_loop == int(cv_agent_cfg_array[agt_loop-1][1][0])): cv_env_array.append('   %s_%s_agt[i].%s_%s_%s_monr.%s_%s_%s_monitor_analysis_port.connect(%s_%s_%s_scb[i].%s_%s_%s_scoreboard_%s_analysis_export);\n'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop], cv_agent_cfg_array[agt_loop-1][1][mon_loop],))
                                                else: cv_env_array.append('   %s_%s_agt[i].%s_%s_%s_monr.%s_%s_%s_monitor_analysis_port.connect(%s_%s_%s_scb[i].%s_%s_%s_scoreboard_%s_analysis_export);'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][scb_loop], cv_agent_cfg_array[agt_loop-1][1][mon_loop],))
                                                if (mon_loop == int(cv_agent_cfg_array[agt_loop-1][1][0])): cv_env_array.append('  end\n')
                                                if (mon_loop == int(cv_agent_cfg_array[agt_loop-1][1][0])): cv_env_array.append(' end\n')
                                            else:
                                                comp_vip_entry_name_agt = comp_vip_entry_name
                                                
                                                if (mon_loop == 1): cv_env_array.append(" for (int i = 0; i < %s_environment_tcfg.no_of_%s_agt; i++) begin\n"%(str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                                                if (mon_loop == 1): cv_env_array.append('  if (%s_environment_tcfg.%s_%s_scb_is_active[i]) begin\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop])) 
                                                if (mon_loop == int(cv_agent_cfg_array[agt_loop-1][1][0])): cv_env_array.append('   %s_agt[i].%s_%s_monr.%s_%s_monitor_analysis_port.connect(%s_%s_scb[i].%s_%s_scoreboard_%s_analysis_export);\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop], cv_agent_cfg_array[agt_loop-1][1][mon_loop],))
                                                else: cv_env_array.append('   %s_agt[i].%s_%s_monr.%s_%s_monitor_analysis_port.connect(%s_%s_scb[i].%s_%s_scoreboard_%s_analysis_export);'%(str(comp_vip_entry_name), str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][mon_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop], str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][scb_loop], cv_agent_cfg_array[agt_loop-1][1][mon_loop],))
                                                if (mon_loop == int(cv_agent_cfg_array[agt_loop-1][1][0])): cv_env_array.append('  end\n')
                                                if (mon_loop == int(cv_agent_cfg_array[agt_loop-1][1][0])): cv_env_array.append(' end\n')
                                            cv_env_array.append("\n")
                                        cv_env_array.append("\n")

            cv_env_input_file = open("%s_environment.sv" % (str(self.cve1.get())), "w")
            for lines in cv_env_array:
                cv_env_input_file.write(lines)
            cv_env_input_file.close()
            
            
            #------------------------------------------------------------------------------------------- 
            # Code For Updating The Environment Config Files 
            #------------------------------------------------------------------------------------------- 
            
            cv_env_cfg_array = []
            cv_env_cfg_input_file = open("%s_environment_config.sv" % (str(self.cve1.get())), "r+")
            
            for lines in cv_env_cfg_input_file:
                cv_env_cfg_array.append(lines)
                
                if (env_data_mem_found_1 == 0) and lines.startswith(" // Data Members"):
                    env_data_mem_found_1 = 1
                if (env_data_mem_found_1 == 1) and lines.startswith(" //-"):
                    env_data_mem_found_1 = 0
                
                    cv_env_cfg_array.append(' string config_inst_name;\n')
                    cv_env_cfg_array.append("\n")

                # if lines.startswith(" rand uvm_active_passive_enum"):
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        # Forming Agnt Name
                        comp_vip_entry_name_agt = self.cve1.get()
                        if cv_agent_cfg_array[agt_loop-1][5]:
                            comp_vip_entry_name_agt = comp_vip_entry_name_agt+"_%s"%cv_agent_cfg_array[agt_loop-1][5]    
                        log.debug("1 Name of the agent is %s"% cv_agent_cfg_array[agt_loop-1][5])
                        log.debug("1 Name of the agent is %s"% comp_vip_entry_name_agt )

                        # For N-Agt : Adding ID : 090218|SUN
                        if cv_agent_cfg_array[agt_loop-1][6]:
                            cv_env_cfg_array.append(" rand int unsigned  no_of_%s_agt;\n"%(comp_vip_entry_name_agt))
                    
                        # Adding Space
                        # cv_env_cfg_array.append("\n")
                        
                        for scb_loop in range (1, int(cv_agent_cfg_array[agt_loop-1][2][0])+1):
                            log.debug("Value of cv_agent_cfg_array - gen scb - 1 %s"% cv_agent_cfg_array[agt_loop-1][2])
                            if (len(cv_agent_cfg_array[agt_loop-1][2]) > 1):
                                comp_vip_entry_name_scb = comp_vip_entry_name_agt+"_%s"%cv_agent_cfg_array[agt_loop-1][2][scb_loop]    
                                log.debug("Value of cv_agent_cfg_array - gen scb %s"% cv_agent_cfg_array[agt_loop-1][2][scb_loop])
                            else:
                                comp_vip_entry_name_scb = comp_vip_entry_name_agt
                            log.debug("Value of cv_agent_cfg_array - gen scb %s"% cv_agent_cfg_array)
                            
                            if not cv_agent_cfg_array[agt_loop-1][6]:
                                cv_env_cfg_array.append(' rand uvm_active_passive_enum %s_scb_is_active = UVM_ACTIVE;\n'%(str(comp_vip_entry_name_scb)))
                            else:
                                cv_env_cfg_array.append(' rand uvm_active_passive_enum %s_scb_is_active[];\n'%(str(comp_vip_entry_name_scb)))

                        # Adding Space
                        cv_env_cfg_array.append("\n")
            
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        comp_vip_entry_name_agt = self.cve1.get()
                        
                        if cv_agent_cfg_array[agt_loop-1][5]:
                            comp_vip_entry_name_agt = comp_vip_entry_name_agt+"_%s"%cv_agent_cfg_array[agt_loop-1][5]    
                            
                        if not cv_agent_cfg_array[agt_loop-1][6]:
                            cv_env_cfg_array.append(" %s_config     %s_ecfg;\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                        else:
                            cv_env_cfg_array.append(" %s_config     %s_ecfg[];\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                    
                    # Adding Space
                    cv_env_cfg_array.append("\n")

                # Moving common config above : 090218|SUN
                # if lines.startswith("function %s_environment_config::new"%(str(self.cve1.get()))):
                #     cv_env_cfg_array.append(' string config_inst_name;\n')
                
                if (env_udapi_found == 0) and lines.startswith(" // User Defined APIs"):
                    env_udapi_found = 1
                if (env_udapi_found == 1) and lines.startswith(" // --"):
                    env_udapi_found = 0
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        comp_vip_entry_name_agt = self.cve1.get()
                        if cv_agent_cfg_array[agt_loop-1][5]:
                            comp_vip_entry_name_agt = comp_vip_entry_name_agt+"_%s"%cv_agent_cfg_array[agt_loop-1][5]    
                        if cv_agent_cfg_array[agt_loop-1][6]:
                            cv_env_cfg_array.append(" extern virtual function void  configure_%s_agt(int unsigned num_agts);\n"%(str(comp_vip_entry_name_agt)))    

                # For N-Agt : Adding ID : 090218|SUN
                if (env_cfg_add_fld_decl == 0) and lines.startswith("  // Add field configurations"):
                    env_cfg_add_fld_decl = 1
                if (env_cfg_add_fld_decl == 1) and lines.startswith("  // --"):
                    env_cfg_add_fld_decl = 0
                    
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        comp_vip_entry_name_agt = self.cve1.get()
                        if cv_agent_cfg_array[agt_loop-1][5]:
                            comp_vip_entry_name_agt = comp_vip_entry_name_agt+"_%s"%cv_agent_cfg_array[agt_loop-1][5]    
                        log.debug("1 Name of the agent is %s"% cv_agent_cfg_array[agt_loop-1][5])
                        log.debug("1 Name of the agent is %s"% comp_vip_entry_name_agt )
                        if cv_agent_cfg_array[agt_loop-1][6]:
                            cv_env_cfg_array.append("  `uvm_field_int(no_of_%s_agt, UVM_ALL_ON)\n"%(comp_vip_entry_name_agt))
                
                if (env_get_cfg_found == 0) and lines.startswith(" // Get configuration"):
                    env_get_cfg_found = 1
                if (env_get_cfg_found == 1) and lines.startswith(" // --"):
                    env_get_cfg_found = 0
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        comp_vip_entry_name_agt = self.cve1.get()
                        if cv_agent_cfg_array[agt_loop-1][5]:
                            comp_vip_entry_name_agt = comp_vip_entry_name_agt+"_%s"%cv_agent_cfg_array[agt_loop-1][5]    
                        
                        if cv_agent_cfg_array[agt_loop-1][6]:
                            cv_env_cfg_array.append(' if (!uvm_config_db#(int)::get(uvm_root::get(), "*", "no_of_%s_agt", no_of_%s_agt))\n'%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                            cv_env_cfg_array.append(" begin\n")
                            cv_env_cfg_array.append('  `uvm_warning(get_type_name(), "no_of_%s_agt setting is not found in config_db! Setting default value of 1");\n'%str(comp_vip_entry_name_agt))
                            cv_env_cfg_array.append("   no_of_%s_agt = 1;\n"%str(comp_vip_entry_name_agt))
                            cv_env_cfg_array.append("   configure_%s_agt(no_of_%s_agt);\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                            cv_env_cfg_array.append(" end\n")
                            cv_env_cfg_array.append(" else begin\n")
                            cv_env_cfg_array.append("   configure_%s_agt(no_of_%s_agt);\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                            cv_env_cfg_array.append(" end\n")
                            
                            # Adding Space
                            cv_env_cfg_array.append("\n")
                        
                        
                if (env_cfg_found_1 == 0) and lines.startswith(" // Configure children"):
                    env_cfg_found_1 = 1
                if (env_cfg_found_1 == 1) and lines.startswith(" // --"):
                    env_cfg_found_1 = 0

                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        comp_vip_entry_name_agt = self.cve1.get()
                        
                        if cv_agent_cfg_array[agt_loop-1][5]:
                            comp_vip_entry_name_agt = comp_vip_entry_name_agt+"_%s"%cv_agent_cfg_array[agt_loop-1][5]    

                        if not cv_agent_cfg_array[agt_loop-1][6]:
                            cv_env_cfg_array.append(' $sformat(config_inst_name, "%s_ecfg");\n'%(str(comp_vip_entry_name_agt)))
                            cv_env_cfg_array.append(' %s_ecfg = %s_config::type_id::create(config_inst_name);\n'%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                        
                        
                if lines.startswith("endfunction: new"):
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        comp_vip_entry_name_agt = self.cve1.get()
                        
                        if cv_agent_cfg_array[agt_loop-1][5]:
                            comp_vip_entry_name_agt = comp_vip_entry_name_agt+"_%s"%cv_agent_cfg_array[agt_loop-1][5]    

                        if  cv_agent_cfg_array[agt_loop-1][6]:
                            cv_env_cfg_array.append("\n") 
                            cv_env_cfg_array.append("\n") 
                            cv_env_cfg_array.append("//---------------------------------------------------------------\n")
                            cv_env_cfg_array.append("// Class Name               : %s_environment_config\n"%(str(comp_vip_entry_name))) 
                            cv_env_cfg_array.append("// Function Name            : configure_%s_agt\n"%str(comp_vip_entry_name_agt)) 
                            cv_env_cfg_array.append("// Function Description     : \n")
                            cv_env_cfg_array.append("//---------------------------------------------------------------\n")
                            cv_env_cfg_array.append("\n")
                            cv_env_cfg_array.append("function void %s_environment_config::configure_%s_agt(int unsigned num_agts);\n"%(str(comp_vip_entry_name), str(comp_vip_entry_name_agt)))
                            
                            cv_env_cfg_array.append(" // Get The Number Of Agents\n") 
                            cv_env_cfg_array.append(" no_of_%s_agt = num_agts;\n"%str(comp_vip_entry_name_agt))
                            cv_env_cfg_array.append("\n")
                        
                            for scb_loop in range (1, int(cv_agent_cfg_array[agt_loop-1][2][0])+1):
                                log.debug("Value of cv_agent_cfg_array - gen scb - 1 %s"% cv_agent_cfg_array[agt_loop-1][2])
                                if (len(cv_agent_cfg_array[agt_loop-1][2]) > 1):
                                    comp_vip_entry_name_scb = comp_vip_entry_name_agt+"_%s"%cv_agent_cfg_array[agt_loop-1][2][scb_loop]    
                                    log.debug("Value of cv_agent_cfg_array - gen scb %s"% cv_agent_cfg_array[agt_loop-1][2][scb_loop])
                                else:
                                    comp_vip_entry_name_scb = comp_vip_entry_name_agt
                                log.debug("Value of cv_agent_cfg_array - gen scb %s"% cv_agent_cfg_array)
                                cv_env_cfg_array.append(" // Create The Required Number of %s Scoreboard Enable/Disable Knob!\n"%(str(comp_vip_entry_name_scb)))
                                cv_env_cfg_array.append(' %s_scb_is_active = new[no_of_%s_agt];\n'%(str(comp_vip_entry_name_scb), str(comp_vip_entry_name_agt)))
                                cv_env_cfg_array.append("\n")
                            
                                cv_env_cfg_array.append(" // Configure the %s Scoreboard Configurations\n"%(str(comp_vip_entry_name_scb)))
                                cv_env_cfg_array.append(" for (int i = 0; i < no_of_%s_agt; i++) begin\n"%(str(comp_vip_entry_name_agt)))
                                cv_env_cfg_array.append("  %s_scb_is_active[i] = UVM_ACTIVE;\n"%(str(comp_vip_entry_name_scb)))
                                cv_env_cfg_array.append(" end\n")
                                cv_env_cfg_array.append("\n")
                            
                            # Adding Space
                            cv_env_cfg_array.append("\n")
                            
                            cv_env_cfg_array.append(" // Create The Required Number of %s Agent Configurations\n"%(str(comp_vip_entry_name_agt)))
                            cv_env_cfg_array.append(" %s_ecfg = new[no_of_%s_agt];\n"%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                            cv_env_cfg_array.append("\n")
                            
                            cv_env_cfg_array.append(" // Configure the %s Agent Configurations\n"%(str(comp_vip_entry_name_agt)))
                            cv_env_cfg_array.append(" for (int i = 0; i < no_of_%s_agt; i++) begin\n"%(str(comp_vip_entry_name_agt)))
                            id_temp = "%0d"
                            cv_env_cfg_array.append('  $sformat(config_inst_name, "%s_ecfg[%s]", i);\n'%(str(comp_vip_entry_name_agt), str(id_temp)))
                            cv_env_cfg_array.append('  %s_ecfg[i] = %s_config::type_id::create(config_inst_name);\n'%(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))
                            cv_env_cfg_array.append(" end\n")
                            cv_env_cfg_array.append("endfunction: configure_%s_agt\n"%str(comp_vip_entry_name_agt)) 

            
            cv_env_cfg_input_file = open("%s_environment_config.sv" % (str(self.cve1.get())), "w")
            for lines in cv_env_cfg_array:
                cv_env_cfg_input_file.write(lines)
            cv_env_cfg_input_file.close()
            
            
            #------------------------------------------------------------------------------------------- 
            # Code For Updating The Base Test Files
            #------------------------------------------------------------------------------------------- 
            
            os.system('$PROJ_ROOT/.bin/generate_test.csh  %s %s' % (str(comp_vip_entry_name), str(comp_vip_entry_name_pkg),))
          
            comp_vip_entry_name_tst = self.cve1.get()
            cv_tst_array = []
            cv_tst_input_file = open("%s_test.sv" % (str(comp_vip_entry_name_tst)), "r+")
            
            comp_vip_entry_name_env = self.cve1.get()
            for lines in cv_tst_input_file:
                cv_tst_array.append(lines)
                
                if (intf_found_in_tst == 0) and lines.startswith(" // Interface Instantiation"):
                    intf_found_in_tst = 1
                if (intf_found_in_tst == 1) and lines.startswith(" //-"):
                    intf_found_in_tst = 0
                    # Creating Complete VIP Objects & Components 
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        comp_vip_entry_name_agt = self.cve1.get()
                        
                        if cv_agent_cfg_array[agt_loop-1][5]:
                            comp_vip_entry_name_agt = comp_vip_entry_name_agt+"_%s"%cv_agent_cfg_array[agt_loop-1][5]    

                        if cv_agt_selected_started:
                            cv_num_of_intf = len(cv_interface_pkg[agt_loop-1])
                        else:
                            cv_num_of_intf = 1 

                        for i in range (cv_num_of_intf):
                            if cv_interface_pkg[agt_loop-1][i][0] != str(cv_agent_cfg_array[agt_loop-1][5]):
                                cv_what_name = str(comp_vip_entry_name_agt)+'_'+cv_interface_pkg[agt_loop-1][i][0]
                            else:
                                cv_what_name = comp_vip_entry_name_agt 
                            
                            cv_tst_array.append(' virtual %s_interface     %s_vif;'%(str(cv_what_name), str(cv_what_name)))
                            cv_tst_array.append("\n")
                
                if (cfg_found_in_tst == 0) and lines.startswith(" // Configuration Instantiation"):
                    cfg_found_in_tst = 1
                if (cfg_found_in_tst == 1) and lines.startswith(" //-"):
                    cfg_found_in_tst = 0
                    cv_tst_array.append(' %s_environment_config     %s_environment_tcfg;'%(str(comp_vip_entry_name_env),str(comp_vip_entry_name_env)))
                    cv_tst_array.append("\n")
                
                if (tst_found_comp_decl == 0) and lines.startswith(" // Component Declaration"):
                    tst_found_comp_decl = 1
                if (tst_found_comp_decl == 1) and lines.startswith(" //-"):
                    tst_found_comp_decl = 0
                    cv_tst_array.append(' %s_environment    %s_env;'%(str(comp_vip_entry_name_tst), str(comp_vip_entry_name_tst)))
                    cv_tst_array.append("\n")
                
                if (ccc_found_in_tst == 0) and lines.startswith(" // Construct Components and Configuration"):
                    ccc_found_in_tst = 1
                if (ccc_found_in_tst == 1) and lines.startswith(" // -"):
                    ccc_found_in_tst = 0
                    cv_tst_array.append(' %s_env = %s_environment::type_id::create("%s_env", this);\n'%(str(comp_vip_entry_name_tst), str(comp_vip_entry_name_tst), str(comp_vip_entry_name_tst)))
                    cv_tst_array.append(' %s_environment_tcfg = %s_environment_config::type_id::create("%s_environment_tcfg", this);\n'%(str(comp_vip_entry_name_tst), str(comp_vip_entry_name_tst), str(comp_vip_entry_name_tst)))
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        if cv_agent_cfg_array[agt_loop-1][6]:
                            cv_tst_array.append(' // Note: If the user is importing this package and using in their environment then user can configure the Number Of Agents\n') 
                            cv_tst_array.append(' // Required by Calling the function provided in the environment config file and provide the number of agents required.\n')
                            break
                    cv_tst_array.append("\n")

                # Changed to : Only If Single Instance Agent. For Multi Instance Moving It down : 090318|MON
                if (tst_found_get_cfg_decl == 0) and lines.startswith(" // Get configuration"):
                    tst_found_get_cfg_decl = 1
                if (tst_found_get_cfg_decl == 1) and lines.startswith(" // --"):
                    tst_found_get_cfg_decl = 0
                    
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        comp_vip_entry_name_agt = self.cve1.get()
                        
                        if cv_agent_cfg_array[agt_loop-1][5]:
                            comp_vip_entry_name_agt = comp_vip_entry_name_agt+"_%s"%cv_agent_cfg_array[agt_loop-1][5]    

                        if cv_agt_selected_started:
                            cv_num_of_intf = len(cv_interface_pkg[agt_loop-1])
                        else:
                            cv_num_of_intf = 1 

                        for i in range (cv_num_of_intf):
                            if cv_interface_pkg[agt_loop-1][i][0] != str(cv_agent_cfg_array[agt_loop-1][5]):
                                cv_what_name = str(comp_vip_entry_name_agt)+'_'+cv_interface_pkg[agt_loop-1][i][0]
                            else:
                                cv_what_name = comp_vip_entry_name_agt 
                
                            if not cv_agent_cfg_array[agt_loop-1][6]:
                                cv_tst_array.append(' if (!uvm_config_db#(virtual %s_interface)::get(.cntxt(this), .inst_name("*"), .field_name("%s_vif"), .value(%s_vif))) begin\n'%(str(cv_what_name),\
                                                      str(cv_what_name), str(cv_what_name)))
                                cv_tst_array.append('  `uvm_error(get_type_name(), "%s_interface instance is not found in config_db!");\n'%(str(cv_what_name)))
                                cv_tst_array.append(' end\n')
                            else:
                                cv_tst_array.append(" for (int i = 0; i < %s_environment_tcfg.no_of_%s_agt; i++) begin\n"%(str(comp_vip_entry_name_env), str(comp_vip_entry_name_agt)))
                                id_temp = "%0d"
                                cv_tst_array.append('  if (!uvm_config_db#(virtual %s_interface)::get(.cntxt(this), .inst_name("*"), .field_name($sformatf("%s_vif_%s", i)), .value(%s_vif))) begin\n'%(str(cv_what_name),\
                                                      str(cv_what_name), str(id_temp), str(cv_what_name)))
                                cv_tst_array.append('   `uvm_error(get_type_name(), "%s_interface instance is not found in config_db!");\n'%(str(cv_what_name)))
                                cv_tst_array.append('  end\n')
                                cv_tst_array.append(' end\n')
                        cv_tst_array.append("\n")
                
                if (tst_found_cfg_chd == 0) and lines.startswith(" // Configure children"):
                    tst_found_cfg_chd = 1
                if (tst_found_cfg_chd == 1) and lines.startswith(" // --"):
                    tst_found_cfg_chd = 0
                    
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        comp_vip_entry_name_agt = self.cve1.get()
                        
                        if cv_agent_cfg_array[agt_loop-1][5]:
                            comp_vip_entry_name_agt = comp_vip_entry_name_agt+"_%s"%cv_agent_cfg_array[agt_loop-1][5]    

                        if cv_agt_selected_started:
                            cv_num_of_intf = len(cv_interface_pkg[agt_loop-1])
                        else:
                            cv_num_of_intf = 1 

                        for i in range (cv_num_of_intf):
                            if cv_interface_pkg[agt_loop-1][i][0] != str(cv_agent_cfg_array[agt_loop-1][5]):
                                cv_what_name = str(comp_vip_entry_name_agt)+'_'+cv_interface_pkg[agt_loop-1][i][0]
                            else:
                                cv_what_name = comp_vip_entry_name_agt 

                            if not cv_agent_cfg_array[agt_loop-1][6]:
                                cv_tst_array.append(' %s_environment_tcfg.%s_ecfg.%s_vif = %s_vif;\n'%(str(comp_vip_entry_name_env),str(comp_vip_entry_name_agt), str(cv_what_name), str(cv_what_name)))
                            else:
                                cv_tst_array.append(" for (int i = 0; i < %s_environment_tcfg.no_of_%s_agt; i++) begin\n"%(str(comp_vip_entry_name_env), str(comp_vip_entry_name_agt)))
                                #id_temp = "%0d"
                                #cv_tst_array.append('  if (!uvm_config_db#(virtual %s_interface)::get(.cntxt(this), .inst_name("*"), .field_name($sformatf("%s_vif_%s", i)), .value(%s_vif))) begin\n'%(str(cv_what_name),\
                                #                      str(cv_what_name), str(id_temp), str(cv_what_name)))
                                #cv_tst_array.append('   `uvm_error(get_type_name(), "%s_interface instance is not found in config_db!");\n'%(str(cv_what_name)))
                                #cv_tst_array.append('  end\n')
                                cv_tst_array.append('  %s_environment_tcfg.%s_ecfg[i].%s_vif = %s_vif;\n'%(str(comp_vip_entry_name_env),str(comp_vip_entry_name_agt), str(cv_what_name), str(cv_what_name)))
                                cv_tst_array.append(' end\n')

                        cv_tst_array.append("\n")
                
                if (tst_found_upld_cfg == 0) and lines.startswith(" // Uploading Configuration Database"):
                    tst_found_upld_cfg = 1
                if (tst_found_upld_cfg == 1) and lines.startswith(" // --"):
                    tst_found_upld_cfg = 0
                    cv_tst_array.append(' uvm_config_db#(%s_environment_config)::set(this, "*", "%s_environment_config", %s_environment_tcfg);\n'%(str(comp_vip_entry_name), str(comp_vip_entry_name), str(comp_vip_entry_name)))

            cv_tst_input_file = open("%s_test.sv" % (str(comp_vip_entry_name_tst)), "w")
            for lines in cv_tst_array:
                cv_tst_input_file.write(lines)
            cv_tst_input_file.close()

            
            #------------------------------------------------------------------------------------------- 
            # Code For Updating The Top Module FIles 
            #------------------------------------------------------------------------------------------- 

            os.system('$PROJ_ROOT/.bin/generate_top.csh  %s' % (str(comp_vip_entry_name)))
            
            comp_top_tb_name = self.cve1.get()
            comp_vip_name_pkg = self.cve1.get()
            cv_tbtop_array = []
            cv_tbtop_input_file = open("%s_tbtop.sv" % (str(comp_top_tb_name)), "r+")
            
            for lines in cv_tbtop_input_file:
                cv_tbtop_array.append(lines)
                
                if (tbtop_fnd_udpkg_decl == 0) and lines.startswith(" // Importing User Defined Packages"):
                    tbtop_fnd_udpkg_decl = 1
                if (tbtop_fnd_udpkg_decl == 1) and lines.startswith(" //--"):
                    tbtop_fnd_udpkg_decl = 0
                    cv_tbtop_array.append(' import %s_package::*;\n'%(str(comp_vip_name_pkg)))
                
                
                # Setting the N-Agents Parameter For Multi Instance Agent : 090318|MON
                if (tbtop_loc_var_fnd == 0) and lines.startswith(" // Local Variables"):
                    tbtop_loc_var_fnd = 1
                if (tbtop_loc_var_fnd == 1) and lines.startswith(" //-"):
                    tbtop_loc_var_fnd = 0
                    # Creating Complete VIP Objects & Components 
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        comp_vip_entry_name_agt = self.cve1.get()
                        
                        if cv_agent_cfg_array[agt_loop-1][5]:
                            comp_vip_entry_name_agt = comp_vip_entry_name_agt+"_%s"%cv_agent_cfg_array[agt_loop-1][5]    
                
                        if cv_agent_cfg_array[agt_loop-1][6]:
                            cv_tbtop_array.append(' // Note : If user wants to change the number of %s agents required, he can change the no_of_%s_agt parameter.\n'%(str(comp_vip_entry_name_agt), \
                                    str(comp_vip_entry_name_agt)))
                            cv_tbtop_array.append(' parameter no_of_%s_agt = %s;\n'%(str(comp_vip_entry_name_agt), str(cv_agent_cfg_array[agt_loop-1][6])))
           
                
                if (tbtop_intf_inst_fnd == 0) and lines.startswith(" // Interfaces Instantiation"):
                    tbtop_intf_inst_fnd = 1
                if (tbtop_intf_inst_fnd == 1) and lines.startswith(" //-"):
                    tbtop_intf_inst_fnd = 0
                    # Creating Complete VIP Objects & Components 
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        comp_vip_entry_name_agt = self.cve1.get()
                        
                        if cv_agent_cfg_array[agt_loop-1][5]:
                            comp_vip_entry_name_agt = comp_vip_entry_name_agt+"_%s"%cv_agent_cfg_array[agt_loop-1][5]    

                        if cv_agt_selected_started:
                            cv_num_of_intf = len(cv_interface_pkg[agt_loop-1])
                        else:
                            cv_num_of_intf = 1 

                        for i in range (cv_num_of_intf):
                            if cv_interface_pkg[agt_loop-1][i][0] != str(cv_agent_cfg_array[agt_loop-1][5]):
                                cv_what_name = str(comp_vip_entry_name_agt)+'_'+cv_interface_pkg[agt_loop-1][i][0]
                            else:
                                cv_what_name = comp_vip_entry_name_agt 
                           
                            tmp_intf_fo = open("%s_interface.sv"%(str(cv_what_name)), "r+")
                            # # print "GoinG to check for interface line", tmp_intf_fo.readlines() 
                            for lines in tmp_intf_fo:
                                ## print "Value of line in interface file is", lines 
                                if re.match("(.*)interface.%s_interface"%(str(cv_what_name)), lines):
                                    ## print "The interface file matched the required clock lines",lines 
                                    tmp_intf_li =  str(str(re.sub('[^A-Za-z0-9_]+', ' ', str(lines))).strip()).split(" ")

                                    if len(tmp_intf_li) > 4:
                                        tmp_intf_clk_t = tmp_intf_li[-2]+' '+tmp_intf_li[-1]
                                        ## print "value of tmp_intf_clk", tmp_intf_clk
                                        tmp_intf_clk = tmp_intf_li[-1]
                                        tmp_intf_clk_cont = self.in_nested_list(tmp_intf_li[-1], cv_tbtop_clock_array)
                                        if not tmp_intf_clk_cont:
                                            cv_tbtop_clock_array.append(tmp_intf_clk_t)
                                        log.debug("2.Value of len %d tmp_intf_li %s tmp_intf_li %s"%(len(tmp_intf_li), tmp_intf_clk, tmp_intf_li))
                                    elif len(tmp_intf_li) > 2 and len(tmp_intf_li) < 4:
                                        tmp_intf_clk = tmp_intf_li[-1]
                                        ## print "value of tmp_intf_clk", tmp_intf_clk
                                        tmp_intf_clk_cont = self.in_nested_list(tmp_intf_clk, cv_tbtop_clock_array)
                                        if not tmp_intf_clk_cont:
                                            cv_tbtop_clock_array.append(tmp_intf_clk)
                                        log.debug("3.Value of len %d tmp_intf_li %s tmp_intf_li %s"%(len(tmp_intf_li), tmp_intf_clk, tmp_intf_li))
                                    elif len(tmp_intf_li) < 3:
                                        tmp_intf_clk = ""
                                        log.debug("1. Value of len %d tmp_intf_li %s tmp_intf_li %s"%(len(tmp_intf_li), tmp_intf_clk, tmp_intf_li))

                            cv_tbtop_array.append(' %s_interface     %s_if(%s);\n'%(str(cv_what_name), str(cv_what_name), str(tmp_intf_clk)))
                
                # if (tbtop_clk_inst_fnd == 0) and lines.startswith(" // Clock Instantiation") 
                #     tbtop_clk_inst_fnd = 1
                # if (tbtop_clk_inst_fnd == 1) and lines.startswith(" //-"):
                #     tbtop_clk_inst_fnd = 0
                #     for i in range (len(cv_tbtop_clock_array)):
                #         # print "Value of clock is %s"%(cv_tbtop_clock_array[i])
                #         cv_tbtop_array.append( 'wire %s;\n'%(cv_tbtop_clock_array[i]))    

                if (tbtop_intf_vif_fnd == 0) and lines.startswith(" // Interface - Virtual Interface Config_db Setup"):
                    tbtop_intf_vif_fnd = 1
                if (tbtop_intf_vif_fnd == 1) and lines.startswith(" //-"):
                    tbtop_intf_vif_fnd = 0
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        comp_vip_entry_name_agt = self.cve1.get()
                        
                        if cv_agent_cfg_array[agt_loop-1][5]:
                            comp_vip_entry_name_agt = comp_vip_entry_name_agt+"_%s"%cv_agent_cfg_array[agt_loop-1][5]    

                        if cv_agt_selected_started:
                            cv_num_of_intf = len(cv_interface_pkg[agt_loop-1])
                        else:
                            cv_num_of_intf = 1 

                        for i in range (cv_num_of_intf):
                            if cv_interface_pkg[agt_loop-1][i][0] != str(cv_agent_cfg_array[agt_loop-1][5]):
                                cv_what_name = str(comp_vip_entry_name_agt)+'_'+cv_interface_pkg[agt_loop-1][i][0]
                            else:
                                cv_what_name = comp_vip_entry_name_agt 
                           
                            if not cv_agent_cfg_array[agt_loop-1][6]:
                                cv_tbtop_array.append(' initial uvm_config_db#(virtual %s_interface)::set(null, "*", "%s_vif", %s_if);\n'%(str(cv_what_name), str(cv_what_name), str(cv_what_name)))
                            else:
                                cv_tbtop_array.append(' generate\n')
                                cv_tbtop_array.append('   for (genvar i = 0; i < no_of_%s_agt; i++) begin\n'%(str(comp_vip_entry_name_agt)))
                                id_temp = "%0d"
                                cv_tbtop_array.append('    initial uvm_config_db#(virtual %s_interface)::set(null, "*", $sformatf("%s_vif_%s", i), %s_if);\n'   \
                                                           %(str(cv_what_name), str(cv_what_name), str(id_temp), str(cv_what_name)))
                                cv_tbtop_array.append('   end\n')
                                cv_tbtop_array.append(' endgenerate\n')
               
                # N-Agt Instance : Uploading the N-Agt config Value to uvm_config_db : 090318|MON
                if (tbtop_def_conf_fnd == 0) and lines.startswith(" // Default Configurations"):
                    tbtop_def_conf_fnd = 1
                if (tbtop_def_conf_fnd == 1) and lines.startswith(" //-"):
                    tbtop_def_conf_fnd = 0
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        comp_vip_entry_name_agt = self.cve1.get()
                        
                        if cv_agent_cfg_array[agt_loop-1][5]:
                            comp_vip_entry_name_agt = comp_vip_entry_name_agt+"_%s"%cv_agent_cfg_array[agt_loop-1][5]    

                        if cv_agent_cfg_array[agt_loop-1][6]:
                            cv_tbtop_array.append(' // Note: If user is using the VIP at the top level, then user can configure no_of_%s_agt from top tb or from top test.\n'%(str(comp_vip_entry_name_agt)))
                            cv_tbtop_array.append(' uvm_config_db#(int)::set(uvm_root::get(), "*", "no_of_%s_agt", no_of_%s_agt);\n'    \
                                                    %(str(comp_vip_entry_name_agt), str(comp_vip_entry_name_agt)))

            cv_tbtop_input_file = open("%s_tbtop.sv" % (str(comp_top_tb_name)), "w")
            
            cv_tbtop_array_final = []
            for lines in cv_tbtop_array:
                if (tbtop_clk_inst_fnd == 0) and lines.startswith(" // Clock Instantiation"): 
                    tbtop_clk_inst_fnd = 1
                if (tbtop_clk_inst_fnd == 1) and lines.startswith(" //-"):
                    tbtop_clk_inst_fnd = 0
                    for i in range (len(cv_tbtop_clock_array)):
                        log.debug("Value of clock is %s"%(cv_tbtop_clock_array[i]))
                        if len(cv_tbtop_clock_array[i].split(" ")) > 1:
                            cv_tbtop_array_final.append(' %s;\n'%(cv_tbtop_clock_array[i])) 
                        else:
                            cv_tbtop_array_final.append(' wire %s;\n'%(cv_tbtop_clock_array[i]))
                else:
                    cv_tbtop_array_final.append(lines)
            
            for lines in cv_tbtop_array_final:
                cv_tbtop_input_file.write(lines)
            cv_tbtop_input_file.close()
            
            
            #------------------------------------------------------------------------------------------- 
            # Code For Updating The Top Package FIles 
            #------------------------------------------------------------------------------------------- 
            agt_name_dir = "" 
            agt_seq_name_dir = "" 

            os.system('$PROJ_ROOT/.bin/generate_package.csh  %s %s' % (str(comp_vip_entry_name), str(comp_vip_entry_name_pkg),))
            
            comp_vip_name_pkg = self.cve1.get()
            cv_pkg_array = []
            cv_pkg_input_file = open("%s_package.sv" % (str(comp_vip_name_pkg)), "r+")
           

            # Top Level Directories
            tb_dir = comp_vip_entry_name
            if not os.path.exists('%s_tb'%tb_dir):
                os.makedirs('%s_tb'%tb_dir)
                
            if not os.path.exists('%s_tb/%s_top'%(tb_dir, tb_dir)):
                os.makedirs('%s_tb/%s_top'%(tb_dir,tb_dir))
            if not os.path.exists('%s_tb/%s_env'%(tb_dir, tb_dir)):
                os.makedirs('%s_tb/%s_env'%(tb_dir,tb_dir))
            if not os.path.exists('%s_tb/%s_tests'%(tb_dir, tb_dir)):
                os.makedirs('%s_tb/%s_tests'%(tb_dir,tb_dir))
            if not os.path.exists('%s_tb/rundir'%(tb_dir)):
                os.makedirs('%s_tb/rundir'%(tb_dir))


            for lines in cv_pkg_input_file:
                cv_pkg_array.append(lines)
                
                if (intf_found_in_pkg == 0) and lines.startswith("// Interface Instance"):
                    intf_found_in_pkg = 1
                if (intf_found_in_pkg == 1) and lines.startswith("//-"):
                    intf_found_in_pkg = 0
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        comp_vip_entry_name_agt = self.cve1.get()
                        
                        if cv_agent_cfg_array[agt_loop-1][5]:
                            comp_vip_entry_name_agt = comp_vip_entry_name_agt+"_%s"%cv_agent_cfg_array[agt_loop-1][5]    

                        if cv_agt_selected_started:
                            cv_num_of_intf = len(cv_interface_pkg[agt_loop-1])
                        else:
                            cv_num_of_intf = 1 

                        for i in range (cv_num_of_intf):
                            if cv_interface_pkg[agt_loop-1][i][0] != str(cv_agent_cfg_array[agt_loop-1][5]):
                                cv_what_name = str(comp_vip_entry_name_agt)+'_'+cv_interface_pkg[agt_loop-1][i][0]
                            else:
                                cv_what_name = comp_vip_entry_name_agt 
                            
                            cv_pkg_array.append(' `include "%s_interface.sv"'%(str(cv_what_name)))
                            cv_pkg_array.append("\n")

                            if os.path.exists('%s_tb/%s_top'%(tb_dir, tb_dir)):
                                if os.path.isfile('./%s_interface.sv'%(str(cv_what_name))):
                                    shutil.move('./%s_interface.sv'%(str(cv_what_name)), './%s_tb/%s_top'%(tb_dir, tb_dir))
                
                comp_vip_entry_name_env = self.cve1.get()
                if lines.startswith(" // Configuration File"):
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        if cv_agent_cfg_array[agt_loop-1][5]:
                            cv_pkg_array.append(' `include "%s_%s_config.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5],))
                          
                            # Pushing Agent Config Files To Dir
                            agt_name_dir =  str(comp_vip_entry_name)+'_'+cv_agent_cfg_array[agt_loop-1][5]   
                            if not os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                os.makedirs('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                            if os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                if os.path.isfile('./%s_%s_config.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5])):
                                    shutil.move('./%s_%s_config.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5]), './%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                        else:
                            # Pushing Agent Config Files To Dir
                            agt_name_dir =  str(comp_vip_entry_name)
                            if not os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                os.makedirs('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                            if os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                if os.path.isfile('./%s_config.sv'%(str(comp_vip_entry_name))):
                                    shutil.move('./%s_config.sv'%(str(comp_vip_entry_name)), './%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                            
                            cv_pkg_array.append(' `include "%s_config.sv"'%(str(comp_vip_entry_name)))
                        cv_pkg_array.append("\n")
                    cv_pkg_array.append(' `include "%s_environment_config.sv"'%(str(comp_vip_entry_name_env),))
                    cv_pkg_array.append("\n")
                            
                    if os.path.exists('%s_tb/%s_env'%(tb_dir, tb_dir)):
                        if os.path.isfile('./%s_environment_config.sv'%(str(comp_vip_entry_name))):
                            shutil.move('./%s_environment_config.sv'%(str(comp_vip_entry_name)), './%s_tb/%s_env'%(tb_dir, tb_dir))


                if lines.startswith(" // Sequence Objects"):
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        log.debug("Value of cv_agent_cfg_array during package %s"% cv_agent_cfg_array)
                        if (len(cv_agent_cfg_array[agt_loop-1][1]) == 1 and int(cv_agent_cfg_array[agt_loop-1][1][0]) == 1):
                            if cv_agent_cfg_array[agt_loop-1][5]:
                                cv_pkg_array.append(' `include "%s_%s_sequence_item_base.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5],))
                                
                                # Pushing Agent Config Files To Dir
                                agt_name_dir =  str(comp_vip_entry_name)+'_'+cv_agent_cfg_array[agt_loop-1][5]   
                                if not os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                    os.makedirs('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
                                if os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                    if os.path.isfile('./%s_%s_sequence_item_base.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5])):
                                        shutil.move('./%s_%s_sequence_item_base.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5]), './%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
                            else:
                                agt_name_dir =  str(comp_vip_entry_name)
                                cv_pkg_array.append(' `include "%s_sequence_item_base.sv"'%(str(comp_vip_entry_name), ))
                                
                                # Pushing Agent Config Files To Dir
                                if not os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                    os.makedirs('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
                                if os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                    if os.path.isfile('./%s_sequence_item_base.sv'%(str(comp_vip_entry_name))):
                                        shutil.move('./%s_sequence_item_base.sv'%(str(comp_vip_entry_name)), './%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
                            cv_pkg_array.append("\n")
                        
                        elif (len(cv_agent_cfg_array[agt_loop-1][1]) > 1):
                            for i in range (1, int(cv_agent_cfg_array[agt_loop-1][1][0])+1):
                                if cv_agent_cfg_array[agt_loop-1][5]:
                                    cv_pkg_array.append(' `include "%s_%s_%s_sequence_item_base.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][i],))
                                    
                                    # Pushing Agent Config Files To Dir
                                    agt_name_dir =  str(comp_vip_entry_name)+'_'+cv_agent_cfg_array[agt_loop-1][5]   
                                    if not os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                        os.makedirs('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
                                    if os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                        if os.path.isfile('./%s_%s_%s_sequence_item_base.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][i])):
                                            shutil.move('./%s_%s_%s_sequence_item_base.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][i]), './%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
                                else:
                                    agt_name_dir =  str(comp_vip_entry_name)
                                    cv_pkg_array.append(' `include "%s_%s_sequence_item_base.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][i],))
                                    
                                    # Pushing Agent Config Files To Dir
                                    if not os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                        os.makedirs('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
                                    if os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                        if os.path.isfile('./%s_%s_sequence_item_base.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][i])):
                                            shutil.move('./%s_%s_sequence_item_base.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][i]), './%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
                                cv_pkg_array.append("\n") 
                        
                        if (len(cv_agent_cfg_array[agt_loop-1][0]) == 1 and int(cv_agent_cfg_array[agt_loop-1][0][0]) == 1):
                            if cv_agent_cfg_array[agt_loop-1][5]:
                                cv_pkg_array.append(' `include "%s_%s_sequence_item_base.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5],))
                                
                                # Pushing Agent Config Files To Dir
                                agt_name_dir =  str(comp_vip_entry_name)+'_'+cv_agent_cfg_array[agt_loop-1][5]   
                                if not os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                    os.makedirs('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
                                if os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                    if os.path.isfile('./%s_%s_sequence_item_base.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5])):
                                        shutil.move('./%s_%s_sequence_item_base.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5]), './%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
                            else:
                                agt_name_dir =  str(comp_vip_entry_name)
                                cv_pkg_array.append(' `include "%s_sequence_item_base.sv"'%(str(comp_vip_entry_name), ))
                                
                                # Pushing Agent Config Files To Dir
                                if not os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                    os.makedirs('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
                                if os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                    if os.path.isfile('./%s_sequence_item_base.sv'%(str(comp_vip_entry_name))):
                                        shutil.move('./%s_sequence_item_base.sv'%(str(comp_vip_entry_name)), './%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
                            cv_pkg_array.append("\n")
                        elif (len(cv_agent_cfg_array[agt_loop-1][0]) > 1):
                            for i in range (1, int(cv_agent_cfg_array[agt_loop-1][0][0])+1):
                                if cv_agent_cfg_array[agt_loop-1][5]:
                                    cv_pkg_array.append(' `include "%s_%s_%s_sequence_item_base.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][0][i],))
                                    
                                    # Pushing Agent Config Files To Dir
                                    agt_name_dir =  str(comp_vip_entry_name)+'_'+cv_agent_cfg_array[agt_loop-1][5]   
                                    if not os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                        os.makedirs('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
                                    if os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                        if os.path.isfile('./%s_%s_%s_sequence_item_base.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][0][i])):
                                            shutil.move('./%s_%s_%s_sequence_item_base.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][0][i]), './%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
                                else:
                                    cv_pkg_array.append(' `include "%s_%s_sequence_item_base.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][0][i],))
                                    
                                    agt_name_dir =  str(comp_vip_entry_name)
                                    # Pushing Agent Config Files To Dir
                                    if not os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                        os.makedirs('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
                                    if os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                        if os.path.isfile('./%s_%s_sequence_item_base.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][0][i])):
                                            shutil.move('./%s_%s_sequence_item_base.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][0][i]), './%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
                                cv_pkg_array.append("\n")
                        
                        if (len(cv_agent_cfg_array[agt_loop-1][0]) == 1 and int(cv_agent_cfg_array[agt_loop-1][0][0]) == 1):
                            if cv_agent_cfg_array[agt_loop-1][5]:
                                cv_pkg_array.append(' `include "%s_%s_sequence.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5],))
                                
                                # Pushing Agent Config Files To Dir
                                agt_name_dir =  str(comp_vip_entry_name)+'_'+cv_agent_cfg_array[agt_loop-1][5]   
                                if not os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                    os.makedirs('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
                                if os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                    if os.path.isfile('./%s_%s_sequence.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5])):
                                        shutil.move('./%s_%s_sequence.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5]), './%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
                            else:
                                agt_name_dir =  str(comp_vip_entry_name)
                                cv_pkg_array.append(' `include "%s_sequence.sv"'%(str(comp_vip_entry_name), ))
                                
                                # Pushing Agent Config Files To Dir
                                if not os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                    os.makedirs('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
                                if os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                    if os.path.isfile('./%s_sequence.sv'%(str(comp_vip_entry_name))):
                                        shutil.move('./%s_sequence.sv'%(str(comp_vip_entry_name)), './%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
                            cv_pkg_array.append("\n")
                        elif (len(cv_agent_cfg_array[agt_loop-1][0]) > 1):
                            for i in range (1, int(cv_agent_cfg_array[agt_loop-1][0][0])+1):
                                cv_pkg_array.append(' `include "%s_%s_%s_sequence.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][0][i],))
                                cv_pkg_array.append("\n")
                                    
                                # Pushing Agent Config Files To Dir
                                agt_name_dir =  str(comp_vip_entry_name)+'_'+cv_agent_cfg_array[agt_loop-1][5]
                                if not os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                    os.makedirs('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
                                if os.path.exists('%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir)):
                                    if os.path.isfile('./%s_%s_%s_sequence.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][0][i])):
                                        shutil.move('./%s_%s_%s_sequence.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][0][i]), './%s_tb/%s_env/%s_agent/sequences'%(tb_dir, tb_dir, agt_name_dir))
               
                if lines.startswith(" // Agent Components"):
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        if (len(cv_agent_cfg_array[agt_loop-1][0]) == 1 and int(cv_agent_cfg_array[agt_loop-1][0][0]) == 1):
                            if cv_agent_cfg_array[agt_loop-1][5]:
                                cv_pkg_array.append(' `include "%s_%s_sequencer.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5],))
                                
                                # Pushing Agent Config Files To Dir
                                agt_name_dir =  str(comp_vip_entry_name)+'_'+cv_agent_cfg_array[agt_loop-1][5]
                                if not os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                    os.makedirs('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                                if os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                    if os.path.isfile('./%s_%s_sequencer.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5])):
                                        shutil.move('./%s_%s_sequencer.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5]), './%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                            else:
                                cv_pkg_array.append(' `include "%s_sequencer.sv"'%(str(comp_vip_entry_name), ))
                                
                                # Pushing Agent Config Files To Dir
                                agt_name_dir =  str(comp_vip_entry_name)
                                if not os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                    os.makedirs('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                                if os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                    if os.path.isfile('./%s_sequencer.sv'%(str(comp_vip_entry_name))):
                                        shutil.move('./%s_sequencer.sv'%(str(comp_vip_entry_name)), './%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                            cv_pkg_array.append("\n")
                        elif (len(cv_agent_cfg_array[agt_loop-1][0]) > 1):
                            for i in range (1, int(cv_agent_cfg_array[agt_loop-1][0][0])+1):
                                if cv_agent_cfg_array[agt_loop-1][5]:
                                    cv_pkg_array.append(' `include "%s_%s_%s_sequencer.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][0][i],))
                                    
                                    # Pushing Agent Config Files To Dir
                                    agt_name_dir =  str(comp_vip_entry_name)+'_'+cv_agent_cfg_array[agt_loop-1][5]
                                    if not os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                        os.makedirs('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                                    if os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                        if os.path.isfile('./%s_%s_%s_sequencer.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][0][i])):
                                            shutil.move('./%s_%s_%s_sequencer.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][0][i]), './%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                                else:
                                    cv_pkg_array.append(' `include "%s_%s_sequencer.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][0][i],))
                                    
                                    # Pushing Agent Config Files To Dir
                                    agt_name_dir =  str(comp_vip_entry_name)
                                    if not os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                        os.makedirs('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                                    if os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                        if os.path.isfile('./%s_%s_sequencer.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][0][i])):
                                            shutil.move('./%s_%s_sequencer.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][0][i]), './%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                                cv_pkg_array.append("\n")
                        
                        if (len(cv_agent_cfg_array[agt_loop-1][0]) == 1 and int(cv_agent_cfg_array[agt_loop-1][0][0]) == 1):
                            if cv_agent_cfg_array[agt_loop-1][5]:
                                cv_pkg_array.append(' `include "%s_%s_driver.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5],))
                                
                                # Pushing Agent Config Files To Dir
                                agt_name_dir =  str(comp_vip_entry_name)+'_'+cv_agent_cfg_array[agt_loop-1][5]
                                if not os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                    os.makedirs('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                                if os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                    if os.path.isfile('./%s_%s_driver.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5])):
                                        shutil.move('./%s_%s_driver.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5]), './%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                            else:
                                cv_pkg_array.append(' `include "%s_driver.sv"'%(str(comp_vip_entry_name), ))
                                
                                # Pushing Agent Config Files To Dir
                                agt_name_dir =  str(comp_vip_entry_name)
                                if not os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                    os.makedirs('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                                if os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                    if os.path.isfile('./%s_driver.sv'%(str(comp_vip_entry_name))):
                                        shutil.move('./%s_driver.sv'%(str(comp_vip_entry_name)), './%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                            cv_pkg_array.append("\n")
                        elif (len(cv_agent_cfg_array[agt_loop-1][0]) > 1):
                            for i in range (1, int(cv_agent_cfg_array[agt_loop-1][0][0])+1):
                                if cv_agent_cfg_array[agt_loop-1][5]:
                                    cv_pkg_array.append(' `include "%s_%s_%s_driver.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][0][i],))
                                    
                                    # Pushing Agent Config Files To Dir
                                    agt_name_dir =  str(comp_vip_entry_name)+'_'+cv_agent_cfg_array[agt_loop-1][5]
                                    if not os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                        os.makedirs('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                                    if os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                        if os.path.isfile('./%s_%s_%s_driver.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][0][i])):
                                            shutil.move('./%s_%s_%s_driver.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][0][i]), './%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                                else:
                                    cv_pkg_array.append(' `include "%s_%s_driver.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][0][i],))
                                    
                                    # Pushing Agent Config Files To Dir
                                    agt_name_dir =  str(comp_vip_entry_name)
                                    if not os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                        os.makedirs('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                                    if os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                        if os.path.isfile('./%s_%s_driver.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][0][i])):
                                            shutil.move('./%s_%s_driver.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][0][i]), './%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                                cv_pkg_array.append("\n")
                        
                        if (len(cv_agent_cfg_array[agt_loop-1][1]) == 1 and int(cv_agent_cfg_array[agt_loop-1][1][0]) == 1):
                            if cv_agent_cfg_array[agt_loop-1][5]:
                                cv_pkg_array.append(' `include "%s_%s_monitor.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5],))
                                
                                # Pushing Agent Config Files To Dir
                                agt_name_dir =  str(comp_vip_entry_name)+'_'+cv_agent_cfg_array[agt_loop-1][5]
                                if not os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                    os.makedirs('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                                if os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                    if os.path.isfile('./%s_%s_monitor.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5])):
                                        shutil.move('./%s_%s_monitor.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5]), './%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                            else:
                                cv_pkg_array.append(' `include "%s_monitor.sv"'%(str(comp_vip_entry_name), ))
                                
                                # Pushing Agent Config Files To Dir
                                agt_name_dir =  str(comp_vip_entry_name)
                                if not os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                    os.makedirs('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                                if os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                    if os.path.isfile('./%s_monitor.sv'%(str(comp_vip_entry_name))):
                                        shutil.move('./%s_monitor.sv'%(str(comp_vip_entry_name)), './%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                            cv_pkg_array.append("\n")
                        elif (len(cv_agent_cfg_array[agt_loop-1][1]) > 1):
                            for i in range (1, int(cv_agent_cfg_array[agt_loop-1][1][0])+1):
                                if cv_agent_cfg_array[agt_loop-1][5]:
                                    cv_pkg_array.append(' `include "%s_%s_%s_monitor.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][i],))
                                    
                                    # Pushing Agent Config Files To Dir
                                    agt_name_dir =  str(comp_vip_entry_name)+'_'+cv_agent_cfg_array[agt_loop-1][5]
                                    if not os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                        os.makedirs('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                                    if os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                        if os.path.isfile('./%s_%s_%s_monitor.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][i])):
                                            shutil.move('./%s_%s_%s_monitor.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][1][i]), './%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                                else:
                                    cv_pkg_array.append(' `include "%s_%s_monitor.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][i],))
                                    
                                    # Pushing Agent Config Files To Dir
                                    agt_name_dir =  str(comp_vip_entry_name)
                                    if not os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                        os.makedirs('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                                    if os.path.exists('%s_tb/%s_env/%s_monitor'%(tb_dir, tb_dir, agt_name_dir)):
                                        if os.path.isfile('./%s_%s_monitor.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][i])):
                                            shutil.move('./%s_%s_monitor.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][1][i]), './%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                                cv_pkg_array.append("\n")
                        
                        if cv_agent_cfg_array[agt_loop-1][5]:
                            cv_pkg_array.append(' `include "%s_%s_agent.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5],))
                                
                            # Pushing Agent Config Files To Dir
                            agt_name_dir =  str(comp_vip_entry_name)+'_'+cv_agent_cfg_array[agt_loop-1][5]
                            if not os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                os.makedirs('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                            if os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                if os.path.isfile('./%s_%s_agent.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5])):
                                    shutil.move('./%s_%s_agent.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5]), './%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                        else:
                            cv_pkg_array.append(' `include "%s_agent.sv"'%(str(comp_vip_entry_name), ))
                            
                            # Pushing Agent Config Files To Dir
                            agt_name_dir =  str(comp_vip_entry_name)
                            if not os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                os.makedirs('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                            if os.path.exists('%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir)):
                                if os.path.isfile('./%s_agent.sv'%(str(comp_vip_entry_name))):
                                    shutil.move('./%s_agent.sv'%(str(comp_vip_entry_name)), './%s_tb/%s_env/%s_agent'%(tb_dir, tb_dir, agt_name_dir))
                        cv_pkg_array.append("\n")

                comp_vip_entry_name_env = self.cve1.get()
                if lines.startswith(" // Environment Component"):
                    for agt_loop in range (1, int(cvagt_val_loop+1)):
                        if (len(cv_agent_cfg_array[agt_loop-1][2]) == 1 and int(cv_agent_cfg_array[agt_loop-1][2][0]) == 1):
                            if cv_agent_cfg_array[agt_loop-1][5]:
                                cv_pkg_array.append(' `include "%s_%s_scoreboard.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5],))
                            
                                # Pushing Agent Config Files To Dir
                                if not os.path.exists('%s_tb/%s_env'%(tb_dir, tb_dir)):
                                    os.makedirs('%s_tb/%s_env'%(tb_dir, tb_dir))
                                if os.path.exists('%s_tb/%s_env'%(tb_dir, tb_dir)):
                                    if os.path.isfile('./%s_%s_scoreboard.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5])):
                                        shutil.move('./%s_%s_scoreboard.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5]), './%s_tb/%s_env'%(tb_dir, tb_dir))
                            else:
                                cv_pkg_array.append(' `include "%s_scoreboard.sv"'%(str(comp_vip_entry_name), ))
                                
                                # Pushing Agent Config Files To Dir
                                if not os.path.exists('%s_tb/%s_env'%(tb_dir, tb_dir)):
                                    os.makedirs('%s_tb/%s_env'%(tb_dir, tb_dir))
                                if os.path.exists('%s_tb/%s_env'%(tb_dir, tb_dir)):
                                    if os.path.isfile('./%s_scoreboard.sv'%(str(comp_vip_entry_name))):
                                        shutil.move('./%s_scoreboard.sv'%(str(comp_vip_entry_name)), './%s_tb/%s_env'%(tb_dir, tb_dir))
                            cv_pkg_array.append("\n")
                        elif (len(cv_agent_cfg_array[agt_loop-1][2]) > 1):
                            for i in range (1, int(cv_agent_cfg_array[agt_loop-1][2][0])+1):
                                if cv_agent_cfg_array[agt_loop-1][5]:
                                    cv_pkg_array.append(' `include "%s_%s_%s_scoreboard.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][i],))
                                    
                                    # Pushing Agent Config Files To Dir
                                    if not os.path.exists('%s_tb/%s_env'%(tb_dir, tb_dir)):
                                        os.makedirs('%s_tb/%s_env'%(tb_dir, tb_dir))
                                    if os.path.exists('%s_tb/%s_env'%(tb_dir, tb_dir)):
                                        if os.path.isfile('./%s_%s_%s_scoreboard.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][i])):
                                            shutil.move('./%s_%s_%s_scoreboard.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][5], cv_agent_cfg_array[agt_loop-1][2][i]), './%s_tb/%s_env'%(tb_dir, tb_dir))
                                else:
                                    cv_pkg_array.append(' `include "%s_%s_scoreboard.sv"'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][i],))
                                    
                                    # Pushing Agent Config Files To Dir
                                    if not os.path.exists('%s_tb/%s_env'%(tb_dir, tb_dir)):
                                        os.makedirs('%s_tb/%s_env'%(tb_dir, tb_dir))
                                    if os.path.exists('%s_tb/%s_env'%(tb_dir, tb_dir)):
                                        if os.path.isfile('./%s_%s_scoreboard.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][i])):
                                            shutil.move('./%s_%s_scoreboard.sv'%(str(comp_vip_entry_name), cv_agent_cfg_array[agt_loop-1][2][i]), './%s_tb/%s_env'%(tb_dir, tb_dir))
                                cv_pkg_array.append("\n")
                        
                    cv_pkg_array.append(' `include "%s_environment.sv"'%(str(comp_vip_entry_name_env),))
                    cv_pkg_array.append("\n")
                    
                    # Pushing Agent Config Files To Dir
                    if not os.path.exists('%s_tb/%s_env'%(tb_dir, tb_dir)):
                        os.makedirs('%s_tb/%s_env'%(tb_dir, tb_dir))
                    if os.path.exists('%s_tb/%s_env'%(tb_dir, tb_dir)):
                        if os.path.isfile('./%s_environment.sv'%(str(comp_vip_entry_name))):
                            shutil.move('./%s_environment.sv'%(str(comp_vip_entry_name)), './%s_tb/%s_env'%(tb_dir, tb_dir))
                    
                if lines.startswith(" // Test Files"):
                    cv_pkg_array.append(' `include "%s_test.sv"'%(str(comp_vip_entry_name_env),))
                    cv_pkg_array.append("\n")
                    
                    # Pushing Agent Config Files To Dir
                    if not os.path.exists('%s_tb/%s_tests'%(tb_dir, tb_dir)):
                        os.makedirs('%s_tb/%s_tests'%(tb_dir, tb_dir))
                    if os.path.exists('%s_tb/%s_tests'%(tb_dir, tb_dir)):
                        if os.path.isfile('./%s_test.sv'%(str(comp_vip_entry_name))):
                            shutil.move('./%s_test.sv'%(str(comp_vip_entry_name)), './%s_tb/%s_tests'%(tb_dir, tb_dir))

            cv_pkg_input_file = open("%s_package.sv" % (str(comp_vip_name_pkg)), "w")
            for lines in cv_pkg_array:
                cv_pkg_input_file.write(lines)
            cv_pkg_input_file.close()
                    
            
            if cv_agent_cfg_array[agt_loop-1][5]:
                agt_name_dir =  str(comp_vip_entry_name)+'_'+cv_agent_cfg_array[agt_loop-1][5]
            else:
                agt_name_dir =  str(comp_vip_entry_name)
                            
            # Pushing Agent Config Files To Dir
            if not os.path.exists('%s_tb/%s_env'%(tb_dir, tb_dir)):
                os.makedirs('%s_tb/%s_env'%(tb_dir, tb_dir))
            if os.path.exists('%s_tb/%s_env'%(tb_dir, tb_dir)):
                if os.path.isfile('./%s_package.sv'%(str(comp_vip_entry_name))):
                    shutil.move('./%s_package.sv'%(str(comp_vip_entry_name)), './%s_tb/%s_env'%(tb_dir, tb_dir))
                    
            # Pushing Agent Config Files To Dir
            if not os.path.exists('%s_tb/%s_top'%(tb_dir, tb_dir)):
                os.makedirs('%s_tb/%s_top'%(tb_dir, tb_dir))
            if os.path.exists('%s_tb/%s_top'%(tb_dir, tb_dir)):
                if os.path.isfile('./%s_tbtop.sv'%(str(comp_vip_entry_name))):
                    shutil.move('./%s_tbtop.sv'%(str(comp_vip_entry_name)), './%s_tb/%s_top'%(tb_dir, tb_dir))
            
            #------------------------------------------------------------------------------------------
            # Calling CV Clean-Up Variables 
            #------------------------------------------------------------------------------------------
            self.cv_clean_up_variables(); 
            #------------------------------------------------------------------------------------------
          
            #------------------------------------------------------------------------------------------
            # Steps For Listing Directories In testbench.fl file 
            #------------------------------------------------------------------------------------------
            log.debug("value of directories are %s"% [x[0] for x in os.walk('./%s_tb'%(comp_vip_entry_name))])
            tb_all_dir = [x[0] for x in os.walk('./%s_tb'%(comp_vip_entry_name))]
            tb_cur_dir = str(os.popen('pwd').read()).strip()
            # os.environ['VIP_CUR_DIR'] = "%s"%(tb_cur_dir)
            os.system('cp $PROJ_ROOT/.bin/.misc/testbench.fl .')            
            
            tb_fl = []
            tb_fl_file = open("testbench.fl", "r+")
            
            for lines in tb_fl_file:
                tb_fl.append(lines)    
                if lines.startswith("+incdir+."):
                    for i in range (len(tb_all_dir)):
                        tb_all_dir_t = str(re.sub('[^A-Za-z0-9_/]+','', str(tb_all_dir[i])))
                        
                        tb_final_dir = tb_cur_dir+tb_all_dir_t
                        log.debug("tb_cur_dir %s tb_all_dir_t %s tb_final_dir %s"%(tb_cur_dir, tb_all_dir_t, tb_final_dir))
    
                        #tb_fl.append('+incdir+%s/%s\n'%(tb_cur_dir, str(re.sub('[^A-Za-z0-9_]+','', str(tb_all_dir[i]))) ))
                        tb_fl.append('+incdir+%s\n'%(tb_final_dir))
           
                if 'uvm_dpi.cc' in lines:
                    tb_fl.append('%s/%s_tb/%s_env/%s_package.sv\n'%(tb_cur_dir, tb_dir, tb_dir, str(comp_vip_entry_name)))
                    tb_fl.append('%s/%s_tb/%s_top/%s_tbtop.sv\n'%(tb_cur_dir, tb_dir, tb_dir, str(comp_vip_entry_name)))

            tb_fl_file = open("testbench.fl", "w")
            for lines in tb_fl:
                tb_fl_file.write(lines)
            tb_fl_file.close()
            
            # Pushing Agent Config Files To Dir
            if not os.path.exists('%s_tb/rundir'%(tb_dir)):
                os.makedirs('%s_tb/rundir'%(tb_dir))
            if os.path.exists('%s_tb/rundir'%(tb_dir)):
                if os.path.isfile('./testbench.fl'):
                    shutil.move('./testbench.fl', './%s_tb/rundir'%(tb_dir))
            #------------------------------------------------------------------------------------------
            
            #------------------------------------------------------------------------------------------
            # Steps For Preparing the Makefile 
            #------------------------------------------------------------------------------------------
            os.system('cp $PROJ_ROOT/.bin/.misc/Makefile Makefile_t')
            # mk_fl_arr = []
            # mk_fl = open("Makefile", "r+")
            
            # for lines in mk_fl:
            #     lines.replace('+UVM_TESTNAME=','+UVM_TESTNAME=%s_test'%(str(comp_vip_entry_name)))
            #     mk_fl_arr.append(lines)
            
            with open("Makefile_t", "rt") as fin:
                with open("Makefile", "wt") as fout:
                    for line in fin:
                        fout.write(line.replace('+UVM_TESTNAME=', '+UVM_TESTNAME=%s_test'%(str(comp_vip_entry_name))))

            os.system('rm -rf ./Makefile_t')
            
            # mk_fl = open("Makefile", "w")
            # for lines in mk_fl_arr:
            #     mk_fl.write(lines)
            # mk_fl.close()
            
            if not os.path.exists('%s_tb/rundir'%(tb_dir)):
                os.makedirs('%s_tb/rundir'%(tb_dir))
            if os.path.exists('%s_tb/rundir'%(tb_dir)):
                if os.path.isfile('./Makefile'):
                    shutil.move('./Makefile', './%s_tb/rundir'%(tb_dir))
            #------------------------------------------------------------------------------------------
            
            
            #------------------------------------------------------------------------------------------
            # Build and Run
            #------------------------------------------------------------------------------------------
            if self.bnr.get():
                # subprocess.call(['./$PROJ_ROOT/.bin/.misc/setup.sh'])
                os.chdir('./%s_tb/rundir'%(str(comp_vip_entry_name)))
                os.system('make all')
                os.chdir('%s'%(str(tb_cur_dir)))
            #------------------------------------------------------------------------------------------

            # Clearing the cv_agt_selected_started 
            cv_agt_selected_started = 0

            # Removing the generate_button_cb and exit_button_code and adding return_button_code :: 041516|FRI
            # self.generate_button_cb();
            self.return_button_code();

            # if not (self.exit_button): 
            #     self.exit_button = Button(root, background="orange red", activebackground="orangered3", text="EXIT CODE GENERATOR", command=self.exit_button_code)    
            #     self.exit_button.pack()
        
        if v.get()==3:
            log.debug("multiclustervip : Going to create all the necessary templates for multiclustervip!\n")
        
            log.debug("mc_create_phase :\n, mc_env_cfg_pool %s\n\n, mc_global_env_mon_scb_con_arr %s\n"%(mc_env_cfg_pool, mc_global_env_mon_scb_con_arr))
            
            #------------------------------------------------------------------------------
            # Process to find if the mc_env_cfg_pool contains _CS [Create & Stitch] or __s [Stitch Only]
            #------------------------------------------------------------------------------
            create_stitch = self.substr_str_search('__c', mc_env_cfg_pool)
            stitch_only = self.substr_str_search('__s', mc_env_cfg_pool)
            cxn_only = self.substr_str_search('_x', mc_env_cfg_pool)
            ei_only = self.substr_str_search('_ei', mc_env_cfg_pool)

            if create_stitch:
                log.debug("multiclustervip : create_stitch is available inside the environment!\n"%create_stitch)
            
            if stitch_only:
                log.debug("multiclustervip : stitch_only is available inside the environment!\n"%stitch_only)
            
            if cxn_only:
                log.debug("multiclustervip : cxn_only is available inside the environment!\n"%cxn_only)
            
            if ei_only:
                log.debug("multiclustervip : ei_only is available inside the environment!\n"%ei_only)
            
            #------------------------------------------------------------------------------
            # Cycle through all the environment For the process - Create, Edit & Directory, Create Scripts, Run.
            # if stitch_only or cxn_only and not create_stitch and not ei_only:
            #------------------------------------------------------------------------------
            if not create_stitch and not ei_only and stitch_only or cxn_only:
                self.mc_edit_phase();
                self.mc_script_config_phase();
                self.mc_run_phase();
            else: 
                self.mc_create_phase();
                self.mc_edit_phase();
                self.mc_script_config_phase();
                self.mc_run_phase();

    
    def mc_create_phase(self):
        global mc_env_cfg_pool
        global create_stitch
        global stitch_only
        global cxn_only
        global ei_only
        global mc_curr_env_set_c 
        global mc_curr_env_set_s 
        global mc_curr_env_agt_set_c 
        global mc_curr_env_agt_set_s 
        global mc_global_env_mon_scb_con_arr   
        
        log.debug("mc_create_phase : Calling the mc_create_phase!\n")
        
        log.debug("mc_create_phase :\n, mc_env_cfg_pool %s\n, mc_global_env_mon_scb_con_arr %s\n"%(mc_env_cfg_pool, mc_global_env_mon_scb_con_arr))
    
        # Cycle through all the environment and create all the files
        for a in range (len(mc_env_cfg_pool)):
            if not create_stitch and not stitch_only and not cxn_only and not ei_only:
                log.debug("mc_create_phase : Build all the files needed for the environment!\n")
              
                #------------------------------------------------------------------------------
                # Creating Directory Structure For Environment, Checkers, 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    if mc_env_cfg_pool[a][6] != []:
                        if mc_env_cfg_pool[a][6] == 'pwd':
                            envdirpath = str(os.popen('pwd').read()).strip()
                        else:
                            envdirpath = str(mc_env_cfg_pool[a][6]).strip('[,],\'')
                    
                        # Director Path For Env 
                        envdirpath = envdirpath+'/'+((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]+'_env'   
                        log.debug("mc_create_phase : envdirpath %s!\n"%envdirpath)
                        
                        if os.path.exists(envdirpath):
                            log.debug("mc_create_phase : Environment Dir Path %s Already Exists! Moving the Directory to %s_%s\n"%(envdirpath, envdirpath, self.rtn_date_time_full()))
                            shutil.move('%s'%(envdirpath), '%s_%s'%(envdirpath, self.rtn_date_time_full()))
                        os.makedirs(envdirpath)
                        
                        # Directory Path For Other Env Directory 
                        envpath = envdirpath+'/'+'env'
                        os.makedirs(envpath)
                        
                        # envtrkpath = envdirpath+'/'+'trackers'
                        # os.makedirs(envtrkpath)
                        
                        envchkrpath = envdirpath+'/'+'checkers'
                        os.makedirs(envchkrpath)
                        
                        # envconfilepath = envdirpath+'/'+'conn_file'
                        # os.makedirs(envconfilepath)
                        
                        tbpath = envdirpath+'/'+'tb'
                        os.makedirs(tbpath)
                        
                        envdocspath = envdirpath+'/'+'docs'
                        os.makedirs(envdocspath)
                        
                        envrunpath = envdirpath+'/'+'run'
                        os.makedirs(envrunpath)
                        
                        envflpath = envdirpath+'/'+'filelist'
                        os.makedirs(envflpath)
                        
                        envscriptspath = envdirpath+'/'+'scripts'
                        os.makedirs(envscriptspath)
                        
                        #log.debug("mc_create_phase : envtrkpath %s, envchkrpath %s, envconfilepath %s!\n"%(envtrkpath, envchkrpath, envconfilepath))
                        log.debug("mc_create_phase : envchkrpath %s, envdocspath %s, envrunpath %s, envflpath %s, envscriptspath %s!\n"%(envchkrpath, envdocspath, envrunpath, envflpath, envscriptspath))

                # Calling the env file create API
                if (mc_env_cfg_pool[a][0]):
                    #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                    envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                    envname_pkg = envname+"_env_package" 
                    
                    log.debug("mc_create_phase : envname %s envname_pkg %s!\n"%(envname, envname_pkg))
                    
                    self.mc_create_env(envname, envname_pkg)
                    shutil.move('./%s_environment.sv'%(envname), '%s'%(envpath))
                    shutil.move('./%s_environment_config.sv'%(envname), '%s'%(envpath))
                    shutil.move('./%s_environment_macros.sv'%(envname), '%s'%(envpath))

                
                # Calling the env RAL, Memory Models file create API
                #------------------------------------------------------------------------------
                # Directory Path For Environment RAL, Memory Models 
                #------------------------------------------------------------------------------
                envmdldirpath = envdirpath+'/'+'models'
                log.debug("mc_create_phase : envmdldirpath %s!\n"%envmdldirpath)
                os.makedirs(envmdldirpath)

                
                # Calling the env interface file create API
                #------------------------------------------------------------------------------
                # Directory Path For Environment Interface Files  
                #------------------------------------------------------------------------------
                envintfdirpath = envdirpath+'/'+'env_interfaces'
                log.debug("mc_create_phase : envintfdirpath %s!\n"%envintfdirpath)
                os.makedirs(envintfdirpath)
                
                if mc_env_cfg_pool[a][7] != []:
                    if mc_env_cfg_pool[a][7][0] != '':
                    
                        # # Directory Path For ENV tests 
                        # envintfdirpath = envdirpath+'/'+'env_interfaces'
                        # log.debug("mc_create_phase : envintfdirpath %s!\n"%envintfdirpath)
                        # os.makedirs(envintfdirpath)

                        #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                        envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                        envname_pkg = envname+"_env_package" 
                        envintfname_arr = str(mc_env_cfg_pool[a][7][0]).split(",")
                        
                        log.debug("mc_create_phase : envname %s  envname_pkg %s  envintfname_arr %s!\n"%(envname, envname_pkg, envintfname_arr))
                        
                        for b in range (int(envintfname_arr[0])):
                            if int(envintfname_arr[0]==1) and len(envintfname_arr) == 1:
                                envintfname = envname
                            else:
                                #envintfname = envname+"_"+envintfname_arr[b+1]
                                envintfname = envintfname_arr[b+1]
                            self.mc_create_intf(envintfname, envname_pkg) 
                            self.mc_create_intf_wrapper(envintfname, envname_pkg) 
                            shutil.move('./%s_interface.sv'%(envintfname), '%s'%(envintfdirpath))
                            shutil.move('./%s_interface_wrapper.sv'%(envintfname), '%s'%(envintfdirpath))
                
                
                # Calling the env sequences file create API
                #------------------------------------------------------------------------------
                # Directory Path For Environment/Test Sequences Files  
                #------------------------------------------------------------------------------
                envseqdirpath = envdirpath+'/'+'env_sequences'
                log.debug("mc_create_phase : envseqdirpath %s!\n"%envseqdirpath)
                os.makedirs(envseqdirpath)

                
                # Calling the env monitor file create API
                #------------------------------------------------------------------------------
                # Creating directory for environment monitors
                #------------------------------------------------------------------------------
                # Directory Path For Environment Monitors
                envmondirpath = envdirpath+'/'+'env_monitors'
                log.debug("mc_create_phase : envmondirpath %s!\n"%envmondirpath)
                os.makedirs(envmondirpath)

                if mc_env_cfg_pool[a][3] != '':
                    #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                    envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                    envname_pkg = envname+"_env_package" 
                    envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                    log.debug("mc_create_phase : envname %s envname_pkg %s mc_env_cfg_pool[%d][3] %s, envmonname_arr %s!\n"%(envname, envname_pkg, a, mc_env_cfg_pool[a][3], envmonname_arr))
                        
                    # # Directory Path For Environment Monitors
                    # envmondirpath = envdirpath+'/'+'env_monitors'
                    # log.debug("mc_create_phase : envmondirpath %s!\n"%envmondirpath)
                    # os.makedirs(envmondirpath)

                    for c in range (int(envmonname_arr[0])):
                        # envmonname = envname+"_"+envmonname_arr[c+1]
                        
                        if len(envmonname_arr[c+1].split(":"))>1:
                            #envmonname = envname+"_"+envmonname_arr[c+1].split(":")[0]
                            envmonname = envmonname_arr[c+1].split(":")[0]
                        else:
                            #envmonname = envname+"_"+envmonname_arr[c+1]
                            envmonname = envmonname_arr[c+1]
                        
                        self.mc_create_env_mon(envmonname, envname_pkg) 
                        self.mc_create_sequence_item(envmonname, envname_pkg) 
                    
                        # Moving the created file to the respective directory
                        shutil.move('./%s_monitor.sv'%(envmonname), '%s'%(envmondirpath))
                        shutil.move('./%s_sequence_item_base.sv'%(envmonname), '%s'%(envmondirpath))

                # Calling the env scoreboard file create API
                #------------------------------------------------------------------------------
                # Creating directory for environment scoreboards
                #------------------------------------------------------------------------------
                # Directory Path For Environment Monitors
                envscbdirpath = envdirpath+'/'+'scoreboards'
                log.debug("mc_create_phase : envscbdirpath %s!\n"%envscbdirpath)
                os.makedirs(envscbdirpath)

                if mc_env_cfg_pool[a][4] != '':
                    #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                    envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                    envname_pkg = envname+"_env_package" 
                    envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                    log.debug("mc_create_phase : envname %s envname_pkg %s mc_env_cfg_pool[%d][4] %s, envscbname_arr %s!\n"%(envname, envname_pkg, a, mc_env_cfg_pool[a][4], envscbname_arr))
                    
                    # # Directory Path For Environment Monitors
                    # envscbdirpath = envdirpath+'/'+'scoreboards'
                    # log.debug("mc_create_phase : envscbdirpath %s!\n"%envscbdirpath)
                    # os.makedirs(envscbdirpath)
                    
                    for d in range (int(envscbname_arr[0])):
                        # envscbname = envname+"_"+envscbname_arr[d+1]
                        
                        if len(envscbname_arr[d+1].split(":"))>1:
                            #envscbname = envname+"_"+envscbname_arr[d+1].split(":")[0]
                            envscbname = envscbname_arr[d+1].split(":")[0]
                        else:
                            #envscbname = envname+"_"+envscbname_arr[d+1]
                            envscbname = envscbname_arr[d+1]
                        
                        self.mc_create_scb(envscbname, envname_pkg) 
                        
                        # Moving the created file to the respective directory
                        shutil.move('./%s_scoreboard.sv'%(envscbname), '%s'%(envscbdirpath))

                
                # Calling the env Agent file create API
                #------------------------------------------------------------------------------
                # Creating the top agent directory inside the environment
                #------------------------------------------------------------------------------
                # Directory Path For Environment Monitors
                envagttopdirpath = envdirpath+'/'+'agents'
                os.makedirs(envagttopdirpath)

                if mc_env_cfg_pool[a][2] != ['']:
                    # # Directory Path For Environment Monitors
                    # envagttopdirpath = envdirpath+'/'+'agents'
                    # os.makedirs(envagttopdirpath)
                    
                    #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                    envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                    envname_pkg = envname
                    envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                    
                    log.debug("mc_create_phase : envname %s  envname_pkg %s  envagtname_arr %s envagttopdirpath %s!\n"%(envname, envname_pkg, envagtname_arr, envagttopdirpath))
                    
                    for e in range (int(envagtname_arr[0])):
                        #envagtname = envname+"_"+envagtname_arr[e+1]
                        envagtname = envagtname_arr[e+1]
                        self.mc_create_agent(envagtname, envname_pkg) 
                    
                        # Directory Path For Environment Monitors
                        envagtdirpath = envagttopdirpath+'/'+envagtname+'_agent'
                        os.makedirs(envagtdirpath)
                        
                        envagtseqdirpath = envagtdirpath+'/'+'sequences'
                        os.makedirs(envagtseqdirpath)
                        log.debug("mc_create_phase : envagtdirpath %s envagtseqdirpath %s!\n"%(envagtdirpath, envagtseqdirpath))
                            
                        # Moving the created file to the respective directory
                        shutil.move('./%s_agent.sv'%(envagtname), '%s'%(envagtdirpath))
                        shutil.move('./%s_agent_config.sv'%(envagtname), '%s'%(envagtdirpath))

                        if mc_env_cfg_pool[a][2][e+1][3] != '':
                            envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envname_pkg %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envname_pkg, envagtdrvname_arr, envagtdirpath))
                            for e1 in range (int(envagtdrvname_arr[0])):
                                
                                log.debug(int(envagtdrvname_arr[0]))
                                log.debug(len(envagtdrvname_arr))
                                
                                # if int(envagtdrvname_arr[0]==1) and len(envagtdrvname_arr) == 1:
                                if len(envagtdrvname_arr) == 1:
                                    envagtdrvname = envagtname 
                                else:
                                    envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                                self.mc_create_driver(envagtdrvname, envname_pkg) 
                                self.mc_create_intf(envagtdrvname, envname_pkg) 
                                self.mc_create_intf_wrapper(envagtdrvname, envname_pkg) 
                                self.mc_create_sequencer(envagtdrvname, envname_pkg) 
                                self.mc_create_sequence(envagtdrvname, envname_pkg) 
                                self.mc_create_sequence_item(envagtdrvname, envname_pkg) 
                            
                                # Moving the created file to the respective directory
                                shutil.move('./%s_driver.sv'%(envagtdrvname), '%s'%(envagtdirpath))
                                shutil.move('./%s_sequencer.sv'%(envagtdrvname), '%s'%(envagtdirpath))
                                shutil.move('./%s_interface.sv'%(envagtdrvname), '%s'%(envagtdirpath))
                                shutil.move('./%s_interface_wrapper.sv'%(envagtdrvname), '%s'%(envagtdirpath))
                                shutil.move('./%s_sequence.sv'%(envagtdrvname), '%s'%(envagtseqdirpath))
                                shutil.move('./%s_sequence_item_base.sv'%(envagtdrvname), '%s'%(envagtseqdirpath))
                        
                        if mc_env_cfg_pool[a][2][e+1][4] != '':
                            envagtmonname_arr = str(mc_env_cfg_pool[a][2][e+1][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envname_pkg %s  envagtmonname_arr %s envagtdirpath %s!\n"%(envname, envname_pkg, envagtmonname_arr, envagtdirpath))
                            for e2 in range (int(envagtmonname_arr[0])):
                                
                                log.debug(int(envagtmonname_arr[0]))
                                log.debug(len(envagtmonname_arr))
                                
                                # if int(envagtmonname_arr[0]==1) and len(envagtmonname_arr) == 1:
                                if len(envagtmonname_arr) == 1:
                                    envagtmonname = envagtname 
                                else:
                                    envagtmonname = envagtname+"_"+envagtmonname_arr[e2+1]
                                self.mc_create_mon(envagtmonname, envname_pkg) 
                                # Putting a condition when to generate the sequence_item when creating agent monitor : 01032021SUN
                                if len(envagtmonname_arr) != 1 or len(envagtdrvname_arr) != 1:
                                    self.mc_create_sequence_item(envagtmonname, envname_pkg) 
                                
                                # Moving the created file to the respective directory
                                shutil.move('./%s_monitor.sv'%(envagtmonname), '%s'%(envagtdirpath))
                                # Putting a condition when to generate the sequence_item when creating agent monitor : 01032021SUN
                                if len(envagtmonname_arr) != 1 or len(envagtdrvname_arr) != 1:
                                    shutil.move('./%s_sequence_item_base.sv'%(envagtmonname), '%s'%(envagtseqdirpath))

                # Calling the env pkg file create API
                if (mc_env_cfg_pool[a][0]):
                    #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                    envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                    envname_pkg = envname+"_env" 
                    self.mc_create_package(envname_pkg) 
                    shutil.move('./%s_env_package.sv'%(envname), '%s'%(envpath))

                # Calling the seq item pkg file create API
                if (mc_env_cfg_pool[a][0]):
                    #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                    envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                    envname_pkg = envname+"_seq_item" 
                    self.mc_create_package(envname_pkg) 
                    shutil.move('./%s_seq_item_package.sv'%(envname), '%s'%(envpath))

                # Calling the seq pkg file create API
                if (mc_env_cfg_pool[a][0]):
                    #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                    envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                    envname_pkg = envname+"_seq" 
                    self.mc_create_package(envname_pkg) 
                    shutil.move('./%s_seq_package.sv'%(envname), '%s'%(envpath))

                # Calling the test pkg file create API
                if (mc_env_cfg_pool[a][0]):
                    #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                    envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                    envname_pkg = envname+"_test" 
                    self.mc_create_package(envname_pkg) 
                    shutil.move('./%s_test_package.sv'%(envname), '%s'%(envpath))

                # Calling the tb top pkg file create API
                # Disabling the tb_top_package as its not requried : 011720
                # if (mc_env_cfg_pool[a][0]):
                #     #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                #     envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                #     envname_pkg = envname+"_tb_top" 
                #     self.mc_create_package(envname_pkg) 
                #     shutil.move('./%s_tb_top_package.sv'%(envname), '%s'%(envpath))

                # Calling the test file create API
                if (mc_env_cfg_pool[a][0]):
                    
                    # Directory Path For ENV tests 
                    envtestdirpath = envdirpath+'/'+'tests'
                    log.debug("mc_create_phase : envtestdirpath %s!\n"%envtestdirpath)
                    os.makedirs(envtestdirpath)
                    
                    #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                    envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                    envname_pkg = envname+"_test" 
                    self.mc_create_test(envname, envname_pkg) 
                    shutil.move('./%s_test.sv'%(envname), '%s'%(envtestdirpath))

                # Calling the tb top create API
                if (mc_env_cfg_pool[a][0]):
                    #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                    envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                    self.mc_create_tb_top(envname) 
                    shutil.move('./%s_tb_top.sv'%(envname), '%s'%(tbpath))
            
                # Calling the env list
                if (mc_env_cfg_pool[a][0]):
                    envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                    log.debug("mc_create_phase : envname %s !\n"%(envname))
                   
                    self.mc_fl_list(envname)
                    shutil.move('./%s_environment.f'%(envname), '%s'%(envflpath))
                    shutil.move('./%s_tbtop.f'%(envname), '%s'%(envflpath))
                    shutil.move('./%s_common.f'%(envname), '%s'%(envflpath))

                # Calling the API to create env_setup
                if (mc_env_cfg_pool[a][0]):
                    envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                    log.debug("mc_create_phase : envname %s !\n"%(envname))

                    self.mc_create_tb_setup(envname)
                    shutil.move('./%s_tb_setup.sh'%(envname), '%s'%(envscriptspath))
            else:
                log.debug("mc_create_phase : Build Only the Necessary files needed for the environment!\n")
                
                # Calling the env file create API
                if (mc_env_cfg_pool[a][0]):
                    #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                    envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                    if "__c" in envname:
                        mc_curr_env_set_c = 1
                        envname = envname.replace("__c","")
                        envname_pkg = envname+"_env_package" 
                        
                        log.debug("mc_create_phase : envname %s envname_pkg %s mc_curr_env_set_c %d!\n"%(envname, envname_pkg, mc_curr_env_set_c))
                        
                        self.mc_create_env(envname, envname_pkg)
                       
                        #-----------------------------------------------------------------------------------------
                        # Creating the env directory structure only if its like __c for the environment as a whole!
                        #-----------------------------------------------------------------------------------------
                        if mc_env_cfg_pool[a][6] != []:
                            if mc_env_cfg_pool[a][6] == 'pwd':
                                envdirpath = str(os.popen('pwd').read()).strip()
                            else:
                                envdirpath = str(mc_env_cfg_pool[a][6]).strip('[,],\'')
                        
                            # Director Path For Env 
                            envdirpath = envdirpath+'/'+envname+'_env'   
                            log.debug("mc_create_phase : envdirpath %s!\n"%envdirpath)
                            
                            if os.path.exists(envdirpath):
                                log.debug("mc_create_phase : Environment Dir Path %s Already Exists! Moving the Directory to %s_%s\n"%(envdirpath, envdirpath, self.rtn_date_time_full()))
                                shutil.move('%s'%(envdirpath), '%s_%s'%(envdirpath, self.rtn_date_time_full()))
                            os.makedirs(envdirpath)
                            
                            # Directory Path For Other Env Directory 
                            envpath = envdirpath+'/'+'env'
                            os.makedirs(envpath)
                            
                            # envtrkpath = envdirpath+'/'+'trackers'
                            # os.makedirs(envtrkpath)
                            
                            envchkrpath = envdirpath+'/'+'checkers'
                            os.makedirs(envchkrpath)
                            
                            # envconfilepath = envdirpath+'/'+'conn_file'
                            # os.makedirs(envconfilepath)
                            
                            tbpath = envdirpath+'/'+'tb'
                            os.makedirs(tbpath)
                        
                            envdocspath = envdirpath+'/'+'docs'
                            os.makedirs(envdocspath)
                        
                            envrunpath = envdirpath+'/'+'run'
                            os.makedirs(envrunpath)
                            
                            envflpath = envdirpath+'/'+'filelist'
                            os.makedirs(envflpath)
                        
                            envscriptspath = envdirpath+'/'+'scripts'
                            os.makedirs(envscriptspath)
                            
                            #log.debug("mc_create_phase : envtrkpath %s, envchkrpath %s, envconfilepath %s!\n"%(envtrkpath, envchkrpath, envconfilepath))
                            log.debug("mc_create_phase : envchkrpath %s, envdocspath %s, envrunpath %s, envflpath %s, envscriptspath %s!\n"%(envchkrpath, envdocspath, envrunpath, envflpath, envscriptspath))
                        #-----------------------------------------------------------------------------------------
                        
                        # Moving the env specific files
                        shutil.move('./%s_environment.sv'%(envname), '%s'%(envpath))
                        shutil.move('./%s_environment_config.sv'%(envname), '%s'%(envpath))
                        shutil.move('./%s_environment_macros.sv'%(envname), '%s'%(envpath))
                    else:
                        #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                        envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                        envname_pkg = envname+"_env_package" 

                        # Just creating the envdirpath for other components
                        if mc_env_cfg_pool[a][6] != []:
                            if mc_env_cfg_pool[a][6] == 'pwd':
                                envdirpath = str(os.popen('pwd').read()).strip()
                            else:
                                envdirpath = str(mc_env_cfg_pool[a][6]).strip('[,],\'')
                        
                            # Director Path For Env 
                            envdirpath = envdirpath+'/'+envname+'_env'   
                            log.debug("mc_create_phase : envdirpath %s!\n"%envdirpath)
                
                
                #------------------------------------------------------------------------------
                # Directory Path For Environment RAL, Memory Models
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    if mc_curr_env_set_c == 1:
                        envmdldirpath = envdirpath+'/'+'models'
                        log.debug("mc_create_phase : envmdldirpath %s!\n"%envmdldirpath)
                        
                        if os.path.exists(envmdldirpath):
                            log.debug("mc_create_phase : Environment RAL, Memory Dir Path %s Already Exists!\n"%(envmdldirpath))
                        else:
                            log.debug("mc_create_phase : Environment RAL, Memory Dir Path %s Doesn't Exists. Creating a new One!!\n"%(envmdldirpath))
                            os.makedirs(envmdldirpath)

                
                # Calling the env sequences file create API
                #------------------------------------------------------------------------------
                # Directory Path For Environment/Test Sequences Files  
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    if mc_curr_env_set_c == 1:
                        envseqdirpath = envdirpath+'/'+'env_sequences'
                        log.debug("mc_create_phase : envseqdirpath %s!\n"%envseqdirpath)
                        
                        if os.path.exists(envseqdirpath):
                            log.debug("mc_create_phase : Environment Sequences Dir Path %s Already Exists!\n"%(envseqdirpath))
                        else:
                            log.debug("mc_create_phase : Environment Sequences Dir Path %s Doesn't Exists. Creating a new One!!\n"%(envseqdirpath))
                            os.makedirs(envseqdirpath)

    
                # Calling the env interface file create API
                if mc_env_cfg_pool[a][7] != []:
                    if mc_env_cfg_pool[a][7][0] != '':
                        
                        # Env interface file path
                        envintfdirpath = envdirpath+'/'+'env_interfaces'
                        log.debug("mc_create_phase : envintfdirpath %s!\n"%envintfdirpath)
                        
                        # Check if __c exists, if so check if the directory already exists, if not create one 
                        if self.substr_str_search('__c', mc_env_cfg_pool[a][7]) or mc_curr_env_set_c == 1:
                            if os.path.exists(envintfdirpath):
                                log.debug("mc_create_phase : Environment Interface Dir Path %s Already Exists!\n"%(envintfdirpath))
                            else:
                                log.debug("mc_create_phase : Environment Interface Dir Path %s Doesn't Exists. Creating a new One!!\n"%(envintfdirpath))
                                os.makedirs(envintfdirpath)

                        envintfname_arr = str(mc_env_cfg_pool[a][7][0]).split(",")
                        
                        log.debug("mc_create_phase : envname %s  envname_pkg %s  envintfname_arr %s mc_curr_env_set_c %d!\n"%(envname, envname_pkg, envintfname_arr, mc_curr_env_set_c))
                        
                        for b in range (int(envintfname_arr[0])):
                            log.debug("mc_create_phase : envname %s envintfname_arr %s mc_curr_env_set_c %d!\n"%(envname, envintfname_arr, mc_curr_env_set_c))
                            if (len(envintfname_arr) == 1 and "__c" in envintfname_arr[0]) or (len(envintfname_arr) == 1 and int(envintfname_arr[0]) == 1):
                                envintfname = envname
                                
                                #if "__c" in envintfname_arr or mc_curr_env_set_c == 1:
                                if "__c" in str(envintfname_arr) or mc_curr_env_set_c == 1:
                                    self.mc_create_intf(envintfname, envname_pkg) 
                                    self.mc_create_intf_wrapper(envintfname, envname_pkg) 
                                    shutil.move('./%s_interface.sv'%(envintfname), '%s'%(envintfdirpath))
                                    shutil.move('./%s_interface_wrapper.sv'%(envintfname), '%s'%(envintfdirpath))
                            else:
                                if "__c" in envintfname_arr[b+1]:
                                    #envintfname = envname+"_"+envintfname_arr[b+1].replace("__c","")
                                    envintfname = envintfname_arr[b+1].replace("__c","")
                                else:
                                    #envintfname = envname+"_"+envintfname_arr[b+1]
                                    envintfname = envintfname_arr[b+1]
                                
                                log.debug("mc_create_phase : envname %s envintfname_arr[b+1] %s envintfname %s!\n"%(envname, envintfname_arr[b+1], envintfname))
                                
                                if "__c" in envintfname_arr[b+1] or mc_curr_env_set_c ==1:
                                    self.mc_create_intf(envintfname, envname_pkg) 
                                    self.mc_create_intf_wrapper(envintfname, envname_pkg) 
                                    shutil.move('./%s_interface.sv'%(envintfname), '%s'%(envintfdirpath))
                                    shutil.move('./%s_interface_wrapper.sv'%(envintfname), '%s'%(envintfdirpath))

                # Calling the env monitor file create API
                if mc_env_cfg_pool[a][3] != '':
                    envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                    log.debug("mc_create_phase : envname %s envname_pkg %s mc_env_cfg_pool[%d][3] %s, envmonname_arr %s!\n"%(envname, envname_pkg, a, mc_env_cfg_pool[a][3], envmonname_arr))
                    
                    # Directory Path For Environment Monitors
                    envmondirpath = envdirpath+'/'+'env_monitors'
                    log.debug("mc_create_phase : envmondirpath %s , mc_curr_env_set_c %d!\n"%(envmondirpath, mc_curr_env_set_c))
                    
                    # Check if __c exists, if so check if the directory already exists, if not create one 
                    if self.substr_str_search('__c', mc_env_cfg_pool[a][3]) or mc_curr_env_set_c == 1:
                        if os.path.exists(envmondirpath):
                            log.debug("mc_create_phase : Environment Monitor Dir Path %s Already Exists!\n"%(envmondirpath))
                        else:
                            log.debug("mc_create_phase : Environment Monitor Dir Path %s Doesn't Exists. Creating a new One!!\n"%(envmondirpath))
                            os.makedirs(envmondirpath)

                    for c in range (int(envmonname_arr[0])):
                        if len(envmonname_arr[c+1].split(":"))>1:
                            if "__c" in envmonname_arr[c+1]:
                                #envmonname = envname+"_"+envmonname_arr[c+1].split(":")[0].replace("__c","")
                                envmonname = envmonname_arr[c+1].split(":")[0].replace("__c","")
                            else:
                                #envmonname = envname+"_"+envmonname_arr[c+1].split(":")[0]
                                envmonname = envmonname_arr[c+1].split(":")[0]
                        else:
                            if "__c" in envmonname_arr[c+1]:
                                #envmonname = envname+"_"+envmonname_arr[c+1].replace("__c","")
                                envmonname = envmonname_arr[c+1].replace("__c","")
                            else:
                                #envmonname = envname+"_"+envmonname_arr[c+1]
                                envmonname = envmonname_arr[c+1]
                        
                        # if "__c" in envmonname_arr[c+1]:
                        #     envmonname = envname+"_"+envmonname_arr[c+1].replace("__c","")
                        # else:
                        #     envmonname = envname+"_"+envmonname_arr[c+1]

                        if "__c" in envmonname_arr[c+1] or mc_curr_env_set_c == 1:
                            self.mc_create_env_mon(envmonname, envname_pkg) 
                            self.mc_create_sequence_item(envmonname, envname_pkg) 
                            
                            # Moving the created file to the respective directory
                            shutil.move('./%s_monitor.sv'%(envmonname), '%s'%(envmondirpath))
                            shutil.move('./%s_sequence_item_base.sv'%(envmonname), '%s'%(envmondirpath))


                # Calling the env scoreboard file create API
                if mc_env_cfg_pool[a][4] != '':
                    envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                    log.debug("mc_create_phase : envname %s envname_pkg %s mc_curr_env_set_c %d mc_env_cfg_pool[%d][4] %s, envscbname_arr %s!\n"%(envname, envname_pkg, mc_curr_env_set_c, a, mc_env_cfg_pool[a][4], envscbname_arr))
                    
                    # Directory Path For Environment Scoreboard 
                    envscbdirpath = envdirpath+'/'+'scoreboards'
                    log.debug("mc_create_phase : envscbdirpath %s!\n"%envscbdirpath)
                    
                    # Check if __c exists, if so check if the directory already exists, if not create one 
                    if self.substr_str_search('__c', mc_env_cfg_pool[a][4]) or mc_curr_env_set_c == 1:
                        if os.path.exists(envscbdirpath):
                            log.debug("mc_create_phase : Environment Scoreboard Dir Path %s Already Exists!\n"%(envscbdirpath))
                        else:
                            log.debug("mc_create_phase : Environment Scoreboard Dir Path %s Doesn't Exists. Creating a new One!!\n"%(envscbdirpath))
                            os.makedirs(envscbdirpath)

                    for d in range (int(envscbname_arr[0])):
                        if len(envscbname_arr[d+1].split(":"))>1:
                            if "__c" in envscbname_arr[d+1]:
                                #envscbname = envname+"_"+envscbname_arr[d+1].split(":")[0].replace("__c","")
                                envscbname = envscbname_arr[d+1].split(":")[0].replace("__c","")
                            else:    
                                #envscbname = envname+"_"+envscbname_arr[d+1].split(":")[0]
                                envscbname = envscbname_arr[d+1].split(":")[0]
                        else:
                            if "__c" in envscbname_arr[d+1]:
                                #envscbname = envname+"_"+envscbname_arr[d+1].replace("__c","")
                                envscbname = envscbname_arr[d+1].replace("__c","")
                            else:
                                #envscbname = envname+"_"+envscbname_arr[d+1]
                                envscbname = envscbname_arr[d+1]
                        
                        #if "__c" in envscbname_arr[d+1]:
                        #    envscbname = envname+"_"+envscbname_arr[d+1].replace("__c","")
                        #else:
                        #    envscbname = envname+"_"+envscbname_arr[d+1]

                        if "__c" in envscbname_arr[d+1] or mc_curr_env_set_c == 1:
                            self.mc_create_scb(envscbname, envname_pkg) 
                            
                            # Moving the created file to the respective directory
                            shutil.move('./%s_scoreboard.sv'%(envscbname), '%s'%(envscbdirpath))


                # Calling the env Agent file create API
                if mc_env_cfg_pool[a][2] != ['']:
                    
                    # Directory Path For Environment Monitors
                    envagttopdirpath = envdirpath+'/'+'agents'

                    # Check if __c exists, if so check if the directory already exists, if not create one 
                    if self.substr_str_search('__c', mc_env_cfg_pool[a][2]) or mc_curr_env_set_c == 1:
                        if os.path.exists(envagttopdirpath):
                            log.debug("mc_create_phase : Agent Dir Path %s Already Exists!\n"%(envagttopdirpath))
                        else:
                            log.debug("mc_create_phase : Agent Dir Path %s Doesn't Exists. Creating a new One!!\n"%(envagttopdirpath))
                            os.makedirs(envagttopdirpath)
                    
                    envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                    
                    log.debug("mc_create_phase : envname %s  envname_pkg %s  mc_curr_env_set_c %d envagtname_arr %s envagttopdirpath %s!\n"%(envname, envname_pkg, mc_curr_env_set_c, envagtname_arr, envagttopdirpath))

                    for e in range (int(envagtname_arr[0])):
                        if "__c" in envagtname_arr[e+1]:
                            #envagtname = envname+"_"+envagtname_arr[e+1].replace("__c","")
                            envagtname = envagtname_arr[e+1].replace("__c","")
                        else:
                            #envagtname = envname+"_"+envagtname_arr[e+1]
                            envagtname = envagtname_arr[e+1]
                            
                        # Directory Path For Environment Agents 
                        envagtdirpath = envagttopdirpath+'/'+envagtname+'_agent'
                        envagtseqdirpath = envagtdirpath+'/'+'sequences'
                        
                        if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1:
                            self.mc_create_agent(envagtname, envname_pkg) 
                            mc_curr_env_agt_set_c = 1

                            # Check if __c exists, if so check if the directory already exists, if not create one 
                            if self.substr_str_search('__c', envagtname_arr[e+1]) or mc_curr_env_set_c == 1:
                                if os.path.exists(envagtdirpath):
                                    log.debug("mc_create_phase : Agent Dir Path %s Already Exists!\n"%(envagtdirpath))
                                else:
                                    log.debug("mc_create_phase : Agent Dir Path %s Doesn't Exists. Creating a new One!!\n"%(envagtdirpath))
                                    os.makedirs(envagtdirpath)
                                    os.makedirs(envagtseqdirpath)

                            # Moving the created file to the respective directory
                            shutil.move('./%s_agent.sv'%(envagtname), '%s'%(envagtdirpath))
                            shutil.move('./%s_agent_config.sv'%(envagtname), '%s'%(envagtdirpath))

                        if mc_env_cfg_pool[a][2][e+1][3] != '':
                            envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envname_pkg %s  mc_curr_env_agt_set_c %d envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envname_pkg, mc_curr_env_agt_set_c, envagtdrvname_arr, envagtdirpath))
                            for e1 in range (int(envagtdrvname_arr[0])):
                                # if len(envagtdrvname_arr) == 1 and "__c" in envagtdrvname_arr[0] or int(envagtdrvname_arr[0])==1:
                                if len(envagtdrvname_arr) == 1:
                                    if "__c" in envagtdrvname_arr[0] or mc_curr_env_agt_set_c == 1 or mc_curr_env_set_c == 1:
                                        envagtdrvname = envagtname 
                                
                                        self.mc_create_driver(envagtdrvname, envname_pkg) 
                                        self.mc_create_intf(envagtdrvname, envname_pkg) 
                                        self.mc_create_intf_wrapper(envagtdrvname, envname_pkg) 
                                        self.mc_create_sequencer(envagtdrvname, envname_pkg) 
                                        self.mc_create_sequence(envagtdrvname, envname_pkg) 
                                        self.mc_create_sequence_item(envagtdrvname, envname_pkg) 
                                        
                                        # Moving the created file to the respective directory
                                        shutil.move('./%s_driver.sv'%(envagtdrvname), '%s'%(envagtdirpath))
                                        shutil.move('./%s_sequencer.sv'%(envagtdrvname), '%s'%(envagtdirpath))
                                        shutil.move('./%s_interface.sv'%(envagtdrvname), '%s'%(envagtdirpath))
                                        shutil.move('./%s_interface_wrapper.sv'%(envagtdrvname), '%s'%(envagtdirpath))
                                        shutil.move('./%s_sequence.sv'%(envagtdrvname), '%s'%(envagtseqdirpath))
                                        shutil.move('./%s_sequence_item_base.sv'%(envagtdrvname), '%s'%(envagtseqdirpath))
                                        
                                        log.debug("mc_create_phase : envagtdrvname_arr %s envagtdrvname %s!\n"%(envagtdrvname_arr, envagtdrvname))
                                else:
                                    if "__c" in envagtdrvname_arr[e1+1]:
                                        envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1].replace("__c","")
                                        
                                        self.mc_create_driver(envagtdrvname, envname_pkg) 
                                        self.mc_create_intf(envagtdrvname, envname_pkg) 
                                        self.mc_create_intf_wrapper(envagtdrvname, envname_pkg) 
                                        self.mc_create_sequencer(envagtdrvname, envname_pkg) 
                                        self.mc_create_sequence(envagtdrvname, envname_pkg) 
                                        self.mc_create_sequence_item(envagtdrvname, envname_pkg) 
                                        
                                        # Moving the created file to the respective directory
                                        shutil.move('./%s_driver.sv'%(envagtdrvname), '%s'%(envagtdirpath))
                                        shutil.move('./%s_sequencer.sv'%(envagtdrvname), '%s'%(envagtdirpath))
                                        shutil.move('./%s_interface.sv'%(envagtdrvname), '%s'%(envagtdirpath))
                                        shutil.move('./%s_interface_wrapper.sv'%(envagtdrvname), '%s'%(envagtdirpath))
                                        shutil.move('./%s_sequence.sv'%(envagtdrvname, ), '%s'%(envagtseqdirpath))
                                        shutil.move('./%s_sequence_item_base.sv'%(envagtdrvname, ), '%s'%(envagtseqdirpath))
                                        
                                        log.debug("mc_create_phase : envagtdrvname_arr %s envagtdrvname %s!\n"%(envagtdrvname_arr, envagtdrvname))
                                    else:
                                        envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                               
                                        if  mc_curr_env_agt_set_c == 1 or mc_curr_env_set_c == 1:
                                            self.mc_create_driver(envagtdrvname, envname_pkg) 
                                            self.mc_create_intf(envagtdrvname, envname_pkg) 
                                            self.mc_create_intf_wrapper(envagtdrvname, envname_pkg) 
                                            self.mc_create_sequencer(envagtdrvname, envname_pkg) 
                                            self.mc_create_sequence(envagtdrvname, envname_pkg) 
                                            self.mc_create_sequence_item(envagtdrvname, envname_pkg) 
                                            
                                            # Moving the created file to the respective directory
                                            shutil.move('./%s_driver.sv'%(envagtdrvname), '%s'%(envagtdirpath))
                                            shutil.move('./%s_sequencer.sv'%(envagtdrvname), '%s'%(envagtdirpath))
                                            shutil.move('./%s_interface.sv'%(envagtdrvname), '%s'%(envagtdirpath))
                                            shutil.move('./%s_interface_wrapper.sv'%(envagtdrvname), '%s'%(envagtdirpath))
                                            shutil.move('./%s_sequence.sv'%(envagtdrvname), '%s'%(envagtseqdirpath))
                                            shutil.move('./%s_sequence_item_base.sv'%(envagtdrvname), '%s'%(envagtseqdirpath))

                                        log.debug("mc_create_phase : envagtdrvname_arr %s envagtdrvname %s!\n"%(envagtdrvname_arr, envagtdrvname))
                            
                        if mc_env_cfg_pool[a][2][e+1][4] != '':
                            envagtmonname_arr = str(mc_env_cfg_pool[a][2][e+1][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envname_pkg %s  mc_curr_env_agt_set_c %d envagtmonname_arr %s envagtdirpath %s!\n"%(envname, envname_pkg, mc_curr_env_agt_set_c, envagtmonname_arr, envagtdirpath))
                            for e2 in range (int(envagtmonname_arr[0])):
                                # if len(envagtmonname_arr) == 1 and "__c" in envagtmonname_arr[0] or int(envagtmonname_arr[0])==1 :
                                if len(envagtmonname_arr) == 1:
                                    if "__c" in envagtmonname_arr[0] or mc_curr_env_agt_set_c == 1 or mc_curr_env_set_c == 1:
                                        envagtmonname = envagtname 
                                        
                                        self.mc_create_mon(envagtmonname, envname_pkg) 
                                        # Don't Generate sequence_item if the envagtmonname_arr size is 1
                                        if len(envagtdrvname_arr) != 1:
                                            self.mc_create_sequence_item(envagtmonname, envname_pkg) 

                                        # Moving the created file to the respective directory
                                        shutil.move('./%s_monitor.sv'%(envagtmonname), '%s'%(envagtdirpath))
                                        
                                        # Putting a condition when to generate the sequence_item when creating agent monitor : 01032021SUN
                                        if len(envagtdrvname_arr) != 1:
                                            shutil.move('./%s_sequence_item_base.sv'%(envagtmonname), '%s'%(envagtseqdirpath))
                                    
                                        log.debug("mc_create_phase : envagtmonname_arr %s envagtmonname %s!\n"%(envagtmonname_arr, envagtmonname))
                                else:
                                    if "__c" in envagtmonname_arr[e2+1]:
                                        envagtmonname = envagtname+"_"+envagtmonname_arr[e2+1].replace("__c","")
                                        log.debug("mc_create_phase : envagtmonname %s!\n"%(envagtmonname))
                                    
                                        self.mc_create_mon(envagtmonname, envname_pkg) 
                                        self.mc_create_sequence_item(envagtmonname, envname_pkg) 

                                        # Moving the created file to the respective directory
                                        shutil.move('./%s_monitor.sv'%(envagtmonname), '%s'%(envagtdirpath))
                                        shutil.move('./%s_sequence_item_base.sv'%(envagtmonname), '%s'%(envagtseqdirpath))
                                    else:    
                                        envagtmonname = envagtname+"_"+envagtmonname_arr[e2+1]
                                        log.debug("mc_create_phase : envagtmonname %s!\n"%(envagtmonname))
                               
                                        if  mc_curr_env_agt_set_c == 1 or mc_curr_env_set_c == 1:
                                            self.mc_create_mon(envagtmonname, envname_pkg) 
                                            self.mc_create_sequence_item(envagtmonname, envname_pkg) 

                                            # Moving the created file to the respective directory
                                            shutil.move('./%s_monitor.sv'%(envagtmonname), '%s'%(envagtdirpath))
                                            shutil.move('./%s_sequence_item_base.sv'%(envagtmonname), '%s'%(envagtseqdirpath))

                                    log.debug("mc_create_phase : envagtmonname_arr %s envagtmonname %s!\n"%(envagtmonname_arr, envagtmonname))

                        # Clearning the agent related variable 
                        mc_curr_env_agt_set_c = 0
                        # Agent loop ends

                if mc_curr_env_set_c == 1:
                    # Calling the env pkg file create API
                    if (mc_env_cfg_pool[a][0]):
                        envname_pkg = envname+"_env" 
                        self.mc_create_package(envname_pkg) 
                        shutil.move('./%s_env_package.sv'%(envname), '%s'%(envpath))

                    # Calling the seq item pkg file create API
                    if (mc_env_cfg_pool[a][0]):
                        #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                        envname_pkg = envname+"_seq_item" 
                        self.mc_create_package(envname_pkg) 
                        shutil.move('./%s_seq_item_package.sv'%(envname), '%s'%(envpath))
    
                    # Calling the seq pkg file create API
                    if (mc_env_cfg_pool[a][0]):
                        envname_pkg = envname+"_seq" 
                        self.mc_create_package(envname_pkg) 
                        shutil.move('./%s_seq_package.sv'%(envname), '%s'%(envpath))

                    # Calling the test pkg file create API
                    if (mc_env_cfg_pool[a][0]):
                        envname_pkg = envname+"_test" 
                        self.mc_create_package(envname_pkg) 
                        shutil.move('./%s_test_package.sv'%(envname), '%s'%(envpath))

                    # Calling the tb top pkg file create API
                    # Disabling the tb_top_package as its not requried : 011720
                    # if (mc_env_cfg_pool[a][0]):
                    #     #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                    #     envname_pkg = envname+"_tb_top" 
                    #     self.mc_create_package(envname_pkg) 
                    #     shutil.move('./%s_tb_top_package.sv'%(envname), '%s'%(envpath))

                    # Calling the test file create API
                    if (mc_env_cfg_pool[a][0]):
                        
                        # Directory Path For ENV tests 
                        envtestdirpath = envdirpath+'/'+'tests'
                        log.debug("mc_create_phase : envtestdirpath %s!\n"%envtestdirpath)
                       
                        # Check if __c exists, if so check if the directory already exists, if not create one 
                        if os.path.exists(envtestdirpath):
                            log.debug("mc_create_phase : Env Test Dir Path %s Already Exists!\n"%(envtestdirpath))
                        else:
                            log.debug("mc_create_phase : Env Test Dir Path %s Doesn't Exists. Creating a new One!!\n"%(envtestdirpath))
                            os.makedirs(envtestdirpath)

                        envname_pkg = envname+"_test" 
                        self.mc_create_test(envname, envname_pkg) 
                        shutil.move('./%s_test.sv'%(envname), '%s'%(envtestdirpath))

                    # Calling the tb top create API
                    if (mc_env_cfg_pool[a][0]):
                        self.mc_create_tb_top(envname) 
                        shutil.move('./%s_tb_top.sv'%(envname), '%s'%(tbpath))
                    
                    # Calling the env list
                    if (mc_env_cfg_pool[a][0]):
                        #envdocspath = envdirpath+'/'+'docs'
                        #envrunpath = envdirpath+'/'+'run'
                        envflpath = envdirpath+'/'+'filelist'
                       
                        #if os.path.exists(envdocspath):
                        #if os.path.exists(envrunpath):
                        if os.path.exists(envflpath):
                            log.debug("mc_create_phase : Env Run Dir Path %s Already Exists!\n"%(envflpath))
                        else:
                            log.debug("mc_create_phase : Env Run Dir Path %s Doesn't Exists. Creating a new One!!\n"%(envflpath))
                            #os.makedirs(envdocspath)
                            #os.makedirs(envrunpath)
                            os.makedirs(envflpath)

                        self.mc_fl_list(envname)
                        shutil.move('./%s_environment.f'%(envname), '%s'%(envflpath))
                        shutil.move('./%s_tbtop.f'%(envname), '%s'%(envflpath))
                        shutil.move('./%s_common.f'%(envname), '%s'%(envflpath))
                
                    # Calling the API to create env_setup
                    if (mc_env_cfg_pool[a][0]):
                        # envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                        log.debug("mc_create_phase : envname %s !\n"%(envname))

                        self.mc_create_tb_setup(envname)
                        shutil.move('./%s_tb_setup.sh'%(envname), '%s'%(envscriptspath))

                    # Clearning the variable 
                    mc_curr_env_set_c = 0
   

    def mc_create_env(self, envname, envname_pkg):
        log.debug("mc_create_env : Calling the API to build Env File. envname %s, envname_pkg %s!\n"%(envname, envname_pkg))
        #os.system('$PROJ_ROOT/.bin_v3/generate_env.csh  %s %s' % (str(envname), str(envname_pkg),))
        self.generate_env(str(envname), str(envname_pkg))
        
        log.debug("mc_create_env : Calling the API to build Env Macro File. envname %s!\n"%(envname))
        #os.system('$PROJ_ROOT/.bin_v3/generate_env_macros.csh  %s' % (str(envname),))
        self.generate_env_macros(str(envname))
   
    
    def mc_create_intf(self, intfname, pkgname):
        log.debug("mc_create_intf : Calling the API to build Interface File. intfname %s, pkgname %s!\n"%(intfname, pkgname))
        #os.system('$PROJ_ROOT/.bin_v3/generate_interface.csh  %s %s' % (str(intfname), str(pkgname)))
        self.generate_interface(str(intfname))
       

    def mc_create_intf_wrapper(self, intfname, pkgname):
        log.debug("mc_create_intf_wrapper : Calling the API to build Interface Wrapper File. intfname %s, pkgname %s!\n"%(intfname, pkgname))
        #os.system('$PROJ_ROOT/.bin_v3/generate_interface_wrapper.csh  %s %s' % (str(intfname), str(pkgname)))
        self.generate_interface_wrapper(str(intfname))


    def mc_create_mon(self, monname, pkgname):
        log.debug("mc_create_mon : Calling the API to build Agent Monitor File. monname %s, pkgname %s!\n"%(monname, pkgname))
        #os.system('$PROJ_ROOT/.bin_v3/generate_monitor.csh  %s %s' % (str(monname), str(pkgname)))
        self.generate_monitor(str(monname), str(pkgname))


    def mc_create_env_mon(self, monname, pkgname):
        log.debug("mc_create_env_mon : Calling the API to build Env Monitor File. monname %s, pkgname %s!\n"%(monname, pkgname))
        #os.system('$PROJ_ROOT/.bin_v3/generate_env_monitor.csh  %s %s' % (str(monname), str(pkgname)))
        self.generate_env_monitor(str(monname), str(pkgname))


    def mc_create_scb(self, scbname, pkgname):
        log.debug("mc_create_scb : Calling the API to build Env Scoreboard File. scbname %s, pkgname %s!\n"%(scbname, pkgname))
        #os.system('$PROJ_ROOT/.bin_v3/generate_scoreboard.csh  %s %s' % (str(scbname), str(pkgname)))
        self.generate_scoreboard(str(scbname), str(pkgname))

    
    def mc_create_agent(self, agtname, pkgname):
        log.debug("mc_create_agent : Calling the API to build Env Agents File. agtname %s, pkgname %s!\n"%(agtname, pkgname))
        #os.system('$PROJ_ROOT/.bin_v3/generate_agent_alone_mc.csh  %s %s' % (str(agtname), str(pkgname)))
        self.generate_agent_alone_mc(str(agtname), str(pkgname))
   

    def mc_create_driver(self, drvname, pkgname):
        log.debug("mc_create_driver : Calling the API to build Env Agents File. drvname %s, pkgname %s!\n"%(drvname, pkgname))
        #os.system('$PROJ_ROOT/.bin_v3/generate_driver.csh  %s %s' % (str(drvname), str(pkgname)))
        self.generate_driver(str(drvname), str(pkgname))
   

    def mc_create_sequencer(self, seqrname, pkgname):
        log.debug("mc_create_sequencer : Calling the API to build Env Agents File. seqrname %s, pkgname %s!\n"%(seqrname, pkgname))
        #os.system('$PROJ_ROOT/.bin_v3/generate_sequencer.csh  %s %s' % (str(seqrname), str(pkgname)))
        self.generate_sequencer(str(seqrname), str(pkgname))
   

    def mc_create_sequence(self, seqname, pkgname):
        log.debug("mc_create_sequence : Calling the API to build Env Agents File. seqname %s, pkgname %s!\n"%(seqname, pkgname))
        #os.system('$PROJ_ROOT/.bin_v3/generate_sequence.csh  %s %s' % (str(seqname), str(pkgname)))
        self.generate_sequence(str(seqname), str(pkgname))
   

    def mc_create_sequence_item(self, seqitemname, pkgname):
        log.debug("mc_create_sequence_item : Calling the API to build Env Agents File. seqitemname %s, pkgname %s!\n"%(seqitemname, pkgname))
        #os.system('$PROJ_ROOT/.bin_v3/generate_sequence_item.csh  %s %s' % (str(seqitemname), str(pkgname)))
        self.generate_sequence_item(str(seqitemname), str(pkgname))
   

    def mc_create_package(self, pkgname):
        log.debug("mc_create_package : Calling the API to build Package File. pkgname %s!\n"%pkgname)
        #os.system('$PROJ_ROOT/.bin_v3/generate_package.csh  %s' % (str(pkgname)))
        self.generate_package(str(pkgname))


    def mc_create_test(self, envname, envname_pkg):
        log.debug("mc_create_test : Calling the API to build Test File. envname %s, envname_pkg %s!\n"%(envname, envname_pkg))
        #os.system('$PROJ_ROOT/.bin_v3/generate_test.csh  %s %s' % (str(envname), str(envname_pkg)))
        self.generate_test(str(envname), str(envname_pkg))

    
    def mc_create_tb_top(self, envname):
        log.debug("mc_create_tb_top : Calling the API to build Tb Top File. envname %s!\n"%envname)
        #os.system('$PROJ_ROOT/.bin_v3/generate_top_mc.csh  %s' % (str(envname)))
        self.generate_top_mc(str(envname))
   

    def mc_fl_list(self, envname):
        log.debug("mc_fl_list : Calling the API to create the env listfile. envname %s!\n"%(envname))
        #os.system('$PROJ_ROOT/.bin_v3/generate_fl.csh  %s' % (str(envname),))
        self.generate_fl(str(envname))
   

    def mc_create_tb_setup(self, envname):
        log.debug("mc_create_tb_setup : Calling the API to create the env setup. envname %s!\n"%(envname))
        self.generate_tb_setup(str(envname))


    def mc_edit_phase(self):
        global mc_env_cfg_pool
        global create_stitch
        global stitch_only
        global cxn_only
        global ei_only
        global mc_curr_env_set_c
        global mc_curr_env_set_s
        global mc_curr_env_agt_set_c 
        global mc_curr_env_agt_set_s 
        global mc_global_env_mon_scb_con_arr   
        global mc_curr_env_seq_exists
        global mc_curr_env_mon_exists

        # Local Variables for edit phase
        ei_line_found = 0
        ei_line_found_1 = 0
        em_line_found = 0
        es_line_found = 0
        ea_line_found = 0
        eai_line_found = 0
        
        log.debug("mc_edit_phase : Calling the mc_edit_phase!\n")
        
        log.debug("mc_edit_phase :\n, mc_env_cfg_pool %s\n, mc_global_env_mon_scb_con_arr %s\n"%(mc_env_cfg_pool, mc_global_env_mon_scb_con_arr))
  
        log.debug("mc_edit_phase: mc_curr_env_set_c %d\n"%(mc_curr_env_set_c))

        # Cycle through all the environment and edit the files 
        for a in range (len(mc_env_cfg_pool)):
            if not create_stitch and not stitch_only and not cxn_only and not ei_only: #CREATENEWENV
                log.debug("mc_edit_phase : Going to edit all the files for mc_env_cfg_pool[%d] %s!\n"%(a, mc_env_cfg_pool[a]))
                
                #----------------------------------------------------------------------
                # Environment Directory Path For FIles to Edit 
                #----------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                    envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                    log.debug("mc_create_phase : envname %s!\n"%envname)
                    
                    if mc_env_cfg_pool[a][6] != []:
                        if mc_env_cfg_pool[a][6] == 'pwd':
                            envdirpath = str(os.popen('pwd').read()).strip()
                        else:
                            envdirpath = str(mc_env_cfg_pool[a][6]).strip('[,],\'')
                    
                        # Director Path For Env 
                        #envdirpath = envdirpath+'/'+(str(mc_env_cfg_pool[a][0]).split(",")[1])+'_env'   
                        envdirpath = envdirpath+'/'+(str(mc_env_cfg_pool[a][0]).split(",")[1]).split(":")[0]+'_env'
                        log.debug("mc_create_phase : envdirpath %s!\n"%envdirpath)
                        
                        # Directory Path For Other Env Directory 
                        envpath = envdirpath+'/'+'env'
                        # envtrkpath = envdirpath+'/'+'trackers'
                        envchkrpath = envdirpath+'/'+'checkers'
                        # envconfilepath = envdirpath+'/'+'conn_file'
                        envdocspath = envdirpath+'/'+'docs'
                        envrunpath = envdirpath+'/'+'run'
                        envflpath = envdirpath+'/'+'filelist'
                        envscriptspath = envdirpath+'/'+'scripts'
                        
                        # Directory Path For Others 
                        envmondirpath = envdirpath+'/'+'env_monitors'
                        envintfdirpath = envdirpath+'/'+'env_interfaces'
                        envscbdirpath = envdirpath+'/'+'scoreboards'
                        
                        # Directory Path for tb top 
                        tbpath  = envdirpath+'/'+'tb'

                        # Directory Path For Env tests 
                        envtestdirpath = envdirpath+'/'+'tests'

                        #log.debug("mc_create_phase : envtrkpath %s, envchkrpath %s, envconfilepath %s!\n"%(envtrkpath, envchkrpath, envconfilepath))
                        log.debug("mc_create_phase : envchkrpath %s, envdocspath %s, envrunpath %s, envflpath %s, envscriptspath %s!\n"%(envchkrpath, envdocspath, envrunpath, envflpath, envscriptspath))
               
                #----------------------------------------------------------------------
                # Edit the Environment Config File  
                #----------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    # Opening the environment config file and edit
                    mc_env_cfg_array = []
                    
                    if not os.path.isfile('%s/%s_environment_config.sv'%(envpath, envname)):
                        log.error("%s/%s_environment_config.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envpath, envname))
                    else:
                        log.info("%s/%s_environment_config.sv file does exists! Progressing Further.\n"%(envpath, envname))
                        mc_env_cfg_input_file = open("%s/%s_environment_config.sv"%(envpath, envname),"r+")

                        env_cfg_stg = '' 
                        env_int_stg = '' 
                        env_mon_stg = '' 
                        env_scb_stg = '' 
                        env_agt_stg = '' 
                        sub_env_stg = ''

                        for lines in mc_env_cfg_input_file:
                            env_cfg_stg = env_cfg_stg+lines+'µ' 
                        log.debug("mc_create_phase: Value of env_cfg_stg %s"%(env_cfg_stg))
                           
                        #----------------------------------------------------------------------
                        # Code for Environment Interface Instantiation inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][7] != []:
                            if mc_env_cfg_pool[a][7][0] != '':
                                #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                                envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                                envintfname_arr = str(mc_env_cfg_pool[a][7][0]).split(",")
                                log.debug("mc_create_phase : envname %s  envintfname_arr %s!\n"%(envname, envintfname_arr))
                                
                                for b in range (int(envintfname_arr[0])):
                                    if int(envintfname_arr[0]==1) and len(envintfname_arr) == 1:
                                        envintfname = envname
                                    else:
                                        #envintfname = envname+"_"+envintfname_arr[b+1]
                                        envintfname = envintfname_arr[b+1]
                                    env_int_stg = env_int_stg+("µ virtual %s_interface %s_vif;\n"%(envintfname, envintfname))

                                pos = env_cfg_stg.find(' // Environment Interface Instantiation\n')
                                apos = pos + len(' // Environment Interface Instantiation\n')+len('µ //------------------------------------------\n')
                                env_cfg_stg = env_cfg_stg[:apos]+env_int_stg+env_cfg_stg[apos:]

                                # pos = env_cfg_stg[env_cfg_stg.find('// Environment Interface Instantiation'):env_cfg_stg.find('// Environment Monitor Knobs')].find("`ifndef DISABLE_%s_INTERFACE_INSTANTIATION\n"%(envname.upper()))
                                # if pos == -1:
                                #     pos = env_cfg_stg.find(' // Environment Interface Instantiation\n')
                                #     apos = pos + len(' // Environment Interface Instantiation\n')+len('µ //------------------------------------------\n')
                                #     env_cfg_stg = env_cfg_stg[:apos]+("µ`ifndef DISABLE_%s_INTERFACE_INSTANTIATION\n"%(envname.upper()))+env_int_stg+("µ`endif // DISABLE_%s_INTERFACE_INSTANTIATION\n"%(envname.upper()))+env_cfg_stg[apos:]
                                # else:
                                #     pos = env_cfg_stg.find(' // Environment Interface Instantiation\n')
                                #     apos = pos + len(' // Environment Interface Instantiation\n') + len('µ //------------------------------------------\n') + len("µ`ifndef DISABLE_%s_INTERFACE_INSTANTIATION\n"%(envname.upper()))
                                #     env_cfg_stg = env_cfg_stg[:apos]+env_int_stg+env_cfg_stg[apos:]
                        
                        # Cleaning local vars
                        env_int_stg = ''
                        #----------------------------------------------------------------------

                        
                        #----------------------------------------------------------------------
                        # Code for Environment Monitor Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    #envmonname = envname+"_"+envmonname_arr[c+1].split(":")[0]
                                    envmonname = envmonname_arr[c+1].split(":")[0]
                                    env_mon_stg = env_mon_stg+("µ rand uvm_active_passive_enum %s_is_active[];\n"%(envmonname))
                                else:
                                    #envmonname = envname+"_"+envmonname_arr[c+1]
                                    envmonname = envmonname_arr[c+1]
                                    env_mon_stg = env_mon_stg+("µ rand uvm_active_passive_enum %s_is_active = UVM_ACTIVE;\n"%(envmonname))
        
                            pos = env_cfg_stg.find(' // Environment Monitor Knobs\n')
                            apos = pos + len(' // Environment Monitor Knobs\n')+len('µ //------------------------------------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_mon_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_mon_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Environment Monitor Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    #envmonname = envname+"_"+envmonname_arr[c+1].split(":")[0]
                                    envmonname = envmonname_arr[c+1].split(":")[0]
                                    env_mon_stg = env_mon_stg+("µ rand int unsigned no_of_%s_mon;\n"%(envmonname))

                            pos = env_cfg_stg.find(' // Environment Monitor Knobs\n')
                            apos = pos + len(' // Environment Monitor Knobs\n')+len('µ //------------------------------------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_mon_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_mon_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Environment Monitor Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    #envmonname = envname+"_"+envmonname_arr[c+1].split(":")[0]
                                    envmonname = envmonname_arr[c+1].split(":")[0]
                                    env_mon_stg = env_mon_stg+("µ extern virtual function void configure_%s_mon(int unsigned num_mons, uvm_active_passive_enum num_mons_e[]);\n"%(envmonname))

                            pos = env_cfg_stg.find(' // User Defined APIs\n')
                            apos = pos + len(' // User Defined APIs\n') + len('µ  // -----------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_mon_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_mon_stg = ''
                        #----------------------------------------------------------------------

                        
                        #----------------------------------------------------------------------
                        # Code for Environment Monitor Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    #envmonname = envname+"_"+envmonname_arr[c+1].split(":")[0]
                                    envmonname = envmonname_arr[c+1].split(":")[0]
                                    env_mon_stg = env_mon_stg+("µ `uvm_field_int(no_of_%s_mon, UVM_ALL_ON)\n"%(envmonname))

                            pos = env_cfg_stg.find(' // Add field configurations\n')
                            apos = pos + len(' // Add field configurations\n') + len('µ  // -----------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_mon_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_mon_stg = ''
                        #----------------------------------------------------------------------

                        
                        #----------------------------------------------------------------------
                        # Code for Environment Monitor Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    #envmonname = envname+"_"+envmonname_arr[c+1].split(":")[0]
                                    envmonname = envmonname_arr[c+1].split(":")[0]
                                    env_mon_stg = env_mon_stg\
                                    +('µ if (!uvm_config_db#(int)::get(uvm_root::get(), "*", "no_of_%s_mon", no_of_%s_mon))\n'%(envmonname, envmonname))\
                                    +("µ begin\n")\
                                    +('µ  `uvm_warning(get_type_name(), "no_of_%s_mon setting is not found in config_db! Setting default value of 1");\n'%(envmonname))\
                                    +("µ   no_of_%s_mon = 1;\n"%(envmonname))\
                                    +("µ end\n")

                            pos = env_cfg_stg.find(' // Get Environment Monitors Configuration\n')
                            apos = pos + len(' // Get Environment Monitors Configuration\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_mon_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_mon_stg = ''
                        #----------------------------------------------------------------------

                        
                        #----------------------------------------------------------------------
                        # Code for Environment Monitor Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    #envmonname = envname+"_"+envmonname_arr[c+1].split(":")[0]
                                    envmonname = envmonname_arr[c+1].split(":")[0]
                                    env_mon_stg = env_mon_stg\
                                    +("µ configure_%s_mon(no_of_%s_mon, '{%d{UVM_ACTIVE}});\n"%(envmonname, envmonname, int(envmonname_arr[c+1].split(":")[1])))

                            pos = env_cfg_stg.find(' // Configure Environment Monitors Configuration\n')
                            apos = pos + len(' // Configure Environment Monitors Configuration\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_mon_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_mon_stg = ''
                        #----------------------------------------------------------------------

            
                        
                        #----------------------------------------------------------------------
                        # Code for Environment Monitor Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    #envmonname = envname+"_"+envmonname_arr[c+1].split(":")[0]
                                    envmonname = envmonname_arr[c+1].split(":")[0]
                                    env_mon_stg = env_mon_stg\
                                    +("µ \n")\
                                    +("µ //---------------------------------------------------------------\n")\
                                    +("µ // Function: configure_%s_mon\n"%envmonname)\
                                    +("µ // \n")\
                                    +("µ //---------------------------------------------------------------\n")\
                                    +("µ \n")\
                                    +("µ function void %s_environment_config::configure_%s_mon(int unsigned num_mons, uvm_active_passive_enum num_mons_e[]);\n"%(envname, envmonname))\
                                    +("µ  // Get The Number Of Monitors\n")\
                                    +("µ  no_of_%s_mon = num_mons;\n"%envmonname)\
                                    +("µ \n")\
                                    +("µ  // Constructing Number Of Monitors\n")\
                                    +("µ  %s_is_active = new[no_of_%s_mon];\n"%(envmonname, envmonname))\
                                    +("µ \n")\
                                    +("µ  // Configure the %s Monitor Components\n"%(envmonname))\
                                    +("µ  for (int i = 0; i < no_of_%s_mon; i++) begin\n"%(envmonname))\
                                    +("µ   %s_is_active[i] = num_mons_e[i];\n"%(envmonname))\
                                    +("µ  end\n")\
                                    +("µ endfunction: configure_%s_mon\n"%envmonname)

                            pos = env_cfg_stg.find('endfunction: new\n')
                            apos = pos + len('endfunction: new\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_mon_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_mon_stg = ''
                        #----------------------------------------------------------------------




                        #----------------------------------------------------------------------
                        # Code for Environment Scoreboard Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][4] != '':
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                
                            for d in range (int(envscbname_arr[0])):
                                if len(envscbname_arr[d+1].split(":"))>1:
                                    #envscbname = envname+"_"+envscbname_arr[d+1].split(":")[0]
                                    envscbname = envscbname_arr[d+1].split(":")[0]
                                    env_scb_stg = env_scb_stg+("µ rand uvm_active_passive_enum %s_is_active[];\n"%(envscbname))
                                else:
                                    #envscbname = envname+"_"+envscbname_arr[d+1]
                                    envscbname = envscbname_arr[d+1]
                                    env_scb_stg = env_scb_stg+("µ rand uvm_active_passive_enum %s_is_active = UVM_ACTIVE;\n"%(envscbname))


                            pos = env_cfg_stg.find(' // Environment Scoreboard Knobs\n')
                            apos = pos + len(' // Environment Scoreboard Knobs\n')+len('µ //------------------------------------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_scb_stg+env_cfg_stg[apos:]

                            # pos = env_cfg_stg[env_cfg_stg.find('// Environment Scoreboard Knobs'):env_cfg_stg.find('// Environment Agent Variables')].find("`ifndef DISABLE_%s_SCOREBOARD_INSTANTIATION\n"%(envname.upper()))
                            # if pos == -1:
                            #     pos = env_cfg_stg.find(' // Environment Scoreboard Knobs\n')
                            #     apos = pos + len(' // Environment Scoreboard Knobs\n')+len('µ //------------------------------------------\n')
                            #     env_cfg_stg = env_cfg_stg[:apos]+("µ`ifndef DISABLE_%s_SCOREBOARD_INSTANTIATION\n"%(envname.upper()))+env_scb_stg+("µ`endif // DISABLE_%s_SCOREBOARD_INSTANTIATION\n"%(envname.upper()))+env_cfg_stg[apos:]
                            # else:
                            #     pos = env_cfg_stg.find(' // Environment Scoreboard Knobs\n')
                            #     apos = pos + len(' // Environment Scoreboard Knobs\n') + len('µ //------------------------------------------\n') + len("µ`ifndef DISABLE_%s_SCOREBOARD_INSTANTIATION\n"%(envname.upper()))
                            #     env_cfg_stg = env_cfg_stg[:apos]+env_scb_stg+env_cfg_stg[apos:]
                        
                        # Cleaning local vars
                        env_scb_stg = ''
                        #----------------------------------------------------------------------



                        #----------------------------------------------------------------------
                        # Code for Environment Scoreboard Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][4] != '':
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                
                            for d in range (int(envscbname_arr[0])):
                                if len(envscbname_arr[d+1].split(":"))>1:
                                    #envscbname = envname+"_"+envscbname_arr[d+1].split(":")[0]
                                    envscbname = envscbname_arr[d+1].split(":")[0]
                                    env_scb_stg = env_scb_stg+("µ rand int unsigned no_of_%s_scb;\n"%(envscbname))

                            pos = env_cfg_stg.find(' // Environment Scoreboard Knobs\n')
                            apos = pos + len(' // Environment Scoreboard Knobs\n')+len('µ //------------------------------------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_scb_stg+env_cfg_stg[apos:]

                            # pos = env_cfg_stg[env_cfg_stg.find('// Environment Scoreboard Knobs'):env_cfg_stg.find('// Environment Agent Variables')].find("`ifndef DISABLE_%s_SCOREBOARD_INSTANTIATION\n"%(envname.upper()))
                            # if pos == -1:
                            #     pos = env_cfg_stg.find(' // Environment Scoreboard Knobs\n')
                            #     apos = pos + len(' // Environment Scoreboard Knobs\n')+len('µ //------------------------------------------\n')
                            #     env_cfg_stg = env_cfg_stg[:apos]+("µ`ifndef DISABLE_%s_SCOREBOARD_INSTANTIATION\n"%(envname.upper()))+env_scb_stg+("µ`endif // DISABLE_%s_SCOREBOARD_INSTANTIATION\n"%(envname.upper()))+env_cfg_stg[apos:]
                            # else:
                            #     pos = env_cfg_stg.find(' // Environment Scoreboard Knobs\n')
                            #     apos = pos + len(' // Environment Scoreboard Knobs\n') + len('µ //------------------------------------------\n') + len("µ`ifndef DISABLE_%s_SCOREBOARD_INSTANTIATION\n"%(envname.upper()))
                            #     env_cfg_stg = env_cfg_stg[:apos]+env_scb_stg+env_cfg_stg[apos:]
                        
                        # Cleaning local vars
                        env_scb_stg = ''
                        #----------------------------------------------------------------------


                        
                        #----------------------------------------------------------------------
                        # Code for Environment Scoreboard Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][4] != '':
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                
                            for d in range (int(envscbname_arr[0])):
                                if len(envscbname_arr[d+1].split(":"))>1:
                                    #envscbname = envname+"_"+envscbname_arr[d+1].split(":")[0]
                                    envscbname = envscbname_arr[d+1].split(":")[0]
                                    env_scb_stg = env_scb_stg+("µ extern virtual function void configure_%s_scb(int unsigned num_scbs, uvm_active_passive_enum num_scbs_e[]);\n"%(envscbname))

                            pos = env_cfg_stg.find(' // User Defined APIs\n')
                            apos = pos + len(' // User Defined APIs\n') + len('µ  // -----------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_scb_stg+env_cfg_stg[apos:]
                        
                        # Cleaning local vars
                        env_scb_stg = ''
                        #----------------------------------------------------------------------


                        
                        #----------------------------------------------------------------------
                        # Code for Environment Scoreboard Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][4] != '':
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                
                            for d in range (int(envscbname_arr[0])):
                                if len(envscbname_arr[d+1].split(":"))>1:
                                    #envscbname = envname+"_"+envscbname_arr[d+1].split(":")[0]
                                    envscbname = envscbname_arr[d+1].split(":")[0]
                                    env_scb_stg = env_scb_stg\
                                    +('µ if (!uvm_config_db#(int)::get(uvm_root::get(), "*", "no_of_%s_scb", no_of_%s_scb))\n'%(envscbname, envscbname))\
                                    +("µ begin\n")\
                                    +('µ  `uvm_warning(get_type_name(), "no_of_%s_scb setting is not found in config_db! Setting default value of 1");\n'%(envscbname))\
                                    +("µ   no_of_%s_scb = 1;\n"%(envscbname))\
                                    +("µ end\n")

                            pos = env_cfg_stg.find(' // Get Environment Scoreboards Configuration\n')
                            apos = pos + len(' // Get Environment Scoreboards Configuration\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_scb_stg+env_cfg_stg[apos:]
                        
                        # Cleaning local vars
                        env_scb_stg = ''
                        #----------------------------------------------------------------------


                        
                        #----------------------------------------------------------------------
                        # Code for Environment Scoreboard Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][4] != '':
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                
                            for d in range (int(envscbname_arr[0])):
                                if len(envscbname_arr[d+1].split(":"))>1:
                                    #envscbname = envname+"_"+envscbname_arr[d+1].split(":")[0]
                                    envscbname = envscbname_arr[d+1].split(":")[0]
                                    env_scb_stg = env_scb_stg+("µ `uvm_field_int(no_of_%s_scb, UVM_ALL_ON)\n"%(envscbname))

                            pos = env_cfg_stg.find(' // Add field configurations\n')
                            apos = pos + len(' // Add field configurations\n') + len('µ  // -----------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_scb_stg+env_cfg_stg[apos:]
                        
                        # Cleaning local vars
                        env_scb_stg = ''
                        #----------------------------------------------------------------------

    
                        #----------------------------------------------------------------------
                        # Code for Environment Scoreboard Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][4] != '':
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                
                            for c in range (int(envscbname_arr[0])):
                                if len(envscbname_arr[c+1].split(":"))>1:
                                    #envscbname = envname+"_"+envscbname_arr[c+1].split(":")[0]
                                    envscbname = envscbname_arr[c+1].split(":")[0]
                                    env_scb_stg = env_scb_stg\
                                    +("µ configure_%s_scb(no_of_%s_scb, '{%d{UVM_ACTIVE}});\n"%(envscbname, envscbname, int(envscbname_arr[c+1].split(":")[1])))

                            pos = env_cfg_stg.find(' // Configure Environment Scoreboards Configuration\n')
                            apos = pos + len(' // Configure Environment Scoreboards Configuration\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_scb_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_scb_stg = ''
                        #----------------------------------------------------------------------


                        
                        #----------------------------------------------------------------------
                        # Code for Environment Scoreboard Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][4] != '':
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                
                            for c in range (int(envscbname_arr[0])):
                                if len(envscbname_arr[c+1].split(":"))>1:
                                    #envscbname = envname+"_"+envscbname_arr[c+1].split(":")[0]
                                    envscbname = envscbname_arr[c+1].split(":")[0]
                                    env_scb_stg = env_scb_stg\
                                    +("µ \n")\
                                    +("µ //---------------------------------------------------------------\n")\
                                    +("µ // Function: configure_%s_scb\n"%envscbname)\
                                    +("µ // \n")\
                                    +("µ //---------------------------------------------------------------\n")\
                                    +("µ \n")\
                                    +("µ function void %s_environment_config::configure_%s_scb(int unsigned num_scbs, uvm_active_passive_enum num_scbs_e[]);\n"%(envname, envscbname))\
                                    +("µ  // Get The Number Of Scoreboardss\n")\
                                    +("µ  no_of_%s_scb = num_scbs;\n"%envscbname)\
                                    +("µ \n")\
                                    +("µ  // Constructing Number Of Scoreboardss\n")\
                                    +("µ  %s_is_active = new[no_of_%s_scb];\n"%(envscbname, envscbname))\
                                    +("µ \n")\
                                    +("µ  // Configure the %s Scoreboards Components\n"%(envscbname))\
                                    +("µ  for (int i = 0; i < no_of_%s_scb; i++) begin\n"%(envscbname))\
                                    +("µ   %s_is_active[i] = num_scbs_e[i];\n"%(envscbname))\
                                    +("µ  end\n")\
                                    +("µ endfunction: configure_%s_scb\n"%envscbname) 

                            pos = env_cfg_stg.find('endfunction: new\n')
                            apos = pos + len('endfunction: new\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_scb_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_scb_stg = ''
                        #----------------------------------------------------------------------




                        #----------------------------------------------------------------------
                        # Code for Environment Agent Variables inside env_config File
                        #----------------------------------------------------------------------
                        
                        pos = env_cfg_stg.find(' // Environment Agent Variables\n')
                        apos = pos + len(' // Environment Agent Variables\n') + len('µ //------------------------------------------\n')
                        env_cfg_stg = env_cfg_stg[:apos]+'µ string agent_inst_name;\n'+env_cfg_stg[apos:]
                        
                        if mc_env_cfg_pool[a][2] != ['']:
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                #envagtname = envname+"_"+envagtname_arr[e+1]
                                envagtname = envagtname_arr[e+1]
                            
                                if mc_env_cfg_pool[a][2][e+1][2]:
                                    env_agt_stg = env_agt_stg+("µ rand int unsigned no_of_%s_agt;\n"%(envagtname))
                           
                            pos = env_cfg_stg.find(' // Environment Agent Variables\n')
                            apos = pos + len(' // Environment Agent Variables\n') + len('µ //------------------------------------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_agt_stg+env_cfg_stg[apos:]
                            
                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------

                            
                        #----------------------------------------------------------------------
                        # Code for Environment Agent Config Instantiation inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                #envagtname = envname+"_"+envagtname_arr[e+1]
                                envagtname = envagtname_arr[e+1]
                            
                                if mc_env_cfg_pool[a][2][e+1][2]:
                                    env_agt_stg = env_agt_stg+("µ %s_agent_config %s_agent_cfg[];\n"%(envagtname, envagtname))
                                else:
                                    env_agt_stg = env_agt_stg+("µ %s_agent_config %s_agent_cfg;\n"%(envagtname, envagtname))


                            pos = env_cfg_stg.find(' // Environment Agent Config Instantiation\n')
                            apos = pos + len(' // Environment Agent Config Instantiation\n') + len(' |//------------------------------------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_agt_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------

                        

                        #----------------------------------------------------------------------
                        # Code for Adding Variables Into UVM Factory Registration 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                #envagtname = envname+"_"+envagtname_arr[e+1]
                                envagtname = envagtname_arr[e+1]
                            
                                if mc_env_cfg_pool[a][2][e+1][2]:
                                    env_agt_stg = env_agt_stg+("µ `uvm_field_int(no_of_%s_agt, UVM_ALL_ON)\n"%(envagtname))

                            pos = env_cfg_stg.find(' // Add field configurations\n')
                            apos = pos + len(' // Add field configurations\n') + len('µ  // -----------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_agt_stg+env_cfg_stg[apos:]
                            
                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------

                        

                        #----------------------------------------------------------------------
                        # Code for Adding User Defined API's 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                #envagtname = envname+"_"+envagtname_arr[e+1]
                                envagtname = envagtname_arr[e+1]
                            
                                if mc_env_cfg_pool[a][2][e+1][2]:
                                    env_agt_stg = env_agt_stg+("µ extern virtual function void configure_%s_agt(int unsigned num_agts);\n"%(envagtname))

                            pos = env_cfg_stg.find(' // User Defined APIs\n')
                            apos = pos + len(' // User Defined APIs\n') + len('µ  // -----------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_agt_stg+env_cfg_stg[apos:]
                            
                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------

                        
                        #----------------------------------------------------------------------
                        # Code for Adding Agent Configuration in the new function 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                #envagtname = envname+"_"+envagtname_arr[e+1]
                                envagtname = envagtname_arr[e+1]
                            
                                if mc_env_cfg_pool[a][2][e+1][2]:
                                    env_agt_stg = env_agt_stg\
                                    +('µ if (!uvm_config_db#(int)::get(uvm_root::get(), "*", "no_of_%s_agt", no_of_%s_agt))\n'%(envagtname, envagtname))\
                                    +("µ begin\n")\
                                    +('µ  `uvm_warning(get_type_name(), "no_of_%s_agt setting is not found in config_db! Setting default value of 1");\n'%(envagtname))\
                                    +("µ   no_of_%s_agt = 1;\n"%(envagtname))\
                                    +("µ end\n")

                            pos = env_cfg_stg.find(' // Get Environment Agents Configuration\n')
                            apos = pos + len(' // Get Environment Agents Configuration\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_agt_stg+env_cfg_stg[apos:]
                            
                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------

                        
                        #----------------------------------------------------------------------
                        # Code for Adding Construct Children 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                #envagtname = envname+"_"+envagtname_arr[e+1]
                                envagtname = envagtname_arr[e+1]
                            
                                if not mc_env_cfg_pool[a][2][e+1][2]:
                                    env_agt_stg = env_agt_stg+('µ %s_agent_cfg = %s_agent_config::type_id::create("%s_agent_cfg");\n'%(envagtname, envagtname, envagtname))

                            pos = env_cfg_stg.find(' // Construct Environment Agents Configuration\n')
                            apos = pos + len(' // Construct Environment Agents Configuration\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_agt_stg+env_cfg_stg[apos:]
                            
                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Adding Agent Configuration Under Configure children 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                #envagtname = envname+"_"+envagtname_arr[e+1]
                                envagtname = envagtname_arr[e+1]
                            
                                if mc_env_cfg_pool[a][2][e+1][2]:
                                    env_agt_stg = env_agt_stg\
                                    +("µ configure_%s_agt(no_of_%s_agt);\n"%(envagtname, envagtname))

                            pos = env_cfg_stg.find(' // Configure Environment Agents Configuration\n')
                            apos = pos + len(' // Configure Environment Agents Configuration\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_agt_stg+env_cfg_stg[apos:]
                            
                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Adding Configure Children 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                #envagtname = envname+"_"+envagtname_arr[e+1]
                                envagtname = envagtname_arr[e+1]
                            
                                if mc_env_cfg_pool[a][2][e+1][2]:
                                    env_agt_stg = env_agt_stg\
                                    +("µ \n")\
                                    +("µ //---------------------------------------------------------------\n")\
                                    +("µ // Function: configure_%s_agt\n"%envagtname)\
                                    +("µ // \n")\
                                    +("µ //---------------------------------------------------------------\n")\
                                    +("µ \n")\
                                    +("µ function void %s_environment_config::configure_%s_agt(int unsigned num_agts);\n"%(envname, envagtname))\
                                    +("µ  // Get The Number Of Agents\n")\
                                    +("µ  no_of_%s_agt = num_agts;\n"%envagtname)\
                                    +("µ \n")\
                                    +("µ  // Create The Required Number of %s Agent Configurations\n"%(envagtname))\
                                    +("µ  %s_agent_cfg = new[no_of_%s_agt];\n"%(envagtname, envagtname))\
                                    +("µ \n")\
                                    +("µ  // Configure the %s Agent Configurations\n"%(envagtname))\
                                    +("µ  for (int i = 0; i < no_of_%s_agt; i++) begin\n"%(envagtname))\
                                    +('µ   $sformat(agent_inst_name, "%s_agent_cfg[%s]", i);\n'%(envagtname, "%0d"))\
                                    +('µ   %s_agent_cfg[i] = %s_agent_config::type_id::create(agent_inst_name);\n'%(envagtname, envagtname))\
                                    +("µ  end\n")\
                                    +("µ endfunction: configure_%s_agt\n"%envagtname) 

                            pos = env_cfg_stg.find('endfunction: new\n')
                            apos = pos + len('endfunction: new\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_agt_stg+env_cfg_stg[apos:]
                            
                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------
                        
                        
                        #----------------------------------------------------------------------
                        # Sub-Environment Configurations : Local Variables 
                        #----------------------------------------------------------------------
                        pos = env_cfg_stg.find(' // Environment Data Members\n')
                        apos = pos + len(' // Environment Data Members\n') + len('µ //------------------------------------------\n')
                        env_cfg_stg = env_cfg_stg[:apos]+'µ string env_inst_name;\n'+env_cfg_stg[apos:]

                        if mc_env_cfg_pool[a][1] != '':
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            subenvname_arr = str(mc_env_cfg_pool[a][1]).split(",")
                            log.debug("mc_create_phase : envname %s  subenvname_arr %s!\n"%(envname, subenvname_arr))

                            for f in range (int(subenvname_arr[0])):
                                subenvname_tmp = subenvname_arr[f+1]
                               
                                if len(subenvname_tmp.split(":"))>1:
                                    subenvname = subenvname_tmp.split(":")[0]
                                else:
                                    subenvname = subenvname_tmp

                                if len(subenvname_tmp.split(":"))>1:
                                    #----------------------------------------------------------------------
                                    sub_env_stg = sub_env_stg+("µ rand int unsigned no_of_%s_env;\n"%(subenvname))

                                    pos = env_cfg_stg[env_cfg_stg.find('// Environment Data Members'):env_cfg_stg.find('// Environment Interface Instantiation')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                    if pos == -1:
                                        pos = env_cfg_stg.find(' // Environment Data Members\n')
                                        apos = pos + len(' // Environment Data Members\n')+len('µ //------------------------------------------\n')
                                        env_cfg_stg = env_cfg_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_cfg_stg[apos:]
                                    else:
                                        #pos = env_cfg_stg.find(' // Environment Data Members\n')
                                        #apos = pos + len(' // Environment Data Members\n') + len('µ //------------------------------------------\n') + len("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                        apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                        env_cfg_stg = env_cfg_stg[:apos]+sub_env_stg+env_cfg_stg[apos:]
    
                                    sub_env_stg = ''
                                    #----------------------------------------------------------------------

                                    
                                    #----------------------------------------------------------------------
                                    sub_env_stg = sub_env_stg+("µ `uvm_field_int(no_of_%s_env, UVM_ALL_ON)\n"%(subenvname))

                                    pos = env_cfg_stg[env_cfg_stg.find('// Add field configurations'):env_cfg_stg.find('`uvm_object_utils_end')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                    if pos == -1:
                                        pos = env_cfg_stg.find('// Add field configurations\n')
                                        apos = pos + len('// Add field configurations\n')+len('µ  // -----------------\n')
                                        env_cfg_stg = env_cfg_stg[:apos]+("µ `ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ `endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_cfg_stg[apos:]
                                    else:
                                        #pos = env_cfg_stg.find('// Add field configurations\n')
                                        #apos = pos + len('// Add field configurations\n') + len('µ  // -----------------\n') + len("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                        apos = pos + len(' `ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                        env_cfg_stg = env_cfg_stg[:apos]+sub_env_stg+env_cfg_stg[apos:]
    
                                    sub_env_stg = ''
                                    #----------------------------------------------------------------------

                                    
                                    #----------------------------------------------------------------------
                                    sub_env_stg = sub_env_stg+("µ extern virtual function void construct_%s_env(int unsigned num_envs);\n"%(subenvname))

                                    pos = env_cfg_stg[env_cfg_stg.find('// User Defined APIs'):env_cfg_stg.find('// UVM Factory Registration')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                    if pos == -1:
                                        pos = env_cfg_stg.find('// User Defined APIs\n')
                                        apos = pos + len('// User Defined APIs\n')+len('µ // -----------------\n')
                                        env_cfg_stg = env_cfg_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_cfg_stg[apos:]
                                    else:
                                        #pos = env_cfg_stg.find('// User Defined APIs\n')
                                        #apos = pos + len('// User Defined APIs\n') + len('µ // -----------------\n') + len("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                        apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                        env_cfg_stg = env_cfg_stg[:apos]+sub_env_stg+env_cfg_stg[apos:]
    
                                    sub_env_stg = ''
                                    #----------------------------------------------------------------------


                                    #----------------------------------------------------------------------
                                    sub_env_stg = sub_env_stg\
                                    +('µ if (!uvm_config_db#(int)::get(uvm_root::get(), "*", "no_of_%s_env", no_of_%s_env))\n'%(subenvname, subenvname))\
                                    +("µ begin\n")\
                                    +('µ  `uvm_warning(get_type_name(), "no_of_%s_env setting is not found in config_db! Setting default value of 1");\n'%(subenvname))\
                                    +("µ   no_of_%s_env = 1;\n"%(subenvname))\
                                    +("µ end\n")

                                    pos = env_cfg_stg[env_cfg_stg.find('// Get Sub-Environments Configuration'):env_cfg_stg.find('// Construct children')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                    if pos == -1:
                                        pos = env_cfg_stg.find('// Get Sub-Environments Configuration\n')
                                        apos = pos + len('// Get Sub-Environments Configuration\n')
                                        env_cfg_stg = env_cfg_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_cfg_stg[apos:]
                                    else:
                                        #pos = env_cfg_stg.find('// Get Sub-Environments Configuration\n')
                                        #apos = pos + len('// Get Sub-Environments Configuration\n') + len("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                        apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                        env_cfg_stg = env_cfg_stg[:apos]+sub_env_stg+env_cfg_stg[apos:]
    
                                    sub_env_stg = ''
                                    #----------------------------------------------------------------------

                                    
                                    #----------------------------------------------------------------------
                                    sub_env_stg = sub_env_stg+("µ construct_%s_env(no_of_%s_env);\n"%(subenvname, subenvname))

                                    pos = env_cfg_stg[env_cfg_stg.find('// Construct Sub-Environments Configuration'):env_cfg_stg.find('endfunction: new')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                    if pos == -1:
                                        pos = env_cfg_stg.find('// Construct Sub-Environments Configuration\n')
                                        apos = pos + len('// Construct Sub-Environments Configuration\n')
                                        env_cfg_stg = env_cfg_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_cfg_stg[apos:]
                                    else:
                                        #pos = env_cfg_stg.find('// Construct Sub-Environments Configuration\n')
                                        #apos = pos + len('// Construct Sub-Environments Configuration\n') + len("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                        apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                        env_cfg_stg = env_cfg_stg[:apos]+sub_env_stg+env_cfg_stg[apos:]
    
                                    sub_env_stg = ''
                                    #----------------------------------------------------------------------


                                    #----------------------------------------------------------------------
                                    sub_env_stg = sub_env_stg\
                                    +("µ //---------------------------------------------------------------\n")\
                                    +("µ // Function: construct_%s_env\n"%subenvname)\
                                    +("µ // \n")\
                                    +("µ //---------------------------------------------------------------\n")\
                                    +("µ \n")\
                                    +("µ function void %s_environment_config::construct_%s_env(int unsigned num_envs);\n"%(envname, subenvname))\
                                    +("µ  // Get The Number Of Sub-Envs\n")\
                                    +("µ  no_of_%s_env = num_envs;\n"%subenvname)\
                                    +("µ \n")\
                                    +("µ  // Create The Required Number of %s Sub-Env Configurations\n"%(subenvname))\
                                    +("µ  %s_environment_cfg = new[no_of_%s_env];\n"%(subenvname, subenvname))\
                                    +("µ \n")\
                                    +("µ  // Construct the %s Sub-Env Configurations\n"%(subenvname))\
                                    +("µ  for (int i = 0; i < no_of_%s_env; i++) begin\n"%(subenvname))\
                                    +('µ   $sformat(env_inst_name, "%s_environment_cfg[%s]", i);\n'%(subenvname, "%0d"))\
                                    +('µ   %s_environment_cfg[i] = %s_environment_config::type_id::create(env_inst_name);\n'%(subenvname, subenvname))\
                                    +("µ  end\n")\
                                    +("µ endfunction: construct_%s_env\n"%subenvname) 
                        
                                    pos = env_cfg_stg[env_cfg_stg.find('endfunction: new'):env_cfg_stg.find('`endif //INC_%s_ENVIRONMENT_CONFIG_SV'%(envname.upper()))].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                    if pos == -1:
                                        pos = env_cfg_stg.find('endfunction: new\n')
                                        apos = pos + len('endfunction: new\n')
                                        env_cfg_stg = env_cfg_stg[:apos]+('\n')+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n"%(subenvname.upper()))+env_cfg_stg[apos:]
                                    else:
                                        apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                        env_cfg_stg = env_cfg_stg[:apos]+sub_env_stg+env_cfg_stg[apos:]
    
                                    sub_env_stg = ''
                                    #----------------------------------------------------------------------
                                else:
                                    #----------------------------------------------------------------------
                                    sub_env_stg = sub_env_stg+('µ %s_environment_cfg = %s_environment_config::type_id::create("%s_environment_cfg");\n'%(subenvname, subenvname, subenvname))

                                    pos = env_cfg_stg[env_cfg_stg.find('// Construct Sub-Environments Configuration\n'):env_cfg_stg.find('// Configure children')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                    if pos == -1:
                                        pos = env_cfg_stg.find('// Construct Sub-Environments Configuration\n')
                                        apos = pos + len('// Construct Sub-Environments Configuration\n')
                                        env_cfg_stg = env_cfg_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_cfg_stg[apos:]
                                    else:
                                        #pos = env_cfg_stg.find('// Construct Sub-Environments Configuration\n')
                                        #apos = pos + len('// Construct Sub-Environments Configuration\n') + len("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                        apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                        env_cfg_stg = env_cfg_stg[:apos]+sub_env_stg+env_cfg_stg[apos:]
    
                                    sub_env_stg = ''
                                    #----------------------------------------------------------------------

                        # Cleaning local vars
                        sub_env_stg = ''
                        #----------------------------------------------------------------------

                        
                        #----------------------------------------------------------------------
                        # Code for Adding Sub-Environment Configurations 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][1] != '':
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            subenvname_arr = str(mc_env_cfg_pool[a][1]).split(",")
                            log.debug("mc_create_phase : envname %s  subenvname_arr %s!\n"%(envname, subenvname_arr))

                            for f in range (int(subenvname_arr[0])):
                                subenvname_tmp = subenvname_arr[f+1]
                                
                                if len(subenvname_tmp.split(":"))>1:
                                    subenvname = subenvname_tmp.split(":")[0]
                                    sub_env_stg = sub_env_stg+("µ %s_environment_config %s_environment_cfg[];\n"%(subenvname, subenvname))
                                else:
                                    subenvname = subenvname_tmp
                                    sub_env_stg = sub_env_stg+("µ %s_environment_config %s_environment_cfg;\n"%(subenvname, subenvname))
                                    
                                pos = env_cfg_stg[env_cfg_stg.find('// Sub-Environment Config Instantiation'):env_cfg_stg.find('// Constraints')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                if pos == -1:
                                    pos = env_cfg_stg.find(' // Sub-Environment Config Instantiation\n')
                                    apos = pos + len(' // Sub-Environment Config Instantiation\n')+len('µ //------------------------------------------\n')
                                    env_cfg_stg = env_cfg_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_cfg_stg[apos:]
                                else:
                                    pos = env_cfg_stg.find(' // Sub-Environment Config Instantiation\n')
                                    apos = pos + len(' // Sub-Environment Config Instantiation\n') + len('µ //------------------------------------------\n') + len("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                    env_cfg_stg = env_cfg_stg[:apos]+sub_env_stg+env_cfg_stg[apos:]
    
                                # Cleaning the variable for each iteration
                                sub_env_stg = ''

                        # Cleaning local vars
                        sub_env_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Loading up the env config array content into file 
                        #----------------------------------------------------------------------
                        log.debug("mc_create_phase: Value of env_cfg_stg %s"%(env_cfg_stg))
                        mc_env_cfg_input_file = open("%s/%s_environment_config.sv"%(envpath, envname), "w")
                        mc_env_cfg_array = env_cfg_stg.split('µ')
                        for lines in mc_env_cfg_array:
                            mc_env_cfg_input_file.write(lines)
                        mc_env_cfg_input_file.close()
                        #----------------------------------------------------------------------
                #----------------------------------------------------------------------
                
                
                #----------------------------------------------------------------------
                # Edit the Environment File  
                #----------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    # Opening the environment config file and edit
                    mc_env_array = []
                    
                    if not os.path.isfile('%s/%s_environment.sv'%(envpath, envname)):
                        log.error("%s/%s_environment.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envpath, envname))
                    else:
                        log.info("%s/%s_environment.sv file does exists! Progressing Further.\n"%(envpath, envname))
                        mc_env_input_file = open("%s/%s_environment.sv"%(envpath, envname),"r+")

                        env_stg = '' 
                        env_loc_stg = '' 
                        env_cfg_stg = ''
                        env_int_stg = '' 
                        env_mon_stg = '' 
                        env_scb_stg = '' 
                        env_agt_stg = '' 
                        id_temp = "%0d"
                        env_mon_scb_stg = ''

                        for lines in mc_env_input_file:
                            env_stg = env_stg+lines+'µ' 
                        log.debug("mc_create_phase: Value of env_stg %s"%(env_stg))

                
                        #----------------------------------------------------------------------
                        # Code for Environment Monitor Component Instantiation inside ENV 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    #envmonname = envname+"_"+envmonname_arr[c+1].split(":")[0]
                                    envmonname = envmonname_arr[c+1].split(":")[0]
                                    env_mon_stg = env_mon_stg+("µ %s_monitor %s_mon[];\n"%(envmonname, envmonname))
                                else:
                                    #envmonname = envname+"_"+envmonname_arr[c+1]
                                    envmonname = envmonname_arr[c+1]
                                    env_mon_stg = env_mon_stg+("µ %s_monitor %s_mon;\n"%(envmonname, envmonname))
        
                            pos = env_stg.find(' // Environment Monitors Instantiation\n')
                            apos = pos + len(' // Environment Monitors Instantiation\n')
                            env_stg = env_stg[:apos]+env_mon_stg+env_stg[apos:]

                        # Cleaning local vars
                        env_mon_stg = ''
                        #----------------------------------------------------------------------

                        
                        #----------------------------------------------------------------------
                        # Code for Environment Scoreboard Component Instantiation Inside ENV 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][4] != '':
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                
                            for c in range (int(envscbname_arr[0])):
                                if len(envscbname_arr[c+1].split(":"))>1:
                                    #envscbname = envname+"_"+envscbname_arr[c+1].split(":")[0]
                                    envscbname = envscbname_arr[c+1].split(":")[0]
                                    env_scb_stg = env_scb_stg+("µ %s_scoreboard %s_scb[];\n"%(envscbname, envscbname))
                                else:
                                    #envscbname = envname+"_"+envscbname_arr[c+1]
                                    envscbname = envscbname_arr[c+1]
                                    env_scb_stg = env_scb_stg+("µ %s_scoreboard %s_scb;\n"%(envscbname, envscbname))
        
                            pos = env_stg.find(' // Environment Scoreboards Instantiation\n')
                            apos = pos + len(' // Environment Scoreboards Instantiation\n')
                            env_stg = env_stg[:apos]+env_scb_stg+env_stg[apos:]

                        # Cleaning local vars
                        env_scb_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Environment Agent Config Instantiation inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                #envagtname = envname+"_"+envagtname_arr[e+1]
                                envagtname = envagtname_arr[e+1]
                            
                                if mc_env_cfg_pool[a][2][e+1][2]:
                                    env_agt_stg = env_agt_stg+("µ %s_agent %s_agt[];\n"%(envagtname, envagtname))
                                else:
                                    env_agt_stg = env_agt_stg+("µ %s_agent %s_agt;\n"%(envagtname, envagtname))


                            pos = env_stg.find(' // Environment Agents Instantiation\n')
                            apos = pos + len(' // Environment Agents Instantiation\n')
                            env_stg = env_stg[:apos]+env_agt_stg+env_stg[apos:]

                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------
                        
                        
                        #----------------------------------------------------------------------
                        # Code for Adding Sub-Environments Instantiation  
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][1] != '':
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            subenvname_arr = str(mc_env_cfg_pool[a][1]).split(",")
                            log.debug("mc_create_phase : envname %s  subenvname_arr %s!\n"%(envname, subenvname_arr))

                            for f in range (int(subenvname_arr[0])):
                                subenvname_tmp = subenvname_arr[f+1]
                               
                                if len(subenvname_tmp.split(":"))>1:
                                    subenvname = subenvname_tmp.split(":")[0]
                                else:
                                    subenvname = subenvname_tmp

                                if len(subenvname_tmp.split(":"))>1:
                                    #----------------------------------------------------------------------
                                    sub_env_stg = sub_env_stg+("µ %s_environment %s_env[];\n"%(subenvname, subenvname))
                                    
                                    pos = env_stg[env_stg.find('// Sub-Environments Instantiation\n'):env_stg.find('// Object Instantiation')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                    if pos == -1:
                                        pos = env_stg.find('// Sub-Environments Instantiation\n')
                                        apos = pos + len('// Sub-Environments Instantiation\n')
                                        env_stg = env_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_stg[apos:]
                                    else:
                                        apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                        env_stg = env_stg[:apos]+sub_env_stg+env_stg[apos:]

                                    # Cleaning local variables 
                                    sub_env_stg = ''
                                    #----------------------------------------------------------------------
                                
                                
                                    #----------------------------------------------------------------------
                                    sub_env_stg = sub_env_stg\
                                    +('µ %s_env = new[%s_environment_cfg.no_of_%s_env];\n'%(subenvname, envname, subenvname))\
                                    +('µ for (int i = 0; i < %s_environment_cfg.no_of_%s_env; i++) begin\n'%(envname, subenvname))\
                                    +('µ  $sformat(env_inst_name, "%s_env[%s]", i);\n'%(subenvname, str(id_temp)))\
                                    +('µ  %s_env[i] = %s_environment::type_id::create(env_inst_name, this);\n'%(subenvname, subenvname))\
                                    +('µ  uvm_config_db#(int)::set(this, {env_inst_name, "*"}, "%s_env_id", i);\n'%(subenvname))\
                                    +('µ end\n') 
                                    
                                    pos = env_stg[env_stg.find('// Construct Sub-Environments\n'):env_stg.find('// Configure children')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                    if pos == -1:
                                        pos = env_stg.find('// Construct Sub-Environments\n')
                                        apos = pos + len('// Construct Sub-Environments\n')
                                        env_stg = env_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_stg[apos:]
                                    else:
                                        apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                        env_stg = env_stg[:apos]+sub_env_stg+env_stg[apos:]

                                    # Cleaning local variables 
                                    sub_env_stg = ''
                                    #----------------------------------------------------------------------    
                                
                                    
                                    #----------------------------------------------------------------------
                                    sub_env_stg = sub_env_stg\
                                    +("µ for (int i = 0; i < %s_environment_cfg.no_of_%s_env; i++) begin\n"%(envname, subenvname))\
                                    +('µ  $sformat(env_inst_name, "*%s_env[%s]*", i);\n'%(subenvname, str(id_temp)))\
                                    +('µ  uvm_config_db#(%s_environment_config)::set(this, env_inst_name, "%s_environment_config", %s_environment_cfg.%s_environment_cfg[i]);\n'%(subenvname, subenvname, envname, subenvname))\
                                    +("µ end\n")

                                    pos = env_stg[env_stg.find('// Configure Sub-Environments\n'):env_stg.find('endfunction: build_phase')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                    if pos == -1:
                                        pos = env_stg.find('// Configure Sub-Environments\n')
                                        apos = pos + len('// Configure Sub-Environments\n')
                                        env_stg = env_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_stg[apos:]
                                    else:
                                        apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                        env_stg = env_stg[:apos]+sub_env_stg+env_stg[apos:]

                                    # Cleaning local variables 
                                    sub_env_stg = ''
                                    #----------------------------------------------------------------------
                                else:
                                    #----------------------------------------------------------------------
                                    sub_env_stg = sub_env_stg+("µ %s_environment %s_env;\n"%(subenvname, subenvname))
                                    
                                    pos = env_stg[env_stg.find('// Sub-Environments Instantiation\n'):env_stg.find('// Object Instantiation')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                    if pos == -1:
                                        pos = env_stg.find('// Sub-Environments Instantiation\n')
                                        apos = pos + len('// Sub-Environments Instantiation\n')
                                        env_stg = env_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_stg[apos:]
                                    else:
                                        apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                        env_stg = env_stg[:apos]+sub_env_stg+env_stg[apos:]

                                    # Cleaning local variables 
                                    sub_env_stg = ''
                                    #----------------------------------------------------------------------
                                    
                                    #----------------------------------------------------------------------
                                    sub_env_stg = sub_env_stg\
                                    +('µ %s_env = %s_environment::type_id::create("%s_env",this);\n'%(subenvname, subenvname, subenvname))
                                    
                                    pos = env_stg[env_stg.find('// Construct Sub-Environments\n'):env_stg.find('// Configure children')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                    if pos == -1:
                                        pos = env_stg.find('// Construct Sub-Environments\n')
                                        apos = pos + len('// Construct Sub-Environments\n')
                                        env_stg = env_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_stg[apos:]
                                    else:
                                        apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                        env_stg = env_stg[:apos]+sub_env_stg+env_stg[apos:]

                                    # Cleaning local variables 
                                    sub_env_stg = ''
                                    #----------------------------------------------------------------------

                
                                    #----------------------------------------------------------------------
                                    sub_env_stg = sub_env_stg\
                                    +('µ uvm_config_db#(%s_environment_config)::set(this, "*%s_env*", "%s_environment_config", %s_environment_cfg.%s_environment_cfg);\n'%(subenvname, subenvname, subenvname, envname, subenvname))
                                    
                                    pos = env_stg[env_stg.find('// Configure Sub-Environments\n'):env_stg.find('endfunction: build_phase')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                    if pos == -1:
                                        pos = env_stg.find('// Configure Sub-Environments\n')
                                        apos = pos + len('// Configure Sub-Environments\n')
                                        env_stg = env_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_stg[apos:]
                                    else:
                                        apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                        env_stg = env_stg[:apos]+sub_env_stg+env_stg[apos:]

                                    # Cleaning local variables 
                                    sub_env_stg = ''
                                    #----------------------------------------------------------------------


                        # Cleaning local vars
                        sub_env_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Instantiation Local Variables 
                        #----------------------------------------------------------------------
                        pos = env_stg.find(' // Data Members\n')
                        apos = pos + len(' // Data Members\n') + len('µ //------------------------------------------\n')
                        env_loc_stg = env_loc_stg\
                        +'µ int unsigned %s_env_id;\n'%(envname)\
                        +'µ string env_inst_name, agent_inst_name, mon_inst_name, scb_inst_name;\n'
                        env_stg = env_stg[:apos]+env_loc_stg+env_stg[apos:]
                        
                        # Cleaning local vars
                        env_loc_stg = ''
                        #----------------------------------------------------------------------
                        
                        
                        #----------------------------------------------------------------------
                        # Code for Environment Config Instantiation
                        #----------------------------------------------------------------------
                        #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                        envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                        pos = env_stg.find(' // Environment Configuration Object Instantiation\n')
                        apos = pos + len(' // Environment Configuration Object Instantiation\n')
                        env_cfg_stg = ("µ %s_environment_config   %s_environment_cfg;\n"%(envname, envname))
                        env_stg = env_stg[:apos]+env_cfg_stg+env_stg[apos:]
                        
                        # Cleaning local vars
                        env_cfg_stg = ''
                        #----------------------------------------------------------------------
                   
                        
                        #----------------------------------------------------------------------
                        # Code for Registration The Variables In Factory 
                        #----------------------------------------------------------------------
                        pos = env_stg.find(' // Add field configurations\n')
                        apos = pos + len(' // Add field configurations\n') + len('µ  // -----------------\n')
                        env_loc_stg = env_loc_stg+("µ `uvm_field_int(%s_env_id, UVM_ALL_ON)\n"%(envname))
                        env_stg = env_stg[:apos]+env_loc_stg+env_stg[apos:]
                        
                        # Cleaning local vars
                        env_loc_stg = ''
                        #----------------------------------------------------------------------

                        
                        #----------------------------------------------------------------------
                        # Code for Getting Environment Config Instantiation
                        #----------------------------------------------------------------------
                        #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                        envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                        env_loc_stg = env_loc_stg\
                        +('µ if (!uvm_config_db#(%s_environment_config)::get(this, "*", "%s_environment_config", %s_environment_cfg))\n'%(envname, envname, envname))\
                        +('µ begin\n')\
                        +('µ  `uvm_error(get_type_name(), "%s_environment_config object is not found in config_db!");\n'%(envname))\
                        +('µ end\n')\
                        +('µ else\n')\
                        +('µ begin\n')\
                        +('µ  %s_environment_cfg.print();\n'%(envname))\
                        +('µ end\n')\
                            
                        pos = env_stg.find(' // Get Environment Configuration\n')
                        apos = pos + len(' // Get Environment Configuration\n')
                        env_stg = env_stg[:apos]+env_loc_stg+env_stg[apos:]
 
                        # Cleaning local vars
                        env_loc_stg = ''
                        #----------------------------------------------------------------------
                        
                        
                        #----------------------------------------------------------------------
                        # Code for Getting All Interface and Storing in respective configs : 12132020SUN 
                        #----------------------------------------------------------------------
                        # Driver Interface Details
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                #envagtname = envname+"_"+envagtname_arr[e+1]
                                envagtname = envagtname_arr[e+1]
                          
                                if mc_env_cfg_pool[a][2][e+1][2] and mc_env_cfg_pool[a][2][e+1][3]:
                                    env_agt_stg = env_agt_stg\
                                    +('µ for (int i = 0; i < %s_environment_cfg.no_of_%s_agt; i++) begin\n'%(envname, envagtname))
                                #elif not mc_env_cfg_pool[a][2][e+1][2] and mc_env_cfg_pool[a][2][e+1][3]:
                                #    env_agt_stg = env_agt_stg\

                                if mc_env_cfg_pool[a][2][e+1][3] != '':
                                    envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                    log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s!\n"%(envname, envagtdrvname_arr))
                                    for e1 in range (int(envagtdrvname_arr[0])):
                                        if len(envagtdrvname_arr) == 1:
                                            envagtdrvname = envagtname 
                                        else:
                                            envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]

                                        if mc_env_cfg_pool[a][2][e+1][2]:
                                            env_agt_stg = env_agt_stg\
                                            +('µ  if (!uvm_config_db#(virtual %s_interface)::get(.cntxt(this), .inst_name ("*"), .field_name($psprintf("%s_vif_%s",i)), .value(%s_environment_cfg.%s_agent_cfg[i].%s_vif))) `uvm_error(get_type_name(), "Unable to find the %s_interface!")\n'%(envagtdrvname, envagtdrvname, "%0d", envname, envagtname, envagtdrvname, envagtdrvname))
                                        else:
                                            env_agt_stg = env_agt_stg\
                                            +('µ if (!uvm_config_db#(virtual %s_interface)::get(.cntxt(this), .inst_name ("*"), .field_name($psprintf("%s_vif")), .value(%s_environment_cfg.%s_agent_cfg.%s_vif))) `uvm_error(get_type_name(), "Unable to find the %s_interface!")\n'%(envagtdrvname, envagtdrvname, envname, envagtname, envagtdrvname, envagtdrvname))
                                        
                                if mc_env_cfg_pool[a][2][e+1][2] and mc_env_cfg_pool[a][2][e+1][3]:
                                    if e == (int(envagtname_arr[0])-1):
                                        env_agt_stg = env_agt_stg\
                                        +('µ end\n')
                                    else: 
                                        env_agt_stg = env_agt_stg\
                                        +('µ end\n\n')
                                # elif not mc_env_cfg_pool[a][2][e+1][2] and mc_env_cfg_pool[a][2][e+1][3]:
                                #     if e == (int(envagtname_arr[0])-1):
                                #         env_agt_stg = env_agt_stg\
                                #         +('µ end\n')
                                #     else:
                                #         env_agt_stg = env_agt_stg\
                                #         +('µ end\n\n')

                            pos = env_stg.find('// Get Interface Configuration\n')
                            apos = pos + len('// Get Interface Configuration\n')
                            env_stg = env_stg[:apos]+env_agt_stg+env_stg[apos:]

                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------
                        # Environment Interface Details  
                        #----------------------------------------------------------------------
                        if (mc_env_cfg_pool[a][0]):
                            if mc_env_cfg_pool[a][7] != []:
                                if mc_env_cfg_pool[a][7][0] != '':
                                    envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                                    envintfname_arr = str(mc_env_cfg_pool[a][7][0]).split(",")
                                    log.debug("mc_create_phase : envname %s  envintfname_arr %s!\n"%(envname, envintfname_arr))
                                    
                                    for b in range (int(envintfname_arr[0])):
                                        if int(envintfname_arr[0]==1) and len(envintfname_arr) == 1:
                                            envintfname = envname
                                        else:
                                            envintfname = envintfname_arr[b+1]
                                       
                                        env_int_stg = env_int_stg\
                                            +('µ if (!uvm_config_db#(virtual %s_interface)::get(.cntxt(this), .inst_name ("*"), .field_name($psprintf("%s_vif")), .value(%s_environment_cfg.%s_vif))) `uvm_error(get_type_name(), "Unable to find the %s_interface!")\n'%(envintfname, envintfname, envname, envintfname, envintfname))
                                        
                                    pos = env_stg.find('// Get Interface Configuration\n')
                                    apos = pos + len('// Get Interface Configuration\n')
                                    env_stg = env_stg[:apos]+env_int_stg+env_stg[apos:]
                        
                        # Cleaning local vars
                        env_int_stg = ''
                        #----------------------------------------------------------------------

                        
                        #----------------------------------------------------------------------
                        # Code for Environment Monitor Component Construct inside ENV 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    #envmonname = envname+"_"+envmonname_arr[c+1].split(":")[0]
                                    envmonname = envmonname_arr[c+1].split(":")[0]
                                    env_mon_stg = env_mon_stg\
                                    +('µ %s_mon = new[%s_environment_cfg.no_of_%s_mon];\n'%(envmonname, envname, envmonname))\
                                    +('µ for (int i = 0; i < %s_environment_cfg.no_of_%s_mon; i++) begin\n'%(envname, envmonname))\
                                    +('µ  $sformat(mon_inst_name, "%s_mon[%s]", i);\n'%(envmonname, str(id_temp)))\
                                    +('µ  if (%s_environment_cfg.%s_is_active[i]) %s_mon[i] = %s_monitor::type_id::create(mon_inst_name, this);\n'%(envname, envmonname, envmonname, envmonname))\
                                    +('µ  uvm_config_db#(int)::set(this, {mon_inst_name, "*"}, "%s_mon_id", i);\n'%(envmonname))\
                                    +('µ end\n\n')
                                else:
                                    #envmonname = envname+"_"+envmonname_arr[c+1]
                                    envmonname = envmonname_arr[c+1]
                                    env_mon_stg = env_mon_stg\
                                    +('µ $sformat(mon_inst_name, "%s_mon");\n'%(envmonname))\
                                    +('µ if (%s_environment_cfg.%s_is_active) %s_mon = %s_monitor::type_id::create(mon_inst_name,this);\n\n'%(envname, envmonname, envmonname, envmonname))

                            pos = env_stg.find(' // Construct Environment Monitors\n')
                            apos = pos + len(' // Construct Environment Monitors\n')
                            env_stg = env_stg[:apos]+env_mon_stg+env_stg[apos:]

                        # Cleaning local vars
                        env_mon_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Environment Scoreboard Component Construct inside ENV 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][4] != '':
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                
                            for c in range (int(envscbname_arr[0])):
                                if len(envscbname_arr[c+1].split(":"))>1:
                                    #envscbname = envname+"_"+envscbname_arr[c+1].split(":")[0]
                                    envscbname = envscbname_arr[c+1].split(":")[0]
                                    env_scb_stg = env_scb_stg\
                                    +('µ %s_scb = new[%s_environment_cfg.no_of_%s_scb];\n'%(envscbname, envname, envscbname))\
                                    +('µ for (int i = 0; i < %s_environment_cfg.no_of_%s_scb; i++) begin\n'%(envname, envscbname))\
                                    +('µ  $sformat(scb_inst_name, "%s_scb[%s]", i);\n'%(envscbname, str(id_temp)))\
                                    +('µ  if (%s_environment_cfg.%s_is_active[i]) %s_scb[i] = %s_scoreboard::type_id::create(scb_inst_name, this);\n'%(envname, envscbname, envscbname, envscbname))\
                                    +('µ  uvm_config_db#(int)::set(this, {scb_inst_name, "*"}, "%s_scb_id", i);\n'%(envscbname))\
                                    +('µ end\n\n')
                                else:
                                    #envscbname = envname+"_"+envscbname_arr[c+1]
                                    envscbname = envscbname_arr[c+1]
                                    env_scb_stg = env_scb_stg\
                                    +('µ $sformat(scb_inst_name, "%s_scb");\n'%(envscbname))\
                                    +('µ if (%s_environment_cfg.%s_is_active) %s_scb = %s_scoreboard::type_id::create(scb_inst_name,this);\n\n'%(envname, envscbname, envscbname, envscbname))

                            pos = env_stg.find(' // Construct Environment Scoreboards\n')
                            apos = pos + len(' // Construct Environment Scoreboards\n')
                            env_stg = env_stg[:apos]+env_scb_stg+env_stg[apos:]

                        # Cleaning local vars
                        env_scb_stg = ''
                        #----------------------------------------------------------------------

                        
                        #----------------------------------------------------------------------
                        # Code for Environment Agent Components Creation 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                #envagtname = envname+"_"+envagtname_arr[e+1]
                                envagtname = envagtname_arr[e+1]
                            
                                if mc_env_cfg_pool[a][2][e+1][2]:
                                    env_agt_stg = env_agt_stg\
                                    +('µ %s_agt = new[%s_environment_cfg.no_of_%s_agt];\n'%(envagtname, envname, envagtname))\
                                    +('µ for (int i = 0; i < %s_environment_cfg.no_of_%s_agt; i++) begin\n'%(envname, envagtname))\
                                    +('µ  $sformat(agent_inst_name, "%s_agt[%s]", i);\n'%(envagtname, str(id_temp)))\
                                    +('µ  if (%s_environment_cfg.%s_agent_cfg[i].is_active) %s_agt[i] = %s_agent::type_id::create(agent_inst_name, this);\n'%(envname, envagtname, envagtname, envagtname))\
                                    +('µ  uvm_config_db#(int)::set(this, {agent_inst_name, "*"}, "%s_agt_id", i);\n'%(envagtname))\
                                    +('µ end\n\n')
                                else:
                                    env_agt_stg = env_agt_stg\
                                    +('µ $sformat(agent_inst_name, "%s_agt");\n'%(envagtname))\
                                    +('µ if (%s_environment_cfg.%s_agent_cfg.is_active) %s_agt = %s_agent::type_id::create(agent_inst_name,this);\n\n'%(envname, envagtname, envagtname, envagtname))

                            pos = env_stg.find(' // Construct Environment Agents\n')
                            apos = pos + len(' // Construct Environment Agents\n')
                            env_stg = env_stg[:apos]+env_agt_stg+env_stg[apos:]

                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------

                        #----------------------------------------------------------------------
                        # Code for Environment Monitor Component Configuration 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    #envmonname = envname+"_"+envmonname_arr[c+1].split(":")[0]
                                    envmonname = envmonname_arr[c+1].split(":")[0]
                                    env_mon_stg = env_mon_stg\
                                    +("µ for (int i = 0; i < %s_environment_cfg.no_of_%s_mon; i++) begin\n"%(envname, envmonname))\
                                    +('µ  $sformat(mon_inst_name, "*%s_mon[%s]*", i);\n'%(envmonname, str(id_temp)))\
                                    +('µ  uvm_config_db#(%s_environment_config)::set(this, mon_inst_name, "%s_environment_config", %s_environment_cfg);\n'%(envname, envname, envname))\
                                    +("µ end\n")
                                else:
                                    #envmonname = envname+"_"+envmonname_arr[c+1]
                                    envmonname = envmonname_arr[c+1]
                                    env_mon_stg = env_mon_stg\
                                    +('µ $sformat(mon_inst_name, "*%s_mon*");\n'%(envmonname))\
                                    +('µ uvm_config_db#(%s_environment_config)::set(this, mon_inst_name, "%s_environment_config", %s_environment_cfg);\n'%(envname, envname, envname))

                            pos = env_stg.find(' // Configure Environment Monitors\n')
                            apos = pos + len(' // Configure Environment Monitors\n')
                            env_stg = env_stg[:apos]+env_mon_stg+env_stg[apos:]

                        # Cleaning local vars
                        env_mon_stg = ''
                        #----------------------------------------------------------------------

                        
                        #----------------------------------------------------------------------
                        # Code for Environment Scoreboard Component Configuration 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][4] != '':
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                
                            for c in range (int(envscbname_arr[0])):
                                if len(envscbname_arr[c+1].split(":"))>1:
                                    #envscbname = envname+"_"+envscbname_arr[c+1].split(":")[0]
                                    envscbname = envscbname_arr[c+1].split(":")[0]
                                    env_scb_stg = env_scb_stg\
                                    +("µ for (int i = 0; i < %s_environment_cfg.no_of_%s_scb; i++) begin\n"%(envname, envscbname))\
                                    +('µ  $sformat(scb_inst_name, "*%s_scb[%s]*", i);\n'%(envscbname, str(id_temp)))\
                                    +('µ  uvm_config_db#(%s_environment_config)::set(this, scb_inst_name, "%s_environment_config", %s_environment_cfg);\n'%(envname, envname, envname))\
                                    +("µ end\n")
                                else:
                                    #envscbname = envname+"_"+envscbname_arr[c+1]
                                    envscbname = envscbname_arr[c+1]
                                    env_scb_stg = env_scb_stg\
                                    +('µ $sformat(scb_inst_name, "*%s_scb*");\n'%(envscbname))\
                                    +('µ uvm_config_db#(%s_environment_config)::set(this, scb_inst_name, "%s_environment_config", %s_environment_cfg);\n'%(envname, envname, envname))

                            pos = env_stg.find(' // Configure Environment Scoreboards\n')
                            apos = pos + len(' // Configure Environment Scoreboards\n')
                            env_stg = env_stg[:apos]+env_scb_stg+env_stg[apos:]

                        # Cleaning local vars
                        env_scb_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Environment Agent Components Configuration 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            #envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                #envagtname = envname+"_"+envagtname_arr[e+1]
                                envagtname = envagtname_arr[e+1]
                            
                                if mc_env_cfg_pool[a][2][e+1][2]:
                                    env_agt_stg = env_agt_stg\
                                    +("µ for (int i = 0; i < %s_environment_cfg.no_of_%s_agt; i++) begin\n"%(envname, envagtname))\
                                    +('µ  $sformat(agent_inst_name, "*%s_agt[%s]*", i);\n'%(envagtname, str(id_temp)))\
                                    +('µ  uvm_config_db#(%s_agent_config)::set(this, agent_inst_name, "%s_agent_config", %s_environment_cfg.%s_agent_cfg[i]);\n'%(envagtname, envagtname, envname, envagtname))\
                                    +("µ end\n")
                                else:
                                    env_agt_stg = env_agt_stg\
                                    +('µ $sformat(agent_inst_name, "*%s_agt*");\n'%(envagtname))\
                                    +('µ uvm_config_db#(%s_agent_config)::set(this, agent_inst_name, "%s_agent_config", %s_environment_cfg.%s_agent_cfg);\n'%(envagtname, envagtname, envname, envagtname))

                            pos = env_stg.find(' // Configure Environment Agents\n')
                            apos = pos + len(' // Configure Environment Agents\n')
                            env_stg = env_stg[:apos]+env_agt_stg+env_stg[apos:]

                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Adding Mon-Scb Connectivity On that Environment 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][5] != '':
                            if len(((mc_env_cfg_pool[a][0].split(","))[0]).split(":"))>1:
                                parenvname = ((mc_env_cfg_pool[a][0].split(","))[0]).split(":")[0]
                                parenvname_org = (mc_env_cfg_pool[a][0].split(","))[0]
                            else:
                                parenvname = (mc_env_cfg_pool[a][0].split(","))[0]
                                parenvname_org = (mc_env_cfg_pool[a][0].split(","))[0]
                            
                            if len(((mc_env_cfg_pool[a][0].split(","))[1]).split(":"))>1:
                                envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                                envname_org = (mc_env_cfg_pool[a][0].split(","))[1]
                            else:
                                envname = (mc_env_cfg_pool[a][0].split(","))[1]
                                envname_org = (mc_env_cfg_pool[a][0].split(","))[1]
                            
                            monscbcon_arr = (mc_env_cfg_pool[a][5])
                            log.debug("mc_create_phase : envname %s  monscbcon_arr %s!\n"%(envname, monscbcon_arr))
                        
                            for w in range (len(monscbcon_arr)):
                                str_arr_idx = 0

                                cp_mon_arr = (monscbcon_arr[w].split("-"))[0].split(",")
                                log.debug("mc_create_phase : cp_mon_arr %s!\n"%(cp_mon_arr))

                                cp_scb_arr = (monscbcon_arr[w].split("-"))[1].split(",")
                                log.debug("mc_create_phase : cp_mon_arr %s  cp_scb_arr %s!\n"%(cp_mon_arr, cp_scb_arr))
                                
                                cp_monscb_con_arr = (monscbcon_arr[w].split("-")[2]).split("/")
                                log.debug("mc_create_phase : cp_mon_arr %s  cp_scb_arr %s  cp_monscb_con_arr %s!\n"%(cp_mon_arr, cp_scb_arr, cp_monscb_con_arr))

                                if len(cp_mon_arr) == 4:
                                    # if cp_mon_arr[1] == envname and cp_scb_arr[1] == envname:
                                   
                                    pen_mon = cp_mon_arr[0]
                                    en_mon  = cp_mon_arr[1]
                                    a_mon   = cp_mon_arr[2]
                                    m_mon   = cp_mon_arr[3]

                                    # Env Index Search
                                    env_search = pen_mon+","+en_mon
                                    env_idx_mon = self.find_index(env_search, mc_env_cfg_pool)
                                    log.debug("mc_create_phase : env_search %s env_idx_mon %s!\n"%(env_search, env_idx_mon))
                                    if env_idx_mon:
                                        env_idx_mon = int(env_idx_mon[0])
                                        #envname_mon = (mc_env_cfg_pool[env_idx_mon][0].split(","))[1]
                                        envname_mon = ((mc_env_cfg_pool[env_idx_mon][0].split(","))[1]).split(":")[0]
                                    log.debug("mc_create_phase : env_search %s env_idx_mon %s envname_mon %s!\n"%(env_search, env_idx_mon, envname_mon))

                                    # Agent Name
                                    #agt_search = parenvname+','+envname+','+cp_mon_arr[2]
                                    agt_search = pen_mon+','+en_mon+','+a_mon
                                    agt_idx = (self.find_index(agt_search, mc_env_cfg_pool[env_idx_mon])); 
                                    log.debug("mc_create_phase : agt_search %s agt_idx %s!\n"%(agt_search, agt_idx))
                                    if agt_idx:
                                        agt_idx = int(agt_idx[1])
                                        #envagtname = envname_mon+"_"+mc_env_cfg_pool[env_idx_mon][2][agt_idx][1]
                                        envagtname = mc_env_cfg_pool[env_idx_mon][2][agt_idx][1]
                                        log.debug("mc_create_phase : agt_search %s agt_idx %s envagtname %s!\n"%(agt_search, agt_idx, envagtname))

                                    # Monitor Name
                                    mon_arr = str(mc_env_cfg_pool[env_idx_mon][2][agt_idx][4]).split(",")
                                    log.debug("mc_create_phase mon_arr %s mon_name %s!\n"%(mon_arr, cp_mon_arr[3]))
                                    mon_idx = self.find_index(cp_mon_arr[3], mon_arr); 
                                    if mon_idx:
                                        mon_idx = int(mon_idx[0])
                                    if not mon_idx or (cp_mon_arr[3] == mc_env_cfg_pool[env_idx_mon][2][agt_idx][1]):
                                        envagtmonname = envagtname
                                        log.debug("mc_create_phase mon_arr %s envagtmonname %s!\n"%(mon_arr, envagtmonname))
                                    else:
                                        envagtmonname = envagtname+"_"+mon_arr[mon_idx]
                                        log.debug("mc_create_phase mon_arr %s mon_idx %d envagtmonname %s!\n"%(mon_arr, mon_idx, envagtmonname))
                                    
                                    
                                    pen_scb = cp_scb_arr[0]
                                    en_scb  = cp_scb_arr[1]
                                    a_scb   = cp_scb_arr[2]
                                    
                                    # Env Index Search
                                    env_search = pen_scb+","+en_scb
                                    env_idx_scb = self.find_index(env_search, mc_env_cfg_pool)
                                    log.debug("mc_create_phase : env_search %s env_idx_scb %s!\n"%(env_search, env_idx_scb))
                                    if env_idx_scb:
                                        env_idx_scb = int(env_idx_scb[0])
                                        #envname_scb = (mc_env_cfg_pool[env_idx_scb][0].split(","))[1]
                                        envname_scb = ((mc_env_cfg_pool[env_idx_scb][0].split(","))[1]).split(":")[0]
                                    log.debug("mc_create_phase : env_search %s env_idx_scb %s envname_scb %s!\n"%(env_search, env_idx_scb, envname_scb))

                                    # Scoreboard Name
                                    log.debug("mc_create_phase : scb ele to search %s pool %s!\n"%(cp_scb_arr[2], mc_env_cfg_pool[env_idx_scb][4]))
                                    scb_arr = mc_env_cfg_pool[env_idx_scb][4].split(",")
                                    scb_idx = self.find_index_sub_string(cp_scb_arr[2], scb_arr); 
                                    if scb_idx:
                                        scb_idx = int(scb_idx[0])
                                    log.debug("mc_create_phase : scb_idx %s!\n"%(scb_idx))
                                    
                                    if len(scb_arr[scb_idx].split(":"))>1:
                                        #envscbname = envname_scb+"_"+(scb_arr[scb_idx].split(":"))[0]
                                        envscbname = (scb_arr[scb_idx].split(":"))[0]
                                    else:    
                                        #envscbname = envname_scb+"_"+scb_arr[scb_idx]
                                        envscbname = scb_arr[scb_idx]
                                    
                                    log.debug("mc_create_phase : agt_idx %d  envagtname %s  scb_idx %d  envscbname %s!\n"%(agt_idx, envagtname, scb_idx, envscbname))
                                    log.debug("mc_create_phase : envname %s parenvname %s cp_mon_arr %s cp_scb_arr %s\n"%(envname, parenvname, cp_mon_arr, cp_scb_arr))
                                    
                                    # Common Variables  
                                    for_loop_begin = ''
                                    for_loop_end = ''
    
                                    # TRY To find the hierarchy for monitor and scoreboard
                                    mon_no = env_idx_mon 
                                    mon_no_idx = 0; mon_iter = 0
                                    mon_env_cfg_hir = ''
                                    mon_env_hir = ''
                                    mon_env_ifdef = ''
                                    mon_env_endif = ''
                                    while True:
                                        env_ele_mon = (mc_env_cfg_pool[mon_no][0]).split(",")
                                        ele_to_search = ','+env_ele_mon[0] 
                                        log.debug("mc_create_phase : env_ele_mon %s ele_to_search %s\n"%(env_ele_mon, ele_to_search))

                                        #   if mon_iter: 
                                        #       if ((mc_env_cfg_pool[mon_no][0]).split(","))[1] == envname:
                                        #           mon_env_cfg_hir = ('%s_environment_cfg'%(env_ele_mon[1]))+"."+mon_env_cfg_hir
                                        #           #mon_env_hir = ''+mon_env_hir 
                                        #           log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir%s\n"%(mon_env_cfg_hir, mon_env_hir))
                                        #           mon_iter = 0; break
                                        #       else:
                                        #           #mon_env_ifdef = ('`ifndef DISABLE_%s_%s_ENV '%(env_ele_mon[0].upper(), env_ele_mon[1].upper()))+mon_env_ifdef
                                        #           mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(env_ele_mon[1].upper()))+mon_env_ifdef
                                        #           mon_env_endif = ('`endif ')+mon_env_endif
                                        #           
                                        #           #mon_env_cfg_hir = ('%s_%s_environment_cfg'%(env_ele_mon[0], env_ele_mon[1]))+"."+mon_env_cfg_hir
                                        #           mon_env_cfg_hir = ('%s_environment_cfg'%(env_ele_mon[1]))+"."+mon_env_cfg_hir
                                        #           #mon_env_hir = ('%s_%s_env'%(env_ele_mon[0], env_ele_mon[1]))+"."+mon_env_hir 
                                        #           mon_env_hir = ('%s_env'%(env_ele_mon[1]))+"."+mon_env_hir 
                                        #           log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir%s\n"%(mon_env_cfg_hir, mon_env_hir))
                                        #   else:
                                        #       if ((mc_env_cfg_pool[mon_no][0]).split(","))[1] == envname:
                                        #           mon_env_cfg_hir = ('%s_environment_cfg'%(env_ele_mon[1]))+mon_env_cfg_hir
                                        #           #mon_env_hir = ''+mon_env_hir 
                                        #           log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir%s\n"%(mon_env_cfg_hir, mon_env_hir))
                                        #           break
                                        #       else:
                                        #           #mon_env_ifdef = ('`ifndef DISABLE_%s_%s_ENV '%(env_ele_mon[0].upper(), env_ele_mon[1].upper()))+mon_env_ifdef
                                        #           mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(env_ele_mon[1].upper()))+mon_env_ifdef
                                        #           mon_env_endif = ('`endif ')+mon_env_endif
                                        #           
                                        #           #mon_env_cfg_hir = ('%s_%s_environment_cfg'%(env_ele_mon[0], env_ele_mon[1]))+mon_env_cfg_hir
                                        #           mon_env_cfg_hir = ('%s_environment_cfg'%(env_ele_mon[1]))+mon_env_cfg_hir
                                        #           #mon_env_hir = ('%s_%s_env'%(env_ele_mon[0], env_ele_mon[1]))+mon_env_hir 
                                        #           mon_env_hir = ('%s_env'%(env_ele_mon[1]))+mon_env_hir 
                                        #           log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir%s\n"%(mon_env_cfg_hir, mon_env_hir))
                                        
                                        if mon_iter: 
                                            if ((mc_env_cfg_pool[mon_no][0]).split(","))[1] == envname_org:
                                                if len(env_ele_mon[1].split(":"))>1:
                                                    ename = (env_ele_mon[1].split(":")[0])
                                                else:
                                                    ename = env_ele_mon[1]

                                                mon_env_cfg_hir = ('%s_environment_cfg'%(ename))+"."+mon_env_cfg_hir
                                                log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s\n"%(mon_env_cfg_hir, mon_env_hir))
                                                mon_iter = 0; break
                                            else:
                                                if len(env_ele_mon[1].split(":"))>1:
                                                    ename = (env_ele_mon[1].split(":")[0])
                                                    enum  = int(env_ele_mon[1].split(":")[1])
                                                    eloop = str_arr[str_arr_idx] 

                                                    mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+mon_env_ifdef
                                                    mon_env_endif = ('`endif ')+mon_env_endif
                                                    
                                                    mon_env_cfg_hir = ('%s_environment_cfg[%s]'%(ename, eloop))+"."+mon_env_cfg_hir
                                                    mon_env_hir = ('%s_env[%s]'%(ename, eloop))+"."+mon_env_hir 
                                                    
                                                    #for_loop_begin  = for_loop_begin+('for (int %s = 0; %s < %d; %s++) begin '%(eloop, eloop, enum, eloop))
                                                    for_loop_begin  = ('for (int %s = 0; %s < %d; %s++) begin '%(eloop, eloop, enum, eloop))+for_loop_begin
                                                    #for_loop_begin  = ('for (int %s = 0; %s < %s_environment_cfg.no_of_%s_env; %s++) begin '%(eloop, eloop, envname, ename, eloop))+for_loop_begin
                                                    for_loop_end    = for_loop_end+('end ')

                                                    log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s for_loop_begin %s for_loop_end %s\n"%(mon_env_cfg_hir, mon_env_hir, for_loop_begin, for_loop_end))
                                                else:
                                                    if len(env_ele_mon[1].split(":"))>1:
                                                        ename = (env_ele_mon[1].split(":")[0])
                                                    else:
                                                        ename = env_ele_mon[1]
                                                    
                                                    mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+mon_env_ifdef
                                                    mon_env_endif = ('`endif ')+mon_env_endif
                                                    
                                                    mon_env_cfg_hir = ('%s_environment_cfg'%(ename))+"."+mon_env_cfg_hir
                                                    mon_env_hir = ('%s_env'%(ename))+"."+mon_env_hir 
                                                    log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s\n"%(mon_env_cfg_hir, mon_env_hir))
                                        else:
                                            # If the first iteration itself reached the envname then only load cfg hierarchy and break
                                            if ((mc_env_cfg_pool[mon_no][0]).split(","))[1] == envname_org:
                                                if len(env_ele_mon[1].split(":"))>1:
                                                    ename = (env_ele_mon[1].split(":")[0])
                                                else:
                                                    ename = env_ele_mon[1]
                                                
                                                mon_env_cfg_hir = ('%s_environment_cfg'%(ename))+mon_env_cfg_hir
                                                log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s\n"%(mon_env_cfg_hir, mon_env_hir))
                                                break
                                            else:
                                                # If it has more hierarchy, and if the env has more instance then get the for_loop_begin info
                                                if len(env_ele_mon[1].split(":"))>1:
                                                    ename = (env_ele_mon[1].split(":")[0])
                                                    enum  = int(env_ele_mon[1].split(":")[1])
                                                    eloop = str_arr[str_arr_idx] 

                                                    mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+mon_env_ifdef
                                                    mon_env_endif = ('`endif ')+mon_env_endif
                                                    
                                                    mon_env_cfg_hir = ('%s_environment_cfg[%s]'%(ename, eloop))+mon_env_cfg_hir
                                                    mon_env_hir = ('%s_env[%s]'%(ename, eloop))+mon_env_hir 
                                                    
                                                    for_loop_begin  = ('for (int %s = 0; %s < %d; %s++) begin '%(eloop, eloop, enum, eloop))+for_loop_begin
                                                    #for_loop_begin  = ('for (int %s = 0; %s < %s_environment_cfg.no_of_%s_env; %s++) begin '%(eloop, eloop, envname, ename, eloop))+for_loop_begin
                                                    for_loop_end    = ('end ')+for_loop_end

                                                    log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s for_loop_begin %s for_loop_end %s\n"%(mon_env_cfg_hir, mon_env_hir, for_loop_begin, for_loop_end))
                                                else:
                                                    if len(env_ele_mon[1].split(":"))>1:
                                                        ename = (env_ele_mon[1].split(":")[0])
                                                    else:
                                                        ename = env_ele_mon[1]
                                                    
                                                    mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+mon_env_ifdef
                                                    mon_env_endif = ('`endif ')+mon_env_endif
                                                    
                                                    mon_env_cfg_hir = ('%s_environment_cfg'%(ename))+mon_env_cfg_hir
                                                    mon_env_hir = ('%s_env'%(ename))+mon_env_hir 
                                                    log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s\n"%(mon_env_cfg_hir, mon_env_hir))


                                        while mon_no_idx < len(mc_env_cfg_pool):
                                            if ele_to_search in mc_env_cfg_pool[mon_no_idx][0]:
                                                mon_no = mon_no_idx
                                                mon_no_idx = 0; mon_iter += 1; str_arr_idx += 1
                                                break 
                                            else:
                                                mon_no_idx += 1; mon_iter += 1; str_arr_idx += 1

                                    scb_no = env_idx_scb 
                                    scb_no_idx = 0; scb_iter = 0
                                    scb_env_cfg_hir = ''
                                    scb_env_ifdef = ''
                                    scb_env_endif = ''
                                    scb_env_hir = ''
                                    while True:
                                        env_ele_scb = (mc_env_cfg_pool[scb_no][0]).split(",")
                                        ele_to_search = ','+env_ele_scb[0] 
                                        log.debug("mc_create_phase : env_ele_scb %s ele_to_search %s\n"%(env_ele_scb, ele_to_search))

                                        #   if scb_iter:
                                        #       if ((mc_env_cfg_pool[scb_no][0]).split(","))[1] == envname:
                                        #           scb_env_cfg_hir = ('%s_environment_cfg'%(env_ele_scb[1]))+"."+scb_env_cfg_hir
                                        #           #scb_env_hir = ''+scb_env_hir 
                                        #           log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir%s\n"%(scb_env_cfg_hir, scb_env_hir))
                                        #           scb_iter = 0; break
                                        #       else:
                                        #           #scb_env_ifdef = ('`ifndef DISABLE_%s_%s_ENV '%(env_ele_scb[0].upper(), env_ele_scb[1].upper()))+scb_env_ifdef
                                        #           scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(env_ele_scb[1].upper()))+scb_env_ifdef
                                        #           scb_env_endif = ('`endif ')+scb_env_endif
                                        #           
                                        #           #scb_env_cfg_hir = ('%s_%s_environment_cfg'%(env_ele_scb[0], env_ele_scb[1]))+"."+scb_env_cfg_hir
                                        #           scb_env_cfg_hir = ('%s_environment_cfg'%(env_ele_scb[1]))+"."+scb_env_cfg_hir
                                        #           #scb_env_hir = ('%s_%s_env'%(env_ele_scb[0], env_ele_scb[1]))+"."+scb_env_hir 
                                        #           scb_env_hir = ('%s_env'%(env_ele_scb[1]))+"."+scb_env_hir 
                                        #           log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir%s\n"%(scb_env_cfg_hir, scb_env_hir))
                                        #   else:
                                        #       if ((mc_env_cfg_pool[scb_no][0]).split(","))[1] == envname:
                                        #           scb_env_cfg_hir = ('%s_environment_cfg'%(env_ele_scb[1]))+scb_env_cfg_hir
                                        #           #scb_env_hir = ''+scb_env_hir 
                                        #           log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir%s\n"%(scb_env_cfg_hir, scb_env_hir))
                                        #           break
                                        #       else:
                                        #           #scb_env_ifdef = ('`ifndef DISABLE_%s_%s_ENV '%(env_ele_scb[0].upper(), env_ele_scb[1].upper()))+scb_env_ifdef
                                        #           scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(env_ele_scb[1].upper()))+scb_env_ifdef
                                        #           scb_env_endif = ('`endif ')+scb_env_endif
                                        #           
                                        #           #scb_env_cfg_hir = ('%s_%s_environment_cfg'%(env_ele_scb[0], env_ele_scb[1]))+scb_env_cfg_hir
                                        #           scb_env_cfg_hir = ('%s_environment_cfg'%(env_ele_scb[1]))+scb_env_cfg_hir
                                        #           #scb_env_hir = ('%s_%s_env'%(env_ele_scb[0], env_ele_scb[1]))+scb_env_hir 
                                        #           scb_env_hir = ('%s_env'%(env_ele_scb[1]))+scb_env_hir 
                                        #           log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir%s\n"%(scb_env_cfg_hir, scb_env_hir))

                                        #   while scb_no_idx < len(mc_env_cfg_pool):
                                        #       if ele_to_search in mc_env_cfg_pool[scb_no_idx][0]:
                                        #           scb_no = scb_no_idx
                                        #           scb_no_idx = 0; scb_iter += 1
                                        #           break 
                                        #       else:
                                        #           scb_no_idx += 1; scb_iter += 1

                                        if scb_iter:
                                            if ((mc_env_cfg_pool[scb_no][0]).split(","))[1] == envname_org:
                                                if len(env_ele_scb[1].split(":"))>1:
                                                    ename = (env_ele_scb[1].split(":")[0])
                                                else:
                                                    ename = env_ele_scb[1]
                                                
                                                scb_env_cfg_hir = ('%s_environment_cfg'%(ename))+"."+scb_env_cfg_hir
                                                log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s\n"%(scb_env_cfg_hir, scb_env_hir))
                                                scb_iter = 0; break
                                            else:
                                                # If it has more hierarchy, and if the env has more instance then get the for_loop_begin info
                                                if len(env_ele_scb[1].split(":"))>1:
                                                    ename = (env_ele_scb[1].split(":")[0])
                                                    enum  = int(env_ele_scb[1].split(":")[1])
                                                    eloop = str_arr[str_arr_idx] 

                                                    scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+scb_env_ifdef
                                                    scb_env_endif = ('`endif ')+scb_env_endif
                                                    
                                                    scb_env_cfg_hir = ('%s_environment_cfg[%s]'%(ename, eloop))+"."+scb_env_cfg_hir
                                                    scb_env_hir = ('%s_env[%s]'%(ename, eloop))+"."+scb_env_hir 
                                                    
                                                    #for_loop_begin  = for_loop_begin+('for (int %s = 0; %s < %d; %s++) begin '%(eloop, eloop, enum, eloop))
                                                    for_loop_begin  = ('for (int %s = 0; %s < %d; %s++) begin '%(eloop, eloop, enum, eloop))+for_loop_begin
                                                    #for_loop_begin  = ('for (int %s = 0; %s < %s_environment_cfg.no_of_%s_env; %s++) begin '%(eloop, eloop, envname, ename, eloop))+for_loop_begin
                                                    for_loop_end    = for_loop_end+('end ')

                                                    log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s for_loop_begin %s for_loop_end %s\n"%(scb_env_cfg_hir, scb_env_hir, for_loop_begin, for_loop_end))
                                                else:
                                                    if len(env_ele_scb[1].split(":"))>1:
                                                        ename = (env_ele_scb[1].split(":")[0])
                                                    else:
                                                        ename = env_ele_scb[1]
                                                    
                                                    scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+scb_env_ifdef
                                                    scb_env_endif = ('`endif ')+scb_env_endif
                                                    
                                                    scb_env_cfg_hir = ('%s_environment_cfg'%(ename))+"."+scb_env_cfg_hir
                                                    scb_env_hir = ('%s_env'%(ename))+"."+scb_env_hir 
                                                    log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s\n"%(scb_env_cfg_hir, scb_env_hir))
                                        else:
                                            if ((mc_env_cfg_pool[scb_no][0]).split(","))[1] == envname_org:
                                                if len(env_ele_scb[1].split(":"))>1:
                                                    ename = (env_ele_scb[1].split(":")[0])
                                                else:
                                                    ename = env_ele_scb[1]
                                                
                                                scb_env_cfg_hir = ('%s_environment_cfg'%(ename))+scb_env_cfg_hir
                                                log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s\n"%(scb_env_cfg_hir, scb_env_hir))
                                                break
                                            else:
                                                # If it has more hierarchy, and if the env has more instance then get the for_loop_begin info
                                                if len(env_ele_scb[1].split(":"))>1:
                                                    ename = (env_ele_scb[1].split(":")[0])
                                                    enum  = int(env_ele_scb[1].split(":")[1])
                                                    eloop = str_arr[str_arr_idx] 

                                                    scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+scb_env_ifdef
                                                    scb_env_endif = ('`endif ')+scb_env_endif
                                                    
                                                    scb_env_cfg_hir = ('%s_environment_cfg[%s]'%(ename, eloop))+scb_env_cfg_hir
                                                    scb_env_hir = ('%s_env[%s]'%(ename, eloop))+scb_env_hir 
                                                    
                                                    for_loop_begin  = ('for (int %s = 0; %s < %d; %s++) begin '%(eloop, eloop, enum, eloop))+for_loop_begin
                                                    #for_loop_begin  = ('for (int %s = 0; %s < %s_environment_cfg.no_of_%s_env; %s++) begin '%(eloop, eloop, envname, ename, eloop))+for_loop_begin
                                                    for_loop_end    = ('end ')+for_loop_end

                                                    log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s for_loop_begin %s for_loop_end %s\n"%(scb_env_cfg_hir, scb_env_hir, for_loop_begin, for_loop_end))
                                                else:
                                                    if len(env_ele_scb[1].split(":"))>1:
                                                        ename = (env_ele_scb[1].split(":")[0])
                                                    else:
                                                        ename = env_ele_scb[1]
                                                    
                                                    scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+scb_env_ifdef
                                                    scb_env_endif = ('`endif ')+scb_env_endif
                                                    
                                                    scb_env_cfg_hir = ('%s_environment_cfg'%(ename))+scb_env_cfg_hir
                                                    scb_env_hir = ('%s_env'%(ename))+scb_env_hir 
                                                    log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s\n"%(scb_env_cfg_hir, scb_env_hir))

                                        while scb_no_idx < len(mc_env_cfg_pool):
                                            if ele_to_search in mc_env_cfg_pool[scb_no_idx][0]:
                                                scb_no = scb_no_idx
                                                scb_no_idx = 0; scb_iter += 1; str_arr_idx += 1
                                                break 
                                            else:
                                                scb_no_idx += 1; scb_iter += 1; str_arr_idx += 1  

                                    
                                    log.debug("mc_create_phase : %s %s!\n"%(mc_env_cfg_pool[env_idx_mon][2][agt_idx][2], len(scb_arr[scb_idx].split(":"))))
                                    
                                    # scb_env_cfg_hir = ('%s_environment_cfg'%envname)+"."+('%s_%s_environment_cfg'%(envname, envname_scb, cp_scb_arr[1]))
                                    # scb_env_hir = ('%s_%s_env'%(envname, cp_scb_arr[1]))
                                    # log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s!\n"%(scb_env_cfg_hir, scb_env_hir))
                                   
                                    log.debug("mc_create_phase: mon_env_cfg_hir %s mon_env_hir %s mon_env_ifdef %s mon_env_endif %s\n"%(mon_env_cfg_hir, mon_env_hir, mon_env_ifdef, mon_env_endif))
                                    log.debug("mc_create_phase: scb_env_cfg_hir %s scb_env_hir %s scb_env_ifdef %s scb_env_endif %s\n"%(scb_env_cfg_hir, scb_env_hir, scb_env_ifdef, scb_env_endif))
                                    log.debug("mc_create_phase: for_loop_begin %s for_loop_end %s\n"%(for_loop_begin, for_loop_end))

                                    if not mc_env_cfg_pool[env_idx_mon][2][agt_idx][2] and not len(scb_arr[scb_idx].split(":"))>1:
                                        log.debug("mc_create_phase : agent monitor == 1, scoreboard == 1!\n")
                                       
                                        for x in range (len(cp_monscb_con_arr)): 
                                            con_name = cp_monscb_con_arr[x].split(",")[0]
                                            mon_con_name = envagtmonname+"_"+con_name

                                            if not mon_env_hir and not scb_env_hir: 
                                                env_mon_scb_stg = env_mon_scb_stg\
                                                +('µ if (%s.%s_is_active && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                +('µ  %s_agt.%s_mon.%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                +('µ end\n\n')
                                            elif not mon_env_hir and scb_env_hir:    
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(scb_env_ifdef))\
                                                    +('µ if (%s.%s_is_active && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ  %s_agt.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ end\n')\
                                                    +('µ%s\n\n'%(scb_env_endif))
                                                else:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(scb_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ if (%s.%s_is_active && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ  %s_agt.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s\n\n'%(scb_env_endif))
                                            elif mon_env_hir and not scb_env_hir:    
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(mon_env_ifdef))\
                                                    +('µ if (%s.%s_is_active && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ  %s.%s_agt.%s_mon.%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ end\n')\
                                                    +('µ%s\n\n'%(mon_env_endif))
                                                else:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(mon_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ if (%s.%s_is_active && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ  %s.%s_agt.%s_mon.%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s\n\n'%(mon_env_endif))
                                            elif mon_env_hir and scb_env_hir:    
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                    +('µ if (%s.%s_is_active && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ  %s.%s_agt.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ end\n')\
                                                    +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                                else:    
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ if (%s.%s_is_active && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ  %s.%s_agt.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                        
                                        log.debug("mc_create_phase : env_mon_scb_stg %s!\n"%env_mon_scb_stg)
                                    
                                    elif not mc_env_cfg_pool[env_idx_mon][2][agt_idx][2] and len(scb_arr[scb_idx].split(":"))>1:
                                        log.debug("mc_create_phase : agent monitor == 1, scoreboard > 1!\n")
                                    
                                        for x in range (len(cp_monscb_con_arr)): 
                                            con_name = cp_monscb_con_arr[x].split(",")[0]
                                            mon_con_name = envagtmonname+"_"+con_name
                                            
                                            if not mon_env_hir and not scb_env_hir: 
                                                env_mon_scb_stg = env_mon_scb_stg\
                                                +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                +('µ  if (%s.%s_is_active[i] && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                +('µ   %s_agt.%s_mon.%s_%s_analysis_port.connect(%s_scb[i].%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                +('µ  end\n')\
                                                +('µ end\n\n')
                                            elif not mon_env_hir and scb_env_hir:    
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(scb_env_ifdef))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ  if (%s.%s_is_active[i] && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ   %s_agt.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb[i].%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n\n'%(scb_env_endif))
                                                else: 
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(scb_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ  if (%s.%s_is_active[i] && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ   %s_agt.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb[i].%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s\n\n'%(scb_env_endif))
                                            elif mon_env_hir and not scb_env_hir:    
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(mon_env_ifdef))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ  if (%s.%s_is_active[i] && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ   %s.%s_agt.%s_mon.%s_%s_analysis_port.connect(%s_scb[i].%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n\n'%(mon_env_endif))
                                                else:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(mon_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ  if (%s.%s_is_active[i] && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ   %s.%s_agt.%s_mon.%s_%s_analysis_port.connect(%s_scb[i].%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s\n\n'%(mon_env_endif))
                                            elif mon_env_hir and scb_env_hir:    
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ  if (%s.%s_is_active[i] && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ   %s.%s_agt.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb[i].%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                                else:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ  if (%s.%s_is_active[i] && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ   %s.%s_agt.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb[i].%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))

                                        log.debug("mc_create_phase : env_mon_scb_stg %s!\n"%env_mon_scb_stg)
                                   
                                    elif mc_env_cfg_pool[env_idx_mon][2][agt_idx][2] and not len(scb_arr[c+1].split(":"))>1:
                                        log.debug("mc_create_phase : agent monitor > 1, scoreboard == 1!\n")
                                    
                                        for x in range (len(cp_monscb_con_arr)): 
                                            con_name = cp_monscb_con_arr[x].split(",")[0]
                                            mon_con_name = envagtmonname+"_"+con_name
                                            
                                            if not mon_env_hir and not scb_env_hir: 
                                                env_mon_scb_stg = env_mon_scb_stg\
                                                +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                +('µ  if (%s.%s_is_active && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                +('µ   %s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                +('µ  end\n')\
                                                +('µ end\n\n')
                                            elif not mon_env_hir and scb_env_hir: 
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(scb_env_ifdef))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                    +('µ  if (%s.%s_is_active && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ   %s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n\n'%(scb_env_endif))
                                                else:    
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(scb_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                    +('µ  if (%s.%s_is_active && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ   %s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s\n\n'%(scb_env_endif))
                                            elif mon_env_hir and not scb_env_hir: 
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(mon_env_ifdef))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                    +('µ  if (%s.%s_is_active && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ   %s.%s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n\n'%(mon_env_endif))
                                                else:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(mon_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                    +('µ  if (%s.%s_is_active && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ   %s.%s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s\n\n'%(mon_env_endif))
                                            elif mon_env_hir and scb_env_hir: 
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                    +('µ  if (%s.%s_is_active && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ   %s.%s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                                else:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                    +('µ  if (%s.%s_is_active && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ   %s.%s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))

                                        log.debug("mc_create_phase : env_mon_scb_stg %s!\n"%env_mon_scb_stg)

                                    elif mc_env_cfg_pool[env_idx_mon][2][agt_idx][2] and len(scb_arr[c+1].split(":"))>1:
                                        log.debug("mc_create_phase : agent monitor > 1, scoreboard > 1!\n")

                                        for x in range (len(cp_monscb_con_arr)): 
                                            con_name = cp_monscb_con_arr[x].split(",")[0]
                                            mon_con_name = envagtmonname+"_"+con_name
                                            
                                            if not mon_env_hir and not scb_env_hir: 
                                                env_mon_scb_stg = env_mon_scb_stg\
                                                +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                +('µ   if (%s.%s_is_active[j] && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                +('µ    %s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s_scb[j].%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                +('µ   end\n')\
                                                +('µ  end\n')\
                                                +('µ end\n\n')
                                            elif not mon_env_hir and scb_env_hir: 
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(scb_env_ifdef))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                    +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ   if (%s.%s_is_active[j] && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ    %s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s.%s_scb[j].%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ   end\n')\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n\n'%(scb_env_endif))
                                                else:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(scb_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                    +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ   if (%s.%s_is_active[j] && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ    %s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s.%s_scb[j].%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ   end\n')\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s\n\n'%(scb_env_endif))
                                            elif mon_env_hir and not scb_env_hir: 
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(mon_env_ifdef))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                    +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ   if (%s.%s_is_active[j] && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ    %s.%s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s_scb[j].%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ   end\n')\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n\n'%(mon_env_endif))
                                                else:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(mon_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                    +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ   if (%s.%s_is_active[j] && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ    %s.%s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s_scb[j].%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ   end\n')\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s\n\n'%(mon_env_endif))
                                            elif mon_env_hir and scb_env_hir: 
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                    +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ   if (%s.%s_is_active[j] && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ    %s.%s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s.%s_scb[j].%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ   end\n')\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                                else:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                    +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ   if (%s.%s_is_active[j] && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ    %s.%s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s.%s_scb[j].%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ   end\n')\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))

                                        log.debug("mc_create_phase : env_mon_scb_stg %s!\n"%env_mon_scb_stg)
                                
                                elif len(cp_mon_arr) == 3:
                                    # Monitor related variables/arrays 
                                    pen_mon = cp_mon_arr[0]
                                    en_mon  = cp_mon_arr[1]
                                    m_mon   = cp_mon_arr[2]

                                    # Env Index Search
                                    env_search = pen_mon+","+en_mon
                                    env_idx_mon = self.find_index(env_search, mc_env_cfg_pool)
                                    log.debug("mc_create_phase : env_search %s env_idx_mon %s!\n"%(env_search, env_idx_mon))
                                    if env_idx_mon:
                                        env_idx_mon = int(env_idx_mon[0])
                                        #envname_mon = (mc_env_cfg_pool[env_idx_mon][0].split(","))[1]
                                        envname_mon = ((mc_env_cfg_pool[env_idx_mon][0].split(","))[1]).split(":")[0]
                                    log.debug("mc_create_phase : env_search %s env_idx_mon %s envname_mon %s!\n"%(env_search, env_idx_mon, envname_mon))

                                    # Monitor Name
                                    log.debug("mc_create_phase : mon ele to search %s pool %s!\n"%(cp_mon_arr[2], mc_env_cfg_pool[env_idx_mon][3]))
                                    mon_arr = mc_env_cfg_pool[env_idx_mon][3].split(",")
                                    mon_idx = self.find_index_sub_string(cp_mon_arr[2], mon_arr); 
                                    if mon_idx:
                                        mon_idx = int(mon_idx[0])
                                    log.debug("mc_create_phase : mon_idx %s!\n"%(mon_idx))
                                    
                                    if len(mon_arr[mon_idx].split(":"))>1:
                                        #envmonname = envname_mon+"_"+(mon_arr[mon_idx].split(":"))[0]
                                        envmonname = (mon_arr[mon_idx].split(":"))[0]
                                    else:    
                                        #envmonname = envname_mon+"_"+mon_arr[mon_idx]
                                        envmonname = mon_arr[mon_idx]
                                    
                                    log.debug("mc_create_phase : mon_idx %d  envmonname %s!\n"%(mon_idx, envmonname))
                                    log.debug("mc_create_phase : envname %s parenvname %s cp_mon_arr %s cp_mon_arr%s\n"%(envname, parenvname, cp_mon_arr, cp_mon_arr))

                                    # Scoreboard related variables/arrays 
                                    pen_scb = cp_scb_arr[0]
                                    en_scb  = cp_scb_arr[1]
                                    a_scb   = cp_scb_arr[2]
                                    
                                    # Env Index Search
                                    env_search = pen_scb+","+en_scb
                                    env_idx_scb = self.find_index(env_search, mc_env_cfg_pool)
                                    log.debug("mc_create_phase : env_search %s env_idx_scb %s!\n"%(env_search, env_idx_scb))
                                    if env_idx_scb:
                                        env_idx_scb = int(env_idx_scb[0])
                                        #envname_scb = (mc_env_cfg_pool[env_idx_scb][0].split(","))[1]
                                        envname_scb = ((mc_env_cfg_pool[env_idx_scb][0].split(","))[1]).split(":")[0]
                                    log.debug("mc_create_phase : env_search %s env_idx_scb %s envname_scb %s!\n"%(env_search, env_idx_scb, envname_scb))

                                    # Scoreboard Name
                                    log.debug("mc_create_phase : scb ele to search %s pool %s!\n"%(cp_scb_arr[2], mc_env_cfg_pool[env_idx_scb][4]))
                                    scb_arr = mc_env_cfg_pool[env_idx_scb][4].split(",")
                                    scb_idx = self.find_index_sub_string(cp_scb_arr[2], scb_arr); 
                                    if scb_idx:
                                        scb_idx = int(scb_idx[0])
                                    log.debug("mc_create_phase : scb_idx %s!\n"%(scb_idx))
                                    
                                    if len(scb_arr[scb_idx].split(":"))>1:
                                        #envscbname = envname_scb+"_"+(scb_arr[scb_idx].split(":"))[0]
                                        envscbname = (scb_arr[scb_idx].split(":"))[0]
                                    else:    
                                        #envscbname = envname_scb+"_"+scb_arr[scb_idx]
                                        envscbname = scb_arr[scb_idx]
                                    
                                    log.debug("mc_create_phase : mon_idx %s envmonname %s scb_idx %d  envscbname %s!\n"%(mon_idx, envmonname, scb_idx, envscbname))
                                    log.debug("mc_create_phase : envname %s parenvname %s cp_mon_arr %s cp_scb_arr%s\n"%(envname, parenvname, cp_mon_arr, cp_scb_arr))
                                    
                                    # Common Variables  
                                    for_loop_begin = ''
                                    for_loop_end = ''

                                    # TRY To find the hierarchy for monitor and scoreboard
                                    mon_no = env_idx_mon 
                                    mon_no_idx = 0; mon_iter = 0
                                    mon_env_cfg_hir = ''
                                    mon_env_hir = ''
                                    mon_env_ifdef = ''
                                    mon_env_endif = ''
                                    while True:
                                        env_ele_mon = (mc_env_cfg_pool[mon_no][0]).split(",")
                                        ele_to_search = ','+env_ele_mon[0] 
                                        log.debug("mc_create_phase : env_ele_mon %s ele_to_search%s\n"%(env_ele_mon, ele_to_search))

                                        #   if mon_iter: 
                                        #       if ((mc_env_cfg_pool[mon_no][0]).split(","))[1] == envname:
                                        #           mon_env_cfg_hir = ('%s_environment_cfg'%(env_ele_mon[1]))+"."+mon_env_cfg_hir
                                        #           #mon_env_hir = ''+mon_env_hir 
                                        #           log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir%s\n"%(mon_env_cfg_hir, mon_env_hir))
                                        #           mon_iter = 0; break
                                        #       else:
                                        #           #mon_env_ifdef = ('`ifndef DISABLE_%s_%s_ENV '%(env_ele_mon[0].upper(), env_ele_mon[1].upper()))+mon_env_ifdef
                                        #           mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(env_ele_mon[1].upper()))+mon_env_ifdef
                                        #           mon_env_endif = ('`endif ')+mon_env_endif
                                        #           
                                        #           #mon_env_cfg_hir = ('%s_%s_environment_cfg'%(env_ele_mon[0], env_ele_mon[1]))+"."+mon_env_cfg_hir
                                        #           mon_env_cfg_hir = ('%s_environment_cfg'%(env_ele_mon[1]))+"."+mon_env_cfg_hir
                                        #           #mon_env_hir = ('%s_%s_env'%(env_ele_mon[0], env_ele_mon[1]))+"."+mon_env_hir 
                                        #           mon_env_hir = ('%s_env'%(env_ele_mon[1]))+"."+mon_env_hir 
                                        #           log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir%s\n"%(mon_env_cfg_hir, mon_env_hir))
                                        #   else:
                                        #       if ((mc_env_cfg_pool[mon_no][0]).split(","))[1] == envname:
                                        #           mon_env_cfg_hir = ('%s_environment_cfg'%(env_ele_mon[1]))+mon_env_cfg_hir
                                        #           #mon_env_hir = ''+mon_env_hir 
                                        #           log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir%s\n"%(mon_env_cfg_hir, mon_env_hir))
                                        #           break
                                        #       else:
                                        #           #mon_env_ifdef = ('`ifndef DISABLE_%s_%s_ENV '%(env_ele_mon[0].upper(), env_ele_mon[1].upper()))+mon_env_ifdef
                                        #           mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(env_ele_mon[1].upper()))+mon_env_ifdef
                                        #           mon_env_endif = ('`endif ')+mon_env_endif
                                        #           
                                        #           #mon_env_cfg_hir = ('%s_%s_environment_cfg'%(env_ele_mon[0], env_ele_mon[1]))+mon_env_cfg_hir
                                        #           mon_env_cfg_hir = ('%s_environment_cfg'%(env_ele_mon[1]))+mon_env_cfg_hir
                                        #           #mon_env_hir = ('%s_%s_env'%(env_ele_mon[0], env_ele_mon[1]))+mon_env_hir 
                                        #           mon_env_hir = ('%s_env'%(env_ele_mon[1]))+mon_env_hir 
                                        #           log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir%s\n"%(mon_env_cfg_hir, mon_env_hir))
                                        #       
                                        #   while mon_no_idx < len(mc_env_cfg_pool):
                                        #       if ele_to_search in mc_env_cfg_pool[mon_no_idx][0]:
                                        #           mon_no = mon_no_idx
                                        #           mon_no_idx = 0; mon_iter += 1
                                        #           break 
                                        #       else:
                                        #           mon_no_idx += 1; mon_iter += 1

                                        if mon_iter: 
                                            if ((mc_env_cfg_pool[mon_no][0]).split(","))[1] == envname_org:
                                                if len(env_ele_mon[1].split(":"))>1:
                                                    ename = (env_ele_mon[1].split(":")[0])
                                                else:
                                                    ename = env_ele_mon[1]

                                                mon_env_cfg_hir = ('%s_environment_cfg'%(ename))+"."+mon_env_cfg_hir
                                                log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s\n"%(mon_env_cfg_hir, mon_env_hir))
                                                mon_iter = 0; break
                                            else:
                                                if len(env_ele_mon[1].split(":"))>1:
                                                    ename = (env_ele_mon[1].split(":")[0])
                                                    enum  = int(env_ele_mon[1].split(":")[1])
                                                    eloop = str_arr[str_arr_idx] 

                                                    mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+mon_env_ifdef
                                                    mon_env_endif = ('`endif ')+mon_env_endif
                                                    
                                                    mon_env_cfg_hir = ('%s_environment_cfg[%s]'%(ename,eloop))+"."+mon_env_cfg_hir
                                                    mon_env_hir = ('%s_env[%s]'%(ename,eloop))+"."+mon_env_hir 
                                                    
                                                    for_loop_begin  = for_loop_begin+('for (int %s = 0; %s < %d; %s++) begin '%(eloop, eloop, enum, eloop))
                                                    #for_loop_begin  = for_loop_begin+('for (int %s = 0; %s < %s_environment_cfg.no_of_%s_env; %s++) begin '%(eloop, eloop, envname, ename, eloop))
                                                    for_loop_end    = for_loop_end+('end ')

                                                    log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s\n"%(mon_env_cfg_hir, mon_env_hir))
                                                else:
                                                    if len(env_ele_mon[1].split(":"))>1:
                                                        ename = (env_ele_mon[1].split(":")[0])
                                                    else:
                                                        ename = env_ele_mon[1]
                                                    
                                                    mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+mon_env_ifdef
                                                    mon_env_endif = ('`endif ')+mon_env_endif
                                                    
                                                    mon_env_cfg_hir = ('%s_environment_cfg'%(ename))+"."+mon_env_cfg_hir
                                                    mon_env_hir = ('%s_env'%(ename))+"."+mon_env_hir 
                                                    log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s\n"%(mon_env_cfg_hir, mon_env_hir))
                                        else:
                                            if ((mc_env_cfg_pool[mon_no][0]).split(","))[1] == envname_org:
                                                if len(env_ele_mon[1].split(":"))>1:
                                                    ename = (env_ele_mon[1].split(":")[0])
                                                else:
                                                    ename = env_ele_mon[1]
                                                
                                                mon_env_cfg_hir = ('%s_environment_cfg'%(ename))+mon_env_cfg_hir
                                                log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s\n"%(mon_env_cfg_hir, mon_env_hir))
                                                break
                                            else:
                                                # If it has more hierarchy, and if the env has more instance then get the for_loop_begin info
                                                if len(env_ele_mon[1].split(":"))>1:
                                                    ename = (env_ele_mon[1].split(":")[0])
                                                    enum  = int(env_ele_mon[1].split(":")[1])
                                                    eloop = str_arr[str_arr_idx] 

                                                    mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+mon_env_ifdef
                                                    mon_env_endif = ('`endif ')+mon_env_endif
                                                    
                                                    mon_env_cfg_hir = ('%s_environment_cfg[%s]'%(ename,eloop))+mon_env_cfg_hir
                                                    mon_env_hir = ('%s_env[%s]'%(ename,eloop))+mon_env_hir 
                                                    
                                                    for_loop_begin  = ('for (int %s = 0; %s < %d; %s++) begin '%(eloop, eloop, enum, eloop))+for_loop_begin
                                                    #for_loop_begin  = ('for (int %s = 0; %s < %s_environment_cfg.no_of_%s_env; %s++) begin '%(eloop, eloop, envname, ename, eloop))+for_loop_begin
                                                    for_loop_end    = ('end ')+for_loop_end

                                                    log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s\n"%(mon_env_cfg_hir, mon_env_hir))
                                                else:
                                                    if len(env_ele_mon[1].split(":"))>1:
                                                        ename = (env_ele_mon[1].split(":")[0])
                                                    else:
                                                        ename = env_ele_mon[1]

                                                    mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+mon_env_ifdef
                                                    mon_env_endif = ('`endif ')+mon_env_endif
                                                    
                                                    mon_env_cfg_hir = ('%s_environment_cfg'%(ename))+mon_env_cfg_hir
                                                    mon_env_hir = ('%s_env'%(ename))+mon_env_hir 
                                                    log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s\n"%(mon_env_cfg_hir, mon_env_hir))

                                        while mon_no_idx < len(mc_env_cfg_pool):
                                            if ele_to_search in mc_env_cfg_pool[mon_no_idx][0]:
                                                mon_no = mon_no_idx
                                                mon_no_idx = 0; mon_iter += 1; str_arr_idx += 1
                                                break 
                                            else:
                                                mon_no_idx += 1; mon_iter += 1; str_arr_idx += 1                                       

                                    scb_no = env_idx_scb 
                                    scb_no_idx = 0; scb_iter = 0
                                    scb_env_cfg_hir = ''
                                    scb_env_hir = ''
                                    scb_env_ifdef = ''
                                    scb_env_endif = ''
                                    while True:
                                        env_ele_scb = (mc_env_cfg_pool[scb_no][0]).split(",")
                                        ele_to_search = ','+env_ele_scb[0] 
                                        log.debug("mc_create_phase : env_ele_scb %s ele_to_search%s\n"%(env_ele_scb, ele_to_search))

                                        #   if scb_iter:
                                        #       if ((mc_env_cfg_pool[scb_no][0]).split(","))[1] == envname:
                                        #           scb_env_cfg_hir = ('%s_environment_cfg'%(env_ele_scb[1]))+"."+scb_env_cfg_hir
                                        #           #scb_env_hir = ''+scb_env_hir 
                                        #           log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir%s\n"%(scb_env_cfg_hir, scb_env_hir))
                                        #           scb_iter = 0; break
                                        #       else:
                                        #           #scb_env_ifdef = ('`ifndef DISABLE_%s_%s_ENV '%(env_ele_scb[0].upper(), env_ele_scb[1].upper()))+scb_env_ifdef
                                        #           scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(env_ele_scb[1].upper()))+scb_env_ifdef
                                        #           scb_env_endif = ('`endif ')+scb_env_endif
                                        #           
                                        #           #scb_env_cfg_hir = ('%s_%s_environment_cfg'%(env_ele_scb[0], env_ele_scb[1]))+"."+scb_env_cfg_hir
                                        #           scb_env_cfg_hir = ('%s_environment_cfg'%(env_ele_scb[1]))+"."+scb_env_cfg_hir
                                        #           #scb_env_hir = ('%s_%s_env'%(env_ele_scb[0], env_ele_scb[1]))+"."+scb_env_hir 
                                        #           scb_env_hir = ('%s_env'%(env_ele_scb[1]))+"."+scb_env_hir 
                                        #           log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir%s\n"%(scb_env_cfg_hir, scb_env_hir))
                                        #   else:
                                        #       if ((mc_env_cfg_pool[scb_no][0]).split(","))[1] == envname:
                                        #           scb_env_cfg_hir = ('%s_environment_cfg'%(env_ele_scb[1]))+scb_env_cfg_hir
                                        #           #scb_env_hir = ''+scb_env_hir 
                                        #           log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir%s\n"%(scb_env_cfg_hir, scb_env_hir))
                                        #           break
                                        #       else:
                                        #           #scb_env_ifdef = ('`ifndef DISABLE_%s_%s_ENV '%(env_ele_scb[0].upper(), env_ele_scb[1].upper()))+scb_env_ifdef
                                        #           scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(env_ele_scb[1].upper()))+scb_env_ifdef
                                        #           scb_env_endif = ('`endif ')+scb_env_endif
                                        #           
                                        #           #scb_env_cfg_hir = ('%s_%s_environment_cfg'%(env_ele_scb[0], env_ele_scb[1]))+scb_env_cfg_hir
                                        #           scb_env_cfg_hir = ('%s_environment_cfg'%(env_ele_scb[1]))+scb_env_cfg_hir
                                        #           #scb_env_hir = ('%s_%s_env'%(env_ele_scb[0], env_ele_scb[1]))+scb_env_hir 
                                        #           scb_env_hir = ('%s_env'%(env_ele_scb[1]))+scb_env_hir 
                                        #           log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir%s\n"%(scb_env_cfg_hir, scb_env_hir))

                                        #   while scb_no_idx < len(mc_env_cfg_pool):
                                        #       if ele_to_search in mc_env_cfg_pool[scb_no_idx][0]:
                                        #           scb_no = scb_no_idx
                                        #           scb_no_idx = 0; scb_iter += 1
                                        #           break 
                                        #       else:
                                        #           scb_no_idx += 1; scb_iter += 1

                                        if scb_iter:
                                            if ((mc_env_cfg_pool[scb_no][0]).split(","))[1] == envname_org:
                                                if len(env_ele_scb[1].split(":"))>1:
                                                    ename = (env_ele_scb[1].split(":")[0])
                                                else:
                                                    ename = env_ele_scb[1]

                                                scb_env_cfg_hir = ('%s_environment_cfg'%(ename))+"."+scb_env_cfg_hir
                                                log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s\n"%(scb_env_cfg_hir, scb_env_hir))
                                                scb_iter = 0; break
                                            else:
                                                # If it has more hierarchy, and if the env has more instance then get the for_loop_begin info
                                                if len(env_ele_scb[1].split(":"))>1:
                                                    ename = (env_ele_scb[1].split(":")[0])
                                                    enum  = int(env_ele_scb[1].split(":")[1])
                                                    eloop = str_arr[str_arr_idx] 

                                                    scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+scb_env_ifdef
                                                    scb_env_endif = ('`endif ')+scb_env_endif
                                                    
                                                    scb_env_cfg_hir = ('%s_environment_cfg[%s]'%(ename,eloop))+"."+scb_env_cfg_hir
                                                    scb_env_hir = ('%s_env[%s]'%(ename,eloop))+"."+scb_env_hir 
                                                    
                                                    for_loop_begin  = for_loop_begin+('for (int %s = 0; %s < %d; %s++) begin '%(eloop, eloop, enum, eloop))
                                                    #for_loop_begin  = for_loop_begin+('for (int %s = 0; %s < %s_environment_cfg.no_of_%s_env; %s++) begin '%(eloop, eloop, envname, ename, eloop))
                                                    for_loop_end    = for_loop_end+('end ')

                                                    log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s\n"%(scb_env_cfg_hir, scb_env_hir))
                                                else:
                                                    if len(env_ele_scb[1].split(":"))>1:
                                                        ename = (env_ele_scb[1].split(":")[0])
                                                    else:
                                                        ename = env_ele_scb[1]
                                                    
                                                    scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+scb_env_ifdef
                                                    scb_env_endif = ('`endif ')+scb_env_endif
                                                    
                                                    scb_env_cfg_hir = ('%s_environment_cfg'%(ename))+"."+scb_env_cfg_hir
                                                    scb_env_hir = ('%s_env'%(ename))+"."+scb_env_hir 
                                                    log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s\n"%(scb_env_cfg_hir, scb_env_hir))
                                        else:
                                            if ((mc_env_cfg_pool[scb_no][0]).split(","))[1] == envname_org:
                                                if len(env_ele_scb[1].split(":"))>1:
                                                    ename = (env_ele_scb[1].split(":")[0])
                                                else:
                                                    ename = env_ele_scb[1]

                                                scb_env_cfg_hir = ('%s_environment_cfg'%(ename))+scb_env_cfg_hir
                                                log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s\n"%(scb_env_cfg_hir, scb_env_hir))
                                                break
                                            else:
                                                # If it has more hierarchy, and if the env has more instance then get the for_loop_begin info
                                                if len(env_ele_scb[1].split(":"))>1:
                                                    ename = (env_ele_scb[1].split(":")[0])
                                                    enum  = int(env_ele_scb[1].split(":")[1])
                                                    eloop = str_arr[str_arr_idx] 

                                                    scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+scb_env_ifdef
                                                    scb_env_endif = ('`endif ')+scb_env_endif
                                                    
                                                    scb_env_cfg_hir = ('%s_environment_cfg[%s]'%(ename,eloop))+scb_env_cfg_hir
                                                    scb_env_hir = ('%s_env[%s]'%(ename,eloop))+scb_env_hir 
                                                    
                                                    for_loop_begin  = ('for (int %s = 0; %s < %d; %s++) begin '%(eloop, eloop, enum, eloop))+for_loop_begin
                                                    #for_loop_begin  = ('for (int %s = 0; %s < %s_environment_cfg.no_of_%s_env; %s++) begin '%(eloop, eloop, envname, ename, eloop))+for_loop_begin
                                                    for_loop_end    = ('end ')+for_loop_end

                                                    log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s\n"%(scb_env_cfg_hir, scb_env_hir))
                                                else:
                                                    if len(env_ele_scb[1].split(":"))>1:
                                                        ename = (env_ele_scb[1].split(":")[0])
                                                    else:
                                                        ename = env_ele_scb[1]

                                                    scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+scb_env_ifdef
                                                    scb_env_endif = ('`endif ')+scb_env_endif
                                                    
                                                    scb_env_cfg_hir = ('%s_environment_cfg'%(ename))+scb_env_cfg_hir
                                                    scb_env_hir = ('%s_env'%(ename))+scb_env_hir 
                                                    log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s\n"%(scb_env_cfg_hir, scb_env_hir))

                                        while scb_no_idx < len(mc_env_cfg_pool):
                                            if ele_to_search in mc_env_cfg_pool[scb_no_idx][0]:
                                                scb_no = scb_no_idx
                                                scb_no_idx = 0; scb_iter += 1; str_arr_idx += 1
                                                break 
                                            else:
                                                scb_no_idx += 1; scb_iter += 1; str_arr_idx += 1

                                    
                                    # log.debug("mc_create_phase : %s %s!\n"%(mc_env_cfg_pool[env_idx_mon][2][agt_idx][2], len(scb_arr[scb_idx].split(":"))))
                                    
                                    log.debug("mc_create_phase: mon_env_cfg_hir %s mon_env_hir %s mon_env_ifdef %s mon_env_endif %s\n"%(mon_env_cfg_hir, mon_env_hir, mon_env_ifdef, mon_env_endif))
                                    log.debug("mc_create_phase: scb_env_cfg_hir %s scb_env_hir %s scb_env_ifdef %s scb_env_endif %s\n"%(scb_env_cfg_hir, scb_env_hir, scb_env_ifdef, scb_env_endif))
                                    log.debug("mc_create_phase: for_loop_begin %s for_loop_end %s\n"%(for_loop_begin, for_loop_end))
                                    
                                    if not len(mon_arr[mon_idx].split(":"))>1 and not len(scb_arr[scb_idx].split(":"))>1:
                                        log.debug("mc_create_phase : agent monitor == 1, scoreboard == 1!\n")
                                       
                                        for x in range (len(cp_monscb_con_arr)): 
                                            con_name = cp_monscb_con_arr[x].split(",")[0]
                                            mon_con_name = envmonname+"_"+con_name
                                           
                                            if not mon_env_hir and not scb_env_hir: 
                                                env_mon_scb_stg = env_mon_scb_stg\
                                                +('µ if (%s.%s_is_active && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                +('µ  %s_mon.%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                +('µ end\n\n')
                                            elif not mon_env_hir and scb_env_hir:    
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(scb_env_ifdef))\
                                                    +('µ if (%s.%s_is_active && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ  %s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ end\n')\
                                                    +('µ%s\n\n'%(scb_env_endif))
                                                else:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(scb_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ if (%s.%s_is_active && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ  %s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s\n\n'%(scb_env_endif))
                                            elif mon_env_hir and not scb_env_hir:    
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(mon_env_ifdef))\
                                                    +('µ if (%s.%s_is_active && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ  %s.%s_mon.%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ end\n')\
                                                    +('µ%s\n\n'%(mon_env_endif))
                                                else:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(mon_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ if (%s.%s_is_active && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ  %s.%s_mon.%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s\n\n'%(mon_env_endif))
                                            elif mon_env_hir and scb_env_hir:    
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                    +('µ if (%s.%s_is_active && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ  %s.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ end\n')\
                                                    +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                                else:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ if (%s.%s_is_active && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ  %s.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))

                                        log.debug("mc_create_phase : env_mon_scb_stg %s!\n"%env_mon_scb_stg)
                                    
                                    elif not len(mon_arr[mon_idx].split(":"))>1 and len(scb_arr[scb_idx].split(":"))>1:
                                        log.debug("mc_create_phase : agent monitor == 1, scoreboard > 1!\n")
                                    
                                        for x in range (len(cp_monscb_con_arr)): 
                                            con_name = cp_monscb_con_arr[x].split(",")[0]
                                            mon_con_name = envmonname+"_"+con_name
                                            
                                            if not mon_env_hir and not scb_env_hir: 
                                                env_mon_scb_stg = env_mon_scb_stg\
                                                +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                +('µ  if (%s.%s_is_active[i] && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                +('µ   %s_mon.%s_%s_analysis_port.connect(%s_scb[i].%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                +('µ  end\n')\
                                                +('µ end\n\n')
                                            elif not mon_env_hir and scb_env_hir:    
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(scb_env_ifdef))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ  if (%s.%s_is_active[i] && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ   %s_mon.%s_%s_analysis_port.connect(%s.%s_scb[i].%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n\n'%(scb_env_endif))
                                                else:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(scb_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ  if (%s.%s_is_active[i] && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ   %s_mon.%s_%s_analysis_port.connect(%s.%s_scb[i].%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s\n\n'%(scb_env_endif))
                                            elif mon_env_hir and not scb_env_hir:    
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(mon_env_ifdef))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ  if (%s.%s_is_active[i] && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ   %s.%s_mon.%s_%s_analysis_port.connect(%s_scb[i].%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n\n'%(mon_env_endif))
                                                else:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(mon_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ  if (%s.%s_is_active[i] && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ   %s.%s_mon.%s_%s_analysis_port.connect(%s_scb[i].%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s\n\n'%(mon_env_endif))
                                            elif mon_env_hir and scb_env_hir:    
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ  if (%s.%s_is_active[i] && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ   %s.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb[i].%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                                else: 
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ  if (%s.%s_is_active[i] && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ   %s.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb[i].%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                        log.debug("mc_create_phase : env_mon_scb_stg %s!\n"%env_mon_scb_stg)
                                   
                                    elif len(mon_arr[mon_idx].split(":"))>1 and not len(scb_arr[scb_idx].split(":"))>1:
                                        log.debug("mc_create_phase : agent monitor > 1, scoreboard == 1!\n")
                                    
                                        for x in range (len(cp_monscb_con_arr)): 
                                            con_name = cp_monscb_con_arr[x].split(",")[0]
                                            mon_con_name = envmonname+"_"+con_name
                                            
                                            if not mon_env_hir and not scb_env_hir: 
                                                env_mon_scb_stg = env_mon_scb_stg\
                                                +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                +('µ  if (%s.%s_is_active && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                +('µ   %s_mon[i].%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                +('µ  end\n')\
                                                +('µ end\n\n')
                                            elif not mon_env_hir and scb_env_hir: 
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(scb_env_ifdef))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                    +('µ  if (%s.%s_is_active && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ   %s_mon[i].%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')
                                                    +('µ%s\n\n'%(scb_env_endif))
                                                else:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(scb_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                    +('µ  if (%s.%s_is_active && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ   %s_mon[i].%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s\n\n'%(scb_env_endif))
                                            elif mon_env_hir and not scb_env_hir: 
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(mon_env_ifdef))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                    +('µ  if (%s.%s_is_active && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ   %s.%s_mon[i].%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n\n'%(mon_env_endif))
                                                else:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(mon_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                    +('µ  if (%s.%s_is_active && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ   %s.%s_mon[i].%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s\n\n'%(mon_env_endif))
                                            elif mon_env_hir and scb_env_hir: 
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                    +('µ  if (%s.%s_is_active && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ   %s.%s_mon[i].%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                                else: 
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                    +('µ  if (%s.%s_is_active && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ   %s.%s_mon[i].%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                        log.debug("mc_create_phase : env_mon_scb_stg %s!\n"%env_mon_scb_stg)

                                    elif len(mon_arr[mon_idx].split(":"))>1 and len(scb_arr[scb_idx].split(":"))>1:
                                        log.debug("mc_create_phase : agent monitor > 1, scoreboard > 1!\n")

                                        for x in range (len(cp_monscb_con_arr)): 
                                            con_name = cp_monscb_con_arr[x].split(",")[0]
                                            mon_con_name = envmonname+"_"+con_name
                                            
                                            if not mon_env_hir and not scb_env_hir: 
                                                env_mon_scb_stg = env_mon_scb_stg\
                                                +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                +('µ   if (%s.%s_is_active[j] && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                +('µ    %s_mon[i].%s_%s_analysis_port.connect(%s_scb[j].%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                +('µ   end\n')\
                                                +('µ  end\n')\
                                                +('µ end\n\n')
                                            elif not mon_env_hir and scb_env_hir: 
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(scb_env_ifdef))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                    +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ   if (%s.%s_is_active[j] && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ    %s_mon[i].%s_%s_analysis_port.connect(%s.%s_scb[j].%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ   end\n')\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n\n'%(scb_env_endif))
                                                else:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(scb_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                    +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ   if (%s.%s_is_active[j] && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ    %s_mon[i].%s_%s_analysis_port.connect(%s.%s_scb[j].%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ   end\n')\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s\n\n'%(scb_env_endif))
                                            elif mon_env_hir and not scb_env_hir: 
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(mon_env_ifdef))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                    +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ   if (%s.%s_is_active[j] && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ    %s.%s_mon[i].%s_%s_analysis_port.connect(%s_scb[j].%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ   end\n')\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n\n'%(mon_env_endif))
                                                else:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s\n'%(mon_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                    +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ   if (%s.%s_is_active[j] && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ    %s.%s_mon[i].%s_%s_analysis_port.connect(%s_scb[j].%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ   end\n')\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s\n\n'%(mon_env_endif))
                                            elif mon_env_hir and scb_env_hir: 
                                                if not for_loop_begin:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                    +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ   if (%s.%s_is_active[j] && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ    %s.%s_mon[i].%s_%s_analysis_port.connect(%s.%s_scb[j].%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ   end\n')\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                                else:
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                    +('µ%s\n'%(for_loop_begin))\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                    +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ   if (%s.%s_is_active[j] && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ    %s.%s_mon[i].%s_%s_analysis_port.connect(%s.%s_scb[j].%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                    +('µ   end\n')\
                                                    +('µ  end\n')\
                                                    +('µ end\n')\
                                                    +('µ%s\n'%(for_loop_end))\
                                                    +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                        log.debug("mc_create_phase : env_mon_scb_stg %s!\n"%env_mon_scb_stg)

                            pos = env_stg.find(' // Connect Analysis Port\n')
                            apos = pos + len(' // Connect Analysis Port\n') + len("µ // -------------\n")
                            env_stg = env_stg[:apos]+env_mon_scb_stg+env_stg[apos:]

                        # Cleaning local vars
                        env_mon_scb_stg = ''
                        #----------------------------------------------------------------------
                        
                        
                        #----------------------------------------------------------------------
                        # Loading up the Env array content into file 
                        #----------------------------------------------------------------------
                        log.debug("mc_create_phase: Value of env_stg %s"%(env_stg))
                        mc_env_input_file = open("%s/%s_environment.sv"%(envpath, envname), "w")
                        mc_env_array = env_stg.split('µ')
                        for lines in mc_env_array:
                            mc_env_input_file.write(lines)
                        mc_env_input_file.close()
                        #----------------------------------------------------------------------
                #----------------------------------------------------------------------
            
                
                #----------------------------------------------------------------------
                # Edit the Agent Related Files 
                #----------------------------------------------------------------------
                # Top Agents directory
                envagttopdirpath = envdirpath+'/'+'agents'

                if mc_env_cfg_pool[a][2] != ['']:
                    # Opening the agent config file and edit
                    envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
        
                    for e in range (int(envagtname_arr[0])):
                        #envagtname = envname+"_"+envagtname_arr[e+1]
                        envagtname = envagtname_arr[e+1]
                            
                        # Original Name
                        agtname_org = envagtname_arr[e+1]
                        log.debug("mc_edit_phase : agtname_org %s!\n"%(agtname_org))
                    
                        # Directory Path For Environment Monitors
                        envagtdirpath = envagttopdirpath+'/'+envagtname+'_agent'
                        envagtseqdirpath = envagtdirpath+'/'+'sequences'
                        
                        log.debug("mc_edit_phase : envagtdirpath %s envagtseqdirpath %s!\n"%(envagtdirpath, envagtseqdirpath))
                       
                        #----------------------------------------------------------------------
                        # Opening the Agent config file and edit
                        #----------------------------------------------------------------------
                        mc_agt_cfg_array = []
                        
                        if not os.path.isfile('%s/%s_agent_config.sv'%(envagtdirpath, envagtname)):
                            log.error("%s/%s_agent_config.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envagtdirpath, envagtname))
                        else:
                            log.info("%s/%s_agent_config.sv file does exists! Progressing Further.\n"%(envagtdirpath, envagtname))
                            mc_agt_cfg_input_file = open("%s/%s_agent_config.sv"%(envagtdirpath, envagtname),"r+")

                            agt_cfg_stg = '' 
                            agt_int_stg = ''

                            for lines in mc_agt_cfg_input_file:
                                agt_cfg_stg = agt_cfg_stg+lines+'µ' 
                            log.debug("mc_edit_phase: Value of agt_cfg_stg %s"%(agt_cfg_stg))

                            
                            #----------------------------------------------------------------------
                            # Code for Agent Interface Instantiation inside agt_cfg File
                            #----------------------------------------------------------------------
                            if mc_env_cfg_pool[a][2][e+1][3] != '':
                                envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                for e1 in range (int(envagtdrvname_arr[0])):
                                    if len(envagtdrvname_arr) == 1:
                                        envagtdrvname = envagtname 
                                    else:
                                        envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                                    agt_int_stg = agt_int_stg+("µ virtual %s_interface %s_vif;\n"%(envagtdrvname, envagtdrvname))
                                    
                                pos = agt_cfg_stg.find(' // Agent Interface Instantiation\n')
                                apos = pos + len(' // Agent Interface Instantiation\n')+len('µ //------------------------------------------\n')
                                agt_cfg_stg = agt_cfg_stg[:apos]+agt_int_stg+agt_cfg_stg[apos:]

                            # Cleaning local vars
                            agt_int_stg = ''
                            #----------------------------------------------------------------------
      
                
                            #----------------------------------------------------------------------
                            # Code for Agent Knobs inside agt_cfg File
                            #----------------------------------------------------------------------
                            if mc_env_cfg_pool[a][2][e+1][3] != '':
                                envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                for e1 in range (int(envagtdrvname_arr[0])):
                                    if len(envagtdrvname_arr) == 1:
                                        envagtdrvname = envagtname 
                                        # agt_int_stg = agt_int_stg+("µ rand uvm_active_passive_enum %s_is_active[];\n"%(envagtdrvname))
                                    else:
                                        envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                                    
                                    agt_int_stg = agt_int_stg+("µ rand uvm_active_passive_enum %s_is_active = UVM_ACTIVE;\n"%(envagtdrvname))
                                    
                                # pos = agt_cfg_stg.find(' // Agent Driver Knobs\n')
                                # apos = pos + len(' // Agent Driver Knobs\n')+len('µ //------------------------------------------\n')
                                # agt_cfg_stg = agt_cfg_stg[:apos]+agt_int_stg+agt_cfg_stg[apos:]

                                pos = agt_cfg_stg[agt_cfg_stg.find('// Agent Driver Knobs'):agt_cfg_stg.find('// Constraints')].find("`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                if pos == -1:
                                    pos = agt_cfg_stg.find(' // Agent Driver Knobs\n')
                                    apos = pos + len(' // Agent Driver Knobs\n')+len('µ //------------------------------------------\n')
                                    agt_cfg_stg = agt_cfg_stg[:apos]+("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+agt_int_stg+("µ`endif // ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+agt_cfg_stg[apos:]
                                else:
                                    pos = agt_cfg_stg.find(' // Agent Driver Knobs\n')
                                    apos = pos + len(' // Agent Driver Knobs\n') + len('µ //------------------------------------------\n') + len("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                    agt_cfg_stg = agt_cfg_stg[:apos]+agt_int_stg+agt_cfg_stg[apos:]

                            # Cleaning local vars
                            agt_int_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            # Code for Agent Knobs inside agt_cfg File
                            #----------------------------------------------------------------------
                            if mc_env_cfg_pool[a][2][e+1][4] != '':
                                envagtmonname_arr = str(mc_env_cfg_pool[a][2][e+1][4]).split(",")
                                log.debug("mc_edit_phase : envname %s  envagtmonname_arr %s envagtdirpath %s!\n"%(envname, envagtmonname_arr, envagtdirpath))
                                for e1 in range (int(envagtmonname_arr[0])):
                                    if len(envagtmonname_arr) == 1:
                                        envagtmonname = envagtname 
                                        # agt_int_stg = agt_int_stg+("µ rand uvm_active_passive_enum %s_is_active[];\n"%(envagtmonname))
                                    else:
                                        envagtmonname = envagtname+"_"+envagtmonname_arr[e1+1]
                                    
                                    agt_int_stg = agt_int_stg+("µ rand uvm_active_passive_enum %s_is_active = UVM_ACTIVE;\n"%(envagtmonname))
                                    
                                pos = agt_cfg_stg.find(' // Agent Monitor Knobs\n')
                                apos = pos + len(' // Agent Monitor Knobs\n')+len('µ //------------------------------------------\n')
                                agt_cfg_stg = agt_cfg_stg[:apos]+agt_int_stg+agt_cfg_stg[apos:]

                            # Cleaning local vars
                            agt_int_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            # Loading up the Agnet array content into file 
                            #----------------------------------------------------------------------
                            log.debug("mc_edit_phase: Value of agt_cfg_stg %s"%(agt_cfg_stg))
                            mc_agt_cfg_input_file = open("%s/%s_agent_config.sv"%(envagtdirpath, envagtname), "w")
                            mc_agt_cfg_array = agt_cfg_stg.split('µ')
                            for lines in mc_agt_cfg_array:
                                mc_agt_cfg_input_file.write(lines)
                            mc_agt_cfg_input_file.close()
                            #----------------------------------------------------------------------
                
               
                        #----------------------------------------------------------------------
                        # Opening the Agent File and Edit
                        #----------------------------------------------------------------------
                        mc_agt_array = []
                            
                        if not os.path.isfile('%s/%s_agent.sv'%(envagtdirpath, envagtname)):
                            log.error("%s/%s_agent.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envagtdirpath, envagtname))
                        else:
                            log.info("%s/%s_agent.sv file does exists! Progressing Further.\n"%(envagtdirpath, envagtname))
                            mc_agt_input_file = open("%s/%s_agent.sv"%(envagtdirpath, envagtname),"r+")

                            agt_stg = '' 
                            agt_int_stg = ''
                            agt_loc_stg = ''

                            for lines in mc_agt_input_file:
                                agt_stg = agt_stg+lines+'µ' 
                            log.debug("mc_edit_phase: Value of agt_stg %s"%(agt_stg))
                                
                            
                            #----------------------------------------------------------------------
                            # Code for Instantiation Local Variables 
                            #----------------------------------------------------------------------
                            pos = agt_stg.find(' // Data Members\n')
                            apos = pos + len(' // Data Members\n') + len('µ //------------------------------------------\n')
                            agt_loc_stg = agt_loc_stg+'µ int unsigned %s_agent_id;\n'%(envagtname)
                            agt_stg = agt_stg[:apos]+agt_loc_stg+agt_stg[apos:]
                            
                            # Cleaning local vars
                            agt_loc_stg = ''
                            #----------------------------------------------------------------------

                            
                            #----------------------------------------------------------------------
                            # Code for Agent Instantiation
                            #----------------------------------------------------------------------
                            pos = agt_stg.find(' // Agent Configuration Instantiation\n')
                            apos = pos + len(' // Agent Configuration Instantiation\n') + len('µ //------------------------------------------\n')
                            agt_loc_stg = agt_loc_stg+'µ %s_agent_config %s_agent_cfg;\n'%(envagtname, envagtname)
                            agt_stg = agt_stg[:apos]+agt_loc_stg+agt_stg[apos:]
                            
                            # Cleaning local vars
                            agt_loc_stg = ''
                            #----------------------------------------------------------------------

                            
                            #----------------------------------------------------------------------
                            # Code for Agent Codes - Component Instantiation 
                            #----------------------------------------------------------------------
                            if mc_env_cfg_pool[a][2][e+1][3] != '':
                                envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                for e1 in range (int(envagtdrvname_arr[0])):
                                    if len(envagtdrvname_arr) == 1:
                                        envagtdrvname = envagtname 
                                    else:
                                        envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                                    
                                    agt_int_stg = agt_int_stg+("µ %s_sequencer  %s_sqr;\n"%(envagtdrvname, envagtdrvname))
                                    agt_int_stg = agt_int_stg+("µ %s_driver  %s_drv;\n"%(envagtdrvname, envagtdrvname))
                                    
                                # pos = agt_stg.find(' // Agent Driver-Sequencer Instantiation\n')
                                # apos = pos + len(' // Agent Driver-Sequencer Instantiation\n')+len('µ //------------------------------------------\n')
                                # agt_stg = agt_stg[:apos]+agt_int_stg+agt_stg[apos:]

                                pos = agt_stg[agt_stg.find('// Agent Driver-Sequencer Instantiation'):agt_stg.find('// Agent Monitor Instantiation')].find("`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                if pos == -1:
                                    pos = agt_stg.find(' // Agent Driver-Sequencer Instantiation\n')
                                    apos = pos + len(' // Agent Driver-Sequencer Instantiation\n')+len('µ //------------------------------------------\n')
                                    agt_stg = agt_stg[:apos]+("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+agt_int_stg+("µ`endif // ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+agt_stg[apos:]
                                else:
                                    pos = agt_stg.find(' // Agent Driver-Sequencer Instantiation\n')
                                    apos = pos + len(' // Agent Driver-Sequencer Instantiation\n') + len('µ //------------------------------------------\n') + len("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                    agt_stg = agt_stg[:apos]+agt_int_stg+agt_stg[apos:]

                            # Cleaning local vars
                            agt_int_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            # Code for Agent Codes - Component Instantiation 
                            #----------------------------------------------------------------------
                            if mc_env_cfg_pool[a][2][e+1][4] != '':
                                envagtmonname_arr = str(mc_env_cfg_pool[a][2][e+1][4]).split(",")
                                log.debug("mc_edit_phase : envname %s  envagtmonname_arr %s envagtdirpath %s!\n"%(envname, envagtmonname_arr, envagtdirpath))
                                for e1 in range (int(envagtmonname_arr[0])):
                                    if len(envagtmonname_arr) == 1:
                                        envagtmonname = envagtname 
                                    else:
                                        envagtmonname = envagtname+"_"+envagtmonname_arr[e1+1]
                                    
                                    agt_int_stg = agt_int_stg+("µ %s_monitor  %s_mon;\n"%(envagtmonname, envagtmonname))
                                    
                                pos = agt_stg.find(' // Agent Monitor Instantiation\n')
                                apos = pos + len(' // Agent Monitor Instantiation\n')+len('µ //------------------------------------------\n')
                                agt_stg = agt_stg[:apos]+agt_int_stg+agt_stg[apos:]

                            # Cleaning local vars
                            agt_int_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            # Code for Registration The Variables In Factory 
                            #----------------------------------------------------------------------
                            pos = agt_stg.find(' // Add field configurations\n')
                            apos = pos + len(' // Add field configurations\n') + len('µ  // -----------------\n')
                            agt_loc_stg = agt_loc_stg+("µ `uvm_field_int(%s_agent_id, UVM_ALL_ON)\n"%(envagtname))
                            agt_stg = agt_stg[:apos]+agt_loc_stg+agt_stg[apos:]
                            
                            # Cleaning local vars
                            agt_loc_stg = ''
                            #----------------------------------------------------------------------
            

                            #----------------------------------------------------------------------
                            # Code for Getting Agent Config Instantiation
                            #----------------------------------------------------------------------
                            agt_loc_stg = agt_loc_stg\
                            +('µ if (!uvm_config_db#(%s_agent_config)::get(this, "*", "%s_agent_config", %s_agent_cfg))\n'%(envagtname, envagtname, envagtname))\
                            +('µ begin\n')\
                            +('µ  `uvm_error(get_type_name(), "%s_agent_config object is not found in config_db!");\n'%(envagtname))\
                            +('µ end\n')\
                            +('µ else\n')\
                            +('µ begin\n')\
                            +('µ  %s_agent_cfg.print();\n'%(envagtname))\
                            +('µ end\n')\
                                
                            pos = agt_stg.find(' // Get Agent Configuration\n')
                            apos = pos + len(' // Get Agent Configuration\n')
                            agt_stg = agt_stg[:apos]+agt_loc_stg+agt_stg[apos:]
 
                            # Cleaning local vars
                            agt_loc_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            # Code for Agent Codes - Component Instantiation 
                            #----------------------------------------------------------------------
                            if mc_env_cfg_pool[a][2][e+1][4] != '':
                                envagtmonname_arr = str(mc_env_cfg_pool[a][2][e+1][4]).split(",")
                                log.debug("mc_edit_phase : envname %s  envagtmonname_arr %s envagtdirpath %s!\n"%(envname, envagtmonname_arr, envagtdirpath))
                                for e1 in range (int(envagtmonname_arr[0])):
                                    if len(envagtmonname_arr) == 1:
                                        envagtmonname = envagtname 
                                    else:
                                        envagtmonname = envagtname+"_"+envagtmonname_arr[e1+1]
                                   
                                    agt_loc_stg = agt_loc_stg\
                                    +('µ if (%s_agent_cfg.%s_is_active) %s_mon = %s_monitor::type_id::create("%s_mon",this);\n'%(envagtname, envagtmonname, envagtmonname, envagtmonname, envagtmonname))
                                    
                                pos = agt_stg.find(' // Construct Agent Monitors\n')
                                apos = pos + len(' // Construct Agent Monitors\n')
                                agt_stg = agt_stg[:apos]+agt_loc_stg+agt_stg[apos:]

                            # Cleaning local vars
                            agt_loc_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            # Code for Agent Codes - Driver Component Creation 
                            #----------------------------------------------------------------------
                            if mc_env_cfg_pool[a][2][e+1][3] != '':
                                envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                for e1 in range (int(envagtdrvname_arr[0])):
                                    if len(envagtdrvname_arr) == 1:
                                        envagtdrvname = envagtname 
                                    else:
                                        envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                                    
                                    agt_loc_stg = agt_loc_stg\
                                    +('µ if (%s_agent_cfg.%s_is_active) begin\n'%(envagtname, envagtdrvname))\
                                    +('µ  %s_drv = %s_driver::type_id::create("%s_drv",this);\n'%(envagtdrvname, envagtdrvname, envagtdrvname))\
                                    +('µ  %s_sqr = %s_sequencer::type_id::create("%s_sqr",this);\n'%(envagtdrvname, envagtdrvname, envagtdrvname))\
                                    +('µ end\n')

                                pos = agt_stg[agt_stg.find('// Construct Agent Driver-Sequencers'):agt_stg.find('// Configure Children')].find("`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                if pos == -1:
                                    pos = agt_stg.find(' // Construct Agent Driver-Sequencers\n')
                                    apos = pos + len(' // Construct Agent Driver-Sequencers\n')
                                    agt_stg = agt_stg[:apos]+("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+agt_loc_stg+("µ`endif // ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+agt_stg[apos:]
                                else:
                                    pos = agt_stg.find(' // Construct Agent Driver-Sequencers\n')
                                    apos = pos + len(' // Construct Agent Driver-Sequencers\n') + len("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                    agt_stg = agt_stg[:apos]+agt_loc_stg+agt_stg[apos:]

                            # Cleaning local vars
                            agt_loc_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            # Code for Agent Codes - Driver Component Connection 
                            #----------------------------------------------------------------------
                            if mc_env_cfg_pool[a][2][e+1][3] != '':
                                envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                for e1 in range (int(envagtdrvname_arr[0])):
                                    if len(envagtdrvname_arr) == 1:
                                        envagtdrvname = envagtname 
                                    else:
                                        envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                                    
                                    agt_loc_stg = agt_loc_stg\
                                    +('µ if (%s_agent_cfg.%s_is_active) begin\n'%(envagtname, envagtdrvname))\
                                    +('µ  %s_drv.seq_item_port.connect(%s_sqr.seq_item_export);\n'%(envagtdrvname, envagtdrvname))\
                                    +('µ end\n')

                                pos = agt_stg[agt_stg.find('// Connect Agent Driver-Sequencers'):agt_stg.find('//endfunction: connect_phase')].find("`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                if pos == -1:
                                    pos = agt_stg.find(' // Connect Agent Driver-Sequencers\n')
                                    apos = pos + len(' // Connect Agent Driver-Sequencers\n')
                                    agt_stg = agt_stg[:apos]+("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+agt_loc_stg+("µ`endif // ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+agt_stg[apos:]
                                else:
                                    pos = agt_stg.find(' // Connect Agent Driver-Sequencers\n')
                                    apos = pos + len(' // Connect Agent Driver-Sequencers\n') + len("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                    agt_stg = agt_stg[:apos]+agt_loc_stg+agt_stg[apos:]

                            # Cleaning local vars
                            agt_loc_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            # Loading up the Agnet array content into file 
                            #----------------------------------------------------------------------
                            log.debug("mc_edit_phase: Value of agt_stg %s"%(agt_stg))
                            mc_agt_input_file = open("%s/%s_agent.sv"%(envagtdirpath, envagtname), "w")
                            mc_agt_array = agt_stg.split('µ')
                            for lines in mc_agt_array:
                                mc_agt_input_file.write(lines)
                            mc_agt_input_file.close()
                            #----------------------------------------------------------------------
                
              
                        #----------------------------------------------------------------------
                        # Opening the Driver File and Edit
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2][e+1][3] != '':
                            envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                            log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                            for e1 in range (int(envagtdrvname_arr[0])):
                                if len(envagtdrvname_arr) == 1:
                                    envagtdrvname = envagtname 
                                else:
                                    envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]

                                mc_drv_array = []
                                    
                                if not os.path.isfile('%s/%s_driver.sv'%(envagtdirpath, envagtdrvname)):
                                    log.error("%s/%s_driver.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envagtdirpath, envagtdrvname))
                                else:
                                    log.info("%s/%s_driver.sv file does exists! Progressing Further.\n"%(envagtdirpath, envagtdrvname))
                                    mc_drv_input_file = open("%s/%s_driver.sv"%(envagtdirpath, envagtdrvname),"r+")

                                    drv_stg = '' 
                                    drv_loc_stg = ''

                                    for lines in mc_drv_input_file:
                                        drv_stg = drv_stg+lines+'µ' 
                                    log.debug("mc_edit_phase: Value of drv_stg %s"%(drv_stg))

                                    
                                    #----------------------------------------------------------------------
                                    # Code for Instantiation Local Variables 
                                    #----------------------------------------------------------------------
                                    pos = drv_stg.find(' // Data Members\n')
                                    apos = pos + len(' // Data Members\n') + len('µ //------------------------------------------\n')
                                    drv_loc_stg = drv_loc_stg+'µ int unsigned %s_agent_id;\n'%(envagtname)
                                    drv_stg = drv_stg[:apos]+drv_loc_stg+drv_stg[apos:]
                                    
                                    # Cleaning local vars
                                    drv_loc_stg = ''
                                    #----------------------------------------------------------------------


                                    #----------------------------------------------------------------------
                                    # Code for Driver Interface Instantiation inside agt_cfg File
                                    #----------------------------------------------------------------------
                                    drv_loc_stg = drv_loc_stg+("µ virtual %s_interface %s_vif;\n"%(envagtdrvname, envagtdrvname))
                                            
                                    pos = drv_stg.find(' // Interface Instantiation\n')
                                    apos = pos + len(' // Interface Instantiation\n')+len('µ //------------------------------------------\n')
                                    drv_stg = drv_stg[:apos]+drv_loc_stg+drv_stg[apos:]

                                    # Cleaning local vars
                                    drv_loc_stg = ''
                                    #----------------------------------------------------------------------

                                        
                                    #----------------------------------------------------------------------
                                    # Code for Agent Configuration Instantiation
                                    #----------------------------------------------------------------------
                                    pos = drv_stg.find(' // Agent Configuration Instantiation\n')
                                    apos = pos + len(' // Agent Configuration Instantiation\n') + len('µ //------------------------------------------\n')
                                    drv_loc_stg = drv_loc_stg+'µ %s_agent_config %s_agent_cfg;\n'%(envagtname, envagtname)
                                    drv_stg = drv_stg[:apos]+drv_loc_stg+drv_stg[apos:]
                                    
                                    # Cleaning local vars
                                    drv_loc_stg = ''
                                    #----------------------------------------------------------------------

                                    
                                    #----------------------------------------------------------------------
                                    # Code for Registration The Variables In Factory 
                                    #----------------------------------------------------------------------
                                    pos = drv_stg.find(' // Add field configurations\n')
                                    apos = pos + len(' // Add field configurations\n') + len('µ  // -----------------\n')
                                    drv_loc_stg = drv_loc_stg+("µ `uvm_field_int(%s_agent_id, UVM_ALL_ON)\n"%(envagtname))
                                    drv_stg = drv_stg[:apos]+drv_loc_stg+drv_stg[apos:]
                                    
                                    # Cleaning local vars
                                    drv_loc_stg = ''
                                    #----------------------------------------------------------------------

                                    
                                    #----------------------------------------------------------------------
                                    # Code for Getting Agent Config Instantiation
                                    #----------------------------------------------------------------------
                                    drv_loc_stg = drv_loc_stg\
                                    +('µ if (!uvm_config_db#(%s_agent_config)::get(this, "*", "%s_agent_config", %s_agent_cfg))\n'%(envagtname, envagtname, envagtname))\
                                    +('µ begin\n')\
                                    +('µ  `uvm_error(get_type_name(), "%s_agent_config object is not found in config_db!");\n'%(envagtname))\
                                    +('µ end\n')\
                                    +('µ else\n')\
                                    +('µ begin\n')\
                                    +('µ  %s_agent_cfg.print();\n'%(envagtname))\
                                    +('µ end\n')\
                                        
                                    pos = drv_stg.find(' // Get Agent Configuration\n')
                                    apos = pos + len(' // Get Agent Configuration\n')
                                    drv_stg = drv_stg[:apos]+drv_loc_stg+drv_stg[apos:]
 
                                    # Cleaning local vars
                                    drv_loc_stg = ''
                                    #----------------------------------------------------------------------


                                    #----------------------------------------------------------------------
                                    # Code for Making the vif assignment from config to local interface 
                                    #----------------------------------------------------------------------
                                    drv_loc_stg = drv_loc_stg+("µ %s_vif = %s_agent_cfg.%s_vif;\n"%(envagtdrvname, envagtname, envagtdrvname))
                                            
                                    pos = drv_stg.find(' // Configure children\n')
                                    apos = pos + len(' // Configure children\n')+len('µ // ------------------\n')
                                    drv_stg = drv_stg[:apos]+drv_loc_stg+drv_stg[apos:]

                                    # Cleaning local vars
                                    drv_loc_stg = ''
                                    #----------------------------------------------------------------------


                                    #----------------------------------------------------------------------
                                    # Loading up the Driver array content into file 
                                    #----------------------------------------------------------------------
                                    log.debug("mc_edit_phase: Value of drv_stg %s"%(drv_stg))
                                    mc_drv_input_file = open("%s/%s_driver.sv"%(envagtdirpath, envagtdrvname), "w")
                                    mc_drv_array = drv_stg.split('µ')
                                    for lines in mc_drv_array:
                                        mc_drv_input_file.write(lines)
                                    mc_drv_input_file.close()
                                    #----------------------------------------------------------------------
                                
                                
                                #----------------------------------------------------------------------
                                # Loading up the Driver Interface Details : Mainly for the user defined interface
                                #----------------------------------------------------------------------
                                log.debug(mc_env_cfg_pool[a][2][e+1][5][e1][2])
                                if int(mc_env_cfg_pool[a][2][e+1][5][e1][2]) == 3:
                                    log.debug("mc_edit_phase: drv intf: envagtdrvname %s, envagtdirpath %s, cfg %s"%(envagtdrvname, envagtdirpath, mc_env_cfg_pool[a][2][e+1][5][e1]))
                                    self.mc_gen_intf(envagtdrvname, envagtdirpath, mc_env_cfg_pool[a][2][e+1][5][e1]) 
                                #----------------------------------------------------------------------
                                
                                
                                #----------------------------------------------------------------------
                                # Driver Interface Wrapper Editing : 12122020SAT
                                #----------------------------------------------------------------------
                                log.debug("mc_edit_phase: drv intf wrapper: envagtdrvname %s, envagtdirpath %s, cfg %s"%(envagtdrvname, envagtdirpath, mc_env_cfg_pool[a][2][e+1][5][e1]))
                                if mc_env_cfg_pool[a][2][e+1][2] != '':
                                    self.mc_gen_intf_wrapper(envagtdrvname, envagtdirpath, int(mc_env_cfg_pool[a][2][e+1][2])) 
                                else:    
                                    self.mc_gen_intf_wrapper(envagtdrvname, envagtdirpath, 0) 
                                #----------------------------------------------------------------------
                                
                                
                                #----------------------------------------------------------------------
                                # Driver Interface Macros Addition : 12122020SAT
                                #----------------------------------------------------------------------
                                log.debug("mc_edit_phase: env macros: envagtdrvname %s, envname %s, envdirpath %s, cfg %s"%(envagtdrvname, envname, envdirpath, mc_env_cfg_pool[a][2][e+1][5][e1]))
                                if mc_env_cfg_pool[a][2][e+1][2] != '':
                                    self.mc_gen_env_macros(envagtdrvname, envname, envpath, int(mc_env_cfg_pool[a][2][e+1][2])) 
                                else:
                                    self.mc_gen_env_macros(envagtdrvname, envname, envpath, 0) 
                                #----------------------------------------------------------------------
                        
                        
                        #----------------------------------------------------------------------
                        # Opening the Monitor File and Edit
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2][e+1][4] != '':
                            envagtmonname_arr = str(mc_env_cfg_pool[a][2][e+1][4]).split(",")
                            log.debug("mc_edit_phase : envname %s  envagtmonname_arr %s envagtdirpath %s!\n"%(envname, envagtmonname_arr, envagtdirpath))
                            for e2 in range (int(envagtmonname_arr[0])):
                                if len(envagtmonname_arr) == 1:
                                    envagtmonname = envagtname 
                                else:
                                    envagtmonname = envagtname+"_"+envagtmonname_arr[e2+1]

                                mc_mon_array = []
                                    
                                if not os.path.isfile('%s/%s_monitor.sv'%(envagtdirpath, envagtmonname)):
                                    log.error("%s/%s_monitor.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envagtdirpath, envagtmonname))
                                else:
                                    log.info("%s/%s_monitor.sv file does exists! Progressing Further.\n"%(envagtdirpath, envagtmonname))
                                    mc_mon_input_file = open("%s/%s_monitor.sv"%(envagtdirpath, envagtmonname),"r+")

                                    mon_stg = '' 
                                    mon_loc_stg = ''
                                    mon_por_stg = ''

                                    for lines in mc_mon_input_file:
                                        mon_stg = mon_stg+lines+'µ' 
                                    log.debug("mc_edit_phase: Value of mon_stg %s"%(mon_stg))

                                    
                                    #----------------------------------------------------------------------
                                    # Code for Instantiation Local Variables 
                                    #----------------------------------------------------------------------
                                    pos = mon_stg.find(' // Data Members\n')
                                    apos = pos + len(' // Data Members\n') + len('µ //------------------------------------------\n')
                                    mon_loc_stg = mon_loc_stg+'µ int unsigned %s_agent_id;\n'%(envagtname)
                                    mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
                                    
                                    # Cleaning local vars
                                    mon_loc_stg = ''
                                    #----------------------------------------------------------------------


                                    #----------------------------------------------------------------------
                                    # Code for Interface Instantiation inside Monitor File 
                                    #----------------------------------------------------------------------
                                    if mc_env_cfg_pool[a][2][e+1][3] != '':
                                        envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                        log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                        for e3 in range (int(envagtdrvname_arr[0])):
                                            if len(envagtdrvname_arr) == 1:
                                                envagtdrvname = envagtname 
                                            else:
                                                envagtdrvname = envagtname+"_"+envagtdrvname_arr[e3+1]

                                            mon_loc_stg = mon_loc_stg+("µ virtual %s_interface %s_vif;\n"%(envagtdrvname, envagtdrvname))
                                            
                                    pos = mon_stg.find(' // Interface Instantiation\n')
                                    apos = pos + len(' // Interface Instantiation\n')+len('µ //------------------------------------------\n')
                                    mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]

                                    # Cleaning local vars
                                    mon_loc_stg = ''
                                    #----------------------------------------------------------------------

                    
                                    #----------------------------------------------------------------------
                                    # Code for Agent Configuration Instantiation
                                    #----------------------------------------------------------------------
                                    pos = mon_stg.find(' // Agent Configuration Instantiation\n')
                                    apos = pos + len(' // Agent Configuration Instantiation\n') + len('µ //------------------------------------------\n')
                                    mon_loc_stg = mon_loc_stg+'µ %s_agent_config %s_agent_cfg;\n'%(envagtname, envagtname)
                                    mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
                                    
                                    # Cleaning local vars
                                    mon_loc_stg = ''
                                    #----------------------------------------------------------------------
   
                                    
                                    #----------------------------------------------------------------------
                                    # Code for Registration The Variables In Factory 
                                    #----------------------------------------------------------------------
                                    pos = mon_stg.find(' // Add field configurations\n')
                                    apos = pos + len(' // Add field configurations\n') + len('µ  // -----------------\n')
                                    mon_loc_stg = mon_loc_stg+("µ `uvm_field_int(%s_agent_id, UVM_ALL_ON)\n"%(envagtname))
                                    mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
                                    
                                    # Cleaning local vars
                                    mon_loc_stg = ''
                                    #----------------------------------------------------------------------

            
                                    #----------------------------------------------------------------------
                                    # Code for Getting Agent Config Instantiation
                                    #----------------------------------------------------------------------
                                    mon_loc_stg = mon_loc_stg\
                                    +('µ if (!uvm_config_db#(%s_agent_config)::get(this, "*", "%s_agent_config", %s_agent_cfg))\n'%(envagtname, envagtname, envagtname))\
                                    +('µ begin\n')\
                                    +('µ  `uvm_error(get_type_name(), "%s_agent_config object is not found in config_db!");\n'%(envagtname))\
                                    +('µ end\n')\
                                    +('µ else\n')\
                                    +('µ begin\n')\
                                    +('µ  %s_agent_cfg.print();\n'%(envagtname))\
                                    +('µ end\n')\
                                        
                                    pos = mon_stg.find(' // Get Agent Configuration\n')
                                    apos = pos + len(' // Get Agent Configuration\n')
                                    mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
 
                                    # Cleaning local vars
                                    mon_loc_stg = ''
                                    #----------------------------------------------------------------------

                                    
                                    #----------------------------------------------------------------------
                                    # Code for Making the vif assignment from config to local interface 
                                    #----------------------------------------------------------------------
                                    if mc_env_cfg_pool[a][2][e+1][3] != '':
                                        envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                        log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                        for e3 in range (int(envagtdrvname_arr[0])):
                                            if len(envagtdrvname_arr) == 1:
                                                envagtdrvname = envagtname 
                                            else:
                                                envagtdrvname = envagtname+"_"+envagtdrvname_arr[e3+1]

                                            mon_loc_stg = mon_loc_stg+("µ %s_vif = %s_agent_cfg.%s_vif;\n"%(envagtdrvname, envagtname, envagtdrvname))
                                            
                                    pos = mon_stg.find(' // Configure children\n')
                                    apos = pos + len(' // Configure children\n')+len('µ // ------------------\n')
                                    mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]

                                    # Cleaning local vars
                                    mon_loc_stg = ''
                                    #----------------------------------------------------------------------
                               
                                    
                                    #----------------------------------------------------------------------
                                    # Getting the original name
                                    #----------------------------------------------------------------------
                                    if len(envagtmonname_arr) == 1:
                                        agtmonname_org = agtname_org 
                                    else:
                                        agtmonname_org = envagtmonname_arr[e2+1]
                                    log.debug("mc_edit_phase : agtmonname_org %s!\n"%(agtmonname_org))
                                    #----------------------------------------------------------------------

                                    
                                    #----------------------------------------------------------------------
                                    # Code for Monitor Port Instantiation 
                                    #----------------------------------------------------------------------
                                    #mon_port_ele  = envagtmonname.replace("_",",")
                                    
                                    mon_port_ele  = envname_org+","+agtname_org+","+agtmonname_org 
                                    
                                    mon_port_idx  = self.find_index_sub_string(mon_port_ele, mc_global_env_mon_scb_con_arr)
                                    temp1 = []; mon_port_list = []
                                    log.debug("mc_edit_phase: mon_port_ele %s mon_port_idx %s mc_global_env_mon_scb_con_arr %s\n"%(mon_port_ele, mon_port_idx, mc_global_env_mon_scb_con_arr))
                                    
                                    for p in range (len(mon_port_idx)):
                                        temp = ((mc_global_env_mon_scb_con_arr[mon_port_idx[p]].split("-"))[2]).split("/")
                                        log.debug("mc_edit_phase: mon port process : temp %s\n"%(temp))
                                       
                                        temp1 = []
                                        for q in range (len(temp)):
                                            temp1.append(temp[q].split(",")[0])
                                        log.debug("mc_edit_phase: mon port process : temp %s temp1 %s\n"%(temp, temp1))
                                        
                                        for r in range (len(temp1)):
                                            if not self.find_index(temp1[r], mon_port_list):                                        
                                                mon_port_list.append(temp1[r])
                                        log.debug("mc_edit_phase: mon port process : temp %s temp1 %s mon_port_list %s\n"%(temp, temp1, mon_port_list))

                                    for s in range (len(mon_port_list)):
                                        mon_loc_stg = mon_loc_stg+("µ uvm_analysis_port #(%s_sequence_item_base) %s_%s_analysis_port;\n"%(envagtmonname, envagtmonname, mon_port_list[s]))
                                        mon_por_stg = mon_por_stg+('µ %s_%s_analysis_port = new("%s_%s_analysis_port", this);\n'%(envagtmonname, mon_port_list[s], envagtmonname, mon_port_list[s]))

                                    pos = mon_stg.find(' // Port Declaration\n')
                                    apos = pos + len(' // Port Declaration\n')+len('µ //--------------------------------------------\n')
                                    mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
                                    
                                    pos = mon_stg.find(' // Port Construction\n')
                                    apos = pos + len(' // Port Construction\n')+len('µ // -----------------\n')
                                    mon_stg = mon_stg[:apos]+mon_por_stg+mon_stg[apos:]
                                    
                                    # Cleaning local vars
                                    mon_loc_stg = ''
                                    mon_por_stg = ''
                                    #----------------------------------------------------------------------


                                    #----------------------------------------------------------------------
                                    # Loading up the Monitor array content into file 
                                    #----------------------------------------------------------------------
                                    log.debug("mc_edit_phase: Value of mon_stg %s"%(mon_stg))
                                    mc_mon_input_file = open("%s/%s_monitor.sv"%(envagtdirpath, envagtmonname), "w")
                                    mc_mon_array = mon_stg.split('µ')
                                    for lines in mc_mon_array:
                                        mc_mon_input_file.write(lines)
                                    mc_mon_input_file.close()
                                    #----------------------------------------------------------------------
                #----------------------------------------------------------------------


                #----------------------------------------------------------------------
                # Edit the Environment Monitor Files 
                #----------------------------------------------------------------------
                if mc_env_cfg_pool[a][3] != '':
                    envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                    
                    log.debug("mc_edit_phase : envname %s  envmonname_arr %s envmondirpath %s!\n"%(envname, envmonname_arr, envmondirpath))
                    for e in range (int(envmonname_arr[0])):
                        
                        if len(envmonname_arr[e+1].split(":"))>1:
                            #envmonname = envname+"_"+envmonname_arr[e+1].split(":")[0]
                            envmonname = envmonname_arr[e+1].split(":")[0]
                            #envmonname_org = envmonname_arr[e+1].split(":")[0]
                        else:
                            #envmonname = envname+"_"+envmonname_arr[e+1]
                            envmonname = envmonname_arr[e+1]
                            #envmonname_org = envmonname_arr[e+1]
                        
                        # if len(envmonname_arr) == 1:
                        #     envmonname = envname 
                        # else:
                        #     envmonname = envname+"_"+envmonname_arr[e+1]

                        mc_mon_array = []
                            
                        if not os.path.isfile('%s/%s_monitor.sv'%(envmondirpath, envmonname)):
                            log.error("%s/%s_monitor.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envmondirpath, envmonname))
                        else:
                            log.info("%s/%s_monitor.sv file does exists! Progressing Further.\n"%(envmondirpath, envmonname))
                            mc_mon_input_file = open("%s/%s_monitor.sv"%(envmondirpath, envmonname),"r+")

                            mon_stg = '' 
                            mon_loc_stg = ''
                            mon_por_stg = ''
                            mon_int_stg = ''

                            for lines in mc_mon_input_file:
                                mon_stg = mon_stg+lines+'µ' 
                            log.debug("mc_edit_phase: Value of mon_stg %s"%(mon_stg))

                            
                            #NOTVALIDFOR_ENVMON #----------------------------------------------------------------------
                            #NOTVALIDFOR_ENVMON # Code for Instantiation Local Variables 
                            #NOTVALIDFOR_ENVMON #----------------------------------------------------------------------
                            #NOTVALIDFOR_ENVMON pos = mon_stg.find(' // Data Members\n')
                            #NOTVALIDFOR_ENVMON apos = pos + len(' // Data Members\n') + len('µ //------------------------------------------\n')
                            #NOTVALIDFOR_ENVMON mon_loc_stg = mon_loc_stg+'µ int unsigned %s_agent_id;\n'%(envagtname)
                            #NOTVALIDFOR_ENVMON mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
                            #NOTVALIDFOR_ENVMON 
                            #NOTVALIDFOR_ENVMON # Cleaning local vars
                            #NOTVALIDFOR_ENVMON mon_loc_stg = ''
                            #NOTVALIDFOR_ENVMON #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            # Code for Interface Instantiation inside Monitor File 
                            #----------------------------------------------------------------------
                            if mc_env_cfg_pool[a][7] != []:
                                if mc_env_cfg_pool[a][7][0] != '':
                                    envintfname_arr = str(mc_env_cfg_pool[a][7][0]).split(",")
                                    log.debug("mc_edit_phase : envname %s  envintfname_arr %s envmondirpath %s!\n"%(envname, envintfname_arr, envmondirpath))
                                    for e1 in range (int(envintfname_arr[0])):
                                        if len(envintfname_arr) == 1 and int(envintfname_arr[0]==1):
                                            envintfname = envname 
                                        else:
                                            #envintfname = envname+"_"+envintfname_arr[e1+1]
                                            envintfname = envintfname_arr[e1+1]

                                        mon_loc_stg = mon_loc_stg+("µ virtual %s_interface %s_vif;\n"%(envintfname, envintfname))
                                        mon_int_stg = mon_int_stg+("µ %s_vif = %s_environment_cfg.%s_vif;\n"%(envintfname, envname, envintfname))
                                    
                            pos = mon_stg.find(' // Interface Instantiation\n')
                            apos = pos + len(' // Interface Instantiation\n')+len('µ //------------------------------------------\n')
                            mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
                            
                            pos = mon_stg.find(' // Configure children\n')
                            apos = pos + len(' // Configure children\n')+len('µ // ------------------\n')
                            mon_stg = mon_stg[:apos]+mon_int_stg+mon_stg[apos:]

                            # Cleaning local vars
                            mon_loc_stg = ''
                            mon_int_stg = ''
                            #----------------------------------------------------------------------

                
                            #----------------------------------------------------------------------
                            # Code for Agent Configuration Instantiation
                            #----------------------------------------------------------------------
                            pos = mon_stg.find(' // Environment Configuration Instantiation\n')
                            apos = pos + len(' // Environment Configuration Instantiation\n') + len('µ //------------------------------------------\n')
                            mon_loc_stg = mon_loc_stg+'µ %s_environment_config %s_environment_cfg;\n'%(envname, envname)
                            mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
                            
                            # Cleaning local vars
                            mon_loc_stg = ''
                            #----------------------------------------------------------------------
   
                            
                            #NOTVALIDFOR_ENVMON #----------------------------------------------------------------------
                            #NOTVALIDFOR_ENVMON # Code for Registration The Variables In Factory 
                            #NOTVALIDFOR_ENVMON #----------------------------------------------------------------------
                            #NOTVALIDFOR_ENVMON pos = mon_stg.find(' // Add field configurations\n')
                            #NOTVALIDFOR_ENVMON apos = pos + len(' // Add field configurations\n') + len('µ  // -----------------\n')
                            #NOTVALIDFOR_ENVMON mon_loc_stg = mon_loc_stg+("µ `uvm_field_int(%s_agent_id, UVM_ALL_ON)\n"%(envagtname))
                            #NOTVALIDFOR_ENVMON mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
                            #NOTVALIDFOR_ENVMON 
                            #NOTVALIDFOR_ENVMON # Cleaning local vars
                            #NOTVALIDFOR_ENVMON mon_loc_stg = ''
                            #NOTVALIDFOR_ENVMON #----------------------------------------------------------------------

            
                            #----------------------------------------------------------------------
                            # Code for Getting Environment Config Instantiation
                            #----------------------------------------------------------------------
                            mon_loc_stg = mon_loc_stg\
                            +('µ if (!uvm_config_db#(%s_environment_config)::get(this, "*", "%s_environment_config", %s_environment_cfg))\n'%(envname, envname, envname))\
                            +('µ begin\n')\
                            +('µ  `uvm_error(get_type_name(), "%s_environment_config object is not found in config_db!");\n'%(envname))\
                            +('µ end\n')\
                            +('µ else\n')\
                            +('µ begin\n')\
                            +('µ  %s_environment_cfg.print();\n'%(envname))\
                            +('µ end\n')\
                                
                            pos = mon_stg.find(' // Get Environment Configuration\n')
                            apos = pos + len(' // Get Environment Configuration\n')
                            mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
 
                            # Cleaning local vars
                            mon_loc_stg = ''
                            #----------------------------------------------------------------------

                            
                            # #----------------------------------------------------------------------
                            # # Code for Making the vif assignment from config to local interface 
                            # #----------------------------------------------------------------------
                            # if mc_env_cfg_pool[a][2][e+1][3] != '':
                            #     envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                            #     log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                            #     for e1 in range (int(envagtdrvname_arr[0])):
                            #         if len(envagtdrvname_arr) == 1:
                            #             envagtdrvname = envagtname 
                            #         else:
                            #             envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]

                            #         mon_loc_stg = mon_loc_stg+("µ %s_vif = %s_environment_cfg.%s_vif;\n"%(envagtdrvname, envagtname, envagtdrvname))
                            #         
                            # pos = mon_stg.find(' // Configure children\n')
                            # apos = pos + len(' // Configure children\n')+len('µ // ------------------\n')
                            # mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]

                            # # Cleaning local vars
                            # mon_loc_stg = ''
                            # #----------------------------------------------------------------------
                       

                            #----------------------------------------------------------------------
                            # Getting the original envmonname 
                            #----------------------------------------------------------------------
                            #envmonname_org = envmonname_arr[e+1]
                            envmonname_org = envmonname_arr[e+1].split(":")[0]
                            log.debug("mc_edit_phase : envmonname_org %s!\n"%(envmonname_org))
                            #----------------------------------------------------------------------

                            
                            #----------------------------------------------------------------------
                            # Code for Monitor Port Instantiation 
                            #----------------------------------------------------------------------
                            #mon_port_ele  = envmonname.replace("_",",")
                            
                            mon_port_ele  = envname_org+","+envmonname_org 
                            mon_port_idx  = self.find_index_sub_string(mon_port_ele, mc_global_env_mon_scb_con_arr)
                            temp1 = []; mon_port_list = []
                            log.debug("mc_edit_phase: mon_port_ele %s mon_port_idx %s mc_global_env_mon_scb_con_arr %s\n"%(mon_port_ele, mon_port_idx, mc_global_env_mon_scb_con_arr))
                            
                            for p in range (len(mon_port_idx)):
                                temp = ((mc_global_env_mon_scb_con_arr[mon_port_idx[p]].split("-"))[2]).split("/")
                                log.debug("mc_edit_phase: mon port process : temp %s\n"%(temp))
                               
                                temp1 = []
                                for q in range (len(temp)):
                                    temp1.append(temp[q].split(",")[0])
                                log.debug("mc_edit_phase: mon port process : temp %s temp1 %s\n"%(temp, temp1))
                                
                                for r in range (len(temp1)):
                                    if not self.find_index(temp1[r], mon_port_list):                                        
                                        mon_port_list.append(temp1[r])
                                log.debug("mc_edit_phase: mon port process : temp %s temp1 %s mon_port_list %s\n"%(temp, temp1, mon_port_list))

                            for s in range (len(mon_port_list)):
                                mon_loc_stg = mon_loc_stg+("µ uvm_analysis_port #(%s_sequence_item_base) %s_%s_analysis_port;\n"%(envmonname, envmonname, mon_port_list[s]))
                                mon_por_stg = mon_por_stg+('µ %s_%s_analysis_port = new("%s_%s_analysis_port", this);\n'%(envmonname, mon_port_list[s], envmonname, mon_port_list[s]))

                            pos = mon_stg.find(' // Port Declaration\n')
                            apos = pos + len(' // Port Declaration\n')+len('µ //--------------------------------------------\n')
                            mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
                            
                            pos = mon_stg.find(' // Port Construction\n')
                            apos = pos + len(' // Port Construction\n')+len('µ // -----------------\n')
                            mon_stg = mon_stg[:apos]+mon_por_stg+mon_stg[apos:]
                            
                            # Cleaning local vars
                            mon_loc_stg = ''
                            mon_por_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            # Loading up the Monitor array content into file 
                            #----------------------------------------------------------------------
                            log.debug("mc_edit_phase: Value of mon_stg %s"%(mon_stg))
                            mc_mon_input_file = open("%s/%s_monitor.sv"%(envmondirpath, envmonname), "w")
                            mc_mon_array = mon_stg.split('µ')
                            for lines in mc_mon_array:
                                mc_mon_input_file.write(lines)
                            mc_mon_input_file.close()
                            #----------------------------------------------------------------------
                #----------------------------------------------------------------------


                #----------------------------------------------------------------------
                # Edit the Environment Scoreboard Files 
                #----------------------------------------------------------------------
                if mc_env_cfg_pool[a][4] != '':
                    envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                    
                    log.debug("mc_edit_phase : envname %s  envscbname_arr %s envscbdirpath %s!\n"%(envname, envscbname_arr, envscbdirpath))
                    for e in range (int(envscbname_arr[0])):
                        
                        if len(envscbname_arr[e+1].split(":"))>1:
                            #envscbname = envname+"_"+envscbname_arr[e+1].split(":")[0]
                            envscbname = envscbname_arr[e+1].split(":")[0]
                            scbname = envscbname_arr[e+1].split(":")[0]
                        else:
                            #envscbname = envname+"_"+envscbname_arr[e+1]
                            envscbname = envscbname_arr[e+1]
                            scbname = envscbname_arr[e+1]

                        #if len(envscbname_arr) == 1:
                        #    envscbname = envname 
                        #else:
                        #    envscbname = envname+"_"+envscbname_arr[e+1]

                        mc_scb_array = []
                            
                        if not os.path.isfile('%s/%s_scoreboard.sv'%(envscbdirpath, envscbname)):
                            log.error("%s/%s_scoreboard.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envscbdirpath, envscbname))
                        else:
                            log.info("%s/%s_scoreboard.sv file does exists! Progressing Further.\n"%(envscbdirpath, envscbname))
                            mc_scb_input_file = open("%s/%s_scoreboard.sv"%(envscbdirpath, envscbname),"r+")

                            scb_stg = '' 
                            scb_loc_stg = ''
                            scb_pl1_stg = ''
                            scb_pl2_stg = ''
                            scb_pl3_stg = ''
                            scb_pl4_stg = ''
                            scb_pl5_stg = ''

                            for lines in mc_scb_input_file:
                                scb_stg = scb_stg+lines+'µ' 
                            log.debug("mc_edit_phase: Value of scb_stg %s"%(scb_stg))

                            
                            #----------------------------------------------------------------------
                            # Code for Environment Configuration Instantiation
                            #----------------------------------------------------------------------
                            pos = scb_stg.find(' // Environment Configuration Instantiation\n')
                            apos = pos + len(' // Environment Configuration Instantiation\n') + len('µ //------------------------------------------\n')
                            scb_loc_stg = scb_loc_stg+'µ %s_environment_config %s_environment_cfg;\n'%(envname, envname)
                            scb_stg = scb_stg[:apos]+scb_loc_stg+scb_stg[apos:]
                            
                            # Cleaning local vars
                            scb_loc_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            # Code for Getting Environment Config Instantiation
                            #----------------------------------------------------------------------
                            scb_loc_stg = scb_loc_stg\
                            +('µ if (!uvm_config_db#(%s_environment_config)::get(this, "*", "%s_environment_config", %s_environment_cfg))\n'%(envname, envname, envname))\
                            +('µ begin\n')\
                            +('µ  `uvm_error(get_type_name(), "%s_environment_config object is not found in config_db!");\n'%(envname))\
                            +('µ end\n')\
                            +('µ else\n')\
                            +('µ begin\n')\
                            +('µ  %s_environment_cfg.print();\n'%(envname))\
                            +('µ end\n')\
                                
                            pos = scb_stg.find(' // Get Environment Configuration\n')
                            apos = pos + len(' // Get Environment Configuration\n')
                            scb_stg = scb_stg[:apos]+scb_loc_stg+scb_stg[apos:]
 
                            # Cleaning local vars
                            scb_loc_stg = ''
                            #----------------------------------------------------------------------

                            
                            #----------------------------------------------------------------------
                            # Getting the Original Name
                            #----------------------------------------------------------------------
                            #envscbname_org = envscbname_arr[e+1]
                            envscbname_org = envscbname_arr[e+1].split(":")[0]
                            log.debug("mc_edit_phase: envscbname_org : envscbname_org %s\n"%(envscbname_org))
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            # Code for Scoreboard Port Instantiation 
                            #----------------------------------------------------------------------
                            #scb_port_ele  = envscbname.replace("_",",")
                            
                            scb_port_ele  = envname_org+","+envscbname_org 
                            
                            scb_port_idx  = self.find_index_sub_string(scb_port_ele, mc_global_env_mon_scb_con_arr)
                            temp1 = []; scb_port_list = []
                            log.debug("mc_edit_phase: scb_port_ele %s scb_port_idx %s mc_global_env_mon_scb_con_arr %s\n"%(scb_port_ele, scb_port_idx, mc_global_env_mon_scb_con_arr))
                            
                            for p in range (len(scb_port_idx)):
                                temp = ((mc_global_env_mon_scb_con_arr[scb_port_idx[p]].split("-"))[2]).split("/")
                                log.debug("mc_edit_phase: scb port process : temp %s\n"%(temp))
                               
                                monname = ((mc_global_env_mon_scb_con_arr[scb_port_idx[p]].split("-"))[0])
                                log.debug("mc_edit_phase: monname : monname %s\n"%(monname))
                                
                                for r in range (len(temp)):
                                    temp[r] = monname+"-"+temp[r]
                                    if not self.find_index(temp[r], scb_port_list):                                        
                                        scb_port_list.append(temp[r])
                                log.debug("mc_edit_phase: scb port process : temp %s scb_port_list %s\n"%(temp, scb_port_list))

                            for s in range (len(scb_port_list)):
                                scb_pl1_stg = ''
                                scb_pl2_stg = ''
                                scb_pl3_stg = ''
                                scb_pl4_stg = ''
                                scb_pl5_stg = ''
                                
                                mname_tmp = (scb_port_list[s].split("-")[0]).split(",")
                                log.debug("mc_edit_phase: mname_tmp %s\n"%(mname_tmp))
                                
                                # Removed the env from the env mon sequence item : 121620TUE
                                # if len(mname_tmp) == 4:
                                #     mname = mname_tmp[1].split(":")[0]+"_"+mname_tmp[2]+"_"+mname_tmp[3]
                                # elif len(mname_tmp) == 3:
                                #     mname = mname_tmp[1].split(":")[0]+"_"+mname_tmp[2]
                                
                                if len(mname_tmp) == 4:
                                    mname = mname_tmp[2]+"_"+mname_tmp[3]
                                elif len(mname_tmp) == 3:
                                    mname = mname_tmp[2]

                                pname_tmp = (scb_port_list[s].split("-")[1]).split(",")
                                log.debug("mc_edit_phase: scb_port_list %s, mname_tmp %s, pname_tmp %s\n"%(scb_port_list, mname_tmp, pname_tmp))
                                
                                if len(mname_tmp) == 4:
                                    pname = mname_tmp[-2]+"_"+mname_tmp[-1]+"_"+pname_tmp[0]
                                elif len(mname_tmp) == 3:
                                    pname = mname_tmp[-1]+"_"+pname_tmp[0]
                                
                                ptype = int(pname_tmp[1])
                                
                                log.debug("mc_edit_phase: mname_tmp %s mname %s pname_tmp %s pname %s pty %d\n"%(mname_tmp, mname, pname_tmp, pname, ptype))

                                if ptype == 1:
                                    scb_pl1_stg = scb_pl1_stg\
                                    +('µ uvm_analysis_export #(%s_sequence_item_base) %s_%s_analysis_export;\n'%(mname, envscbname, pname))\
                                    +('µ local uvm_tlm_analysis_fifo #(%s_sequence_item_base) %s_%s_analysis_fifo;\n\n'%(mname, envscbname, pname))
                                
                                    scb_pl2_stg = scb_pl2_stg\
                                    +('µ %s_%s_analysis_export = new("%s_%s_analysis_export", this);\n'%(envscbname, pname, envscbname, pname))\
                                    +('µ %s_%s_analysis_fifo = new("%s_%s_analysis_fifo", this);\n\n'%(envscbname, pname, envscbname, pname))
                       
                                    scb_pl3_stg = scb_pl3_stg\
                                    +('µ %s_%s_analysis_export.connect(%s_%s_analysis_fifo.analysis_export);\n'%(envscbname, pname, envscbname, pname))

                                    pos = scb_stg.find(' // Port Declaration\n')
                                    apos = pos + len(' // Port Declaration\n')+len('µ //--------------------------------------------\n')
                                    scb_stg = scb_stg[:apos]+scb_pl1_stg+scb_stg[apos:]
                                    
                                    pos = scb_stg.find(' super.new(name, parent);\n')
                                    apos = pos + len(' super.new(name, parent);\n') 
                                    scb_stg = scb_stg[:apos]+scb_pl2_stg+scb_stg[apos:]
                                        
                                    pos = scb_stg.find(' super.connect_phase(phase);\n')
                                    apos = pos + len(' super.connect_phase(phase);\n')
                                    scb_stg = scb_stg[:apos]+scb_pl3_stg+scb_stg[apos:]
                               
                                    log.debug("mc_edit_phase: scb_pl1_stg %s\n scb_pl2_stg %s\n scb_pl3_stg %s\n scb_pl4_stg %s\n scb_pl5_stg %s\n scb_stg %s\n"%(scb_pl1_stg, scb_pl2_stg, scb_pl3_stg, scb_pl4_stg, scb_pl5_stg, scb_stg))
                                elif ptype == 2:
                                    scb_pl1_stg = scb_pl1_stg\
                                    +('µ`uvm_analysis_imp_decl(_%s_%s_scoreboard)\n'%(scbname, pname))
                                    
                                    scb_pl2_stg = scb_pl2_stg\
                                    +('µ uvm_analysis_imp_%s_%s_scoreboard #(%s_sequence_item_base, %s_scoreboard) %s_%s_analysis_export;\n\n'%(scbname, pname, mname, envscbname, envscbname, pname))

                                    scb_pl3_stg = scb_pl3_stg\
                                    +('µ extern virtual function void write_%s_%s_scoreboard(%s_sequence_item_base %s_seq_item_base);\n'%(scbname, pname, mname, mname))
                                    
                                    scb_pl4_stg = scb_pl4_stg\
                                    +('µ %s_%s_analysis_export = new("%s_%s_analysis_export", this);\n\n'%(envscbname, pname, envscbname, pname))

                                    scb_pl5_stg = scb_pl5_stg\
                                    +('µ //---------------------------------------------------------------\n')\
                                    +('µ // Function: write_%s_%s_scoreboard\n'%(scbname, pname))\
                                    +('µ // \n')\
                                    +('µ //---------------------------------------------------------------\n')\
                                    +('µ \n')\
                                    +('µ function void %s_scoreboard::write_%s_%s_scoreboard(%s_sequence_item_base %s_seq_item_base);\n'%(envscbname, scbname, pname, mname, mname))\
                                    +('µ endfunction: write_%s_%s_scoreboard\n'%(scbname, pname))

                                    pos = scb_stg.find('// TLM Analysis Imp Declaration\n')
                                    apos = pos + len('// TLM Analysis Imp Declaration\n')
                                    scb_stg = scb_stg[:apos]+scb_pl1_stg+scb_stg[apos:]
                                    
                                    pos = scb_stg.find(' // Port Declaration\n')
                                    apos = pos + len(' // Port Declaration\n')+len('µ //--------------------------------------------\n')
                                    scb_stg = scb_stg[:apos]+scb_pl2_stg+scb_stg[apos:]
                                    
                                    pos = scb_stg.find(' // User Defined APIs\n')
                                    apos = pos + len(' // User Defined APIs\n')+len('µ // -----------------\n')
                                    scb_stg = scb_stg[:apos]+scb_pl3_stg+scb_stg[apos:]
                                    
                                    pos = scb_stg.find(' super.new(name, parent);\n')
                                    apos = pos + len(' super.new(name, parent);\n') 
                                    scb_stg = scb_stg[:apos]+scb_pl4_stg+scb_stg[apos:]
                                    
                                    pos = scb_stg.find('endfunction: final_phase\n')
                                    apos = pos + len('endfunction: final_phase\n')+len('µ\n')
                                    scb_stg = scb_stg[:apos]+scb_pl5_stg+scb_stg[apos:]
                                    
                                    log.debug("mc_edit_phase: scb_pl1_stg %s\n scb_pl2_stg %s\n scb_pl3_stg %s\n scb_pl4_stg %s\n scb_pl5_stg %s\n scb_stg %s\n"%(scb_pl1_stg, scb_pl2_stg, scb_pl3_stg, scb_pl4_stg, scb_pl5_stg, scb_stg))
                            
                            # Cleaning local vars
                            scb_loc_stg = ''
                            scb_pl1_stg = ''
                            scb_pl2_stg = ''
                            scb_pl3_stg = ''
                            scb_pl4_stg = ''
                            scb_pl5_stg = ''
                            #----------------------------------------------------------------------

                    
                            #----------------------------------------------------------------------
                            # Loading up the Scoreboard array content into file 
                            #----------------------------------------------------------------------
                            log.debug("mc_edit_phase: Value of scb_stg %s"%(scb_stg))
                            mc_scb_input_file = open("%s/%s_scoreboard.sv"%(envscbdirpath, envscbname), "w")
                            mc_scb_array = scb_stg.split('µ')
                            for lines in mc_scb_array:
                                mc_scb_input_file.write(lines)
                            mc_scb_input_file.close()
                            #----------------------------------------------------------------------
                #----------------------------------------------------------------------

                
                #----------------------------------------------------------------------
                # Edit the Environment Interface File  
                #----------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    if mc_env_cfg_pool[a][7] != []:
                        if mc_env_cfg_pool[a][7][0] != '':
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envintfname_arr = str(mc_env_cfg_pool[a][7][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envintfname_arr %s!\n"%(envname, envintfname_arr))
                            
                            for b in range (int(envintfname_arr[0])):
                                if int(envintfname_arr[0]==1) and len(envintfname_arr) == 1:
                                    envintfname = envname
                                else:
                                    #envintfname = envname+"_"+envintfname_arr[b+1]
                                    envintfname = envintfname_arr[b+1]
                                
                                #----------------------------------------------------------------------
                                # Loading up the Env Interface Details : Mainly for the user defined interface
                                #----------------------------------------------------------------------
                                log.debug(mc_env_cfg_pool[a][7][b+1][2])
                                if int(mc_env_cfg_pool[a][7][b+1][2]) == 3:
                                    log.debug("mc_edit_phase: drv intf: envintfname %s, envintfdirpath %s, cfg %s"%(envintfname, envintfdirpath, mc_env_cfg_pool[a][7][b+1]))
                                    self.mc_gen_intf(envintfname, envintfdirpath, mc_env_cfg_pool[a][7][b+1]) 
                                
                                #----------------------------------------------------------------------
                                # Environment Interface Wrapper Editing : 12122020SAT
                                #----------------------------------------------------------------------
                                log.debug("mc_edit_phase: env intf wrapper: envintfname %s, envintfdirpath %s, cfg %s"%(envintfname, envintfdirpath, 0))
                                self.mc_gen_intf_wrapper(envintfname, envintfdirpath, 0)
                                #----------------------------------------------------------------------
                                
                                #----------------------------------------------------------------------
                                # Environment Interface Macros Addition : 12122020SAT
                                #----------------------------------------------------------------------
                                log.debug("mc_edit_phase: env macros: envintfname %s, envname %s, envdirpath %s, cfg %s"%(envintfname, envname, envdirpath, 0))
                                self.mc_gen_env_macros(envintfname, envname, envpath, 0) 
                                #----------------------------------------------------------------------
                #----------------------------------------------------------------------


                #----------------------------------------------------------------------
                # Edit the Test File  
                #----------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    if len(((mc_env_cfg_pool[a][0].split(","))[1]).split(":"))>1:
                        envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                        envname_org = (mc_env_cfg_pool[a][0].split(","))[1]
                    else:
                        envname = (mc_env_cfg_pool[a][0].split(","))[1]
                        envname_org = (mc_env_cfg_pool[a][0].split(","))[1]
                    
                    # Opening the Test file and edit
                    mc_test_array = []
                            
                    if not os.path.isfile('%s/%s_test.sv'%(envtestdirpath, envname)):
                        log.error("%s/%s_test.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envtestdirpath, envname))
                    else:
                        log.info("%s/%s_test.sv file does exists! Progressing Further.\n"%(envtestdirpath, envname))
                        mc_test_input_file = open("%s/%s_test.sv"%(envtestdirpath, envname),"r+")

                        test_stg = '' 
                        test_loc_stg = '' 
                        id_temp = "%0d"

                        for lines in mc_test_input_file:
                            test_stg = test_stg+lines+'µ' 
                        log.debug("mc_create_phase: Value of test_stg %s"%(test_stg))

                        if len(envname_org.split(":"))>1:
                            #----------------------------------------------------------------------
                            # Environment Local Variables
                            #----------------------------------------------------------------------
                            pos = test_stg.find('// Environment Data Members\n')
                            apos = pos + len('// Environment Data Members\n')
                            test_stg = test_stg[:apos]+'µ string env_inst_name;\n'+test_stg[apos:]
                            #----------------------------------------------------------------------
                            
                            
                            #----------------------------------------------------------------------
                            test_loc_stg = test_loc_stg+("µ rand int unsigned no_of_%s_env;\n"%(envname))

                            pos = test_stg.find(' // Environment Data Members\n')
                            apos = pos + len(' // Environment Data Members\n')
                            test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]
    
                            test_loc_stg = ''
                            #----------------------------------------------------------------------

                            
                            #----------------------------------------------------------------------
                            test_loc_stg = test_loc_stg+("µ `uvm_field_int(no_of_%s_env, UVM_ALL_ON)\n"%(envname))

                            pos = test_stg.find('// Add field configurations\n')
                            apos = pos + len('// Add field configurations\n')+len('µ  // -----------------\n')
                            test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]
    
                            test_loc_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            test_loc_stg = test_loc_stg+("µ extern virtual function void construct_%s_env(int unsigned num_envs);\n"%(envname))

                            pos = test_stg.find('// User Defined APIs\n')
                            apos = pos + len('// User Defined APIs\n')+len('µ // -----------------\n')
                            test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]
    
                            test_loc_stg = ''
                            #----------------------------------------------------------------------

                            
                            #----------------------------------------------------------------------
                            test_loc_stg = test_loc_stg\
                            +('µ if (!uvm_config_db#(int)::get(uvm_root::get(), "*", "no_of_%s_env", no_of_%s_env))\n'%(envname, envname))\
                            +("µ begin\n")\
                            +('µ  `uvm_warning(get_type_name(), "no_of_%s_env setting is not found in config_db! Setting default value of 1");\n'%(envname))\
                            +("µ   no_of_%s_env = 1;\n"%(envname))\
                            +("µ end\n")

                            pos = test_stg.find('// Get Configuration\n')
                            apos = pos + len('// Get Configuration\n')+len('µ // -----------------\n')
                            test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]
    
                            test_loc_stg = ''
                            #----------------------------------------------------------------------

                        
                            #----------------------------------------------------------------------
                            test_loc_stg = test_loc_stg\
                            +("µ\n")\
                            +("µ//---------------------------------------------------------------\n")\
                            +("µ// Function: construct_%s_env\n"%envname)\
                            +("µ// \n")\
                            +("µ//---------------------------------------------------------------\n")\
                            +("µ\n")\
                            +("µfunction void %s_test::construct_%s_env(int unsigned num_envs);\n"%(envname, envname))\
                            +("µ // Get The Number Of Envs\n")\
                            +("µ no_of_%s_env = num_envs;\n"%envname)\
                            +("µ\n")\
                            +("µ // Create The Required Number of %s Env Configurations\n"%(envname))\
                            +("µ %s_environment_cfg = new[no_of_%s_env];\n"%(envname, envname))\
                            +("µ\n")\
                            +("µ // Create The Required Number of %s Env\n"%(envname))\
                            +("µ %s_env = new[no_of_%s_env];\n"%(envname, envname))\
                            +("µ\n")\
                            +("µ // Construct the %s Envs & Configurations\n"%(envname))\
                            +("µ for (int i = 0; i < no_of_%s_env; i++) begin\n"%(envname))\
                            +('µ  $sformat(env_inst_name, "%s_environment_cfg[%s]", i);\n'%(envname, "%0d"))\
                            +('µ  %s_environment_cfg[i] = %s_environment_config::type_id::create(env_inst_name);\n'%(envname, envname))\
                            +("µ\n")\
                            +('µ  $sformat(env_inst_name, "%s_env[%s]", i);\n'%(envname, "%0d"))\
                            +('µ  %s_env[i] = %s_environment::type_id::create(env_inst_name);\n'%(envname, envname))\
                            +("µ end\n")\
                            +("µendfunction: construct_%s_env\n"%envname) 
                        
                            pos = test_stg.find('endfunction: final_phase\n')
                            apos = pos + len('endfunction: final_phase\n')
                            test_stg = test_stg[:apos]+('\n')+test_loc_stg+test_stg[apos:]
    
                            test_loc_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            test_loc_stg = test_loc_stg+("µ %s_environment %s_env[];\n"%(envname, envname))
                        
                            pos = test_stg.find('// Environments Instantiation\n')
                            apos = pos + len('// Environments Instantiation\n')
                            test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]

                            # Cleaning local variables 
                            test_loc_stg = ''
                            #----------------------------------------------------------------------

            
                            #----------------------------------------------------------------------
                            test_loc_stg = test_loc_stg+("µ %s_environment_config %s_environment_cfg[];\n"%(envname, envname))
                            
                            pos = test_stg.find('// Environment Configuration Object Instantiation\n')
                            apos = pos + len('// Environment Configuration Object Instantiation\n')
                            test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]

                            # Cleaning local variables 
                            test_loc_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            test_loc_stg = test_loc_stg+("µ construct_%s_env(no_of_%s_env);\n"%(envname, envname))

                            pos = test_stg.find('// Construct Components and Configuration\n')
                            apos = pos + len('// Construct Components and Configuration\n') + len('µ // -----------------\n')
                            test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]
    
                            test_loc_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            test_loc_stg = test_loc_stg\
                            +("µ for (int i = 0; i < no_of_%s_env; i++) begin\n"%(envname))\
                            +('µ  $sformat(env_inst_name, "*%s_env[%s]*", i);\n'%(envname, str(id_temp)))\
                            +('µ  uvm_config_db#(%s_environment_config)::set(this, env_inst_name, "%s_environment_config", %s_environment_cfg[i]);\n'%(envname, envname, envname))\
                            +("µ end\n")

                            pos = test_stg.find('// Configure Environments\n')
                            apos = pos + len('// Configure Environments\n')
                            test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]

                            # Cleaning local variables 
                            test_loc_stg = ''
                            #----------------------------------------------------------------------
                        else:
                            #----------------------------------------------------------------------
                            test_loc_stg = test_loc_stg+("µ %s_environment %s_env;\n"%(envname, envname))
                            
                            pos = test_stg.find('// Environments Instantiation\n')
                            apos = pos + len('// Environments Instantiation\n')
                            test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]

                            # Cleaning local variables 
                            test_loc_stg = ''
                            #----------------------------------------------------------------------
     

                            #----------------------------------------------------------------------
                            test_loc_stg = test_loc_stg\
                            +('µ %s_env = %s_environment::type_id::create("%s_env",this);\n'%(envname, envname, envname))
                            
                            pos = test_stg.find('// Construct Environments\n')
                            apos = pos + len('// Construct Environments\n')
                            test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]

                            # Cleaning local variables 
                            test_loc_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            test_loc_stg = test_loc_stg+("µ %s_environment_config %s_environment_cfg;\n"%(envname, envname))
                            
                            pos = test_stg.find('// Environment Configuration Object Instantiation\n')
                            apos = pos + len('// Environment Configuration Object Instantiation\n')
                            test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]

                            # Cleaning local variables 
                            test_loc_stg = ''
                            #----------------------------------------------------------------------
     

                            #----------------------------------------------------------------------
                            test_loc_stg = test_loc_stg\
                            +('µ %s_environment_cfg = %s_environment_config::type_id::create("%s_environment_cfg",this);\n'%(envname, envname, envname))
                            
                            pos = test_stg.find('// Construct Environments Configuration\n')
                            apos = pos + len('// Construct Environments Configuration\n')
                            test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]

                            # Cleaning local variables 
                            test_loc_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            test_loc_stg = test_loc_stg\
                            +('µ uvm_config_db#(%s_environment_config)::set(this, "*%s_env*", "%s_environment_config", %s_environment_cfg);\n'%(envname, envname, envname, envname))
                            
                            pos = test_stg.find('// Configure Environments\n')
                            apos = pos + len('// Configure Environments\n')
                            test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]

                            # Cleaning local variables 
                            test_loc_stg = ''
                            #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Loading up the Test array content into file 
                        #----------------------------------------------------------------------
                        log.debug("mc_create_phase: Value of test_stg %s"%(test_stg))
                        mc_test_input_file = open("%s/%s_test.sv"%(envtestdirpath, envname), "w")
                        mc_test_array = test_stg.split('µ')
                        for lines in mc_test_array:
                            mc_test_input_file.write(lines)
                        mc_test_input_file.close()
                        #----------------------------------------------------------------------
            

                #----------------------------------------------------------------------
                # Edit the Top TB File 
                #----------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    # Opening the Test file and edit
                    mc_tb_top_array = []
                        
                    if not os.path.isfile('%s/%s_tb_top.sv'%(tbpath, envname)):
                        log.error("%s/%s_tb_top.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(tbpath, envname))
                    else:
                        log.info("%s/%s_tb_top.sv file does exists! Progressing Further.\n"%(tbpath, envname))
                        mc_tb_top_input_file = open("%s/%s_tb_top.sv"%(tbpath, envname),"r+")

                        tb_top_stg = '' 
                        tb_top_loc_stg = '' 

                        for lines in mc_tb_top_input_file:
                            tb_top_stg = tb_top_stg+lines+'µ' 
                        log.debug("mc_create_phase: Value of tb_top_stg %s"%(tb_top_stg))
                   
                        
                        #----------------------------------------------------------------------
                        # Code for Adding Interface - Virtual Interface Macro Connectivity : 12142020MON 
                        #----------------------------------------------------------------------
                        # Driver Interface Details
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                envagtname = envagtname_arr[e+1]
                          
                                if mc_env_cfg_pool[a][2][e+1][3] != '':
                                    envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                    log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s!\n"%(envname, envagtdrvname_arr))
                                    for e1 in range (int(envagtdrvname_arr[0])):
                                        if len(envagtdrvname_arr) == 1:
                                            envagtdrvname = envagtname 
                                        else:
                                            envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]

                                        if mc_env_cfg_pool[a][2][e+1][2]:
                                            for f in range (int(mc_env_cfg_pool[a][2][e+1][2])):
                                                tb_top_loc_stg = tb_top_loc_stg\
                                                +('µ `%s_if_wrapper_bind(%s_tb_top, %d)\n'%(envagtdrvname, envname, f))
                                        else:
                                            tb_top_loc_stg = tb_top_loc_stg\
                                            +('µ `%s_if_wrapper_bind(%s_tb_top)\n'%(envagtdrvname, envname))
                                        

                            pos = tb_top_stg.find('// Interface - Virtual Interface Config_db Setup\n')
                            apos = pos + len('// Interface - Virtual Interface Config_db Setup\n') + len(' //------------------------------------------\n\n')
                            tb_top_stg = tb_top_stg[:apos]+tb_top_loc_stg+tb_top_stg[apos:]

                        # Cleaning local vars
                        tb_top_loc_stg = ''
                        #----------------------------------------------------------------------
                        # Environment Interface Details  
                        #----------------------------------------------------------------------
                        if (mc_env_cfg_pool[a][0]):
                            if mc_env_cfg_pool[a][7] != []:
                                if mc_env_cfg_pool[a][7][0] != '':
                                    envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                                    envintfname_arr = str(mc_env_cfg_pool[a][7][0]).split(",")
                                    log.debug("mc_create_phase : envname %s  envintfname_arr %s!\n"%(envname, envintfname_arr))
                                    
                                    for b in range (int(envintfname_arr[0])):
                                        if int(envintfname_arr[0]==1) and len(envintfname_arr) == 1:
                                            envintfname = envname
                                        else:
                                            envintfname = envintfname_arr[b+1]
                                       
                                        tb_top_loc_stg = tb_top_loc_stg\
                                        +('µ `%s_if_wrapper_bind(%s_tb_top)\n'%(envintfname, envname))
                                        
                                    pos = tb_top_stg.find('// Interface - Virtual Interface Config_db Setup\n')
                                    apos = pos + len('// Interface - Virtual Interface Config_db Setup\n') + len(' //------------------------------------------\n\n')
                                    tb_top_stg = tb_top_stg[:apos]+tb_top_loc_stg+tb_top_stg[apos:]
                        
                        # Cleaning local vars
                        tb_top_loc_stg = ''
                        #----------------------------------------------------------------------

                        
                        #----------------------------------------------------------------------
                        # Loading up the Test array content into file 
                        #----------------------------------------------------------------------
                        log.debug("mc_create_phase: Value of tb_top_stg %s"%(tb_top_stg))
                        mc_tb_top_input_file = open("%s/%s_tb_top.sv"%(tbpath, envname), "w")
                        mc_tb_top_array = tb_top_stg.split('µ')
                        for lines in mc_tb_top_array:
                            mc_tb_top_input_file.write(lines)
                        mc_tb_top_input_file.close()
                        #----------------------------------------------------------------------
                #----------------------------------------------------------------------


                #----------------------------------------------------------------------
                # Edit All the Required Packages 
                #----------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    #----------------------------------------------------------------------
                    # SEQUENCE ITEM PKG
                    #----------------------------------------------------------------------
                    mc_seq_item_array = []
                        
                    if not os.path.isfile('%s/%s_seq_item_package.sv'%(envpath, envname)):
                        log.error("%s/%s_seq_item_package.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envpath, envname))
                    else:
                        log.info("%s/%s_seq_item_package.sv file does exists! Progressing Further.\n"%(envpath, envname))
                        mc_seq_item_input_file = open("%s/%s_seq_item_package.sv"%(envpath, envname),"r+")

                        seq_item_stg = '' 
                        seq_item_loc_stg = '' 
                        seq_item_drv_loc_stg = '' 

                        for lines in mc_seq_item_input_file:
                            seq_item_stg = seq_item_stg+lines+'µ' 
                        log.debug("mc_create_phase: Value of seq_item_stg %s"%(seq_item_stg))
                        
                        #----------------------------------------------------------------------
                        # Code for Including the Environment Monitor Seq Item Files 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    #envmonname = envname+"_"+envmonname_arr[c+1].split(":")[0]
                                    envmonname = envmonname_arr[c+1].split(":")[0]
                                else:
                                    #envmonname = envname+"_"+envmonname_arr[c+1]
                                    envmonname = envmonname_arr[c+1]
                                
                                seq_item_loc_stg = seq_item_loc_stg+('µ`include "%s_sequence_item_base.sv"\n'%(envmonname))
                                        
                                # Setting the variable based on if the env mon seq item exists inside the env for instantiating the seq_item_pkg: 022720|THU
                                mc_curr_env_mon_exists = 1
        
                            pos = seq_item_stg.find('// Environment Monitor Sequence Items\n')
                            apos = pos + len('// Environment Monitor Sequence Items\n')
                            seq_item_stg = seq_item_stg[:apos]+seq_item_loc_stg+seq_item_stg[apos:]

                        # Cleaning local vars
                        seq_item_loc_stg = ''
                        #----------------------------------------------------------------------

                        #----------------------------------------------------------------------
                        # Code for Including the Agent Driver & Monitor Seq Item Files 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
        
                            for e in range (int(envagtname_arr[0])):
                                #envagtname = envname+"_"+envagtname_arr[e+1]
                                envagtname = envagtname_arr[e+1]
                                    
                                if mc_env_cfg_pool[a][2][e+1][3] != '':
                                    envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                    log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                    for e1 in range (int(envagtdrvname_arr[0])):
                                        if len(envagtdrvname_arr) == 1:
                                            envagtdrvname = envagtname 
                                        else:
                                            envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                                    
                                        seq_item_drv_loc_stg = seq_item_drv_loc_stg+('µ`include "%s_sequence_item_base.sv"\n'%(envagtdrvname))
                                
                                    pos = seq_item_stg[seq_item_stg.find('// Agent Driver Sequence Items'):seq_item_stg.find('// Agent Monitor Sequence Items')].find("`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                    if pos == -1:
                                        pos = seq_item_stg.find('// Agent Driver Sequence Items\n')
                                        apos = pos + len('// Agent Driver Sequence Items\n')
                                        seq_item_stg = seq_item_stg[:apos]+("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+seq_item_drv_loc_stg+("µ`endif // ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+seq_item_stg[apos:]
                                    else:
                                        pos = seq_item_stg.find('`ifndef ENABLE_%s_DIET_MODEL\n'%(envname.upper()))
                                        apos = pos + len('`ifndef ENABLE_%s_DIET_MODEL\n'%(envname.upper()))
                                        #pos = seq_item_stg.find('// Agent Driver Sequence Items\n')
                                        #apos = pos + len('// Agent Driver Sequence Items\n') + len("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                        seq_item_stg = seq_item_stg[:apos]+seq_item_drv_loc_stg+seq_item_stg[apos:]
                            
                                    # Cleaning local vars
                                    seq_item_drv_loc_stg = ''

                                if mc_env_cfg_pool[a][2][e+1][4] != '':
                                    envagtmonname_arr = str(mc_env_cfg_pool[a][2][e+1][4]).split(",")
                                    log.debug("mc_edit_phase : envname %s  envagtmonname_arr %s envagtdirpath %s!\n"%(envname, envagtmonname_arr, envagtdirpath))
                                    for e1 in range (int(envagtmonname_arr[0])):
                                        if len(envagtmonname_arr) == 1:
                                            envagtmonname = envagtname 
                                        else:
                                            envagtmonname = envagtname+"_"+envagtmonname_arr[e1+1]
                                    
                                        seq_item_loc_stg = seq_item_loc_stg+('µ`include "%s_sequence_item_base.sv"\n'%(envagtmonname))
                                    
                                    pos = seq_item_stg.find('// Agent Monitor Sequence Items\n')
                                    apos = pos + len('// Agent Monitor Sequence Items\n')
                                    seq_item_stg = seq_item_stg[:apos]+seq_item_loc_stg+seq_item_stg[apos:]
                                
                                    # Cleaning local vars
                                    seq_item_loc_stg = ''
                        

                        #----------------------------------------------------------------------
                        # Loading up the Seq Item Package array content into file 
                        #----------------------------------------------------------------------
                        log.debug("mc_create_phase: Value of seq_item_stg %s"%(seq_item_stg))
                        mc_seq_item_input_file = open("%s/%s_seq_item_package.sv"%(envpath, envname), "w")
                        mc_seq_item_array = seq_item_stg.split('µ')
                        for lines in mc_seq_item_array:
                            mc_seq_item_input_file.write(lines)
                        mc_seq_item_input_file.close()
                        #----------------------------------------------------------------------
                    #----------------------------------------------------------------------
               
                    
                    #----------------------------------------------------------------------
                    # SEQUENCE PKG
                    #----------------------------------------------------------------------
                    mc_seq_array = []
                        
                    if not os.path.isfile('%s/%s_seq_package.sv'%(envpath, envname)):
                        log.error("%s/%s_seq_package.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envpath, envname))
                    else:
                        log.info("%s/%s_seq_package.sv file does exists! Progressing Further.\n"%(envpath, envname))
                        mc_seq_input_file = open("%s/%s_seq_package.sv"%(envpath, envname),"r+")

                        seq_stg = '' 
                        seq_loc_stg = '' 
                        seq_drv_loc_stg = '' 

                        for lines in mc_seq_input_file:
                            seq_stg = seq_stg+lines+'µ' 
                        log.debug("mc_create_phase: Value of seq_stg %s"%(seq_stg))
                                    
                        #----------------------------------------------------------------------
                        # Code for Including the Agent Driver & Monitor Seq Item Files 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
        
                            for e in range (int(envagtname_arr[0])):
                                #envagtname = envname+"_"+envagtname_arr[e+1]
                                envagtname = envagtname_arr[e+1]
                                    
                                if mc_env_cfg_pool[a][2][e+1][3] != '':
                                    envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                    log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                    for e1 in range (int(envagtdrvname_arr[0])):
                                        if len(envagtdrvname_arr) == 1:
                                            envagtdrvname = envagtname 
                                        else:
                                            envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                                    
                                        seq_drv_loc_stg = seq_drv_loc_stg+('µ`include "%s_sequence.sv"\n'%(envagtdrvname))
                               
                                        # Setting the variable based on if the sequences exists inside the env for instantiating the seq_pkg inside the test pkg : 022720|THU
                                        mc_curr_env_seq_exists = 1

                                    pos = seq_stg[seq_stg.find('// Sequence Objects'):seq_stg.find('// Agent Components')].find("`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                    if pos == -1:
                                        pos = seq_stg.find('// Sequence Objects\n')
                                        apos = pos + len('// Sequence Objects\n') + len("µ //------------------------------------------\n")
                                        seq_stg = seq_stg[:apos]+("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+seq_drv_loc_stg+("µ`endif // ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+seq_stg[apos:]
                                    else:
                                        pos = seq_stg.find('`ifndef ENABLE_%s_DIET_MODEL\n'%(envname.upper()))
                                        apos = pos + len('`ifndef ENABLE_%s_DIET_MODEL\n'%(envname.upper()))
                                        #pos = seq_stg.find('// Sequence Objects\n')
                                        #apos = pos + len('// Sequence Objects\n') + len("µ //------------------------------------------\n") + len("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                        seq_stg = seq_stg[:apos]+seq_drv_loc_stg+seq_stg[apos:]
                            
                                    # Cleaning local vars
                                    seq_drv_loc_stg = ''
                        
                        
                        #----------------------------------------------------------------------
                        # Importing the seq item pkg into seq pkg 
                        #----------------------------------------------------------------------
                        if mc_curr_env_seq_exists:
                            seq_loc_stg = seq_loc_stg+('µ import %s_seq_item_package::*;\n'%(envname))

                            pos = seq_stg.find('// Sequence Item Packages\n')
                            apos = pos + len('// Sequence Item Packages\n')
                            seq_stg = seq_stg[:apos]+seq_loc_stg+seq_stg[apos:]
                                        
                            # Cleaning local vars
                            seq_loc_stg = ''
                   

                        #----------------------------------------------------------------------
                        # Loading up the Seq Item Package array content into file 
                        #----------------------------------------------------------------------
                        log.debug("mc_create_phase: Value of seq_stg %s"%(seq_stg))
                        mc_seq_input_file = open("%s/%s_seq_package.sv"%(envpath, envname), "w")
                        mc_seq_array = seq_stg.split('µ')
                        for lines in mc_seq_array:
                            mc_seq_input_file.write(lines)
                        mc_seq_input_file.close()
                        #----------------------------------------------------------------------
                    #----------------------------------------------------------------------

                
                    #----------------------------------------------------------------------
                    # ENVIRONMENT PKG
                    #----------------------------------------------------------------------
                    mc_env_pkg_array = []
                        
                    if not os.path.isfile('%s/%s_env_package.sv'%(envpath, envname)):
                        log.error("%s/%s_env_package.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envpath, envname))
                    else:
                        log.info("%s/%s_env_package.sv file does exists! Progressing Further.\n"%(envpath, envname))
                        mc_env_pkg_input_file = open("%s/%s_env_package.sv"%(envpath, envname),"r+")

                        env_pkg_stg = '' 
                        env_pkg_loc_stg = '' 
                        env_pkg_drv_loc_stg = '' 

                        for lines in mc_env_pkg_input_file:
                            env_pkg_stg = env_pkg_stg+lines+'µ' 
                        log.debug("mc_create_phase: Value of env_pkg_stg %s"%(env_pkg_stg))
                  
                        #----------------------------------------------------------------------
                        # Importing the seq item pkg into seq pkg 
                        #----------------------------------------------------------------------
                        if mc_curr_env_seq_exists or mc_curr_env_mon_exists:
                            env_pkg_loc_stg = env_pkg_loc_stg+('µ import %s_seq_item_package::*;\n'%(envname))

                            pos = env_pkg_stg.find('// Sequence Item Packages\n')
                            apos = pos + len('// Sequence Item Packages\n')
                            env_pkg_stg = env_pkg_stg[:apos]+env_pkg_loc_stg+env_pkg_stg[apos:]
                            
                            # Cleaning local vars
                            env_pkg_loc_stg = ''
                        #----------------------------------------------------------------------

                        
                        #----------------------------------------------------------------------
                        # Importing Required Sequence Item Package From Other Environments : 12182020FRI
                        #----------------------------------------------------------------------
                        monscbconarr = (mc_env_cfg_pool[a][5])
                        log.debug("mc_create_phase : envname %s  monscbconarr %s!\n"%(envname, monscbconarr))
                        
                        for n in range (len(monscbconarr)):
                            cp_mon_arr = (monscbconarr[n].split("-"))[0].split(",")
                            log.debug("mc_create_phase : cp_mon_arr %s, cp_mon_arr[1] %s!\n"%(cp_mon_arr, cp_mon_arr[1]))
                            envname_tmp = cp_mon_arr[1]

                            if (envname != envname_tmp):
                                env_pkg_loc_stg = env_pkg_loc_stg+('µ import %s_seq_item_package::*;\n'%(envname_tmp))

                        if env_pkg_loc_stg != '':
                            pos = env_pkg_stg[env_pkg_stg.find('// Sequence Item Packages'):env_pkg_stg.find('// Sequence Packages')].find("`ifndef DISABLE_%s_ENV\n"%(envname_tmp.upper()))
                            if pos == -1:
                                pos = env_pkg_stg.find('// Sequence Item Packages\n')
                                apos = pos + len('// Sequence Item Packages\n')
                                env_pkg_stg = env_pkg_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(envname_tmp.upper()))+env_pkg_loc_stg+("µ`endif // DISABLE_%s_ENV\n"%(envname_tmp.upper()))+env_pkg_stg[apos:]
                            else:
                                pos = env_pkg_stg.find('`ifndef DISABLE_%s_ENV\n'%(envname_tmp.upper()))
                                apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(envname_tmp.upper()))
                                env_pkg_stg = env_pkg_stg[:apos]+env_pkg_drv_loc_stg+env_pkg_stg[apos:]

                        # Cleaning local vars
                        env_pkg_loc_stg = ''
                        #----------------------------------------------------------------------
                        

                        #----------------------------------------------------------------------
                        # Importing the Sub-Environment Packages 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][1] != '':
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            subenvname_arr = str(mc_env_cfg_pool[a][1]).split(",")
                            log.debug("mc_create_phase : envname %s  subenvname_arr %s!\n"%(envname, subenvname_arr))

                            for f in range (int(subenvname_arr[0])):
                                subenvname_tmp = subenvname_arr[f+1]
                               
                                if len(subenvname_tmp.split(":"))>1:
                                    subenvname = subenvname_tmp.split(":")[0]
                                else:
                                    subenvname = subenvname_tmp

                                env_pkg_loc_stg = env_pkg_loc_stg+('µ import %s_env_package::*;\n'%(subenvname))

                                pos = env_pkg_stg[env_pkg_stg.find('// Environment Packages'):env_pkg_stg.find('// Including VIP Files')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                if pos == -1:
                                    pos = env_pkg_stg.find('// Environment Packages\n')
                                    apos = pos + len('// Environment Packages\n')
                                    env_pkg_stg = env_pkg_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+env_pkg_loc_stg+("µ`endif // DISABLE_%s_ENV\n"%(subenvname.upper()))+env_pkg_stg[apos:]
                                else:
                                    pos = env_pkg_stg.find('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper()))
                                    apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper()))
                                    env_pkg_stg = env_pkg_stg[:apos]+env_pkg_drv_loc_stg+env_pkg_stg[apos:]

                                # Cleaning local vars
                                env_pkg_loc_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Including the Environment and Configuration File 
                        #----------------------------------------------------------------------
                        envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                        env_pkg_loc_stg = env_pkg_loc_stg+('µ`include "%s_environment_config.sv"\n'%(envname))
        
                        pos = env_pkg_stg.find('// Environment Configuration Files\n')
                        apos = pos + len('// Environment Configuration Files\n')
                        env_pkg_stg = env_pkg_stg[:apos]+env_pkg_loc_stg+env_pkg_stg[apos:]

                        # Cleaning local vars
                        env_pkg_loc_stg = ''
                        #----------------------------------------------------------------------

                        
                        #----------------------------------------------------------------------
                        # Code for Including the Environment and Configuration File 
                        #----------------------------------------------------------------------
                        envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                        env_pkg_loc_stg = env_pkg_loc_stg+('µ`include "%s_environment.sv"\n'%(envname))
        
                        pos = env_pkg_stg.find('// Environment Files\n')
                        apos = pos + len('// Environment Files\n')
                        env_pkg_stg = env_pkg_stg[:apos]+env_pkg_loc_stg+env_pkg_stg[apos:]

                        # Cleaning local vars
                        env_pkg_loc_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Including the Environment Monitor Components Files 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    #envmonname = envname+"_"+envmonname_arr[c+1].split(":")[0]
                                    envmonname = envmonname_arr[c+1].split(":")[0]
                                else:
                                    #envmonname = envname+"_"+envmonname_arr[c+1]
                                    envmonname = envmonname_arr[c+1]
                                
                                env_pkg_loc_stg = env_pkg_loc_stg+('µ`include "%s_monitor.sv"\n'%(envmonname))
        
                            pos = env_pkg_stg.find('// Environment Monitor Files\n')
                            apos = pos + len('// Environment Monitor Files\n')
                            env_pkg_stg = env_pkg_stg[:apos]+env_pkg_loc_stg+env_pkg_stg[apos:]

                        # Cleaning local vars
                        env_pkg_loc_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Including the Environment Scoreboard Components Files 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][4] != '':
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                
                            for c in range (int(envscbname_arr[0])):
                                if len(envscbname_arr[c+1].split(":"))>1:
                                    #envscbname = envname+"_"+envscbname_arr[c+1].split(":")[0]
                                    envscbname = envscbname_arr[c+1].split(":")[0]
                                else:
                                    #envscbname = envname+"_"+envscbname_arr[c+1]
                                    envscbname = envscbname_arr[c+1]
                                
                                env_pkg_loc_stg = env_pkg_loc_stg+('µ`include "%s_scoreboard.sv"\n'%(envscbname))
        
                            pos = env_pkg_stg.find('// Environment Scoreboard Files\n')
                            apos = pos + len('// Environment Scoreboard Files\n')
                            env_pkg_stg = env_pkg_stg[:apos]+env_pkg_loc_stg+env_pkg_stg[apos:]

                        # Cleaning local vars
                        env_pkg_loc_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Including the Agent Component and Configuration Files 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
        
                            for e in range (int(envagtname_arr[0])):
                                #envagtname = envname+"_"+envagtname_arr[e+1]
                                envagtname = envagtname_arr[e+1]
                              
                                #----------------------------------------------------------------------
                                # Adding Agent Configuration Files 
                                #----------------------------------------------------------------------
                                env_pkg_loc_stg = env_pkg_loc_stg+('µ`include "%s_agent_config.sv"\n'%(envagtname))
                                    
                                pos = env_pkg_stg.find('// Agent Configuration Files\n')
                                apos = pos + len('// Agent Configuration Files\n')
                                env_pkg_stg = env_pkg_stg[:apos]+env_pkg_loc_stg+env_pkg_stg[apos:]
                                
                                # Cleaning local vars
                                env_pkg_loc_stg = ''


                                #----------------------------------------------------------------------
                                # Adding Agent Files 
                                #----------------------------------------------------------------------
                                env_pkg_loc_stg = env_pkg_loc_stg+('µ`include "%s_agent.sv"\n'%(envagtname))
                                    
                                pos = env_pkg_stg.find('// Agent Files\n')
                                apos = pos + len('// Agent Files\n')
                                env_pkg_stg = env_pkg_stg[:apos]+env_pkg_loc_stg+env_pkg_stg[apos:]
                                
                                # Cleaning local vars
                                env_pkg_loc_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Including the Agent Driver & Monitor Components Files 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
        
                            for e in range (int(envagtname_arr[0])):
                                #envagtname = envname+"_"+envagtname_arr[e+1]
                                envagtname = envagtname_arr[e+1]
                              
                                #----------------------------------------------------------------------
                                # Adding Agent Driver Files 
                                #----------------------------------------------------------------------
                                if mc_env_cfg_pool[a][2][e+1][3] != '':
                                    envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                    log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                    for e1 in range (int(envagtdrvname_arr[0])):
                                        if len(envagtdrvname_arr) == 1:
                                            envagtdrvname = envagtname 
                                        else:
                                            envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                                    
                                        env_pkg_drv_loc_stg = env_pkg_drv_loc_stg\
                                        +('µ`include "%s_driver.sv"\n'%(envagtdrvname))\
                                        +('µ`include "%s_sequencer.sv"\n'%(envagtdrvname))
                                
                                    pos = env_pkg_stg[env_pkg_stg.find('// Agent Driver & Sequencer Files'):env_pkg_stg.find('// Agent Files')].find("`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                    if pos == -1:
                                        pos = env_pkg_stg.find('// Agent Driver & Sequencer Files\n')
                                        apos = pos + len('// Agent Driver & Sequencer Files\n')
                                        env_pkg_stg = env_pkg_stg[:apos]+("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+env_pkg_drv_loc_stg+("µ`endif // ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+env_pkg_stg[apos:]
                                    else:
                                        pos = env_pkg_stg.find('`ifndef ENABLE_%s_DIET_MODEL\n'%(envname.upper()))
                                        apos = pos + len('`ifndef ENABLE_%s_DIET_MODEL\n'%(envname.upper()))
                                        env_pkg_stg = env_pkg_stg[:apos]+env_pkg_drv_loc_stg+env_pkg_stg[apos:]
                            
                                    # Cleaning local vars
                                    env_pkg_drv_loc_stg = ''

                                #----------------------------------------------------------------------
                                # Adding Agent Monitor Files 
                                #----------------------------------------------------------------------
                                if mc_env_cfg_pool[a][2][e+1][4] != '':
                                    envagtmonname_arr = str(mc_env_cfg_pool[a][2][e+1][4]).split(",")
                                    log.debug("mc_edit_phase : envname %s  envagtmonname_arr %s envagtdirpath %s!\n"%(envname, envagtmonname_arr, envagtdirpath))
                                    for e1 in range (int(envagtmonname_arr[0])):
                                        if len(envagtmonname_arr) == 1:
                                            envagtmonname = envagtname 
                                        else:
                                            envagtmonname = envagtname+"_"+envagtmonname_arr[e1+1]
                                    
                                        env_pkg_loc_stg = env_pkg_loc_stg+('µ`include "%s_monitor.sv"\n'%(envagtmonname))
                                    
                                    pos = env_pkg_stg.find('// Agent Monitor Files\n')
                                    apos = pos + len('// Agent Monitor Files\n')
                                    env_pkg_stg = env_pkg_stg[:apos]+env_pkg_loc_stg+env_pkg_stg[apos:]
                                
                                    # Cleaning local vars
                                    env_pkg_loc_stg = ''

                        
                        #----------------------------------------------------------------------
                        # Loading up the Environment Package array content into file 
                        #----------------------------------------------------------------------
                        log.debug("mc_create_phase: Value of env_pkg_stg %s"%(env_pkg_stg))
                        mc_env_pkg_input_file = open("%s/%s_env_package.sv"%(envpath, envname), "w")
                        mc_env_pkg_array = env_pkg_stg.split('µ')
                        for lines in mc_env_pkg_array:
                            mc_env_pkg_input_file.write(lines)
                        mc_env_pkg_input_file.close()
                        #----------------------------------------------------------------------
                    #----------------------------------------------------------------------
   
                    
                    #----------------------------------------------------------------------
                    # TEST PKG
                    #----------------------------------------------------------------------
                    mc_test_pkg_array = []
                        
                    if not os.path.isfile('%s/%s_test_package.sv'%(envpath, envname)):
                        log.error("%s/%s_test_package.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envpath, envname))
                    else:
                        log.info("%s/%s_test_package.sv file does exists! Progressing Further.\n"%(envpath, envname))
                        mc_test_pkg_input_file = open("%s/%s_test_package.sv"%(envpath, envname),"r+")

                        test_pkg_stg = '' 
                        test_pkg_loc_stg = '' 

                        for lines in mc_test_pkg_input_file:
                            test_pkg_stg = test_pkg_stg+lines+'µ' 
                        log.debug("mc_create_phase: Value of test_pkg_stg %s"%(test_pkg_stg))


                        #----------------------------------------------------------------------
                        # Importing the Sequence Package 
                        #----------------------------------------------------------------------
                        if mc_curr_env_seq_exists:
                            test_pkg_loc_stg = test_pkg_loc_stg+('µ import %s_seq_package::*;\n'%(envname))

                            pos = test_pkg_stg[test_pkg_stg.find('// Sequence Packages'):test_pkg_stg.find('// Environment Packages')].find("`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                            if pos == -1:
                                pos = test_pkg_stg.find('// Sequence Packages\n')
                                apos = pos + len('// Sequence Packages\n')
                                test_pkg_stg = test_pkg_stg[:apos]+("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+test_pkg_loc_stg+("µ`endif // ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+test_pkg_stg[apos:]
                            else:
                                pos = test_pkg_stg.find('`ifndef ENABLE_%s_DIET_MODEL\n'%(envname.upper()))
                                apos = pos + len('`ifndef ENABLE_%s_DIET_MODEL\n'%(envname.upper()))
                                test_pkg_stg = test_pkg_stg[:apos]+test_pkg_loc_stg+test_pkg_stg[apos:]


                            # Cleaning local vars
                            test_pkg_loc_stg = ''
                        #----------------------------------------------------------------------

                        
                        #----------------------------------------------------------------------
                        # Importing the Environment pkg
                        #----------------------------------------------------------------------
                        test_pkg_loc_stg = test_pkg_loc_stg+('µ import %s_env_package::*;\n'%(envname))

                        pos = test_pkg_stg[test_pkg_stg.find('// Environment Packages'):test_pkg_stg.find('// Including VIP Files')].find("`ifndef DISABLE_%s_ENV\n"%(envname.upper()))
                        if pos == -1:
                            pos = test_pkg_stg.find('// Environment Packages\n')
                            apos = pos + len('// Environment Packages\n')
                            test_pkg_stg = test_pkg_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(envname.upper()))+test_pkg_loc_stg+("µ`endif // DISABLE_%s_ENV\n"%(envname.upper()))+test_pkg_stg[apos:]
                        else:
                            pos = test_pkg_stg.find('`ifndef DISABLE_%s_ENV\n'%(envname.upper()))
                            apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(envname.upper()))
                            test_pkg_stg = test_pkg_stg[:apos]+test_pkg_loc_stg+test_pkg_stg[apos:]

                        # Cleaning local vars
                        test_pkg_loc_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Including the Test File 
                        #----------------------------------------------------------------------
                        envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                        test_pkg_loc_stg = test_pkg_loc_stg+('µ`include "%s_test.sv"\n'%(envname))
        
                        pos = test_pkg_stg.find('// Test Components\n')
                        apos = pos + len('// Test Components\n') + len('µ //------------------------------------------\n')
                        test_pkg_stg = test_pkg_stg[:apos]+test_pkg_loc_stg+test_pkg_stg[apos:]

                        # Cleaning local vars
                        test_pkg_loc_stg = ''
                        #----------------------------------------------------------------------

        
                        #----------------------------------------------------------------------
                        # Loading up the Test Package array content into file 
                        #----------------------------------------------------------------------
                        log.debug("mc_create_phase: Value of test_pkg_stg %s"%(test_pkg_stg))
                        mc_test_pkg_input_file = open("%s/%s_test_package.sv"%(envpath, envname), "w")
                        mc_test_pkg_array = test_pkg_stg.split('µ')
                        for lines in mc_test_pkg_array:
                            mc_test_pkg_input_file.write(lines)
                        mc_test_pkg_input_file.close()
                        #----------------------------------------------------------------------
                    #----------------------------------------------------------------------
                #----------------------------------------------------------------------

            else: # If env array contains __c or __s or anything  #CREATEANDSTITCH
                log.debug("mc_edit_phase : Edit only necessary files for mc_env_cfg_pool[%d] %s!\n"%(a, mc_env_cfg_pool[a]))
                log.debug("mc_edit_phase: mc_curr_env_set_c %d\n"%(mc_curr_env_set_c))

                #----------------------------------------------------------------------
                # Environment Directory Path For FIles to Edit 
                #----------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    if len(((mc_env_cfg_pool[a][0].split(","))[0]).split(":"))>1:
                        parenvname = ((mc_env_cfg_pool[a][0].split(","))[0]).split(":")[0]
                        parenvname_org = (mc_env_cfg_pool[a][0].split(","))[0]
                    else:
                        parenvname = (mc_env_cfg_pool[a][0].split(","))[0]
                        parenvname_org = (mc_env_cfg_pool[a][0].split(","))[0]
                    
                    if len(((mc_env_cfg_pool[a][0].split(","))[1]).split(":"))>1:
                        envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                        envname_org = (mc_env_cfg_pool[a][0].split(","))[1]
                    else:
                        envname = (mc_env_cfg_pool[a][0].split(","))[1]
                        envname_org = (mc_env_cfg_pool[a][0].split(","))[1]
                    
                    if "__c" in parenvname:
                        parenvname = parenvname.replace("__c","")
                        #parenvname_org = parenvname_org.replace("__c","")
                        log.debug("mc_create_phase : parenvname %s!\n"%parenvname)
                    elif "__s" in parenvname:
                        parenvname = parenvname.replace("__s","")
                        #parenvname_org = parenvname_org.replace("__s","")
                        log.debug("mc_create_phase : parenvname %s!\n"%parenvname)
                    
                    if "__c" in envname:
                        mc_curr_env_set_c = 1
                        envname = envname.replace("__c","")
                        #envname_org = envname_org.replace("__c","")
                        log.debug("mc_create_phase : envname %s mc_curr_env_set_c %d!\n"%(envname, mc_curr_env_set_c))
                        log.debug(mc_curr_env_set_c) 
                    elif "__s" in envname:
                        mc_curr_env_set_s = 1
                        envname = envname.replace("__s","")
                        #envname_org = envname_org.replace("__s","")
                        log.debug("mc_create_phase : envname %s mc_curr_env_set_s %d!\n"%(envname, mc_curr_env_set_s))
                        log.debug(mc_curr_env_set_s) 
                    
                    log.debug("mc_create_phase : parenvname %s parenvname_org %s, envname %s envname_org %s!\n"%(parenvname, parenvname_org, envname, envname_org))
                    log.debug("mc_create_phase : envname %s mc_curr_env_set_c %d mc_curr_env_set_s %d!\n"%(envname, mc_curr_env_set_c, mc_curr_env_set_s))
                        
                    if mc_env_cfg_pool[a][6] != []:
                        if mc_env_cfg_pool[a][6] == 'pwd':
                            envdirpath = str(os.popen('pwd').read()).strip()
                        else:
                            envdirpath = str(mc_env_cfg_pool[a][6]).strip('[,],\'')
                    
                        # Director Path For Env 
                        envdirpath = envdirpath+'/'+envname+'_env'   
                        log.debug("mc_create_phase : envdirpath %s!\n"%envdirpath)
                        
                        # Directory Path For Other Env Directory 
                        envpath = envdirpath+'/'+'env'
                        # envtrkpath = envdirpath+'/'+'trackers'
                        envchkrpath = envdirpath+'/'+'checkers'
                        # envconfilepath = envdirpath+'/'+'conn_file'
                        envdocspath = envdirpath+'/'+'docs'
                        envrunpath = envdirpath+'/'+'run'
                        envflpath = envdirpath+'/'+'filelist'
                        envscriptspath = envdirpath+'/'+'scripts'
                        
                        # Directory Path For Others 
                        envmondirpath = envdirpath+'/'+'env_monitors'
                        envintfdirpath = envdirpath+'/'+'env_interfaces'
                        envscbdirpath = envdirpath+'/'+'scoreboards'
                        tbpath = envdirpath+'/'+'tb'

                        # Directory Path For Env tests 
                        envtestdirpath = envdirpath+'/'+'tests'
                        
                        #log.debug("mc_create_phase : envtrkpath %s, envchkrpath %s, envconfilepath %s!\n"%(envtrkpath, envchkrpath, envconfilepath))
                        log.debug("mc_create_phase : envchkrpath %s, envdocspath %s, envrunpath %s, envflpath %s, envscriptspath %s!\n"%(envchkrpath, envdocspath, envrunpath, envflpath, envscriptspath))
               
                #----------------------------------------------------------------------
                # Edit the Environment Config File  
                #----------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    # Opening the environment config file and edit
                    mc_env_cfg_array = []
                                
                    if not os.path.isfile('%s/%s_environment_config.sv'%(envpath, envname)):
                        log.error("%s/%s_environment_config.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envpath, envname))
                    else:
                        log.info("%s/%s_environment_config.sv file does exists! Progressing Further.\n"%(envpath, envname))
                        mc_env_cfg_input_file = open("%s/%s_environment_config.sv"%(envpath, envname),"r+")
                        
                        env_cfg_stg = '' 
                        env_int_stg = '' 
                        env_mon_stg = '' 
                        env_scb_stg = '' 
                        env_agt_stg = '' 
                        sub_env_stg = ''

                        for lines in mc_env_cfg_input_file:
                            env_cfg_stg = env_cfg_stg+lines+'µ' 
                        log.debug("mc_create_phase: Value of env_cfg_stg %s"%(env_cfg_stg))
                           
                        #----------------------------------------------------------------------
                        # Code for Environment Interface Instantiation inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][7] != []:
                            if mc_env_cfg_pool[a][7][0] != '':
                                envintfname_arr = str(mc_env_cfg_pool[a][7][0]).split(",")
                                log.debug("mc_create_phase : envname %s  envintfname_arr %s!\n"%(envname, envintfname_arr))
                                
                                for b in range (int(envintfname_arr[0])):
                                    if (len(envintfname_arr) == 1 and "__c" in envintfname_arr[0]) or (len(envintfname_arr) == 1 and "__s" in envintfname_arr[0]) or (len(envintfname_arr) == 1 and int(envintfname_arr[0]) == 1):
                                        envintfname = envname
                                        
                                        if "__c" in envintfname_arr or mc_curr_env_set_c == 1 or ("__s" in envintfname_arr and mc_curr_env_set_s == 0):
                                            env_int_stg = env_int_stg+'µ'+(" virtual %s_interface %s_vif;\n"%(envintfname, envintfname))
                                    else:
                                        if "__c" in envintfname_arr[b+1]:
                                            #envintfname = envname+"_"+envintfname_arr[b+1].replace("__c","")
                                            envintfname = envintfname_arr[b+1].replace("__c","")
                                        elif "__s" in envintfname_arr[b+1]:
                                            #envintfname = envname+"_"+envintfname_arr[b+1].replace("__s","")
                                            envintfname = envintfname_arr[b+1].replace("__s","")
                                        else:
                                            #envintfname = envname+"_"+envintfname_arr[b+1]
                                            envintfname = envintfname_arr[b+1]
                            
                                        #if "__c" in envintfname_arr[b+1] or "__s" in envintfname_arr[b+1] or mc_curr_env_set_c ==1:
                                        if "__c" in envintfname_arr[b+1] or mc_curr_env_set_c == 1 or ("__s" in envintfname_arr[b+1] and mc_curr_env_set_s == 0):
                                            env_int_stg = env_int_stg+'µ'+(" virtual %s_interface %s_vif;\n"%(envintfname, envintfname))
 
                                pos = env_cfg_stg.find(' // Environment Interface Instantiation\n')
                                apos = pos + len(' // Environment Interface Instantiation\n')+len('µ //------------------------------------------\n')
                                env_cfg_stg = env_cfg_stg[:apos]+env_int_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_int_stg = ''
                        #----------------------------------------------------------------------
 


                        #----------------------------------------------------------------------
                        # Code for Environment Monitor Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    if "__c" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                        envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                    elif "__s" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                        envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                    else:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0])
                                        envmonname = (envmonname_arr[c+1].split(":")[0])

                                    #if "__c" in envmonname_arr[c+1] or "__s" in envmonname_arr[c+1] or mc_curr_env_set_c ==1:
                                    if "__c" in envmonname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envmonname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_mon_stg = env_mon_stg+("µ rand uvm_active_passive_enum %s_is_active[];\n"%(envmonname))
                                else:
                                    if "__c" in envmonname_arr[c+1] or mc_curr_env_set_c == 1:
                                        #envmonname = envname+"_"+envmonname_arr[c+1].replace("__c","")
                                        envmonname = envmonname_arr[c+1].replace("__c","")
                                    elif "__s" in envmonname_arr[c+1] or mc_curr_env_set_c == 1:
                                        #envmonname = envname+"_"+envmonname_arr[c+1].replace("__s","")
                                        envmonname = envmonname_arr[c+1].replace("__s","")
                                    else: 
                                        #envmonname = envname+"_"+envmonname_arr[c+1]
                                        envmonname = envmonname_arr[c+1]
                                    
                                    #if "__c" in envmonname_arr[c+1] or "__s" in envmonname_arr[c+1] or mc_curr_env_set_c ==1:
                                    if "__c" in envmonname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envmonname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_mon_stg = env_mon_stg+("µ rand uvm_active_passive_enum %s_is_active = UVM_ACTIVE;\n"%(envmonname))
        
                            pos = env_cfg_stg.find(' // Environment Monitor Knobs\n')
                            apos = pos + len(' // Environment Monitor Knobs\n')+len('µ //------------------------------------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_mon_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_mon_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Environment Monitor Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    if "__c" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                        envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                    elif "__s" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                        envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                    else:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0])
                                        envmonname = (envmonname_arr[c+1].split(":")[0])

                                    #if "__c" in envmonname_arr[c+1] or "__s" in envmonname_arr[c+1] or mc_curr_env_set_c ==1:
                                    if "__c" in envmonname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envmonname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_mon_stg = env_mon_stg+("µ rand int unsigned no_of_%s_mon;\n"%(envmonname))

                            pos = env_cfg_stg.find(' // Environment Monitor Knobs\n')
                            apos = pos + len(' // Environment Monitor Knobs\n')+len('µ //------------------------------------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_mon_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_mon_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Environment Monitor Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    if "__c" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                        envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                    elif "__s" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                        envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                    else:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0])
                                        envmonname = (envmonname_arr[c+1].split(":")[0])
                                    
                                    #if "__c" in envmonname_arr[c+1] or "__s" in envmonname_arr[c+1] or mc_curr_env_set_c ==1:
                                    if "__c" in envmonname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envmonname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_mon_stg = env_mon_stg+("µ extern virtual function void configure_%s_mon(int unsigned num_mons, uvm_active_passive_enum num_mons_e[]);\n"%(envmonname))

                            pos = env_cfg_stg.find(' // User Defined APIs\n')
                            apos = pos + len(' // User Defined APIs\n') + len('µ  // -----------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_mon_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_mon_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Environment Monitor Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    if "__c" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                        envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                    elif "__s" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                        envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                    else:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0])
                                        envmonname = (envmonname_arr[c+1].split(":")[0])
                                    
                                    #if "__c" in envmonname_arr[c+1] or "__s" in envmonname_arr[c+1] or mc_curr_env_set_c == 1:
                                    if "__c" in envmonname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envmonname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_mon_stg = env_mon_stg+("µ `uvm_field_int(no_of_%s_mon, UVM_ALL_ON)\n"%(envmonname))

                            pos = env_cfg_stg.find(' // Add field configurations\n')
                            apos = pos + len(' // Add field configurations\n') + len('µ  // -----------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_mon_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_mon_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Environment Monitor Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    if "__c" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                        envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                    elif "__s" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                        envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                    else:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0])
                                        envmonname = (envmonname_arr[c+1].split(":")[0])
                                    
                                    #if "__c" in envmonname_arr[c+1] or "__s" in envmonname_arr[c+1] or mc_curr_env_set_c == 1:
                                    if "__c" in envmonname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envmonname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_mon_stg = env_mon_stg\
                                        +('µ if (!uvm_config_db#(int)::get(uvm_root::get(), "*", "no_of_%s_mon", no_of_%s_mon))\n'%(envmonname, envmonname))\
                                        +("µ begin\n")\
                                        +('µ  `uvm_warning(get_type_name(), "no_of_%s_mon setting is not found in config_db! Setting default value of 1");\n'%(envmonname))\
                                        +("µ   no_of_%s_mon = 1;\n"%(envmonname))\
                                        +("µ end\n")

                            pos = env_cfg_stg.find(' // Get Environment Monitors Configuration\n')
                            apos = pos + len(' // Get Environment Monitors Configuration\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_mon_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_mon_stg = ''
                        #----------------------------------------------------------------------



                        #----------------------------------------------------------------------
                        # Code for Environment Monitor Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    if "__c" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                        envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                    elif "__s" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                        envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                    else:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0])
                                        envmonname = (envmonname_arr[c+1].split(":")[0])
                                    
                                    #if "__c" in envmonname_arr[c+1] or "__s" in envmonname_arr[c+1] or mc_curr_env_set_c == 1:
                                    if "__c" in envmonname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envmonname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_mon_stg = env_mon_stg\
                                        +("µ configure_%s_mon(no_of_%s_mon, '{%d{UVM_ACTIVE}});\n"%(envmonname, envmonname, int(envmonname_arr[c+1].split(":")[1])))

                            pos = env_cfg_stg.find(' // Configure Environment Monitors Configuration\n')
                            apos = pos + len(' // Configure Environment Monitors Configuration\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_mon_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_mon_stg = ''
                        #----------------------------------------------------------------------

                   

                        #----------------------------------------------------------------------
                        # Code for Environment Monitor Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    if "__c" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                        envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                    elif "__s" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                        envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                    else:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0])
                                        envmonname = (envmonname_arr[c+1].split(":")[0])
                                    
                                    #if "__c" in envmonname_arr[c+1] or "__s" in envmonname_arr[c+1] or mc_curr_env_set_c == 1:
                                    if "__c" in envmonname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envmonname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_mon_stg = env_mon_stg\
                                        +("µ \n")\
                                        +("µ //---------------------------------------------------------------\n")\
                                        +("µ // Function: configure_%s_mon\n"%envmonname)\
                                        +("µ // \n")\
                                        +("µ //---------------------------------------------------------------\n")\
                                        +("µ \n")\
                                        +("µ function void %s_environment_config::configure_%s_mon(int unsigned num_mons, uvm_active_passive_enum num_mons_e[]);\n"%(envname, envmonname))\
                                        +("µ  // Get The Number Of Monitors\n")\
                                        +("µ  no_of_%s_mon = num_mons;\n"%envmonname)\
                                        +("µ \n")\
                                        +("µ  // Constructing Number Of Monitors\n")\
                                        +("µ  %s_is_active = new[no_of_%s_mon];\n"%(envmonname, envmonname))\
                                        +("µ \n")\
                                        +("µ  // Configure the %s Monitor Components\n"%(envmonname))\
                                        +("µ  for (int i = 0; i < no_of_%s_mon; i++) begin\n"%(envmonname))\
                                        +("µ   %s_is_active[i] = num_mons_e[i];\n"%(envmonname))\
                                        +("µ  end\n")\
                                        +("µ endfunction: configure_%s_mon\n"%envmonname)

                            pos = env_cfg_stg.find('endfunction: new\n')
                            apos = pos + len('endfunction: new\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_mon_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_mon_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Environment Scoreboard Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][4] != '':
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                
                            for c in range (int(envscbname_arr[0])):
                                if len(envscbname_arr[c+1].split(":"))>1:
                                    if "__c" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                        envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                    elif "__s" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                        envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                    else:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0])
                                        envscbname = (envscbname_arr[c+1].split(":")[0])

                                    #if "__c" in envscbname_arr[c+1] or "__s" in envscbname_arr[c+1] or mc_curr_env_set_c ==1:
                                    if "__c" in envscbname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envscbname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_scb_stg = env_scb_stg+("µ rand uvm_active_passive_enum %s_is_active[];\n"%(envscbname))
                                else:
                                    if "__c" in envscbname_arr[c+1] or mc_curr_env_set_c == 1:
                                        #envscbname = envname+"_"+envscbname_arr[c+1].replace("__c","")
                                        envscbname = envscbname_arr[c+1].replace("__c","")
                                    elif "__s" in envscbname_arr[c+1] or mc_curr_env_set_c == 1:
                                        #envscbname = envname+"_"+envscbname_arr[c+1].replace("__s","")
                                        envscbname = envscbname_arr[c+1].replace("__s","")
                                    else: 
                                        #envscbname = envname+"_"+envscbname_arr[c+1]
                                        envscbname = envscbname_arr[c+1]
                                    
                                    #if "__c" in envscbname_arr[c+1] or "__s" in envscbname_arr[c+1] or mc_curr_env_set_c == 1:
                                    if "__c" in envscbname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envscbname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_scb_stg = env_scb_stg+("µ rand uvm_active_passive_enum %s_is_active = UVM_ACTIVE;\n"%(envscbname))

                            pos = env_cfg_stg.find(' // Environment Scoreboard Knobs\n')
                            apos = pos + len(' // Environment Scoreboard Knobs\n')+len('µ //------------------------------------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_scb_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_scb_stg = ''
                        #----------------------------------------------------------------------


                        
                        #----------------------------------------------------------------------
                        # Code for Environment Scoreboard Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][4] != '':
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                
                            for c in range (int(envscbname_arr[0])):
                                if len(envscbname_arr[c+1].split(":"))>1:
                                    if "__c" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                        envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                    elif "__s" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                        envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                    else:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0])
                                        envscbname = (envscbname_arr[c+1].split(":")[0])

                                    #if "__c" in envscbname_arr[c+1] or "__s" in envscbname_arr[c+1] or mc_curr_env_set_c == 1:
                                    if "__c" in envscbname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envscbname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_scb_stg = env_scb_stg+("µ rand int unsigned no_of_%s_scb;\n"%(envscbname))

                            pos = env_cfg_stg.find(' // Environment Scoreboard Knobs\n')
                            apos = pos + len(' // Environment Scoreboard Knobs\n')+len('µ //------------------------------------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_scb_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_scb_stg = ''
                        #----------------------------------------------------------------------

                   
                        
                        #----------------------------------------------------------------------
                        # Code for Environment Scoreboard Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][4] != '':
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                
                            for c in range (int(envscbname_arr[0])):
                                if len(envscbname_arr[c+1].split(":"))>1:
                                    if "__c" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                        envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                    elif "__s" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                        envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                    else:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0])
                                        envscbname = (envscbname_arr[c+1].split(":")[0])

                                    #if "__c" in envscbname_arr[c+1] or "__s" in envscbname_arr[c+1] or mc_curr_env_set_c == 1:
                                    if "__c" in envscbname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envscbname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_scb_stg = env_scb_stg+("µ extern virtual function void configure_%s_scb(int unsigned num_scbs, uvm_active_passive_enum num_scbs_e[]);\n"%(envscbname))

                            pos = env_cfg_stg.find(' // User Defined APIs\n')
                            apos = pos + len(' // User Defined APIs\n') + len('µ  // -----------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_scb_stg+env_cfg_stg[apos:]
                        
                        # Cleaning local vars
                        env_scb_stg = ''
                        #----------------------------------------------------------------------


                        
                        #----------------------------------------------------------------------
                        # Code for Environment Scoreboard Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][4] != '':
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                
                            for c in range (int(envscbname_arr[0])):
                                if len(envscbname_arr[c+1].split(":"))>1:
                                    if "__c" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                        envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                    elif "__s" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                        envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                    else:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0])
                                        envscbname = (envscbname_arr[c+1].split(":")[0])

                                    #if "__c" in envscbname_arr[c+1] or "__s" in envscbname_arr[c+1] or mc_curr_env_set_c == 1:
                                    if "__c" in envscbname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envscbname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_scb_stg = env_scb_stg\
                                        +('µ if (!uvm_config_db#(int)::get(uvm_root::get(), "*", "no_of_%s_scb", no_of_%s_scb))\n'%(envscbname, envscbname))\
                                        +("µ begin\n")\
                                        +('µ  `uvm_warning(get_type_name(), "no_of_%s_scb setting is not found in config_db! Setting default value of 1");\n'%(envscbname))\
                                        +("µ   no_of_%s_scb = 1;\n"%(envscbname))\
                                        +("µ end\n")

                            pos = env_cfg_stg.find(' // Get Environment Scoreboards Configuration\n')
                            apos = pos + len(' // Get Environment Scoreboards Configuration\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_scb_stg+env_cfg_stg[apos:]
                        
                        # Cleaning local vars
                        env_scb_stg = ''
                        #----------------------------------------------------------------------

            
                        
                        #----------------------------------------------------------------------
                        # Code for Environment Scoreboard Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][4] != '':
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                
                            for c in range (int(envscbname_arr[0])):
                                if len(envscbname_arr[c+1].split(":"))>1:
                                    if "__c" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                        envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                    elif "__s" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                        envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                    else:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0])
                                        envscbname = (envscbname_arr[c+1].split(":")[0])

                                    #if "__c" in envscbname_arr[c+1] or "__s" in envscbname_arr[c+1] or mc_curr_env_set_c == 1:
                                    if "__c" in envscbname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envscbname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_scb_stg = env_scb_stg+("µ `uvm_field_int(no_of_%s_scb, UVM_ALL_ON)\n"%(envscbname))

                            pos = env_cfg_stg.find(' // Add field configurations\n')
                            apos = pos + len(' // Add field configurations\n') + len('µ  // -----------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_scb_stg+env_cfg_stg[apos:]
                        
                        # Cleaning local vars
                        env_scb_stg = ''
                        #----------------------------------------------------------------------



                        #----------------------------------------------------------------------
                        # Code for Environment Scoreboard Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][4] != '':
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                
                            for c in range (int(envscbname_arr[0])):
                                if len(envscbname_arr[c+1].split(":"))>1:
                                    if "__c" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                        envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                    elif "__s" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                        envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                    else:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0])
                                        envscbname = (envscbname_arr[c+1].split(":")[0])

                                    #if "__c" in envscbname_arr[c+1] or "__s" in envscbname_arr[c+1] or mc_curr_env_set_c == 1:
                                    if "__c" in envscbname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envscbname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_scb_stg = env_scb_stg\
                                        +("µ configure_%s_scb(no_of_%s_scb, '{%d{UVM_ACTIVE}});\n"%(envscbname, envscbname, int(envscbname_arr[c+1].split(":")[1])))

                            pos = env_cfg_stg.find(' // Configure Environment Scoreboards Configuration\n')
                            apos = pos + len(' // Configure Environment Scoreboards Configuration\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_scb_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_scb_stg = ''
                        #----------------------------------------------------------------------



                        #----------------------------------------------------------------------
                        # Code for Environment Scoreboard Knobs inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][4] != '':
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                
                            for c in range (int(envscbname_arr[0])):
                                if len(envscbname_arr[c+1].split(":"))>1:
                                    if "__c" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                        envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                    elif "__s" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                        envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                    else:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0])
                                        envscbname = (envscbname_arr[c+1].split(":")[0])

                                    #if "__c" in envscbname_arr[c+1] or "__s" in envscbname_arr[c+1] or mc_curr_env_set_c == 1:
                                    if "__c" in envscbname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envscbname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_scb_stg = env_scb_stg\
                                        +("µ \n")\
                                        +("µ //---------------------------------------------------------------\n")\
                                        +("µ // Function: configure_%s_scb\n"%envscbname)\
                                        +("µ // \n")\
                                        +("µ //---------------------------------------------------------------\n")\
                                        +("µ \n")\
                                        +("µ function void %s_environment_config::configure_%s_scb(int unsigned num_scbs, uvm_active_passive_enum num_scbs_e[]);\n"%(envname, envscbname))\
                                        +("µ  // Get The Number Of Scoreboardss\n")\
                                        +("µ  no_of_%s_scb = num_scbs;\n"%envscbname)\
                                        +("µ \n")\
                                        +("µ  // Constructing Number Of Scoreboardss\n")\
                                        +("µ  %s_is_active = new[no_of_%s_scb];\n"%(envscbname, envscbname))\
                                        +("µ \n")\
                                        +("µ  // Configure the %s Scoreboards Components\n"%(envscbname))\
                                        +("µ  for (int i = 0; i < no_of_%s_scb; i++) begin\n"%(envscbname))\
                                        +("µ   %s_is_active[i] = num_scbs_e[i];\n"%(envscbname))\
                                        +("µ  end\n")\
                                        +("µ endfunction: configure_%s_scb\n"%envscbname) 

                            pos = env_cfg_stg.find('endfunction: new\n')
                            apos = pos + len('endfunction: new\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_scb_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_scb_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Environment Agent Variables inside env_config File
                        #----------------------------------------------------------------------
                        
                        if mc_curr_env_set_c ==1:
                            pos = env_cfg_stg.find(' // Environment Agent Variables\n')
                            apos = pos + len(' // Environment Agent Variables\n') + len('µ //------------------------------------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+'µ string agent_inst_name;\n'+env_cfg_stg[apos:]
                        
                        if mc_env_cfg_pool[a][2] != ['']:
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                if "__c" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__c","")
                                    envagtname = (envagtname_arr[e+1]).replace("__c","")
                                elif "__s" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__s","")
                                    envagtname = (envagtname_arr[e+1]).replace("__s","")
                                else:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1])
                                    envagtname = (envagtname_arr[e+1])

                                #if "__c" in envagtname_arr[e+1] or "__s" in envagtname_arr[e+1] or mc_curr_env_set_c ==1:
                                if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1 or ("__s" in envagtname_arr[e+1] and mc_curr_env_set_s == 0):
                                    if mc_env_cfg_pool[a][2][e+1][2]:
                                        env_agt_stg = env_agt_stg+("µ rand int unsigned no_of_%s_agt;\n"%(envagtname))
                           
                            pos = env_cfg_stg.find(' // Environment Agent Variables\n')
                            apos = pos + len(' // Environment Agent Variables\n') + len('µ //------------------------------------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_agt_stg+env_cfg_stg[apos:]
                            
                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------



                        #----------------------------------------------------------------------
                        # Code for Environment Agent Config Instantiation inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                if "__c" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__c","")
                                    envagtname = (envagtname_arr[e+1]).replace("__c","")
                                elif "__s" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__s","")
                                    envagtname = (envagtname_arr[e+1]).replace("__s","")
                                else:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1])
                                    envagtname = (envagtname_arr[e+1])
                            
                                #if "__c" in envagtname_arr[e+1] or "__s" in envagtname_arr[e+1] or mc_curr_env_set_c ==1:
                                if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1 or ("__s" in envagtname_arr[e+1] and mc_curr_env_set_s == 0):
                                    if mc_env_cfg_pool[a][2][e+1][2]:
                                        env_agt_stg = env_agt_stg+("µ %s_agent_config %s_agent_cfg[];\n"%(envagtname, envagtname))
                                    else:
                                        env_agt_stg = env_agt_stg+("µ %s_agent_config %s_agent_cfg;\n"%(envagtname, envagtname))

                            pos = env_cfg_stg.find(' // Environment Agent Config Instantiation\n')
                            apos = pos + len(' // Environment Agent Config Instantiation\n') + len(' |//------------------------------------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_agt_stg+env_cfg_stg[apos:]

                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Adding Variables Into UVM Factory Registration 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                if "__c" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__c","")
                                    envagtname = (envagtname_arr[e+1]).replace("__c","")
                                elif "__s" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__s","")
                                    envagtname = (envagtname_arr[e+1]).replace("__s","")
                                else:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1])
                                    envagtname = (envagtname_arr[e+1])
                            
                                #if "__c" in envagtname_arr[e+1] or "__s" in envagtname_arr[e+1] or mc_curr_env_set_c == 1:
                                if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1 or ("__s" in envagtname_arr[e+1] and mc_curr_env_set_s == 0):
                                    if mc_env_cfg_pool[a][2][e+1][2]:
                                        env_agt_stg = env_agt_stg+("µ `uvm_field_int(no_of_%s_agt, UVM_ALL_ON)\n"%(envagtname))

                            pos = env_cfg_stg.find(' // Add field configurations\n')
                            apos = pos + len(' // Add field configurations\n') + len('µ  // -----------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_agt_stg+env_cfg_stg[apos:]
                            
                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Adding User Defined API's 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                if "__c" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__c","")
                                    envagtname = (envagtname_arr[e+1]).replace("__c","")
                                elif "__s" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__s","")
                                    envagtname = (envagtname_arr[e+1]).replace("__s","")
                                else:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1])
                                    envagtname = (envagtname_arr[e+1])
                            
                                #if "__c" in envagtname_arr[e+1] or "__s" in envagtname_arr[e+1] or mc_curr_env_set_c == 1:
                                if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1 or ("__s" in envagtname_arr[e+1] and mc_curr_env_set_s == 0):
                                    if mc_env_cfg_pool[a][2][e+1][2]:
                                        env_agt_stg = env_agt_stg+("µ extern virtual function void configure_%s_agt(int unsigned num_agts);\n"%(envagtname))

                            pos = env_cfg_stg.find(' // User Defined APIs\n')
                            apos = pos + len(' // User Defined APIs\n') + len('µ  // -----------------\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_agt_stg+env_cfg_stg[apos:]
                            
                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------



                        #----------------------------------------------------------------------
                        # Code for Adding Agent Configuration in the new function 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                if "__c" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__c","")
                                    envagtname = (envagtname_arr[e+1]).replace("__c","")
                                elif "__s" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__s","")
                                    envagtname = (envagtname_arr[e+1]).replace("__s","")
                                else:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1])
                                    envagtname = (envagtname_arr[e+1])
                            
                                #if "__c" in envagtname_arr[e+1] or "__s" in envagtname_arr[e+1] or mc_curr_env_set_c == 1:
                                if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1 or ("__s" in envagtname_arr[e+1] and mc_curr_env_set_s == 0):
                                    if mc_env_cfg_pool[a][2][e+1][2]:
                                        env_agt_stg = env_agt_stg\
                                        +('µ if (!uvm_config_db#(int)::get(uvm_root::get(), "*", "no_of_%s_agt", no_of_%s_agt))\n'%(envagtname, envagtname))\
                                        +("µ begin\n")\
                                        +('µ  `uvm_warning(get_type_name(), "no_of_%s_agt setting is not found in config_db! Setting default value of 1");\n'%(envagtname))\
                                        +("µ   no_of_%s_agt = 1;\n"%(envagtname))\
                                        +("µ end\n")

                            pos = env_cfg_stg.find(' // Get Environment Agents Configuration\n')
                            apos = pos + len(' // Get Environment Agents Configuration\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_agt_stg+env_cfg_stg[apos:]
                            
                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------

                        
                        #----------------------------------------------------------------------
                        # Code for Adding Construct Children 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                if "__c" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__c","")
                                    envagtname = (envagtname_arr[e+1]).replace("__c","")
                                elif "__s" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__s","")
                                    envagtname = (envagtname_arr[e+1]).replace("__s","")
                                else:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1])
                                    envagtname = (envagtname_arr[e+1])
                            
                                #if "__c" in envagtname_arr[e+1] or "__s" in envagtname_arr[e+1] or mc_curr_env_set_c == 1:
                                if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1 or ("__s" in envagtname_arr[e+1] and mc_curr_env_set_s == 0):
                                    if not mc_env_cfg_pool[a][2][e+1][2]:
                                        env_agt_stg = env_agt_stg+('µ %s_agent_cfg = %s_agent_config::type_id::create("%s_agent_cfg");\n'%(envagtname, envagtname, envagtname))

                            pos = env_cfg_stg.find(' // Construct Environment Agents Configuration\n')
                            apos = pos + len(' // Construct Environment Agents Configuration\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_agt_stg+env_cfg_stg[apos:]
                            
                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------



                        #----------------------------------------------------------------------
                        # Code for Adding Agent Configuration Under Configure children 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                if "__c" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__c","")
                                    envagtname = (envagtname_arr[e+1]).replace("__c","")
                                elif "__s" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__s","")
                                    envagtname = (envagtname_arr[e+1]).replace("__s","")
                                else:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1])
                                    envagtname = (envagtname_arr[e+1])
                            
                                #if "__c" in envagtname_arr[e+1] or "__s" in envagtname_arr[e+1] or mc_curr_env_set_c == 1:
                                if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1 or ("__s" in envagtname_arr[e+1] and mc_curr_env_set_s == 0):
                                    if mc_env_cfg_pool[a][2][e+1][2]:
                                        env_agt_stg = env_agt_stg\
                                        +("µ configure_%s_agt(no_of_%s_agt);\n"%(envagtname, envagtname))

                            pos = env_cfg_stg.find(' // Configure Environment Agents Configuration\n')
                            apos = pos + len(' // Configure Environment Agents Configuration\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_agt_stg+env_cfg_stg[apos:]
                            
                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------

                        

                        #----------------------------------------------------------------------
                        # Code for Adding Configure Children 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                if "__c" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__c","")
                                    envagtname = (envagtname_arr[e+1]).replace("__c","")
                                elif "__s" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__s","")
                                    envagtname = (envagtname_arr[e+1]).replace("__s","")
                                else:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1])
                                    envagtname = (envagtname_arr[e+1])
                            
                                #if "__c" in envagtname_arr[e+1] or "__s" in envagtname_arr[e+1] or mc_curr_env_set_c == 1:
                                if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1 or ("__s" in envagtname_arr[e+1] and mc_curr_env_set_s == 0):
                                    if mc_env_cfg_pool[a][2][e+1][2]:
                                        env_agt_stg = env_agt_stg\
                                        +("µ \n")\
                                        +("µ //---------------------------------------------------------------\n")\
                                        +("µ // Function: configure_%s_agt\n"%envagtname)\
                                        +("µ // \n")\
                                        +("µ //---------------------------------------------------------------\n")\
                                        +("µ \n")\
                                        +("µ function void %s_environment_config::configure_%s_agt(int unsigned num_agts);\n"%(envname, envagtname))\
                                        +("µ  // Get The Number Of Agents\n")\
                                        +("µ  no_of_%s_agt = num_agts;\n"%envagtname)\
                                        +("µ \n")\
                                        +("µ  // Create The Required Number of %s Agent Configurations\n"%(envagtname))\
                                        +("µ  %s_agent_cfg = new[no_of_%s_agt];\n"%(envagtname, envagtname))\
                                        +("µ \n")\
                                        +("µ  // Configure the %s Agent Configurations\n"%(envagtname))\
                                        +("µ  for (int i = 0; i < no_of_%s_agt; i++) begin\n"%(envagtname))\
                                        +('µ   $sformat(agent_inst_name, "%s_agent_cfg[%s]", i);\n'%(envagtname, "%0d"))\
                                        +('µ   %s_agent_cfg[i] = %s_agent_config::type_id::create(agent_inst_name);\n'%(envagtname, envagtname))\
                                        +("µ  end\n")\
                                        +("µ endfunction: configure_%s_agt\n"%envagtname) 

                            pos = env_cfg_stg.find('endfunction: new\n')
                            apos = pos + len('endfunction: new\n')
                            env_cfg_stg = env_cfg_stg[:apos]+env_agt_stg+env_cfg_stg[apos:]
                            
                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Sub-Environment Configurations : Local Variables 
                        #----------------------------------------------------------------------
                        if mc_curr_env_set_c == 1:
                            pos = env_stg[env_stg.find(' // Environment Data Members\n'):env_stg.find(' // Environment Interface Instantiation')].find(' string env_inst_name;\n')
                            if pos == -1:
                                pos = env_cfg_stg.find(' // Environment Data Members\n')
                                apos = pos + len(' // Environment Data Members\n') + len('µ //------------------------------------------\n')
                                env_cfg_stg = env_cfg_stg[:apos]+'µ string env_inst_name;\n'+env_cfg_stg[apos:]


                        if mc_env_cfg_pool[a][1] != '':
                            #envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            subenvname_arr = str(mc_env_cfg_pool[a][1]).split(",")
                            log.debug("mc_create_phase : envname %s  subenvname_arr %s!\n"%(envname, subenvname_arr))

                            for f in range (int(subenvname_arr[0])):
                                subenvname_tmp = subenvname_arr[f+1]
                               
                                if len(subenvname_tmp.split(":"))>1:
                                    if "__c" in subenvname_tmp.split(":")[0]:
                                        subenvname = (subenvname_tmp.split(":")[0]).replace("__c","")
                                    elif "__s" in subenvname_tmp.split(":")[0]:
                                        subenvname = (subenvname_tmp.split(":")[0]).replace("__s","")
                                    else:
                                        subenvname = subenvname_tmp.split(":")[0]
                                else:
                                    if "__c" in subenvname_tmp:
                                        subenvname = subenvname_tmp.replace("__c","")
                                    elif "__s" in subenvname_tmp:
                                        subenvname = subenvname_tmp.replace("__s","")
                                    else:
                                        subenvname = subenvname_tmp


                                if len(subenvname_tmp.split(":"))>1:
                                    if "__c" in subenvname_arr[f+1] or mc_curr_env_set_c == 1 or ("__s" in subenvname_arr[f+1] and mc_curr_env_set_s == 0):
                                        #----------------------------------------------------------------------
                                        sub_env_stg = sub_env_stg+("µ rand int unsigned no_of_%s_env;\n"%(subenvname))

                                        pos = env_cfg_stg[env_cfg_stg.find('// Environment Data Members'):env_cfg_stg.find('// Environment Interface Instantiation')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                        if pos == -1:
                                            pos = env_cfg_stg.find(' // Environment Data Members\n')
                                            apos = pos + len(' // Environment Data Members\n')+len('µ //------------------------------------------\n')
                                            env_cfg_stg = env_cfg_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_cfg_stg[apos:]
                                        else:
                                            #pos = env_cfg_stg.find(' // Environment Data Members\n')
                                            #apos = pos + len(' // Environment Data Members\n') + len('µ //------------------------------------------\n') + len("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                            apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                            env_cfg_stg = env_cfg_stg[:apos]+sub_env_stg+env_cfg_stg[apos:]
    
                                        sub_env_stg = ''
                                        #----------------------------------------------------------------------

                                        
                                        #----------------------------------------------------------------------
                                        sub_env_stg = sub_env_stg+("µ `uvm_field_int(no_of_%s_env, UVM_ALL_ON)\n"%(subenvname))

                                        pos = env_cfg_stg[env_cfg_stg.find('// Add field configurations'):env_cfg_stg.find('`uvm_object_utils_end')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                        if pos == -1:
                                            pos = env_cfg_stg.find('// Add field configurations\n')
                                            apos = pos + len('// Add field configurations\n')+len('µ  // -----------------\n')
                                            env_cfg_stg = env_cfg_stg[:apos]+("µ `ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ `endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_cfg_stg[apos:]
                                        else:
                                            #pos = env_cfg_stg.find('// Add field configurations\n')
                                            #apos = pos + len('// Add field configurations\n') + len('µ  // -----------------\n') + len("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                            apos = pos + len(' `ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                            env_cfg_stg = env_cfg_stg[:apos]+sub_env_stg+env_cfg_stg[apos:]
    
                                        sub_env_stg = ''
                                        #----------------------------------------------------------------------

                                        
                                        #----------------------------------------------------------------------
                                        sub_env_stg = sub_env_stg+("µ extern virtual function void configure_%s_env(int unsigned num_envs);\n"%(subenvname))

                                        pos = env_cfg_stg[env_cfg_stg.find('// User Defined APIs'):env_cfg_stg.find('// UVM Factory Registration')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                        if pos == -1:
                                            pos = env_cfg_stg.find('// User Defined APIs\n')
                                            apos = pos + len('// User Defined APIs\n')+len('µ // -----------------\n')
                                            env_cfg_stg = env_cfg_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_cfg_stg[apos:]
                                        else:
                                            #pos = env_cfg_stg.find('// User Defined APIs\n')
                                            #apos = pos + len('// User Defined APIs\n') + len('µ // -----------------\n') + len("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                            apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                            env_cfg_stg = env_cfg_stg[:apos]+sub_env_stg+env_cfg_stg[apos:]
    
                                        sub_env_stg = ''
                                        #----------------------------------------------------------------------


                                        #----------------------------------------------------------------------
                                        sub_env_stg = sub_env_stg\
                                        +('µ if (!uvm_config_db#(int)::get(uvm_root::get(), "*", "no_of_%s_env", no_of_%s_env))\n'%(subenvname, subenvname))\
                                        +("µ begin\n")\
                                        +('µ  `uvm_warning(get_type_name(), "no_of_%s_env setting is not found in config_db! Setting default value of 1");\n'%(subenvname))\
                                        +("µ   no_of_%s_env = 1;\n"%(subenvname))\
                                        +("µ end\n")

                                        pos = env_cfg_stg[env_cfg_stg.find('// Get Sub-Environments Configuration'):env_cfg_stg.find('// Construct children')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                        if pos == -1:
                                            pos = env_cfg_stg.find('// Get Sub-Environments Configuration\n')
                                            apos = pos + len('// Get Sub-Environments Configuration\n')
                                            env_cfg_stg = env_cfg_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_cfg_stg[apos:]
                                        else:
                                            #pos = env_cfg_stg.find('// Get Sub-Environments Configuration\n')
                                            #apos = pos + len('// Get Sub-Environments Configuration\n') + len("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                            apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                            env_cfg_stg = env_cfg_stg[:apos]+sub_env_stg+env_cfg_stg[apos:]
    
                                        sub_env_stg = ''
                                        #----------------------------------------------------------------------

                                        
                                        #----------------------------------------------------------------------
                                        sub_env_stg = sub_env_stg+("µ construct_%s_env(no_of_%s_env);\n"%(subenvname, subenvname))

                                        pos = env_cfg_stg[env_cfg_stg.find('// Construct Sub-Environments Configuration'):env_cfg_stg.find('endfunction: new')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                        if pos == -1:
                                            pos = env_cfg_stg.find('// Construct Sub-Environments Configuration\n')
                                            apos = pos + len('// Construct Sub-Environments Configuration\n')
                                            env_cfg_stg = env_cfg_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_cfg_stg[apos:]
                                        else:
                                            #pos = env_cfg_stg.find('// Construct Sub-Environments Configuration\n')
                                            #apos = pos + len('// Construct Sub-Environments Configuration\n') + len("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                            apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                            env_cfg_stg = env_cfg_stg[:apos]+sub_env_stg+env_cfg_stg[apos:]
    
                                        sub_env_stg = ''
                                        #----------------------------------------------------------------------


                                        #----------------------------------------------------------------------
                                        sub_env_stg = sub_env_stg\
                                        +("µ //---------------------------------------------------------------\n")\
                                        +("µ // Function: construct_%s_env\n"%subenvname)\
                                        +("µ // \n")\
                                        +("µ //---------------------------------------------------------------\n")\
                                        +("µ \n")\
                                        +("µ function void %s_environment_config::construct_%s_env(int unsigned num_envs);\n"%(envname, subenvname))\
                                        +("µ  // Get The Number Of Sub-Envs\n")\
                                        +("µ  no_of_%s_env = num_envs;\n"%subenvname)\
                                        +("µ \n")\
                                        +("µ  // Create The Required Number of %s Sub-Env Configurations\n"%(subenvname))\
                                        +("µ  %s_environment_cfg = new[no_of_%s_env];\n"%(subenvname, subenvname))\
                                        +("µ \n")\
                                        +("µ  // Construct the %s Sub-Env Configurations\n"%(subenvname))\
                                        +("µ  for (int i = 0; i < no_of_%s_env; i++) begin\n"%(subenvname))\
                                        +('µ   $sformat(env_inst_name, "%s_environment_cfg[%s]", i);\n'%(subenvname, "%0d"))\
                                        +('µ   %s_environment_cfg[i] = %s_environment_config::type_id::create(env_inst_name);\n'%(subenvname, subenvname))\
                                        +("µ  end\n")\
                                        +("µ endfunction: construct_%s_env\n"%subenvname) 
                        
                                        pos = env_cfg_stg[env_cfg_stg.find('endfunction: new'):env_cfg_stg.find('`endif //INC_%s_ENVIRONMENT_CONFIG_SV'%(envname.upper()))].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                        if pos == -1:
                                            pos = env_cfg_stg.find('endfunction: new\n')
                                            apos = pos + len('endfunction: new\n')
                                            env_cfg_stg = env_cfg_stg[:apos]+('\n')+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n"%(subenvname.upper()))+env_cfg_stg[apos:]
                                        else:
                                            apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                            env_cfg_stg = env_cfg_stg[:apos]+sub_env_stg+env_cfg_stg[apos:]
    
                                        sub_env_stg = ''
                                        #----------------------------------------------------------------------
                                else:
                                    if "__c" in subenvname_arr[f+1] or mc_curr_env_set_c == 1 or ("__s" in subenvname_arr[f+1] and mc_curr_env_set_s == 0):
                                        #----------------------------------------------------------------------
                                        sub_env_stg = sub_env_stg+('µ %s_environment_cfg = %s_environment_config::type_id::create("%s_environment_cfg");\n'%(subenvname, subenvname, subenvname))

                                        pos = env_cfg_stg[env_cfg_stg.find('// Construct Sub-Environments Configuration\n'):env_cfg_stg.find('// Configure children')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                        if pos == -1:
                                            pos = env_cfg_stg.find('// Construct Sub-Environments Configuration\n')
                                            apos = pos + len('// Construct Sub-Environments Configuration\n')
                                            env_cfg_stg = env_cfg_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_cfg_stg[apos:]
                                        else:
                                            #pos = env_cfg_stg.find('// Construct Sub-Environments Configuration\n')
                                            #apos = pos + len('// Construct Sub-Environments Configuration\n') + len("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                            apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                            env_cfg_stg = env_cfg_stg[:apos]+sub_env_stg+env_cfg_stg[apos:]
    
                                        sub_env_stg = ''
                                        #----------------------------------------------------------------------

                        # Cleaning local vars
                        sub_env_stg = ''
                        #----------------------------------------------------------------------

                        
                        #----------------------------------------------------------------------
                        # Code for Adding Sub-Environment Configurations 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][1] != '':
                            subenvname_arr = str(mc_env_cfg_pool[a][1]).split(",")
                            log.debug("mc_create_phase : envname %s  subenvname_arr %s!\n"%(envname, subenvname_arr))

                            for f in range (int(subenvname_arr[0])):
                                subenvname_tmp = subenvname_arr[f+1]
                                
                                if len(subenvname_tmp.split(":"))>1:
                                    if "__c" in subenvname_tmp.split(":")[0]:
                                        subenvname = (subenvname_tmp.split(":")[0]).replace("__c","")
                                    elif "__s" in subenvname_tmp.split(":")[0]:
                                        subenvname = (subenvname_tmp.split(":")[0]).replace("__s","")
                                    else:
                                        subenvname = subenvname_tmp.split(":")[0]

                                    if "__c" in subenvname_arr[f+1] or mc_curr_env_set_c == 1 or ("__s" in subenvname_arr[f+1] and mc_curr_env_set_s == 0):
                                        sub_env_stg = sub_env_stg+("µ %s_environment_config %s_environment_cfg[];\n"%(subenvname, subenvname))
                                else:
                                    if "__c" in subenvname_tmp:
                                        subenvname = subenvname_tmp.replace("__c","")
                                    elif "__s" in subenvname_tmp:
                                        subenvname = subenvname_tmp.replace("__s","")
                                    else:
                                        subenvname = subenvname_tmp

                                    if "__c" in subenvname_arr[f+1] or mc_curr_env_set_c == 1 or ("__s" in subenvname_arr[f+1] and mc_curr_env_set_s == 0):
                                        sub_env_stg = sub_env_stg+("µ %s_environment_config %s_environment_cfg;\n"%(subenvname, subenvname))
                                    
                                pos = env_cfg_stg[env_cfg_stg.find('// Sub-Environment Config Instantiation'):env_cfg_stg.find('// Constraints')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                if pos == -1:
                                    pos = env_cfg_stg.find(' // Sub-Environment Config Instantiation\n')
                                    apos = pos + len(' // Sub-Environment Config Instantiation\n')+len('µ //------------------------------------------\n')
                                    env_cfg_stg = env_cfg_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_cfg_stg[apos:]
                                else:
                                    pos = env_cfg_stg.find(' // Sub-Environment Config Instantiation\n')
                                    apos = pos + len(' // Sub-Environment Config Instantiation\n') + len('µ //------------------------------------------\n') + len("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                    env_cfg_stg = env_cfg_stg[:apos]+sub_env_stg+env_cfg_stg[apos:]
    
                                # Cleaning the variable for each iteration
                                sub_env_stg = ''

                        # Cleaning local vars
                        sub_env_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Loading up the env config array content into file 
                        #----------------------------------------------------------------------
                        mc_env_cfg_input_file = open("%s/%s_environment_config.sv"%(envpath, envname), "w")
                        mc_env_cfg_array = env_cfg_stg.split('µ')
                        for lines in mc_env_cfg_array:
                            mc_env_cfg_input_file.write(lines)
                        mc_env_cfg_input_file.close()
                        #----------------------------------------------------------------------
                #----------------------------------------------------------------------
               

                #----------------------------------------------------------------------
                # Edit the Environment File  
                #----------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    # Opening the environment config file and edit
                    mc_env_array = []
                    
                    if not os.path.isfile('%s/%s_environment.sv'%(envpath, envname)):
                        log.error("%s/%s_environment.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envpath, envname))
                    else:
                        log.info("%s/%s_environment.sv file does exists! Progressing Further.\n"%(envpath, envname))
                        mc_env_input_file = open("%s/%s_environment.sv"%(envpath, envname),"r+")

                        env_stg = '' 
                        env_loc_stg = '' 
                        env_cfg_stg = ''
                        env_int_stg = '' 
                        env_mon_stg = '' 
                        env_scb_stg = '' 
                        env_agt_stg = '' 
                        id_temp = "%0d"
                        env_mon_scb_stg = ''

                        for lines in mc_env_input_file:
                            env_stg = env_stg+lines+'µ' 
                        log.debug("mc_create_phase: Value of env_stg %s"%(env_stg))

                
                        #----------------------------------------------------------------------
                        # Code for Environment Monitor Component Instantiation inside ENV 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    if "__c" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                        envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                    elif "__s" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                        envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                    else:    
                                        #envmonname = envname+"_"+envmonname_arr[c+1].split(":")[0]
                                        envmonname = envmonname_arr[c+1].split(":")[0]
                                    
                                    #if "__c" in envmonname_arr[c+1] or "__s" in envmonname_arr[c+1] or mc_curr_env_set_c == 1:
                                    if "__c" in envmonname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envmonname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_mon_stg = env_mon_stg+("µ %s_monitor %s_mon[];\n"%(envmonname, envmonname))
                                else:
                                    if "__c" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+envmonname_arr[c+1].replace("__c","")
                                        envmonname = envmonname_arr[c+1].replace("__c","")
                                    elif "__s" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+envmonname_arr[c+1].replace("__s","")
                                        envmonname = envmonname_arr[c+1].replace("__s","")
                                    else:    
                                        #envmonname = envname+"_"+envmonname_arr[c+1]
                                        envmonname = envmonname_arr[c+1]
                                    
                                    #if "__c" in envmonname_arr[c+1] or "__s" in envmonname_arr[c+1] or mc_curr_env_set_c == 1:
                                    if "__c" in envmonname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envmonname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_mon_stg = env_mon_stg+("µ %s_monitor %s_mon;\n"%(envmonname, envmonname))
        
                            pos = env_stg.find(' // Environment Monitors Instantiation\n')
                            apos = pos + len(' // Environment Monitors Instantiation\n')
                            env_stg = env_stg[:apos]+env_mon_stg+env_stg[apos:]

                        # Cleaning local vars
                        env_mon_stg = ''
                        #----------------------------------------------------------------------

                        
                        #----------------------------------------------------------------------
                        # Code for Environment Scoreboard Component Instantiation Inside ENV 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][4] != '':
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                
                            for c in range (int(envscbname_arr[0])):
                                log.debug("mc_create_phase : c %d, envscbname_arr[%d] %s!\n"%(c, c, envscbname_arr[c]))
                                if len(envscbname_arr[c+1].split(":"))>1:
                                    if "__c" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                        envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                    elif "__s" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                        envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                    else:    
                                        #envscbname = envname+"_"+envscbname_arr[c+1].split(":")[0]
                                        envscbname = envscbname_arr[c+1].split(":")[0]
                                    
                                    #if "__c" in envscbname_arr[c+1] or "__s" in envscbname_arr[c+1] or mc_curr_env_set_c == 1:
                                    if "__c" in envscbname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envscbname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_scb_stg = env_scb_stg+("µ %s_scoreboard %s_scb[];\n"%(envscbname, envscbname))
                                else:
                                    if "__c" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+envscbname_arr[c+1].replace("__c","")
                                        envscbname = envscbname_arr[c+1].replace("__c","")
                                    elif "__s" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+envscbname_arr[c+1].replace("__s","")
                                        envscbname = envscbname_arr[c+1].replace("__s","")
                                    else:    
                                        #envscbname = envname+"_"+envscbname_arr[c+1]
                                        envscbname = envscbname_arr[c+1]
                                    
                                    #if "__c" in envscbname_arr[c+1] or "__s" in envscbname_arr[c+1] or mc_curr_env_set_c == 1:
                                    if "__c" in envscbname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envscbname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_scb_stg = env_scb_stg+("µ %s_scoreboard %s_scb;\n"%(envscbname, envscbname))
        
                            pos = env_stg.find(' // Environment Scoreboards Instantiation\n')
                            apos = pos + len(' // Environment Scoreboards Instantiation\n')
                            env_stg = env_stg[:apos]+env_scb_stg+env_stg[apos:]

                        # Cleaning local vars
                        env_scb_stg = ''
                        #----------------------------------------------------------------------

                  
                        #----------------------------------------------------------------------
                        # Code for Environment Agent Config Instantiation inside env_config File
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                if "__c" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__c","")
                                    envagtname = (envagtname_arr[e+1]).replace("__c","")
                                elif "__s" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__s","")
                                    envagtname = (envagtname_arr[e+1]).replace("__s","")
                                else: 
                                    #envagtname = envname+"_"+envagtname_arr[e+1]
                                    envagtname = envagtname_arr[e+1]

                                #if "__c" in envagtname_arr[e+1] or "__s" in envagtname_arr[e+1] or mc_curr_env_set_c ==1:
                                if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1 or ("__s" in envagtname_arr[e+1] and mc_curr_env_set_s == 0):
                                    if mc_env_cfg_pool[a][2][e+1][2]:
                                        env_agt_stg = env_agt_stg+("µ %s_agent %s_agt[];\n"%(envagtname, envagtname))
                                    else:
                                        env_agt_stg = env_agt_stg+("µ %s_agent %s_agt;\n"%(envagtname, envagtname))


                            pos = env_stg.find(' // Environment Agents Instantiation\n')
                            apos = pos + len(' // Environment Agents Instantiation\n')
                            env_stg = env_stg[:apos]+env_agt_stg+env_stg[apos:]

                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Adding Sub-Environments Instantiation  
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][1] != '':
                            # envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            subenvname_arr = str(mc_env_cfg_pool[a][1]).split(",")
                            log.debug("mc_create_phase : envname %s  subenvname_arr %s!\n"%(envname, subenvname_arr))

                            for f in range (int(subenvname_arr[0])):
                                subenvname_tmp = subenvname_arr[f+1]
                              
                                if len(subenvname_tmp.split(":"))>1:
                                    if "__c" in subenvname_tmp.split(":")[0]:
                                        subenvname = (subenvname_tmp.split(":")[0]).replace("__c","")
                                    elif "__s" in subenvname_tmp.split(":")[0]:
                                        subenvname = (subenvname_tmp.split(":")[0]).replace("__s","")
                                    else:
                                        subenvname = subenvname_tmp.split(":")[0]
                                else:
                                    if "__c" in subenvname_tmp:
                                        subenvname = subenvname_tmp.replace("__c","")
                                    elif "__s" in subenvname_tmp:
                                        subenvname = subenvname_tmp.replace("__s","")
                                    else:
                                        subenvname = subenvname_tmp

                                if len(subenvname_tmp.split(":"))>1:
                                    if "__c" in subenvname_arr[f+1] or mc_curr_env_set_c == 1 or ("__s" in subenvname_arr[f+1] and mc_curr_env_set_s == 0):
                                        #----------------------------------------------------------------------
                                        sub_env_stg = sub_env_stg+("µ %s_environment %s_env[];\n"%(subenvname, subenvname))
                                        
                                        pos = env_stg[env_stg.find('// Sub-Environments Instantiation\n'):env_stg.find('// Object Instantiation')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                        if pos == -1:
                                            pos = env_stg.find('// Sub-Environments Instantiation\n')
                                            apos = pos + len('// Sub-Environments Instantiation\n')
                                            env_stg = env_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_stg[apos:]
                                        else:
                                            apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                            env_stg = env_stg[:apos]+sub_env_stg+env_stg[apos:]

                                        # Cleaning local variables 
                                        sub_env_stg = ''
                                        #----------------------------------------------------------------------
                                
                                
                                        #----------------------------------------------------------------------
                                        sub_env_stg = sub_env_stg\
                                        +('µ %s_env = new[%s_environment_cfg.no_of_%s_env];\n'%(subenvname, envname, subenvname))\
                                        +('µ for (int i = 0; i < %s_environment_cfg.no_of_%s_env; i++) begin\n'%(envname, subenvname))\
                                        +('µ  $sformat(env_inst_name, "%s_env[%s]", i);\n'%(subenvname, str(id_temp)))\
                                        +('µ  %s_env[i] = %s_environment::type_id::create(env_inst_name, this);\n'%(subenvname, subenvname))\
                                        +('µ  uvm_config_db#(int)::set(this, {env_inst_name, "*"}, "%s_env_id", i);\n'%(subenvname))\
                                        +('µ end\n') 
                                        
                                        pos = env_stg[env_stg.find('// Construct Sub-Environments\n'):env_stg.find('// Configure children')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                        if pos == -1:
                                            pos = env_stg.find('// Construct Sub-Environments\n')
                                            apos = pos + len('// Construct Sub-Environments\n')
                                            env_stg = env_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_stg[apos:]
                                        else:
                                            apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                            env_stg = env_stg[:apos]+sub_env_stg+env_stg[apos:]

                                        # Cleaning local variables 
                                        sub_env_stg = ''
                                        #----------------------------------------------------------------------    
                                
                                        
                                        #----------------------------------------------------------------------
                                        sub_env_stg = sub_env_stg\
                                        +("µ for (int i = 0; i < %s_environment_cfg.no_of_%s_env; i++) begin\n"%(envname, subenvname))\
                                        +('µ  $sformat(env_inst_name, "*%s_env[%s]*", i);\n'%(subenvname, str(id_temp)))\
                                        +('µ  uvm_config_db#(%s_environment_config)::set(this, env_inst_name, "%s_environment_config", %s_environment_cfg.%s_environment_cfg[i]);\n'%(subenvname, subenvname, envname, subenvname))\
                                        +("µ end\n")

                                        pos = env_stg[env_stg.find('// Configure Sub-Environments\n'):env_stg.find('endfunction: build_phase')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                        if pos == -1:
                                            pos = env_stg.find('// Configure Sub-Environments\n')
                                            apos = pos + len('// Configure Sub-Environments\n')
                                            env_stg = env_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_stg[apos:]
                                        else:
                                            apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                            env_stg = env_stg[:apos]+sub_env_stg+env_stg[apos:]

                                        # Cleaning local variables 
                                        sub_env_stg = ''
                                        #----------------------------------------------------------------------
                                else:
                                    if "__c" in subenvname_arr[f+1] or mc_curr_env_set_c == 1 or ("__s" in subenvname_arr[f+1] and mc_curr_env_set_s == 0):
                                        #----------------------------------------------------------------------
                                        sub_env_stg = sub_env_stg+("µ %s_environment %s_env;\n"%(subenvname, subenvname))
                                        
                                        pos = env_stg[env_stg.find('// Sub-Environments Instantiation\n'):env_stg.find('// Object Instantiation')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                        if pos == -1:
                                            pos = env_stg.find('// Sub-Environments Instantiation\n')
                                            apos = pos + len('// Sub-Environments Instantiation\n')
                                            env_stg = env_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_stg[apos:]
                                        else:
                                            apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                            env_stg = env_stg[:apos]+sub_env_stg+env_stg[apos:]

                                        # Cleaning local variables 
                                        sub_env_stg = ''
                                        #----------------------------------------------------------------------
                                        
                                        #----------------------------------------------------------------------
                                        sub_env_stg = sub_env_stg\
                                        +('µ %s_env = %s_environment::type_id::create("%s_env",this);\n'%(subenvname, subenvname, subenvname))
                                        
                                        pos = env_stg[env_stg.find('// Construct Sub-Environments\n'):env_stg.find('// Configure children')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                        if pos == -1:
                                            pos = env_stg.find('// Construct Sub-Environments\n')
                                            apos = pos + len('// Construct Sub-Environments\n')
                                            env_stg = env_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_stg[apos:]
                                        else:
                                            apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                            env_stg = env_stg[:apos]+sub_env_stg+env_stg[apos:]

                                        # Cleaning local variables 
                                        sub_env_stg = ''
                                        #----------------------------------------------------------------------

                
                                        #----------------------------------------------------------------------
                                        sub_env_stg = sub_env_stg\
                                        +('µ uvm_config_db#(%s_environment_config)::set(this, "*%s_env*", "%s_environment_config", %s_environment_cfg.%s_environment_cfg);\n'%(subenvname, subenvname, subenvname, envname, subenvname))
                                        
                                        pos = env_stg[env_stg.find('// Configure Sub-Environments\n'):env_stg.find('endfunction: build_phase')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                        if pos == -1:
                                            pos = env_stg.find('// Configure Sub-Environments\n')
                                            apos = pos + len('// Configure Sub-Environments\n')
                                            env_stg = env_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+sub_env_stg+("µ`endif // DISABLE_%s_ENV\n\n"%(subenvname.upper()))+env_stg[apos:]
                                        else:
                                            apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper())) 
                                            env_stg = env_stg[:apos]+sub_env_stg+env_stg[apos:]

                                        # Cleaning local variables 
                                        sub_env_stg = ''
                                        #----------------------------------------------------------------------


                        # Cleaning local vars
                        sub_env_stg = ''
                        #----------------------------------------------------------------------
                   

                        #   #----------------------------------------------------------------------
                        #   # Code for Adding Sub-Environments Instantiation  
                        #   #----------------------------------------------------------------------
                        #   if mc_env_cfg_pool[a][1] != '':
                        #       # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                        #       subenvname_arr = str(mc_env_cfg_pool[a][1]).split(",")
                        #       log.debug("mc_create_phase : envname %s  subenvname_arr %s!\n"%(envname, subenvname_arr))

                        #       for f in range (int(subenvname_arr[0])):
                        #           if "__c" in subenvname_arr[f+1]:
                        #               #subenvname = envname+"_"+subenvname_arr[f+1].replace("__c","")
                        #               subenvname = subenvname_arr[f+1].replace("__c","")
                        #           elif "__s" in subenvname_arr[f+1]:
                        #               #subenvname = envname+"_"+subenvname_arr[f+1].replace("__s","")
                        #               subenvname = subenvname_arr[f+1].replace("__s","")
                        #           else:
                        #               #subenvname = envname+"_"+subenvname_arr[f+1]
                        #               subenvname = subenvname_arr[f+1]
                        #           
                        #           if "__c" in subenvname_arr[f+1] or mc_curr_env_set_c == 1 or ("__s" in subenvname_arr[f+1] and mc_curr_env_set_s == 0):
                        #               sub_env_stg = sub_env_stg+("µ %s_environment %s_env;\n"%(subenvname, subenvname))

                        #       pos = env_stg.find(' // Sub-Environments Instantiation\n')
                        #       apos = pos + len(' // Sub-Environments Instantiation\n')
                        #       env_stg = env_stg[:apos]+sub_env_stg+env_stg[apos:]

                        #   # Cleaning local vars
                        #   sub_env_stg = ''
                        #   #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Instantiation Local Variables 
                        #----------------------------------------------------------------------
                        if mc_curr_env_set_c == 1:
                            pos = env_stg[env_stg.find(' // Data Members\n'):env_stg.find(' // Constraints')].find(' string agent_inst_name, mon_inst_name, scb_inst_name;\n')
                            if pos == -1:
                                pos = env_stg.find(' // Data Members\n')
                                apos = pos + len(' // Data Members\n') + len('µ //------------------------------------------\n')
                                env_loc_stg = env_loc_stg+'µ string agent_inst_name, mon_inst_name, scb_inst_name;\n'
                                env_stg = env_stg[:apos]+env_loc_stg+env_stg[apos:]
                        
                        # Cleaning local vars
                        env_loc_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Environment Config Instantiation
                        #----------------------------------------------------------------------
                        if mc_curr_env_set_c == 1:
                            pos = env_stg[env_stg.find(' // Environment Configuration Object Instantiation\n'):env_stg.find(' // Data Members\n')].find(' %s_environment_config   %s_environment_cfg;\n'%(envname, envname))
                            if pos == -1:                    
                                pos = env_stg.find(' // Environment Configuration Object Instantiation\n')
                                apos = pos + len(' // Environment Configuration Object Instantiation\n')
                                env_cfg_stg = ("µ %s_environment_config   %s_environment_cfg;\n"%(envname, envname))
                                env_stg = env_stg[:apos]+env_cfg_stg+env_stg[apos:]
                        
                        # Cleaning local vars
                        env_cfg_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Getting Environment Config Instantiation
                        #----------------------------------------------------------------------
                        if mc_curr_env_set_c == 1:
                            pos = env_stg[env_stg.find(' // Get Environment Configuration\n'):env_stg.find(' // Get Environment Monitors Configuration\n')].find(' if (!uvm_config_db#(%s_environment_config)::get(this, "*", "%s_environment_config", %s_environment_cfg))\n'%(envname, envname, envname))
                            if pos == -1:
                                env_loc_stg = env_loc_stg\
                                +('µ if (!uvm_config_db#(%s_environment_config)::get(this, "*", "%s_environment_config", %s_environment_cfg))\n'%(envname, envname, envname))\
                                +('µ begin\n')\
                                +('µ  `uvm_error(get_type_name(), "%s_environment_config object is not found in config_db!");\n'%(envname))\
                                +('µ end\n')\
                                +('µ else\n')\
                                +('µ begin\n')\
                                +('µ  %s_environment_cfg.print();\n'%(envname))\
                                +('µ end\n')\
                                    
                                pos = env_stg.find(' // Get Environment Configuration\n')
                                apos = pos + len(' // Get Environment Configuration\n')
                                env_stg = env_stg[:apos]+env_loc_stg+env_stg[apos:]
 
                        # Cleaning local vars
                        env_loc_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Getting All Interface and Storing in respective configs : 12132020SUN 
                        #----------------------------------------------------------------------
                        # Driver Interface Details
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            # envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                mc_curr_env_agt_set_c = 0
                                mc_curr_env_agt_set_s = 0

                                if "__c" in envagtname_arr[e+1]:
                                    envagtname = (envagtname_arr[e+1]).replace("__c","")
                                elif "__s" in envagtname_arr[e+1]:
                                    envagtname = (envagtname_arr[e+1]).replace("__s","")
                                else: 
                                    envagtname = envagtname_arr[e+1]

                                # Condition to check/set the global variable but WATCHOUT, this is also set below under the agent section
                                if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1:
                                    mc_curr_env_agt_set_c = 1
                                elif "__s" in envagtname_arr[e+1] or mc_curr_env_set_s == 1:
                                    mc_curr_env_agt_set_s = 1

                                if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1 or ("__s" in envagtname_arr[e+1] and mc_curr_env_set_s == 0):
                                    if mc_env_cfg_pool[a][2][e+1][2] and mc_env_cfg_pool[a][2][e+1][3]:
                                        env_agt_stg = env_agt_stg\
                                        +('µ for (int i = 0; i < %s_environment_cfg.no_of_%s_agt; i++) begin\n'%(envname, envagtname))

                                    if mc_env_cfg_pool[a][2][e+1][3] != '':
                                        envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                        log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s!\n"%(envname, envagtdrvname_arr))
                                        for e1 in range (int(envagtdrvname_arr[0])):
                                            if (len(envagtdrvname_arr) == 1 and "__c" in envagtdrvname_arr) or (len(envagtdrvname_arr) == 1 and "__s" in envagtdrvname_arr) or (len(envagtdrvname_arr) == 1 and int(envagtdrvname_arr[0]) == 1):
                                                envagtdrvname = envagtname
                                            
                                                if "__c" in envagtdrvname_arr or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr and mc_curr_env_agt_set_s == 0): 
                                                   if mc_env_cfg_pool[a][2][e+1][2]:
                                                       env_agt_stg = env_agt_stg\
                                                       +('µ  if (!uvm_config_db#(virtual %s_interface)::get(.cntxt(this), .inst_name ("*"), .field_name($psprintf("%s_vif_%s",i)), .value(%s_environment_cfg.%s_agent_cfg[i].%s_vif))) `uvm_error(get_type_name(), "Unable to find the %s_interface!")\n'%(envagtdrvname, envagtdrvname, "%0d", envname, envagtname, envagtdrvname, envagtdrvname))
                                                   else:
                                                       env_agt_stg = env_agt_stg\
                                                       +('µ if (!uvm_config_db#(virtual %s_interface)::get(.cntxt(this), .inst_name ("*"), .field_name($psprintf("%s_vif")), .value(%s_environment_cfg.%s_agent_cfg.%s_vif))) `uvm_error(get_type_name(), "Unable to find the %s_interface!")\n'%(envagtdrvname, envagtdrvname, envname, envagtname, envagtdrvname, envagtdrvname))
                                            else:
                                                if "__c" in envagtdrvname_arr[e1+1] or "__s" in envagtdrvname_arr[e1+1]: 
                                                    envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1].replace("__c","").replace("__s","")
                                                else: # WATCHOUT : 010720|TUE    
                                                    envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                                                
                                                if "__c" in envagtdrvname_arr[e1+1] or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr[e1+1] and mc_curr_env_agt_set_s == 0):
                                                    if mc_env_cfg_pool[a][2][e+1][2]:
                                                        env_agt_stg = env_agt_stg\
                                                        +('µ  if (!uvm_config_db#(virtual %s_interface)::get(.cntxt(this), .inst_name ("*"), .field_name($psprintf("%s_vif_%s",i)), .value(%s_environment_cfg.%s_agent_cfg[i].%s_vif))) `uvm_error(get_type_name(), "Unable to find the %s_interface!")\n'%(envagtdrvname, envagtdrvname, "%0d", envname, envagtname, envagtdrvname, envagtdrvname))
                                                    else:
                                                        env_agt_stg = env_agt_stg\
                                                        +('µ if (!uvm_config_db#(virtual %s_interface)::get(.cntxt(this), .inst_name ("*"), .field_name($psprintf("%s_vif")), .value(%s_environment_cfg.%s_agent_cfg.%s_vif))) `uvm_error(get_type_name(), "Unable to find the %s_interface!")\n'%(envagtdrvname, envagtdrvname, envname, envagtname, envagtdrvname, envagtdrvname))

                                    if mc_env_cfg_pool[a][2][e+1][2] and mc_env_cfg_pool[a][2][e+1][3]:
                                        if e == (int(envagtname_arr[0])-1):
                                            env_agt_stg = env_agt_stg\
                                            +('µ end\n')
                                        else: 
                                            env_agt_stg = env_agt_stg\
                                            +('µ end\n\n')

                                    pos = env_stg.find('// Get Interface Configuration\n')
                                    apos = pos + len('// Get Interface Configuration\n')
                                    env_stg = env_stg[:apos]+env_agt_stg+env_stg[apos:]

                                    # Cleaning local vars
                                    env_agt_stg = ''
                                else:
                                    if mc_env_cfg_pool[a][2][e+1][3] != '':
                                        envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                        log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s!\n"%(envname, envagtdrvname_arr))
                                        for e1 in range (int(envagtdrvname_arr[0])):
                                            if (len(envagtdrvname_arr) == 1 and "__c" in envagtdrvname_arr) or (len(envagtdrvname_arr) == 1 and "__s" in envagtdrvname_arr) or (len(envagtdrvname_arr) == 1 and int(envagtdrvname_arr[0]) == 1):
                                                envagtdrvname = envagtname 
                                                
                                                if "__c" in envagtdrvname_arr or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr and mc_curr_env_agt_set_s == 0): 
                                                    if mc_env_cfg_pool[a][2][e+1][2]:
                                                        env_agt_stg = env_agt_stg\
                                                        +('µ  if (!uvm_config_db#(virtual %s_interface)::get(.cntxt(this), .inst_name ("*"), .field_name($psprintf("%s_vif_%s",i)), .value(%s_environment_cfg.%s_agent_cfg[i].%s_vif))) `uvm_error(get_type_name(), "Unable to find the %s_interface!")\n'%(envagtdrvname, envagtdrvname, "%0d", envname, envagtname, envagtdrvname, envagtdrvname))
                                                    else:
                                                        env_agt_stg = env_agt_stg\
                                                        +('µ if (!uvm_config_db#(virtual %s_interface)::get(.cntxt(this), .inst_name ("*"), .field_name($psprintf("%s_vif")), .value(%s_environment_cfg.%s_agent_cfg.%s_vif))) `uvm_error(get_type_name(), "Unable to find the %s_interface!")\n'%(envagtdrvname, envagtdrvname, envname, envagtname, envagtdrvname, envagtdrvname))
                                            else:
                                                if "__c" in envagtdrvname_arr[e1+1] or "__s" in envagtdrvname_arr[e1+1]: 
                                                    envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1].replace("__c","").replace("__s","")
                                                else: # WATCHOUT : 010720|TUE    
                                                    envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                                            
                                                if "__c" in envagtdrvname_arr[e1+1] or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr[e1+1] and mc_curr_env_agt_set_s == 0): 
                                                    if mc_env_cfg_pool[a][2][e+1][2]:
                                                        env_agt_stg = env_agt_stg\
                                                        +('µ  if (!uvm_config_db#(virtual %s_interface)::get(.cntxt(this), .inst_name ("*"), .field_name($psprintf("%s_vif_%s",i)), .value(%s_environment_cfg.%s_agent_cfg[i].%s_vif))) `uvm_error(get_type_name(), "Unable to find the %s_interface!")\n'%(envagtdrvname, envagtdrvname, "%0d", envname, envagtname, envagtdrvname, envagtdrvname))
                                                    else:
                                                        env_agt_stg = env_agt_stg\
                                                        +('µ if (!uvm_config_db#(virtual %s_interface)::get(.cntxt(this), .inst_name ("*"), .field_name($psprintf("%s_vif")), .value(%s_environment_cfg.%s_agent_cfg.%s_vif))) `uvm_error(get_type_name(), "Unable to find the %s_interface!")\n'%(envagtdrvname, envagtdrvname, envname, envagtname, envagtdrvname, envagtdrvname))
                                        
                                        if mc_env_cfg_pool[a][2][e+1][2]:
                                            pos = env_stg.find("for (int i = 0; i < %s_environment_cfg.no_of_%s_agt; i++) begin\n"%(envname, envagtname))
                                            apos = pos + len("for (int i = 0; i < %s_environment_cfg.no_of_%s_agt; i++) begin\n"%(envname, envagtname))
                                            env_stg = env_stg[:apos]+env_agt_stg+env_stg[apos:]
                                        else: 
                                            pos = env_stg.find('// Get Interface Configuration\n')
                                            apos = pos + len('// Get Interface Configuration\n')
                                            env_stg = env_stg[:apos]+env_agt_stg+env_stg[apos:]
                                            
                                        # Cleaning local vars
                                        env_agt_stg = ''
                                               
                                # Cleaning The Variables FOr Each Agent Loop   
                                if mc_curr_env_agt_set_c:
                                    mc_curr_env_agt_set_c = 0
                                if mc_curr_env_agt_set_s:
                                    mc_curr_env_agt_set_s = 0

                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------
                        # Environment Interface Details  
                        #----------------------------------------------------------------------
                        if (mc_env_cfg_pool[a][0]):
                            if mc_env_cfg_pool[a][7] != []:
                                if mc_env_cfg_pool[a][7][0] != '':
                                    envintfname_arr = str(mc_env_cfg_pool[a][7][0]).split(",")
                                    log.debug("mc_create_phase : envname %s  envintfname_arr %s!\n"%(envname, envintfname_arr))
                                    
                                    for b in range (int(envintfname_arr[0])):
                                        if (len(envintfname_arr) == 1 and "__c" in envintfname_arr[0]) or (len(envintfname_arr) == 1 and "__s" in envintfname_arr[0]) or (len(envintfname_arr) == 1 and int(envintfname_arr[0]) == 1):
                                            envintfname = envname
                                            
                                            if "__c" in envintfname_arr or mc_curr_env_set_c == 1:
                                                env_int_stg = env_int_stg\
                                                    +('µ if (!uvm_config_db#(virtual %s_interface)::get(.cntxt(this), .inst_name ("*"), .field_name($psprintf("%s_vif")), .value(%s_environment_cfg.%s_vif))) `uvm_error(get_type_name(), "Unable to find the %s_interface!")\n'%(envintfname, envintfname, envname, envintfname, envintfname))
                                        else:
                                            if "__c" in envintfname_arr[b+1]:
                                                envintfname = envintfname_arr[b+1].replace("__c","")
                                            elif "__s" in envintfname_arr[b+1]:
                                                envintfname = envintfname_arr[b+1].replace("__s","")
                                            else:
                                                envintfname = envintfname_arr[b+1]
                            
                                            if "__c" in envintfname_arr[b+1] or mc_curr_env_set_c == 1:
                                                env_int_stg = env_int_stg\
                                                    +('µ if (!uvm_config_db#(virtual %s_interface)::get(.cntxt(this), .inst_name ("*"), .field_name($psprintf("%s_vif")), .value(%s_environment_cfg.%s_vif))) `uvm_error(get_type_name(), "Unable to find the %s_interface!")\n'%(envintfname, envintfname, envname, envintfname, envintfname))

                                    if "__c" in str(envintfname_arr) or mc_curr_env_set_c == 1:
                                        pos = env_stg.find('// Get Interface Configuration\n')
                                        apos = pos + len('// Get Interface Configuration\n')
                                        env_stg = env_stg[:apos]+env_int_stg+env_stg[apos:]
                        
                        # Cleaning local vars
                        env_int_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Environment Monitor Component Construct inside ENV 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    if "__c" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                        envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                    elif "__s" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                        envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                    else:
                                        #envmonname = envname+"_"+envmonname_arr[c+1].split(":")[0]
                                        envmonname = envmonname_arr[c+1].split(":")[0]
                                   
                                    #if "__c" in envmonname_arr[c+1] or "__s" in envmonname_arr[c+1] or mc_curr_env_set_c == 1:
                                    if "__c" in envmonname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envmonname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_mon_stg = env_mon_stg\
                                        +('µ %s_mon = new[%s_environment_cfg.no_of_%s_mon];\n'%(envmonname, envname, envmonname))\
                                        +('µ for (int i = 0; i < %s_environment_cfg.no_of_%s_mon; i++) begin\n'%(envname, envmonname))\
                                        +('µ  $sformat(mon_inst_name, "%s_mon[%s]", i);\n'%(envmonname, str(id_temp)))\
                                        +('µ  if (%s_environment_cfg.%s_is_active[i]) %s_mon[i] = %s_monitor::type_id::create(mon_inst_name, this);\n'%(envname, envmonname, envmonname, envmonname))\
                                        +('µ  uvm_config_db#(int)::set(this, {mon_inst_name, "*"}, "%s_mon_id", i);\n'%(envmonname))\
                                        +('µ end\n\n')
                                else:
                                    if "__c" in envmonname_arr[c+1] or mc_curr_env_set_c == 1:
                                        #envmonname = envname+"_"+envmonname_arr[c+1].replace("__c","")
                                        envmonname = envmonname_arr[c+1].replace("__c","")
                                    elif "__s" in envmonname_arr[c+1] or mc_curr_env_set_c == 1:
                                        #envmonname = envname+"_"+envmonname_arr[c+1].replace("__s","")
                                        envmonname = envmonname_arr[c+1].replace("__s","")
                                    else: 
                                        #envmonname = envname+"_"+envmonname_arr[c+1]
                                        envmonname = envmonname_arr[c+1]
                                    
                                    #if "__c" in envmonname_arr[c+1] or "__s" in envmonname_arr[c+1] or mc_curr_env_set_c == 1:
                                    if "__c" in envmonname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envmonname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_mon_stg = env_mon_stg\
                                        +('µ $sformat(mon_inst_name, "%s_mon");\n'%(envmonname))\
                                        +('µ if (%s_environment_cfg.%s_is_active) %s_mon = %s_monitor::type_id::create(mon_inst_name,this);\n\n'%(envname, envmonname, envmonname, envmonname))

                            pos = env_stg.find(' // Construct Environment Monitors\n')
                            apos = pos + len(' // Construct Environment Monitors\n')
                            env_stg = env_stg[:apos]+env_mon_stg+env_stg[apos:]

                        # Cleaning local vars
                        env_mon_stg = ''
                        #----------------------------------------------------------------------
                                

                        #----------------------------------------------------------------------
                        # Code for Environment Scoreboard Component Construct inside ENV 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][4] != '':
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                
                            for c in range (int(envscbname_arr[0])):
                                if len(envscbname_arr[c+1].split(":"))>1:
                                    if "__c" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                        envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                    elif "__s" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                        envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                    else:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0])
                                        envscbname = (envscbname_arr[c+1].split(":")[0])

                                    #if "__c" in envscbname_arr[c+1] or "__s" in envscbname_arr[c+1] or mc_curr_env_set_c ==1:
                                    if "__c" in envscbname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envscbname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_scb_stg = env_scb_stg\
                                        +('µ %s_scb = new[%s_environment_cfg.no_of_%s_scb];\n'%(envscbname, envname, envscbname))\
                                        +('µ for (int i = 0; i < %s_environment_cfg.no_of_%s_scb; i++) begin\n'%(envname, envscbname))\
                                        +('µ  $sformat(scb_inst_name, "%s_scb[%s]", i);\n'%(envscbname, str(id_temp)))\
                                        +('µ  if (%s_environment_cfg.%s_is_active[i]) %s_scb[i] = %s_scoreboard::type_id::create(scb_inst_name, this);\n'%(envname, envscbname, envscbname, envscbname))\
                                        +('µ  uvm_config_db#(int)::set(this, {scb_inst_name, "*"}, "%s_scb_id", i);\n'%(envscbname))\
                                        +('µ end\n\n')
                                else:
                                    if "__c" in envscbname_arr[c+1] or mc_curr_env_set_c == 1:
                                        #envscbname = envname+"_"+envscbname_arr[c+1].replace("__c","")
                                        envscbname = envscbname_arr[c+1].replace("__c","")
                                    elif "__s" in envscbname_arr[c+1] or mc_curr_env_set_c == 1:
                                        #envscbname = envname+"_"+envscbname_arr[c+1].replace("__s","")
                                        envscbname = envscbname_arr[c+1].replace("__s","")
                                    else: 
                                        #envscbname = envname+"_"+envscbname_arr[c+1]
                                        envscbname = envscbname_arr[c+1]
                                    
                                    #if "__c" in envscbname_arr[c+1] or "__s" in envscbname_arr[c+1] or mc_curr_env_set_c == 1:
                                    if "__c" in envscbname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envscbname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_scb_stg = env_scb_stg\
                                        +('µ $sformat(scb_inst_name, "%s_scb");\n'%(envscbname))\
                                        +('µ if (%s_environment_cfg.%s_is_active) %s_scb = %s_scoreboard::type_id::create(scb_inst_name,this);\n\n'%(envname, envscbname, envscbname, envscbname))

                            pos = env_stg.find(' // Construct Environment Scoreboards\n')
                            apos = pos + len(' // Construct Environment Scoreboards\n')
                            env_stg = env_stg[:apos]+env_scb_stg+env_stg[apos:]

                        # Cleaning local vars
                        env_scb_stg = ''
                        #----------------------------------------------------------------------

                        
                        #----------------------------------------------------------------------
                        # Code for Environment Agent Components Creation 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                if "__c" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__c","")
                                    envagtname = (envagtname_arr[e+1]).replace("__c","")
                                elif "__s" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__s","")
                                    envagtname = (envagtname_arr[e+1]).replace("__s","")
                                else:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1])
                                    envagtname = (envagtname_arr[e+1])

                                #if "__c" in envagtname_arr[e+1] or "__s" in envagtname_arr[e+1] or mc_curr_env_set_c ==1:
                                if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1 or ("__s" in envagtname_arr[e+1] and mc_curr_env_set_s == 0):
                                    if mc_env_cfg_pool[a][2][e+1][2]:
                                        env_agt_stg = env_agt_stg\
                                        +('µ %s_agt = new[%s_environment_cfg.no_of_%s_agt];\n'%(envagtname, envname, envagtname))\
                                        +('µ for (int i = 0; i < %s_environment_cfg.no_of_%s_agt; i++) begin\n'%(envname, envagtname))\
                                        +('µ  $sformat(agent_inst_name, "%s_agt[%s]", i);\n'%(envagtname, str(id_temp)))\
                                        +('µ  if (%s_environment_cfg.%s_agent_cfg[i].is_active) %s_agt[i] = %s_agent::type_id::create(agent_inst_name, this);\n'%(envname, envagtname, envagtname, envagtname))\
                                        +('µ  uvm_config_db#(int)::set(this, {agent_inst_name, "*"}, "%s_agt_id", i);\n'%(envagtname))\
                                        +('µ end\n\n')
                                    else:
                                        env_agt_stg = env_agt_stg\
                                        +('µ $sformat(agent_inst_name, "%s_agt");\n'%(envagtname))\
                                        +('µ if (%s_environment_cfg.%s_agent_cfg.is_active) %s_agt = %s_agent::type_id::create(agent_inst_name,this);\n\n'%(envname, envagtname, envagtname, envagtname))

                            pos = env_stg.find(' // Construct Environment Agents\n')
                            apos = pos + len(' // Construct Environment Agents\n')
                            env_stg = env_stg[:apos]+env_agt_stg+env_stg[apos:]

                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------


                        #   #----------------------------------------------------------------------
                        #   # Code for Adding Sub-Environments Construction  
                        #   #----------------------------------------------------------------------
                        #   if mc_env_cfg_pool[a][1] != '':
                        #       # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                        #       subenvname_arr = str(mc_env_cfg_pool[a][1]).split(",")
                        #       log.debug("mc_create_phase : envname %s  subenvname_arr %s!\n"%(envname, subenvname_arr))

                        #       for f in range (int(subenvname_arr[0])):
                        #           if "__c" in subenvname_arr[f+1]:
                        #               #subenvname = envname+"_"+(subenvname_arr[f+1]).replace("__c","")
                        #               subenvname = (subenvname_arr[f+1]).replace("__c","")
                        #           elif "__s" in subenvname_arr[f+1]:
                        #               #subenvname = envname+"_"+(subenvname_arr[f+1]).replace("__s","")
                        #               subenvname = (subenvname_arr[f+1]).replace("__s","")
                        #           else:
                        #               #subenvname = envname+"_"+(subenvname_arr[f+1])
                        #               subenvname = (subenvname_arr[f+1])
                        #       
                        #           if "__c" in subenvname_arr[f+1] or "__s" in subenvname_arr[f+1] or mc_curr_env_set_c == 1 or mc_curr_env_set_s == 1:
                        #               sub_env_stg = sub_env_stg\
                        #               +('µ %s_env = %s_environment::type_id::create("%s_env",this);\n\n'%(subenvname, subenvname, subenvname))

                        #       pos = env_stg.find(' // Construct Sub-Environments\n')
                        #       apos = pos + len(' // Construct Sub-Environments\n')
                        #       env_stg = env_stg[:apos]+sub_env_stg+env_stg[apos:]

                        #   # Cleaning local vars
                        #   sub_env_stg = ''
                        #   #----------------------------------------------------------------------

                        
                        #----------------------------------------------------------------------
                        # Code for Environment Monitor Component Configuration 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][3] != '':
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                            log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                
                            for c in range (int(envmonname_arr[0])):
                                if len(envmonname_arr[c+1].split(":"))>1:
                                    if "__c" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                        envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                    elif "__s" in envmonname_arr[c+1]:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                        envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                    else:
                                        #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0])
                                        envmonname = (envmonname_arr[c+1].split(":")[0])
                                    
                                    #if "__c" in envmonname_arr[c+1] or "__s" in envmonname_arr[c+1] or mc_curr_env_set_c == 1:
                                    if "__c" in envmonname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envmonname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_mon_stg = env_mon_stg\
                                        +("µ for (int i = 0; i < %s_environment_cfg.no_of_%s_mon; i++) begin\n"%(envname, envmonname))\
                                        +('µ  $sformat(mon_inst_name, "*%s_mon[%s]*", i);\n'%(envmonname, str(id_temp)))\
                                        +('µ  uvm_config_db#(%s_environment_config)::set(this, mon_inst_name, "%s_environment_config", %s_environment_cfg);\n'%(envname, envname, envname))\
                                        +("µ end\n")
                                else:
                                    if "__c" in envmonname_arr[c+1] or mc_curr_env_set_c == 1:
                                        #envmonname = envname+"_"+envmonname_arr[c+1].replace("__c","")
                                        envmonname = envmonname_arr[c+1].replace("__c","")
                                    elif "__s" in envmonname_arr[c+1] or mc_curr_env_set_c == 1:
                                        #envmonname = envname+"_"+envmonname_arr[c+1].replace("__s","")
                                        envmonname = envmonname_arr[c+1].replace("__s","")
                                    else: 
                                        #envmonname = envname+"_"+envmonname_arr[c+1]
                                        envmonname = envmonname_arr[c+1]
                                    
                                    #if "__c" in envmonname_arr[c+1] or "__s" in envmonname_arr[c+1] or mc_curr_env_set_c ==1:
                                    if "__c" in envmonname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envmonname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_mon_stg = env_mon_stg\
                                        +('µ $sformat(mon_inst_name, "*%s_mon*");\n'%(envmonname))\
                                        +('µ uvm_config_db#(%s_environment_config)::set(this, mon_inst_name, "%s_environment_config", %s_environment_cfg);\n'%(envname, envname, envname))

                            pos = env_stg.find(' // Configure Environment Monitors\n')
                            apos = pos + len(' // Configure Environment Monitors\n')
                            env_stg = env_stg[:apos]+env_mon_stg+env_stg[apos:]

                        # Cleaning local vars
                        env_mon_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Environment Scoreboard Component Configuration 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][4] != '':
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                            log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                
                            for c in range (int(envscbname_arr[0])):
                                if len(envscbname_arr[c+1].split(":"))>1:
                                    if "__c" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                        envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                    elif "__s" in envscbname_arr[c+1]:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                        envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                    else:
                                        #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0])
                                        envscbname = (envscbname_arr[c+1].split(":")[0])

                                    #if "__c" in envscbname_arr[c+1] or "__s" in envscbname_arr[c+1] or mc_curr_env_set_c ==1:
                                    if "__c" in envscbname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envscbname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_scb_stg = env_scb_stg\
                                        +("µ for (int i = 0; i < %s_environment_cfg.no_of_%s_scb; i++) begin\n"%(envname, envscbname))\
                                        +('µ  $sformat(scb_inst_name, "*%s_scb[%s]*", i);\n'%(envscbname, str(id_temp)))\
                                        +('µ  uvm_config_db#(%s_environment_config)::set(this, scb_inst_name, "%s_environment_config", %s_environment_cfg);\n'%(envname, envname, envname))\
                                        +("µ end\n")
                                else:
                                    if "__c" in envscbname_arr[c+1] or mc_curr_env_set_c == 1:
                                        #envscbname = envname+"_"+envscbname_arr[c+1].replace("__c","")
                                        envscbname = envscbname_arr[c+1].replace("__c","")
                                    elif "__s" in envscbname_arr[c+1] or mc_curr_env_set_c == 1:
                                        #envscbname = envname+"_"+envscbname_arr[c+1].replace("__s","")
                                        envscbname = envscbname_arr[c+1].replace("__s","")
                                    else: 
                                        #envscbname = envname+"_"+envscbname_arr[c+1]
                                        envscbname = envscbname_arr[c+1]
                                    
                                    #if "__c" in envscbname_arr[c+1] or "__s" in envscbname_arr[c+1] or mc_curr_env_set_c == 1:
                                    if "__c" in envscbname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envscbname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_scb_stg = env_scb_stg\
                                        +('µ $sformat(scb_inst_name, "*%s_scb*");\n'%(envscbname))\
                                        +('µ uvm_config_db#(%s_environment_config)::set(this, scb_inst_name, "%s_environment_config", %s_environment_cfg);\n'%(envname, envname, envname))

                            pos = env_stg.find(' // Configure Environment Scoreboards\n')
                            apos = pos + len(' // Configure Environment Scoreboards\n')
                            env_stg = env_stg[:apos]+env_scb_stg+env_stg[apos:]

                        # Cleaning local vars
                        env_scb_stg = ''
                        #----------------------------------------------------------------------
                                    

                        #----------------------------------------------------------------------
                        # Code for Environment Agent Components Configuration 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2] != ['']:
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                
                            for e in range (int(envagtname_arr[0])):
                                if "__c" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__c","")
                                    envagtname = (envagtname_arr[e+1]).replace("__c","")
                                elif "__s" in envagtname_arr[e+1]:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__s","")
                                    envagtname = (envagtname_arr[e+1]).replace("__s","")
                                else:
                                    #envagtname = envname+"_"+(envagtname_arr[e+1])
                                    envagtname = (envagtname_arr[e+1])

                                #if "__c" in envagtname_arr[e+1] or "__s" in envagtname_arr[e+1] or mc_curr_env_set_c ==1:
                                if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1 or ("__s" in envagtname_arr[e+1] and mc_curr_env_set_s == 0):
                                    if mc_env_cfg_pool[a][2][e+1][2]:
                                        env_agt_stg = env_agt_stg\
                                        +("µ for (int i = 0; i < %s_environment_cfg.no_of_%s_agt; i++) begin\n"%(envname, envagtname))\
                                        +('µ  $sformat(agent_inst_name, "*%s_agt[%s]*", i);\n'%(envagtname, str(id_temp)))\
                                        +('µ  uvm_config_db#(%s_agent_config)::set(this, agent_inst_name, "%s_agent_config", %s_environment_cfg.%s_agent_cfg[i]);\n'%(envagtname, envagtname, envname, envagtname))\
                                        +("µ end\n")
                                    else:
                                        env_agt_stg = env_agt_stg\
                                        +('µ $sformat(agent_inst_name, "*%s_agt*");\n'%(envagtname))\
                                        +('µ uvm_config_db#(%s_agent_config)::set(this, agent_inst_name, "%s_agent_config", %s_environment_cfg.%s_agent_cfg);\n'%(envagtname, envagtname, envname, envagtname))

                            pos = env_stg.find(' // Configure Environment Agents\n')
                            apos = pos + len(' // Configure Environment Agents\n')
                            env_stg = env_stg[:apos]+env_agt_stg+env_stg[apos:]

                        # Cleaning local vars
                        env_agt_stg = ''
                        #----------------------------------------------------------------------

            
                        #   #----------------------------------------------------------------------
                        #   # Code for Adding Sub-Environments Construction  
                        #   #----------------------------------------------------------------------
                        #   if mc_env_cfg_pool[a][1] != '':
                        #       # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                        #       subenvname_arr = str(mc_env_cfg_pool[a][1]).split(",")
                        #       log.debug("mc_create_phase : envname %s  subenvname_arr %s!\n"%(envname, subenvname_arr))

                        #       for f in range (int(subenvname_arr[0])):
                        #           if "__c" in subenvname_arr[f+1]:
                        #               #subenvname = envname+"_"+(subenvname_arr[f+1]).replace("__c","")
                        #               subenvname = (subenvname_arr[f+1]).replace("__c","")
                        #           elif "__s" in subenvname_arr[f+1]:
                        #               #subenvname = envname+"_"+(subenvname_arr[f+1]).replace("__s","")
                        #               subenvname = (subenvname_arr[f+1]).replace("__s","")
                        #           else:
                        #               #subenvname = envname+"_"+(subenvname_arr[f+1])
                        #               subenvname = (subenvname_arr[f+1])
                        #       
                        #           if "__c" in subenvname_arr[f+1] or mc_curr_env_set_c == 1 or ("__s" in subenvname_arr[f+1] and mc_curr_env_set_s == 0):
                        #               sub_env_stg = sub_env_stg\
                        #               +('µ uvm_config_db#(%s_config)::set(this, "*%s_env*", "%s_config", %s_environment_cfg.%s_environment_cfg);\n'%(subenvname, subenvname, subenvname, envname, subenvname))

                        #       pos = env_stg.find(' // Configure Sub-Environments\n')
                        #       apos = pos + len(' // Configure Sub-Environments\n')
                        #       env_stg = env_stg[:apos]+sub_env_stg+env_stg[apos:]

                        #   # Cleaning local vars
                        #   sub_env_stg = ''
                        #   #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Code for Adding Mon-Scb Connectivity On that Environment 
                        #----------------------------------------------------------------------
                        if mc_env_cfg_pool[a][5] != '':
                            # parenvname = (mc_env_cfg_pool[a][0].split(","))[0]
                            # envname = (mc_env_cfg_pool[a][0].split(","))[1]
                            monscbcon_arr = (mc_env_cfg_pool[a][5])
                            log.debug("mc_create_phase : envname %s  monscbcon_arr %s!\n"%(envname, monscbcon_arr))
                        
                            for w in range (len(monscbcon_arr)):
                                str_arr_idx = 0
                                
                                cp_mon_arr = (monscbcon_arr[w].split("-"))[0].split(",")
                                log.debug("mc_create_phase : cp_mon_arr %s!\n"%(cp_mon_arr))

                                cp_scb_arr = (monscbcon_arr[w].split("-"))[1].split(",")
                                log.debug("mc_create_phase : cp_mon_arr %s  cp_scb_arr %s!\n"%(cp_mon_arr, cp_scb_arr))
                                
                                cp_monscb_con_arr = (monscbcon_arr[w].split("-")[2]).split("/")
                                log.debug("mc_create_phase : mc_curr_env_set_c %d cp_mon_arr %s  cp_scb_arr %s  cp_monscb_con_arr %s!\n"%(mc_curr_env_set_c, cp_mon_arr, cp_scb_arr, cp_monscb_con_arr))

                                if len(cp_mon_arr) == 4:
                                    pen_mon = cp_mon_arr[0]
                                    en_mon  = cp_mon_arr[1]
                                    a_mon   = cp_mon_arr[2]
                                    m_mon   = cp_mon_arr[3]

                                    # Env Index Search
                                    env_search = pen_mon+","+en_mon
                                    env_idx_mon = self.find_index(env_search, mc_env_cfg_pool)
                                    log.debug("mc_create_phase : env_search %s env_idx_mon %s!\n"%(env_search, env_idx_mon))
                                    
                                    if env_idx_mon:
                                        env_idx_mon = int(env_idx_mon[0])
                                        #envname_mon = (mc_env_cfg_pool[env_idx_mon][0].split(","))[1]
                                        envname_mon = ((mc_env_cfg_pool[env_idx_mon][0].split(","))[1]).split(":")[0]
                                    
                                        if "__c" in envname_mon:
                                            envname_mon = envname_mon.replace("__c","")
                                        elif "__s" in envname_mon:
                                            envname_mon = envname_mon.replace("__s","")
                                    log.debug("mc_create_phase : env_search %s env_idx_mon %s envname_mon %s!\n"%(env_search, env_idx_mon, envname_mon))

                                    # Agent Name
                                    #agt_search = parenvname+','+envname+','+cp_mon_arr[2]
                                    agt_search = pen_mon+','+en_mon+','+a_mon
                                    agt_idx = (self.find_index(agt_search, mc_env_cfg_pool[env_idx_mon])); 
                                    log.debug("mc_create_phase : agt_search %s agt_idx %s!\n"%(agt_search, agt_idx))
                                    
                                    if agt_idx:
                                        agt_idx = int(agt_idx[1])
                                        #envagtname = envname_mon+"_"+mc_env_cfg_pool[env_idx_mon][2][agt_idx][1]
                                        envagtname = mc_env_cfg_pool[env_idx_mon][2][agt_idx][1]
                                        
                                        if "__c" in envagtname:
                                            envagtname = envagtname.replace("__c","")
                                        elif "__s" in envagtname:
                                            envagtname = envagtname.replace("__s","")
                                        
                                        log.debug("mc_create_phase : agt_search %s agt_idx %s envagtname %s!\n"%(agt_search, agt_idx, envagtname))

                                    # Monitor Name
                                    mon_arr = str(mc_env_cfg_pool[env_idx_mon][2][agt_idx][4]).split(",")
                                    
                                    #log.debug("mc_create_phase mon_arr %s mon_name %s!\n"%(mon_arr, cp_mon_arr[3]))
                                    log.debug("mc_create_phase mon_arr %s mon_name %s!\n"%(mon_arr, m_mon))
                                    
                                    #mon_idx = self.find_index(cp_mon_arr[3], mon_arr); 
                                    mon_idx = self.find_index(m_mon, mon_arr); 
                                    
                                    if mon_idx:
                                        mon_idx = int(mon_idx[0])
                                    
                                    #if not mon_idx or (cp_mon_arr[3] == mc_env_cfg_pool[env_idx_mon][2][agt_idx][1]):
                                    if not mon_idx or (m_mon == mc_env_cfg_pool[env_idx_mon][2][agt_idx][1]):
                                        envagtmonname = envagtname
                                    else:
                                        envagtmonname = envagtname+"_"+mon_arr[mon_idx]
                                        
                                    if "__c" in envagtmonname:
                                        envagtmonname = envagtmonname.replace("__c","")
                                    elif "__s" in envagtmonname:
                                        envagtmonname = envagtmonname.replace("__s","")

                                    log.debug("mc_create_phase mon_arr %s mon_idx %s envagtmonname %s!\n"%(mon_arr, mon_idx, envagtmonname))
                                    
                                    
                                    pen_scb = cp_scb_arr[0]
                                    en_scb  = cp_scb_arr[1]
                                    a_scb   = cp_scb_arr[2]
                                    
                                    # Env Index Search
                                    env_search = pen_scb+","+en_scb
                                    env_idx_scb = self.find_index(env_search, mc_env_cfg_pool)
                                    log.debug("mc_create_phase : env_search %s env_idx_scb %s!\n"%(env_search, env_idx_scb))
                                    
                                    if env_idx_scb:
                                        env_idx_scb = int(env_idx_scb[0])
                                        #envname_scb = (mc_env_cfg_pool[env_idx_scb][0].split(","))[1]
                                        envname_scb = ((mc_env_cfg_pool[env_idx_scb][0].split(","))[1]).split(":")[0]
                                        
                                        if "__c" in envname_scb:
                                            envname_scb = envname_scb.replace("__c","")
                                        elif "__s" in envname_scb:
                                            envname_scb = envname_scb.replace("__s","")

                                    log.debug("mc_create_phase : env_search %s env_idx_scb %s envname_scb %s!\n"%(env_search, env_idx_scb, envname_scb))

                                    # Scoreboard Name
                                    log.debug("mc_create_phase : scb ele to search %s pool %s!\n"%(cp_scb_arr[2], mc_env_cfg_pool[env_idx_scb][4]))
                                    scb_arr = mc_env_cfg_pool[env_idx_scb][4].split(",")
                                    scb_idx = self.find_index_sub_string(cp_scb_arr[2], scb_arr); 
                                    
                                    if scb_idx:
                                        scb_idx = int(scb_idx[0])
                                    log.debug("mc_create_phase : scb_idx %s!\n"%(scb_idx))
                                   
                                    log.debug("mc_create_phase : scb_arr %s\n"%(scb_arr))
                                    if len(scb_arr[scb_idx].split(":"))>1:
                                        #envscbname = envname_scb+"_"+(scb_arr[scb_idx].split(":"))[0]
                                        envscbname = (scb_arr[scb_idx].split(":"))[0]
                                    else:    
                                        #envscbname = envname_scb+"_"+scb_arr[scb_idx]
                                        envscbname = scb_arr[scb_idx]
                                        
                                    if "__c" in envscbname:
                                        envscbname = envscbname.replace("__c","")
                                    elif "__s" in envscbname:
                                        envscbname = envscbname.replace("__s","")
                                    
                                    log.debug("mc_create_phase : agt_idx %d  envagtname %s  scb_idx %d  envscbname %s!\n"%(agt_idx, envagtname, scb_idx, envscbname))
                                    log.debug("mc_create_phase : envname %s parenvname %s cp_mon_arr %s cp_scb_arr%s\n"%(envname, parenvname, cp_mon_arr, cp_scb_arr))

                                    # Common Variables  
                                    for_loop_begin = ''
                                    for_loop_end = ''
    
                                    # TRY To find the hierarchy for monitor and scoreboard
                                    mon_no = env_idx_mon 
                                    mon_no_idx = 0; mon_iter = 0
                                    mon_env_cfg_hir = ''
                                    mon_env_hir = ''
                                    mon_env_ifdef = ''
                                    mon_env_endif = ''
                                    while True:
                                        env_ele_mon = (mc_env_cfg_pool[mon_no][0]).split(",")
                                        ele_to_search = ','+env_ele_mon[0] 
                                        log.debug("mc_create_phase : env_ele_mon %s ele_to_search%s\n"%(env_ele_mon, ele_to_search))

                                        #   if mon_iter: 
                                        #       if ((mc_env_cfg_pool[mon_no][0]).split(","))[1].replace("__c","").replace("__s","") == envname:
                                        #           mon_env_cfg_hir = ('%s_environment_cfg'%(env_ele_mon[1].replace("__c","").replace("__s","")))+"."+mon_env_cfg_hir
                                        #           #mon_env_hir = ''+mon_env_hir 
                                        #           log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir%s\n"%(mon_env_cfg_hir, mon_env_hir))
                                        #           mon_iter = 0; break
                                        #       else:
                                        #           #mon_env_ifdef = ('`ifndef DISABLE_%s_%s_ENV '%(env_ele_mon[0].replace("__c","").replace("__s","").upper(), env_ele_mon[1].replace("__c","").replace("__s","").upper()))+mon_env_ifdef
                                        #           mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(env_ele_mon[1].replace("__c","").replace("__s","").upper()))+mon_env_ifdef
                                        #           mon_env_endif = ('`endif ')+mon_env_endif
                                        #           
                                        #           #mon_env_cfg_hir = ('%s_%s_environment_cfg'%(env_ele_mon[0].replace("__c","").replace("__s",""), env_ele_mon[1].replace("__c","").replace("__s","")))+"."+mon_env_cfg_hir
                                        #           mon_env_cfg_hir = ('%s_environment_cfg'%(env_ele_mon[1].replace("__c","").replace("__s","")))+"."+mon_env_cfg_hir
                                        #           #mon_env_hir = ('%s_%s_env'%(env_ele_mon[0].replace("__c","").replace("__s",""), env_ele_mon[1].replace("__c","").replace("__s","")))+"."+mon_env_hir 
                                        #           mon_env_hir = ('%s_env'%(env_ele_mon[1].replace("__c","").replace("__s","")))+"."+mon_env_hir 
                                        #           log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir%s\n"%(mon_env_cfg_hir, mon_env_hir))
                                        #   else:
                                        #       if ((mc_env_cfg_pool[mon_no][0]).split(","))[1].replace("__c","").replace("__s","") == envname:
                                        #           mon_env_cfg_hir = ('%s_environment_cfg'%(env_ele_mon[1].replace("__c","").replace("__s","")))+mon_env_cfg_hir
                                        #           #mon_env_hir = ''+mon_env_hir 
                                        #           log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir%s\n"%(mon_env_cfg_hir, mon_env_hir))
                                        #           break
                                        #       else:
                                        #           #mon_env_ifdef = ('`ifndef DISABLE_%s_%s_ENV '%(env_ele_mon[0].replace("__c","").replace("__s","").upper(), env_ele_mon[1].replace("__c","").replace("__s","").upper()))+mon_env_ifdef
                                        #           mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(env_ele_mon[1].replace("__c","").replace("__s","").upper()))+mon_env_ifdef
                                        #           mon_env_endif = ('`endif ')+mon_env_endif
                                        #           
                                        #           #mon_env_cfg_hir = ('%s_%s_environment_cfg'%(env_ele_mon[0].replace("__c","").replace("__s",""), env_ele_mon[1].replace("__c","").replace("__s","")))+mon_env_cfg_hir
                                        #           mon_env_cfg_hir = ('%s_environment_cfg'%(env_ele_mon[1].replace("__c","").replace("__s","")))+mon_env_cfg_hir
                                        #           #mon_env_hir = ('%s_%s_env'%(env_ele_mon[0].replace("__c","").replace("__s",""), env_ele_mon[1].replace("__c","").replace("__s","")))+mon_env_hir 
                                        #           mon_env_hir = ('%s_env'%(env_ele_mon[1].replace("__c","").replace("__s","")))+mon_env_hir 
                                        #           log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir%s\n"%(mon_env_cfg_hir, mon_env_hir))
                                        #       

                                        #   while mon_no_idx < len(mc_env_cfg_pool):
                                        #       if ele_to_search in mc_env_cfg_pool[mon_no_idx][0]:
                                        #           mon_no = mon_no_idx
                                        #           mon_no_idx = 0; mon_iter += 1
                                        #           break 
                                        #       else:
                                        #           mon_no_idx += 1; mon_iter += 1
                                        
                                        if mon_iter: 
                                            #log.debug("mon-scb-con:4 : %s %s"%(str(((mc_env_cfg_pool[mon_no][0]).split(","))[1].replace("__c","").replace("__s","")), envname_org))
                                            #if ((mc_env_cfg_pool[mon_no][0]).split(","))[1].replace("__c","").replace("__s","") == envname_org:
                                            
                                            log.debug("mon-scb-con:4 : %s %s"%(str(((mc_env_cfg_pool[mon_no][0]).split(","))[1]), envname_org))
                                            if ((mc_env_cfg_pool[mon_no][0]).split(","))[1] == envname_org:
                                                if len(env_ele_mon[1].split(":"))>1:
                                                    ename = (env_ele_mon[1].split(":")[0]).replace("__c","").replace("__s","")
                                                else:
                                                    ename = env_ele_mon[1].replace("__c","").replace("__s","")

                                                mon_env_cfg_hir = ('%s_environment_cfg'%(ename))+"."+mon_env_cfg_hir
                                                log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s\n"%(mon_env_cfg_hir, mon_env_hir))
                                                mon_iter = 0; break
                                            else:
                                                if len(env_ele_mon[1].split(":"))>1:
                                                    ename = (env_ele_mon[1].split(":")[0]).replace("__c","").replace("__s","")
                                                    enum  = int(env_ele_mon[1].split(":")[1])
                                                    eloop = str_arr[str_arr_idx] 

                                                    mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+mon_env_ifdef
                                                    mon_env_endif = ('`endif ')+mon_env_endif
                                                    
                                                    mon_env_cfg_hir = ('%s_environment_cfg[%s]'%(ename, eloop))+"."+mon_env_cfg_hir
                                                    mon_env_hir = ('%s_env[%s]'%(ename, eloop))+"."+mon_env_hir 
                                                    
                                                    #for_loop_begin  = for_loop_begin+('for (int %s = 0; %s < %d; %s++) begin '%(eloop, eloop, enum, eloop))
                                                    for_loop_begin  = ('for (int %s = 0; %s < %d; %s++) begin '%(eloop, eloop, enum, eloop))+for_loop_begin
                                                    #for_loop_begin  = ('for (int %s = 0; %s < %s_environment_cfg.no_of_%s_env; %s++) begin '%(eloop, eloop, envname, ename, eloop))+for_loop_begin
                                                    for_loop_end    = for_loop_end+('end ')

                                                    log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s for_loop_begin %s for_loop_end %s\n"%(mon_env_cfg_hir, mon_env_hir, for_loop_begin, for_loop_end))
                                                else:
                                                    if len(env_ele_mon[1].split(":"))>1:
                                                        ename = (env_ele_mon[1].split(":")[0]).replace("__c","").replace("__s","")
                                                    else:
                                                        ename = env_ele_mon[1].replace("__c","").replace("__s","")
                                                    
                                                    mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+mon_env_ifdef
                                                    mon_env_endif = ('`endif ')+mon_env_endif
                                                    
                                                    mon_env_cfg_hir = ('%s_environment_cfg'%(ename))+"."+mon_env_cfg_hir
                                                    mon_env_hir = ('%s_env'%(ename))+"."+mon_env_hir 
                                                    log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s\n"%(mon_env_cfg_hir, mon_env_hir))
                                        else:
                                            # If the first iteration itself reached the envname then only load cfg hierarchy and break
                                            
                                            #log.debug("mon-scb-con:4 : %s %s"%(str(((mc_env_cfg_pool[mon_no][0]).split(","))[1].replace("__c","").replace("__s","")), envname_org))
                                            #if ((mc_env_cfg_pool[mon_no][0]).split(","))[1].replace("__c","").replace("__s","") == envname_org:
                                            
                                            log.debug("mon-scb-con:4 : %s %s"%(str(((mc_env_cfg_pool[mon_no][0]).split(","))[1]), envname_org))
                                            if ((mc_env_cfg_pool[mon_no][0]).split(","))[1] == envname_org:
                                                if len(env_ele_mon[1].split(":"))>1:
                                                    ename = (env_ele_mon[1].split(":")[0]).replace("__c","").replace("__s","")
                                                else:
                                                    ename = env_ele_mon[1].replace("__c","").replace("__s","")
                                                
                                                mon_env_cfg_hir = ('%s_environment_cfg'%(ename))+mon_env_cfg_hir
                                                log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s\n"%(mon_env_cfg_hir, mon_env_hir))
                                                break
                                            else:
                                                # If it has more hierarchy, and if the env has more instance then get the for_loop_begin info
                                                if len(env_ele_mon[1].split(":"))>1:
                                                    ename = (env_ele_mon[1].split(":")[0]).replace("__c","").replace("__s","")
                                                    enum  = int(env_ele_mon[1].split(":")[1])
                                                    eloop = str_arr[str_arr_idx] 

                                                    mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+mon_env_ifdef
                                                    mon_env_endif = ('`endif ')+mon_env_endif
                                                    
                                                    mon_env_cfg_hir = ('%s_environment_cfg[%s]'%(ename, eloop))+mon_env_cfg_hir
                                                    mon_env_hir = ('%s_env[%s]'%(ename, eloop))+mon_env_hir 
                                                    
                                                    for_loop_begin  = ('for (int %s = 0; %s < %d; %s++) begin '%(eloop, eloop, enum, eloop))+for_loop_begin
                                                    #for_loop_begin  = ('for (int %s = 0; %s < %s_environment_cfg.no_of_%s_env; %s++) begin '%(eloop, eloop, envname, ename, eloop))+for_loop_begin
                                                    for_loop_end    = ('end ')+for_loop_end

                                                    log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s for_loop_begin %s for_loop_end %s\n"%(mon_env_cfg_hir, mon_env_hir, for_loop_begin, for_loop_end))
                                                else:
                                                    if len(env_ele_mon[1].split(":"))>1:
                                                        ename = (env_ele_mon[1].split(":")[0]).replace("__c","").replace("__s","")
                                                    else:
                                                        ename = env_ele_mon[1].replace("__c","").replace("__s","")
                                                    
                                                    mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+mon_env_ifdef
                                                    mon_env_endif = ('`endif ')+mon_env_endif
                                                    
                                                    mon_env_cfg_hir = ('%s_environment_cfg'%(ename))+mon_env_cfg_hir
                                                    mon_env_hir = ('%s_env'%(ename))+mon_env_hir 
                                                    log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s\n"%(mon_env_cfg_hir, mon_env_hir))


                                        while mon_no_idx < len(mc_env_cfg_pool):
                                            if ele_to_search in mc_env_cfg_pool[mon_no_idx][0]:
                                                mon_no = mon_no_idx
                                                mon_no_idx = 0; mon_iter += 1; str_arr_idx += 1
                                                break 
                                            else:
                                                mon_no_idx += 1; mon_iter += 1; str_arr_idx += 1


                                    scb_no = env_idx_scb 
                                    scb_no_idx = 0; scb_iter = 0
                                    scb_env_cfg_hir = ''
                                    scb_env_hir = ''
                                    scb_env_ifdef = ''
                                    scb_env_endif = ''
                                    while True:
                                        env_ele_scb = (mc_env_cfg_pool[scb_no][0]).split(",")
                                        ele_to_search = ','+env_ele_scb[0] 
                                        log.debug("mc_create_phase : env_ele_scb %s ele_to_search%s\n"%(env_ele_scb, ele_to_search))

                                        #   if scb_iter:
                                        #       if ((mc_env_cfg_pool[scb_no][0]).split(","))[1].replace("__c","").replace("__s","") == envname:
                                        #           scb_env_cfg_hir = ('%s_environment_cfg'%(env_ele_scb[1].replace("__c","").replace("__s","")))+"."+scb_env_cfg_hir
                                        #           #scb_env_hir = ''+scb_env_hir 
                                        #           log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir%s\n"%(scb_env_cfg_hir, scb_env_hir))
                                        #           scb_iter = 0; break
                                        #       else:
                                        #           #scb_env_ifdef = ('`ifndef DISABLE_%s_%s_ENV '%(env_ele_scb[0].replace("__c","").replace("__s","").upper(), env_ele_scb[1].replace("__c","").replace("__s","").upper()))+scb_env_ifdef
                                        #           scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(env_ele_scb[1].replace("__c","").replace("__s","").upper()))+scb_env_ifdef
                                        #           scb_env_endif = ('`endif ')+scb_env_endif
                                        #           
                                        #           #scb_env_cfg_hir = ('%s_%s_environment_cfg'%(env_ele_scb[0].replace("__c","").replace("__s",""), env_ele_scb[1].replace("__c","").replace("__s","")))+"."+scb_env_cfg_hir
                                        #           scb_env_cfg_hir = ('%s_environment_cfg'%(env_ele_scb[1].replace("__c","").replace("__s","")))+"."+scb_env_cfg_hir
                                        #           #scb_env_hir = ('%s_%s_env'%(env_ele_scb[0].replace("__c","").replace("__s",""), env_ele_scb[1].replace("__c","").replace("__s","")))+"."+scb_env_hir 
                                        #           scb_env_hir = ('%s_env'%(env_ele_scb[1].replace("__c","").replace("__s","")))+"."+scb_env_hir 
                                        #           log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir%s\n"%(scb_env_cfg_hir, scb_env_hir))
                                        #   else:
                                        #       if ((mc_env_cfg_pool[scb_no][0]).split(","))[1].replace("__c","").replace("__s","") == envname:
                                        #           scb_env_cfg_hir = ('%s_environment_cfg'%(env_ele_scb[1].replace("__c","").replace("__s","")))+scb_env_cfg_hir
                                        #           #scb_env_hir = ''+scb_env_hir 
                                        #           log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir%s\n"%(scb_env_cfg_hir, scb_env_hir))
                                        #           break
                                        #       else:
                                        #           #scb_env_ifdef = ('`ifndef DISABLE_%s_%s_ENV '%(env_ele_scb[0].replace("__c","").replace("__s","").upper(), env_ele_scb[1].replace("__c","").replace("__s","").upper()))+scb_env_ifdef
                                        #           scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(env_ele_scb[1].replace("__c","").replace("__s","").upper()))+scb_env_ifdef
                                        #           scb_env_endif = ('`endif ')+scb_env_endif
                                        #           
                                        #           #scb_env_cfg_hir = ('%s_%s_environment_cfg'%(env_ele_scb[0].replace("__c","").replace("__s",""), env_ele_scb[1].replace("__c","").replace("__s","")))+scb_env_cfg_hir
                                        #           scb_env_cfg_hir = ('%s_environment_cfg'%(env_ele_scb[1].replace("__c","").replace("__s","")))+scb_env_cfg_hir
                                        #           #scb_env_hir = ('%s_%s_env'%(env_ele_scb[0].replace("__c","").replace("__s",""), env_ele_scb[1].replace("__c","").replace("__s","")))+scb_env_hir 
                                        #           scb_env_hir = ('%s_env'%(env_ele_scb[1].replace("__c","").replace("__s","")))+scb_env_hir 
                                        #           log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir%s\n"%(scb_env_cfg_hir, scb_env_hir))

                                        #   while scb_no_idx < len(mc_env_cfg_pool):
                                        #       if ele_to_search in mc_env_cfg_pool[scb_no_idx][0]:
                                        #           scb_no = scb_no_idx
                                        #           scb_no_idx = 0; scb_iter += 1
                                        #           break 
                                        #       else:
                                        #           scb_no_idx += 1; scb_iter += 1

                                        
                                        if scb_iter:
                                            #log.debug("mon-scb-con:4 : %s %s"%(str(((mc_env_cfg_pool[scb_no][0]).split(","))[1].replace("__c","").replace("__s","")), envname_org))
                                            #if ((mc_env_cfg_pool[scb_no][0]).split(","))[1].replace("__c","").replace("__s","") == envname_org:
                                            
                                            log.debug("mon-scb-con:4 : %s %s"%(str(((mc_env_cfg_pool[scb_no][0]).split(","))[1]), envname_org))
                                            if ((mc_env_cfg_pool[scb_no][0]).split(","))[1] == envname_org:
                                                if len(env_ele_scb[1].split(":"))>1:
                                                    ename = (env_ele_scb[1].split(":")[0]).replace("__c","").replace("__s","")
                                                else:
                                                    ename = env_ele_scb[1].replace("__c","").replace("__s","")
                                                
                                                scb_env_cfg_hir = ('%s_environment_cfg'%(ename))+"."+scb_env_cfg_hir
                                                log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s\n"%(scb_env_cfg_hir, scb_env_hir))
                                                scb_iter = 0; break
                                            else:
                                                # If it has more hierarchy, and if the env has more instance then get the for_loop_begin info
                                                if len(env_ele_scb[1].split(":"))>1:
                                                    ename = (env_ele_scb[1].split(":")[0]).replace("__c","").replace("__s","")
                                                    enum  = int(env_ele_scb[1].split(":")[1])
                                                    eloop = str_arr[str_arr_idx] 

                                                    scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+scb_env_ifdef
                                                    scb_env_endif = ('`endif ')+scb_env_endif
                                                    
                                                    scb_env_cfg_hir = ('%s_environment_cfg[%s]'%(ename, eloop))+"."+scb_env_cfg_hir
                                                    scb_env_hir = ('%s_env[%s]'%(ename, eloop))+"."+scb_env_hir 
                                                    
                                                    #for_loop_begin  = for_loop_begin+('for (int %s = 0; %s < %d; %s++) begin '%(eloop, eloop, enum, eloop))
                                                    for_loop_begin  = ('for (int %s = 0; %s < %d; %s++) begin '%(eloop, eloop, enum, eloop))+for_loop_begin
                                                    #for_loop_begin  = ('for (int %s = 0; %s < %s_environment_cfg.no_of_%s_env; %s++) begin '%(eloop, eloop, envname, ename, eloop))+for_loop_begin
                                                    for_loop_end    = for_loop_end+('end ')

                                                    log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s for_loop_begin %s for_loop_end %s\n"%(scb_env_cfg_hir, scb_env_hir, for_loop_begin, for_loop_end))
                                                else:
                                                    if len(env_ele_scb[1].split(":"))>1:
                                                        ename = (env_ele_scb[1].split(":")[0]).replace("__c","").replace("__s","")
                                                    else:
                                                        ename = env_ele_scb[1].replace("__c","").replace("__s","")
                                                    
                                                    scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+scb_env_ifdef
                                                    scb_env_endif = ('`endif ')+scb_env_endif
                                                    
                                                    scb_env_cfg_hir = ('%s_environment_cfg'%(ename))+"."+scb_env_cfg_hir
                                                    scb_env_hir = ('%s_env'%(ename))+"."+scb_env_hir 
                                                    log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s\n"%(scb_env_cfg_hir, scb_env_hir))
                                        else:
                                            #log.debug("mon-scb-con:4 : %s %s"%(str(((mc_env_cfg_pool[scb_no][0]).split(","))[1].replace("__c","").replace("__s","")), envname_org))
                                            #if ((mc_env_cfg_pool[scb_no][0]).split(","))[1].replace("__c","").replace("__s","") == envname_org:
                                            
                                            log.debug("mon-scb-con:4 : %s %s"%(str(((mc_env_cfg_pool[scb_no][0]).split(","))[1]), envname_org))
                                            if ((mc_env_cfg_pool[scb_no][0]).split(","))[1] == envname_org:
                                                if len(env_ele_scb[1].split(":"))>1:
                                                    ename = (env_ele_scb[1].split(":")[0]).replace("__c","").replace("__s","")
                                                else:
                                                    ename = env_ele_scb[1].replace("__c","").replace("__s","")
                                                
                                                scb_env_cfg_hir = ('%s_environment_cfg'%(ename))+scb_env_cfg_hir
                                                log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s\n"%(scb_env_cfg_hir, scb_env_hir))
                                                break
                                            else:
                                                # If it has more hierarchy, and if the env has more instance then get the for_loop_begin info
                                                if len(env_ele_scb[1].split(":"))>1:
                                                    ename = (env_ele_scb[1].split(":")[0]).replace("__c","").replace("__s","")
                                                    enum  = int(env_ele_scb[1].split(":")[1])
                                                    eloop = str_arr[str_arr_idx] 

                                                    scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+scb_env_ifdef
                                                    scb_env_endif = ('`endif ')+scb_env_endif
                                                    
                                                    scb_env_cfg_hir = ('%s_environment_cfg[%s]'%(ename, eloop))+scb_env_cfg_hir
                                                    scb_env_hir = ('%s_env[%s]'%(ename, eloop))+scb_env_hir 
                                                    
                                                    for_loop_begin  = ('for (int %s = 0; %s < %d; %s++) begin '%(eloop, eloop, enum, eloop))+for_loop_begin
                                                    #for_loop_begin  = ('for (int %s = 0; %s < %s_environment_cfg.no_of_%s_env; %s++) begin '%(eloop, eloop, envname, ename, eloop))+for_loop_begin
                                                    for_loop_end    = ('end ')+for_loop_end

                                                    log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s for_loop_begin %s for_loop_end %s\n"%(scb_env_cfg_hir, scb_env_hir, for_loop_begin, for_loop_end))
                                                else:
                                                    if len(env_ele_scb[1].split(":"))>1:
                                                        ename = (env_ele_scb[1].split(":")[0]).replace("__c","").replace("__s","")
                                                    else:
                                                        ename = env_ele_scb[1].replace("__c","").replace("__s","")
                                                    
                                                    scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+scb_env_ifdef
                                                    scb_env_endif = ('`endif ')+scb_env_endif
                                                    
                                                    scb_env_cfg_hir = ('%s_environment_cfg'%(ename))+scb_env_cfg_hir
                                                    scb_env_hir = ('%s_env'%(ename))+scb_env_hir 
                                                    log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s\n"%(scb_env_cfg_hir, scb_env_hir))

                                        while scb_no_idx < len(mc_env_cfg_pool):
                                            if ele_to_search in mc_env_cfg_pool[scb_no_idx][0]:
                                                scb_no = scb_no_idx
                                                scb_no_idx = 0; scb_iter += 1; str_arr_idx += 1
                                                break 
                                            else:
                                                scb_no_idx += 1; scb_iter += 1; str_arr_idx += 1

                                    
                                    log.debug("mc_create_phase : %s %s!\n"%(mc_env_cfg_pool[env_idx_mon][2][agt_idx][2], len(scb_arr[scb_idx].split(":"))))
                                    
                                    # scb_env_cfg_hir = ('%s_environment_cfg'%envname)+"."+('%s_%s_environment_cfg'%(envname, envname_scb, cp_scb_arr[1]))
                                    # scb_env_hir = ('%s_%s_env'%(envname, cp_scb_arr[1]))
                                    # log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s!\n"%(scb_env_cfg_hir, scb_env_hir))
                                   
                                    log.debug("mc_create_phase: scb_arr {}".format(scb_arr))
                                    log.debug("mc_create_phase: mon_env_cfg_hir %s mon_env_hir %s mon_env_ifdef %s mon_env_endif %s\n"%(mon_env_cfg_hir, mon_env_hir, mon_env_ifdef, mon_env_endif))
                                    log.debug("mc_create_phase: scb_env_cfg_hir %s scb_env_hir %s scb_env_ifdef %s scb_env_endif %s\n"%(scb_env_cfg_hir, scb_env_hir, scb_env_ifdef, scb_env_endif))
                                    log.debug("mc_create_phase: for_loop_begin %s for_loop_end %s\n"%(for_loop_begin, for_loop_end))

                                    log.debug("mc_create_phase: mc_env_cfg_pool %s, env_idx_mon %s, agt_idx %s, scb_arr %s, scb_idx %s\n"%(mc_env_cfg_pool, env_idx_mon, agt_idx, scb_arr, scb_idx))        
                                    log.debug("mc_create_phase: if condition : %s, %s\n"%(mc_env_cfg_pool[env_idx_mon][2][agt_idx][2], len(scb_arr[scb_idx].split(":"))))
                                    if not mc_env_cfg_pool[env_idx_mon][2][agt_idx][2] and not len(scb_arr[scb_idx].split(":"))>1:
                                        log.debug("mc_create_phase : agent monitor == 1, scoreboard == 1, mc_curr_env_set_c %d!\n"%(mc_curr_env_set_c))
                                       
                                        for x in range (len(cp_monscb_con_arr)): 
                                            if "__c" in cp_monscb_con_arr[x].split(",")[0]:
                                                con_name = cp_monscb_con_arr[x].split(",")[0].replace("__c","")
                                            elif "__s" in cp_monscb_con_arr[x].split(",")[0]:
                                                con_name = cp_monscb_con_arr[x].split(",")[0].replace("__s","")
                                            else:
                                                con_name = cp_monscb_con_arr[x].split(",")[0]
                                            mon_con_name = envagtmonname+"_"+con_name

                                            #if "__c" in cp_monscb_con_arr[x].split(",")[0] or "__s" in cp_monscb_con_arr[x].split(",")[0] or mc_curr_env_set_c == 1:
                                            if "__c" in cp_monscb_con_arr[x].split(",")[0] or mc_curr_env_set_c == 1 or ("__s" in cp_monscb_con_arr[x].split(",")[0] and mc_curr_env_set_s == 0):
                                                log.debug("mc_create_phase : mon_env_hir %s  scb_env_hir %s!\n"%(mon_env_hir, scb_env_hir))
                                                if not mon_env_hir and not scb_env_hir: 
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ if (%s.%s_is_active && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ  %s_agt.%s_mon.%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ end\n\n')
                                                elif not mon_env_hir and scb_env_hir:    
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(scb_env_ifdef))\
                                                        +('µ if (%s.%s_is_active && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ  %s_agt.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ end\n')\
                                                        +('µ%s\n\n'%(scb_env_endif))
                                                    else:     
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(scb_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ if (%s.%s_is_active && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ  %s_agt.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s\n\n'%(scb_env_endif))
                                                elif mon_env_hir and not scb_env_hir:    
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(mon_env_ifdef))\
                                                        +('µ if (%s.%s_is_active && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ  %s.%s_agt.%s_mon.%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                        +('µ end\n')\
                                                        +('µ%s\n\n'%(mon_env_endif))
                                                    else:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(mon_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ if (%s.%s_is_active && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ  %s.%s_agt.%s_mon.%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s\n\n'%(mon_env_endif))
                                                elif mon_env_hir and scb_env_hir:    
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                        +('µ if (%s.%s_is_active && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ  %s.%s_agt.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ end\n')\
                                                        +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                                    else:      
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ if (%s.%s_is_active && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ  %s.%s_agt.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))

                                        log.debug("mc_create_phase : env_mon_scb_stg %s!\n"%env_mon_scb_stg)
                                    
                                    elif not mc_env_cfg_pool[env_idx_mon][2][agt_idx][2] and len(scb_arr[scb_idx].split(":"))>1:
                                        log.debug("mc_create_phase : agent monitor == 1, scoreboard > 1, mc_curr_env_set_c %d!\n"%(mc_curr_env_set_c))
                                    
                                        for x in range (len(cp_monscb_con_arr)): 
                                            if "__c" in cp_monscb_con_arr[x].split(",")[0]:
                                                con_name = cp_monscb_con_arr[x].split(",")[0].replace("__c","")
                                            elif "__s" in cp_monscb_con_arr[x].split(",")[0]:
                                                con_name = cp_monscb_con_arr[x].split(",")[0].replace("__s","")
                                            else:
                                                con_name = cp_monscb_con_arr[x].split(",")[0]
                                            mon_con_name = envagtmonname+"_"+con_name
                                            
                                            #if "__c" in cp_monscb_con_arr[x].split(",")[0] or "__s" in cp_monscb_con_arr[x].split(",")[0] or mc_curr_env_set_c == 1:
                                            if "__c" in cp_monscb_con_arr[x].split(",")[0] or mc_curr_env_set_c == 1 or ("__s" in cp_monscb_con_arr[x].split(",")[0] and mc_curr_env_set_s == 0):
                                                log.debug("mc_create_phase : mon_env_hir %s  scb_env_hir %s!\n"%(mon_env_hir, scb_env_hir))
                                                if not mon_env_hir and not scb_env_hir: 
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ  if (%s.%s_is_active[i] && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ   %s_agt.%s_mon.%s_%s_analysis_port.connect(%s_scb[i].%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n\n')
                                                elif not mon_env_hir and scb_env_hir:    
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(scb_env_ifdef))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ  if (%s.%s_is_active[i] && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ   %s_agt.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb[i].%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n\n'%(scb_env_endif))
                                                    else:                                                        
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(scb_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ  if (%s.%s_is_active[i] && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ   %s_agt.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb[i].%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s\n\n'%(scb_env_endif))
                                                elif mon_env_hir and not scb_env_hir:    
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(mon_env_ifdef))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ  if (%s.%s_is_active[i] && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ   %s.%s_agt.%s_mon.%s_%s_analysis_port.connect(%s_scb[i].%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n\n'%(mon_env_endif))
                                                    else:        
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(mon_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ  if (%s.%s_is_active[i] && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ   %s.%s_agt.%s_mon.%s_%s_analysis_port.connect(%s_scb[i].%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s\n\n'%(mon_env_endif))
                                                elif mon_env_hir and scb_env_hir:    
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ  if (%s.%s_is_active[i] && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ   %s.%s_agt.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb[i].%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                                    else:        
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ  if (%s.%s_is_active[i] && %s.%s_agent_cfg.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ   %s.%s_agt.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb[i].%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))

                                        log.debug("mc_create_phase : env_mon_scb_stg %s!\n"%env_mon_scb_stg)
                                   
                                    elif mc_env_cfg_pool[env_idx_mon][2][agt_idx][2] and not len(scb_arr[c+1].split(":"))>1:
                                        log.debug("mc_create_phase : agent monitor > 1, scoreboard == 1, mc_curr_env_set_c %d!\n"%(mc_curr_env_set_c))
                                    
                                        for x in range (len(cp_monscb_con_arr)): 
                                            if "__c" in cp_monscb_con_arr[x].split(",")[0]:
                                                con_name = cp_monscb_con_arr[x].split(",")[0].replace("__c","")
                                            elif "__s" in cp_monscb_con_arr[x].split(",")[0]:
                                                con_name = cp_monscb_con_arr[x].split(",")[0].replace("__s","")
                                            else:
                                                con_name = cp_monscb_con_arr[x].split(",")[0]
                                            mon_con_name = envagtmonname+"_"+con_name
                                            
                                            #if "__c" in cp_monscb_con_arr[x].split(",")[0] or "__s" in cp_monscb_con_arr[x].split(",")[0] or mc_curr_env_set_c == 1:
                                            if "__c" in cp_monscb_con_arr[x].split(",")[0] or mc_curr_env_set_c == 1 or ("__s" in cp_monscb_con_arr[x].split(",")[0] and mc_curr_env_set_s == 0):
                                                log.debug("mc_create_phase : mon_env_hir %s  scb_env_hir %s!\n"%(mon_env_hir, scb_env_hir))
                                                if not mon_env_hir and not scb_env_hir: 
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                    +('µ  if (%s.%s_is_active && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ   %s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n\n')
                                                elif not mon_env_hir and scb_env_hir: 
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(scb_env_ifdef))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                        +('µ  if (%s.%s_is_active && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ   %s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n\n'%(scb_env_endif))
                                                    else:     
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(scb_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                        +('µ  if (%s.%s_is_active && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ   %s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s\n\n'%(scb_env_endif))
                                                elif mon_env_hir and not scb_env_hir: 
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(mon_env_ifdef))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                        +('µ  if (%s.%s_is_active && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ   %s.%s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n\n'%(mon_env_endif))
                                                    else:     
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(mon_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                        +('µ  if (%s.%s_is_active && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ   %s.%s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s\n\n'%(mon_env_endif))
                                                elif mon_env_hir and scb_env_hir: 
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                        +('µ  if (%s.%s_is_active && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ   %s.%s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                                    else:       
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                        +('µ  if (%s.%s_is_active && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ   %s.%s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                        log.debug("mc_create_phase : env_mon_scb_stg %s!\n"%env_mon_scb_stg)

                                    elif mc_env_cfg_pool[env_idx_mon][2][agt_idx][2] and len(scb_arr[c+1].split(":"))>1:
                                        log.debug("mc_create_phase : agent monitor > 1, scoreboard > 1, mc_curr_env_set_c %d!\n"%(mc_curr_env_set_c))

                                        for x in range (len(cp_monscb_con_arr)): 
                                            if "__c" in cp_monscb_con_arr[x].split(",")[0]:
                                                con_name = cp_monscb_con_arr[x].split(",")[0].replace("__c","")
                                            elif "__s" in cp_monscb_con_arr[x].split(",")[0]:
                                                con_name = cp_monscb_con_arr[x].split(",")[0].replace("__s","")
                                            else:
                                                con_name = cp_monscb_con_arr[x].split(",")[0]
                                            mon_con_name = envagtmonname+"_"+con_name
                                            
                                            #if "__c" in cp_monscb_con_arr[x].split(",")[0] or "__s" in cp_monscb_con_arr[x].split(",")[0] or mc_curr_env_set_c == 1:
                                            if "__c" in cp_monscb_con_arr[x].split(",")[0] or mc_curr_env_set_c == 1 or ("__s" in cp_monscb_con_arr[x].split(",")[0] and mc_curr_env_set_s == 0):
                                                log.debug("mc_create_phase : mon_env_hir %s  scb_env_hir %s!\n"%(mon_env_hir, scb_env_hir))
                                                if not mon_env_hir and not scb_env_hir: 
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                    +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ   if (%s.%s_is_active[j] && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                    +('µ    %s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s_scb[j].%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ   end\n')\
                                                    +('µ  end\n')\
                                                    +('µ end\n\n')
                                                elif not mon_env_hir and scb_env_hir: 
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(scb_env_ifdef))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                        +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ   if (%s.%s_is_active[j] && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ    %s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s.%s_scb[j].%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ   end\n')\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n\n'%(scb_env_endif))
                                                    else:     
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(scb_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                        +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ   if (%s.%s_is_active[j] && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ    %s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s.%s_scb[j].%s_%s_analysis_export);\n'%(envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ   end\n')\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s\n\n'%(scb_env_endif))
                                                elif mon_env_hir and not scb_env_hir: 
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(mon_env_ifdef))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                        +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ   if (%s.%s_is_active[j] && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ    %s.%s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s_scb[j].%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                        +('µ   end\n')\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n\n'%(mon_env_endif))
                                                    else:     
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(mon_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                        +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ   if (%s.%s_is_active[j] && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ    %s.%s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s_scb[j].%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                        +('µ   end\n')\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s\n\n'%(mon_env_endif))
                                                elif mon_env_hir and scb_env_hir: 
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                        +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ   if (%s.%s_is_active[j] && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ    %s.%s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s.%s_scb[j].%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ   end\n')\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                                    else:      
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_agt; i++) begin\n'%(mon_env_cfg_hir, envagtname))\
                                                        +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ   if (%s.%s_is_active[j] && %s.%s_agent_cfg[i].%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envagtname, envagtmonname))\
                                                        +('µ    %s.%s_agt[i].%s_mon.%s_%s_analysis_port.connect(%s.%s_scb[j].%s_%s_analysis_export);\n'%(mon_env_hir, envagtname, envagtmonname, envagtmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ   end\n')\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                        log.debug("mc_create_phase : env_mon_scb_stg %s!\n"%env_mon_scb_stg)
                                    log.debug("mc_create_phase : if len(cp_mon_arr) == 4: For mon-scb connectivity loop is done!\n")
                                
                                elif len(cp_mon_arr) == 3:
                                    # Monitor related variables/arrays 
                                    pen_mon = cp_mon_arr[0]
                                    en_mon  = cp_mon_arr[1]
                                    m_mon   = cp_mon_arr[2]

                                    # Env Index Search
                                    env_search = pen_mon+","+en_mon
                                    env_idx_mon = self.find_index(env_search, mc_env_cfg_pool)
                                    log.debug("mc_create_phase : env_search %s env_idx_mon %s!\n"%(env_search, env_idx_mon))
                                    
                                    if env_idx_mon:
                                        env_idx_mon = int(env_idx_mon[0])
                                        #envname_mon = (mc_env_cfg_pool[env_idx_mon][0].split(","))[1]
                                        envname_mon = ((mc_env_cfg_pool[env_idx_mon][0].split(","))[1]).split(":")[0]

                                        if "__c" in envname_mon:
                                            envname_mon = envname_mon.replace("__c","")
                                        elif "__s" in envname_mon:
                                            envname_mon = envname_mon.replace("__s","")
                                    log.debug("mc_create_phase : env_search %s env_idx_mon %s envname_mon %s!\n"%(env_search, env_idx_mon, envname_mon))

                                    # Monitor Name
                                    #log.debug("mc_create_phase : mon ele to search %s pool %s!\n"%(cp_mon_arr[2], mc_env_cfg_pool[env_idx_mon][3]))
                                    log.debug("mc_create_phase : mon ele to search %s pool %s!\n"%(m_mon, mc_env_cfg_pool[env_idx_mon][3]))
                                    
                                    mon_arr = mc_env_cfg_pool[env_idx_mon][3].split(",")
                                    #mon_idx = self.find_index_sub_string(cp_mon_arr[2], mon_arr); 
                                    mon_idx = self.find_index_sub_string(m_mon, mon_arr); 
                                    if mon_idx:
                                        mon_idx = int(mon_idx[0])
                                    log.debug("mc_create_phase : mon_idx %s!\n"%(mon_idx))
                                    
                                    if len(mon_arr[mon_idx].split(":"))>1:
                                        #envmonname = envname_mon+"_"+(mon_arr[mon_idx].split(":"))[0]
                                        envmonname = (mon_arr[mon_idx].split(":"))[0]
                                    else:    
                                        #envmonname = envname_mon+"_"+mon_arr[mon_idx]
                                        envmonname = mon_arr[mon_idx]
                                   
                                    if "__c" in envmonname:
                                        envmonname = envmonname.replace("__c","")
                                    elif "__s" in envmonname:
                                        envmonname = envmonname.replace("__s","")

                                    log.debug("mc_create_phase : mon_idx %d  envmonname %s!\n"%(mon_idx, envmonname))
                                    log.debug("mc_create_phase : envname %s parenvname %s cp_mon_arr %s cp_mon_arr%s\n"%(envname, parenvname, cp_mon_arr, cp_mon_arr))

                                    # Scoreboard related variables/arrays 
                                    pen_scb = cp_scb_arr[0]
                                    en_scb  = cp_scb_arr[1]
                                    a_scb   = cp_scb_arr[2]
                                    
                                    # Env Index Search
                                    env_search = pen_scb+","+en_scb
                                    env_idx_scb = self.find_index(env_search, mc_env_cfg_pool)
                                    log.debug("mc_create_phase : env_search %s env_idx_scb %s!\n"%(env_search, env_idx_scb))
                                    
                                    if env_idx_scb:
                                        env_idx_scb = int(env_idx_scb[0])
                                        #envname_scb = (mc_env_cfg_pool[env_idx_scb][0].split(","))[1]
                                        envname_scb = ((mc_env_cfg_pool[env_idx_scb][0].split(","))[1]).split(":")[0]

                                        if "__c" in envname_scb:
                                            envname_scb = envname_scb.replace("__c","")
                                        elif "__s" in envname_scb:
                                            envname_scb = envname_scb.replace("__s","")

                                    log.debug("mc_create_phase : env_search %s env_idx_scb %s envname_scb %s!\n"%(env_search, env_idx_scb, envname_scb))

                                    # Scoreboard Name
                                    #log.debug("mc_create_phase : scb ele to search %s pool %s!\n"%(cp_scb_arr[2], mc_env_cfg_pool[env_idx_scb][4]))
                                    log.debug("mc_create_phase : scb ele to search %s pool %s!\n"%(a_scb, mc_env_cfg_pool[env_idx_scb][4]))
                                    scb_arr = mc_env_cfg_pool[env_idx_scb][4].split(",")
                                    #scb_idx = self.find_index_sub_string(cp_scb_arr[2], scb_arr); 
                                    scb_idx = self.find_index_sub_string(a_scb, scb_arr); 
                                    if scb_idx:
                                        scb_idx = int(scb_idx[0])
                                    log.debug("mc_create_phase : scb_idx %s!\n"%(scb_idx))
                                    
                                    if len(scb_arr[scb_idx].split(":"))>1:
                                        #envscbname = envname_scb+"_"+(scb_arr[scb_idx].split(":"))[0]
                                        envscbname = (scb_arr[scb_idx].split(":"))[0]
                                    else:    
                                        #envscbname = envname_scb+"_"+scb_arr[scb_idx]
                                        envscbname = scb_arr[scb_idx]
                                    
                                    if "__c" in envscbname:
                                        envscbname = envscbname.replace("__c","")
                                    elif "__s" in envscbname:
                                        envscbname = envscbname.replace("__s","")
                                    
                                    log.debug("mc_create_phase : mon_idx %s envmonname %s scb_idx %d  envscbname %s!\n"%(mon_idx, envmonname, scb_idx, envscbname))
                                    log.debug("mc_create_phase : envname %s parenvname %s cp_mon_arr %s cp_scb_arr%s\n"%(envname, parenvname, cp_mon_arr, cp_scb_arr))

                                    # Common Variables  
                                    for_loop_begin = ''
                                    for_loop_end = ''
                                    
                                    # TRY To find the hierarchy for monitor and scoreboard
                                    mon_no = env_idx_mon 
                                    mon_no_idx = 0; mon_iter = 0
                                    mon_env_cfg_hir = ''
                                    mon_env_hir = ''
                                    mon_env_ifdef = ''
                                    mon_env_endif = ''
                                    while True:
                                        env_ele_mon = (mc_env_cfg_pool[mon_no][0]).split(",")
                                        ele_to_search = ','+env_ele_mon[0] 
                                        log.debug("mc_create_phase : env_ele_mon %s ele_to_search%s\n"%(env_ele_mon, ele_to_search))

                                        #   if mon_iter: 
                                        #       if ((mc_env_cfg_pool[mon_no][0]).split(","))[1].replace("__c","").replace("__s","") == envname:
                                        #           mon_env_cfg_hir = ('%s_environment_cfg'%(env_ele_mon[1].replace("__c","").replace("__s","")))+"."+mon_env_cfg_hir
                                        #           #mon_env_hir = ''+mon_env_hir 
                                        #           log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir%s\n"%(mon_env_cfg_hir, mon_env_hir))
                                        #           mon_iter = 0; break
                                        #       else:
                                        #           #mon_env_ifdef = ('`ifndef DISABLE_%s_%s_ENV '%(env_ele_mon[0].replace("__c","").replace("__s","").upper(), env_ele_mon[1].replace("__c","").replace("__s","").upper()))+mon_env_ifdef
                                        #           mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(env_ele_mon[1].replace("__c","").replace("__s","").upper()))+mon_env_ifdef
                                        #           mon_env_endif = ('`endif ')+mon_env_endif
                                        #           
                                        #           #mon_env_cfg_hir = ('%s_%s_environment_cfg'%(env_ele_mon[0].replace("__c","").replace("__s",""), env_ele_mon[1].replace("__c","").replace("__s","")))+"."+mon_env_cfg_hir
                                        #           mon_env_cfg_hir = ('%s_environment_cfg'%(env_ele_mon[1].replace("__c","").replace("__s","")))+"."+mon_env_cfg_hir
                                        #           #mon_env_hir = ('%s_%s_env'%(env_ele_mon[0].replace("__c","").replace("__s",""), env_ele_mon[1].replace("__c","").replace("__s","")))+"."+mon_env_hir 
                                        #           mon_env_hir = ('%s_env'%(env_ele_mon[1].replace("__c","").replace("__s","")))+"."+mon_env_hir 
                                        #           log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir%s\n"%(mon_env_cfg_hir, mon_env_hir))
                                        #   else:
                                        #       if ((mc_env_cfg_pool[mon_no][0]).split(","))[1].replace("__c","").replace("__s","") == envname:
                                        #           mon_env_cfg_hir = ('%s_environment_cfg'%(env_ele_mon[1].replace("__c","").replace("__s","")))+mon_env_cfg_hir
                                        #           #mon_env_hir = ''+mon_env_hir 
                                        #           log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir%s\n"%(mon_env_cfg_hir, mon_env_hir))
                                        #           break
                                        #       else:
                                        #           #mon_env_ifdef = ('`ifndef DISABLE_%s_%s_ENV '%(env_ele_mon[0].replace("__c","").replace("__s","").upper(), env_ele_mon[1].replace("__c","").replace("__s","").upper()))+mon_env_ifdef
                                        #           mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(env_ele_mon[1].replace("__c","").replace("__s","").upper()))+mon_env_ifdef
                                        #           mon_env_endif = ('`endif ')+mon_env_endif
                                        #           
                                        #           #mon_env_cfg_hir = ('%s_%s_environment_cfg'%(env_ele_mon[0].replace("__c","").replace("__s",""), env_ele_mon[1].replace("__c","").replace("__s","")))+mon_env_cfg_hir
                                        #           mon_env_cfg_hir = ('%s_environment_cfg'%(env_ele_mon[1].replace("__c","").replace("__s","")))+mon_env_cfg_hir
                                        #           #mon_env_hir = ('%s_%s_env'%(env_ele_mon[0].replace("__c","").replace("__s",""), env_ele_mon[1].replace("__c","").replace("__s","")))+mon_env_hir 
                                        #           mon_env_hir = ('%s_env'%(env_ele_mon[1].replace("__c","").replace("__s","")))+mon_env_hir 
                                        #           log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir%s\n"%(mon_env_cfg_hir, mon_env_hir))
                                        #       
                                        #   while mon_no_idx < len(mc_env_cfg_pool):
                                        #       if ele_to_search in mc_env_cfg_pool[mon_no_idx][0]:
                                        #           mon_no = mon_no_idx
                                        #           mon_no_idx = 0; mon_iter += 1
                                        #           break 
                                        #       else:
                                        #           mon_no_idx += 1; mon_iter += 1


                                        if mon_iter: 
                                            #log.debug("mon-scb-con:3 : %s %s"%(str(((mc_env_cfg_pool[mon_no][0]).split(","))[1].replace("__c","").replace("__s","")), envname_org))
                                            #if ((mc_env_cfg_pool[mon_no][0]).split(","))[1].replace("__c","").replace("__s","") == envname_org:
                                            
                                            log.debug("mon-scb-con:3 : %s %s"%(str(((mc_env_cfg_pool[mon_no][0]).split(","))[1]), envname_org))
                                            if ((mc_env_cfg_pool[mon_no][0]).split(","))[1] == envname_org:
                                                if len(env_ele_mon[1].split(":"))>1:
                                                    ename = (env_ele_mon[1].split(":")[0]).replace("__c","").replace("__s","")
                                                else:
                                                    ename = env_ele_mon[1].replace("__c","").replace("__s","")

                                                mon_env_cfg_hir = ('%s_environment_cfg'%(ename))+"."+mon_env_cfg_hir
                                                log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s\n"%(mon_env_cfg_hir, mon_env_hir))
                                                mon_iter = 0; break
                                            else:
                                                if len(env_ele_mon[1].split(":"))>1:
                                                    ename = (env_ele_mon[1].split(":")[0]).replace("__c","").replace("__s","")
                                                    enum  = int(env_ele_mon[1].split(":")[1])
                                                    eloop = str_arr[str_arr_idx] 

                                                    mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+mon_env_ifdef
                                                    mon_env_endif = ('`endif ')+mon_env_endif
                                                    
                                                    mon_env_cfg_hir = ('%s_environment_cfg[%s]'%(ename,eloop))+"."+mon_env_cfg_hir
                                                    mon_env_hir = ('%s_env[%s]'%(ename,eloop))+"."+mon_env_hir 
                                                    
                                                    for_loop_begin  = for_loop_begin+('for (int %s = 0; %s < %d; %s++) begin '%(eloop, eloop, enum, eloop))
                                                    #for_loop_begin  = for_loop_begin+('for (int %s = 0; %s < %s_environment_cfg.no_of_%s_env; %s++) begin '%(eloop, eloop, envname, ename, eloop))
                                                    for_loop_end    = for_loop_end+('end ')

                                                    log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s\n"%(mon_env_cfg_hir, mon_env_hir))
                                                else:
                                                    if len(env_ele_mon[1].split(":"))>1:
                                                        ename = (env_ele_mon[1].split(":")[0]).replace("__c","").replace("__s","")
                                                    else:
                                                        ename = env_ele_mon[1].replace("__c","").replace("__s","")
                                                    
                                                    mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+mon_env_ifdef
                                                    mon_env_endif = ('`endif ')+mon_env_endif
                                                    
                                                    mon_env_cfg_hir = ('%s_environment_cfg'%(ename))+"."+mon_env_cfg_hir
                                                    mon_env_hir = ('%s_env'%(ename))+"."+mon_env_hir 
                                                    log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s\n"%(mon_env_cfg_hir, mon_env_hir))
                                        else:
                                            #log.debug("mon-scb-con:3 : %s %s"%(str(((mc_env_cfg_pool[mon_no][0]).split(","))[1].replace("__c","").replace("__s","")), envname_org))
                                            #if ((mc_env_cfg_pool[mon_no][0]).split(","))[1].replace("__c","").replace("__s","") == envname_org:
                                            
                                            log.debug("mon-scb-con:3 : %s %s"%(str(((mc_env_cfg_pool[mon_no][0]).split(","))[1]), envname_org))
                                            if ((mc_env_cfg_pool[mon_no][0]).split(","))[1] == envname_org:
                                                if len(env_ele_mon[1].split(":"))>1:
                                                    ename = (env_ele_mon[1].split(":")[0]).replace("__c","").replace("__s","")
                                                else:
                                                    ename = env_ele_mon[1].replace("__c","").replace("__s","")
                                                
                                                mon_env_cfg_hir = ('%s_environment_cfg'%(ename))+mon_env_cfg_hir
                                                log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s\n"%(mon_env_cfg_hir, mon_env_hir))
                                                break
                                            else:
                                                # If it has more hierarchy, and if the env has more instance then get the for_loop_begin info
                                                if len(env_ele_mon[1].split(":"))>1:
                                                    ename = (env_ele_mon[1].split(":")[0]).replace("__c","").replace("__s","")
                                                    enum  = int(env_ele_mon[1].split(":")[1])
                                                    eloop = str_arr[str_arr_idx] 

                                                    mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+mon_env_ifdef
                                                    mon_env_endif = ('`endif ')+mon_env_endif
                                                    
                                                    mon_env_cfg_hir = ('%s_environment_cfg[%s]'%(ename,eloop))+mon_env_cfg_hir
                                                    mon_env_hir = ('%s_env[%s]'%(ename,eloop))+mon_env_hir 
                                                    
                                                    for_loop_begin  = ('for (int %s = 0; %s < %d; %s++) begin '%(eloop, eloop, enum, eloop))+for_loop_begin
                                                    #for_loop_begin  = ('for (int %s = 0; %s < %s_environment_cfg.no_of_%s_env; %s++) begin '%(eloop, eloop, envname, ename, eloop))+for_loop_begin
                                                    for_loop_end    = ('end ')+for_loop_end

                                                    log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s\n"%(mon_env_cfg_hir, mon_env_hir))
                                                else:
                                                    if len(env_ele_mon[1].split(":"))>1:
                                                        ename = (env_ele_mon[1].split(":")[0]).replace("__c","").replace("__s","")
                                                    else:
                                                        ename = env_ele_mon[1].replace("__c","").replace("__s","")

                                                    mon_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+mon_env_ifdef
                                                    mon_env_endif = ('`endif ')+mon_env_endif
                                                    
                                                    mon_env_cfg_hir = ('%s_environment_cfg'%(ename))+mon_env_cfg_hir
                                                    mon_env_hir = ('%s_env'%(ename))+mon_env_hir 
                                                    log.debug("mc_create_phase : mon_env_cfg_hir %s mon_env_hir %s\n"%(mon_env_cfg_hir, mon_env_hir))

                                        while mon_no_idx < len(mc_env_cfg_pool):
                                            if ele_to_search in mc_env_cfg_pool[mon_no_idx][0]:
                                                mon_no = mon_no_idx
                                                mon_no_idx = 0; mon_iter += 1; str_arr_idx += 1
                                                break 
                                            else:
                                                mon_no_idx += 1; mon_iter += 1; str_arr_idx += 1


                                    scb_no = env_idx_scb 
                                    scb_no_idx = 0; scb_iter = 0
                                    scb_env_cfg_hir = ''
                                    scb_env_hir = ''
                                    scb_env_ifdef = ''
                                    scb_env_endif = ''
                                    while True:
                                        env_ele_scb = (mc_env_cfg_pool[scb_no][0]).split(",")
                                        ele_to_search = ','+env_ele_scb[0] 
                                        log.debug("mc_create_phase : env_ele_scb %s ele_to_search%s\n"%(env_ele_scb, ele_to_search))

                                        #   if scb_iter:
                                        #       if ((mc_env_cfg_pool[scb_no][0]).split(","))[1].replace("__c","").replace("__s","") == envname:
                                        #           scb_env_cfg_hir = ('%s_environment_cfg'%(env_ele_scb[1].replace("__c","").replace("__s","")))+"."+scb_env_cfg_hir
                                        #           #scb_env_hir = ''+scb_env_hir 
                                        #           log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir%s\n"%(scb_env_cfg_hir, scb_env_hir))
                                        #           scb_iter = 0; break
                                        #       else:
                                        #           #scb_env_ifdef = ('`ifndef DISABLE_%s_%s_ENV '%(env_ele_scb[0].replace("__c","").replace("__s","").upper(), env_ele_scb[1].replace("__c","").replace("__s","").upper()))+scb_env_ifdef
                                        #           scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(env_ele_scb[1].replace("__c","").replace("__s","").upper()))+scb_env_ifdef
                                        #           scb_env_endif = ('`endif ')+scb_env_endif
                                        #           
                                        #           #scb_env_cfg_hir = ('%s_%s_environment_cfg'%(env_ele_scb[0].replace("__c","").replace("__s",""), env_ele_scb[1].replace("__c","").replace("__s","")))+"."+scb_env_cfg_hir
                                        #           scb_env_cfg_hir = ('%s_environment_cfg'%(env_ele_scb[1].replace("__c","").replace("__s","")))+"."+scb_env_cfg_hir
                                        #           #scb_env_hir = ('%s_%s_env'%(env_ele_scb[0].replace("__c","").replace("__s",""), env_ele_scb[1].replace("__c","").replace("__s","")))+"."+scb_env_hir 
                                        #           scb_env_hir = ('%s_env'%(env_ele_scb[1].replace("__c","").replace("__s","")))+"."+scb_env_hir 
                                        #           log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir%s\n"%(scb_env_cfg_hir, scb_env_hir))
                                        #   else:
                                        #       if ((mc_env_cfg_pool[scb_no][0]).split(","))[1].replace("__c","").replace("__s","") == envname:
                                        #           scb_env_cfg_hir = ('%s_environment_cfg'%(env_ele_scb[1].replace("__c","").replace("__s","")))+scb_env_cfg_hir
                                        #           #scb_env_hir = ''+scb_env_hir 
                                        #           log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir%s\n"%(scb_env_cfg_hir, scb_env_hir))
                                        #           break
                                        #       else:
                                        #           #scb_env_ifdef = ('`ifndef DISABLE_%s_%s_ENV '%(env_ele_scb[0].replace("__c","").replace("__s","").upper(), env_ele_scb[1].replace("__c","").replace("__s","").upper()))+scb_env_ifdef
                                        #           scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(env_ele_scb[1].replace("__c","").replace("__s","").upper()))+scb_env_ifdef
                                        #           scb_env_endif = ('`endif ')+scb_env_endif
                                        #           
                                        #           #scb_env_cfg_hir = ('%s_%s_environment_cfg'%(env_ele_scb[0].replace("__c","").replace("__s",""), env_ele_scb[1].replace("__c","").replace("__s","")))+scb_env_cfg_hir
                                        #           scb_env_cfg_hir = ('%s_environment_cfg'%(env_ele_scb[1].replace("__c","").replace("__s","")))+scb_env_cfg_hir
                                        #           #scb_env_hir = ('%s_%s_env'%(env_ele_scb[0].replace("__c","").replace("__s",""), env_ele_scb[1].replace("__c","").replace("__s","")))+scb_env_hir 
                                        #           scb_env_hir = ('%s_env'%(env_ele_scb[1].replace("__c","").replace("__s","")))+scb_env_hir 
                                        #           log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir%s\n"%(scb_env_cfg_hir, scb_env_hir))

                                        #   while scb_no_idx < len(mc_env_cfg_pool):
                                        #       if ele_to_search in mc_env_cfg_pool[scb_no_idx][0]:
                                        #           scb_no = scb_no_idx
                                        #           scb_no_idx = 0; scb_iter += 1
                                        #           break 
                                        #       else:
                                        #           scb_no_idx += 1; scb_iter += 1

                                   
                                        if scb_iter:
                                            #log.debug("mon-scb-con:3 : %s %s"%(str(((mc_env_cfg_pool[scb_no][0]).split(","))[1].replace("__c","").replace("__s","")), envname_org))
                                            #if ((mc_env_cfg_pool[scb_no][0]).split(","))[1].replace("__c","").replace("__s","") == envname_org:
                                            
                                            log.debug("mon-scb-con:3 : %s %s"%(str(((mc_env_cfg_pool[scb_no][0]).split(","))[1]), envname_org))
                                            if ((mc_env_cfg_pool[scb_no][0]).split(","))[1] == envname_org:
                                                if len(env_ele_scb[1].split(":"))>1:
                                                    ename = (env_ele_scb[1].split(":")[0]).replace("__c","").replace("__s","")
                                                else:
                                                    ename = env_ele_scb[1].replace("__c","").replace("__s","")

                                                scb_env_cfg_hir = ('%s_environment_cfg'%(ename))+"."+scb_env_cfg_hir
                                                log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s\n"%(scb_env_cfg_hir, scb_env_hir))
                                                scb_iter = 0; break
                                            else:
                                                # If it has more hierarchy, and if the env has more instance then get the for_loop_begin info
                                                if len(env_ele_scb[1].split(":"))>1:
                                                    ename = (env_ele_scb[1].split(":")[0]).replace("__c","").replace("__s","")
                                                    enum  = int(env_ele_scb[1].split(":")[1])
                                                    eloop = str_arr[str_arr_idx] 

                                                    scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+scb_env_ifdef
                                                    scb_env_endif = ('`endif ')+scb_env_endif
                                                    
                                                    scb_env_cfg_hir = ('%s_environment_cfg[%s]'%(ename,eloop))+"."+scb_env_cfg_hir
                                                    scb_env_hir = ('%s_env[%s]'%(ename,eloop))+"."+scb_env_hir 
                                                    
                                                    for_loop_begin  = for_loop_begin+('for (int %s = 0; %s < %d; %s++) begin '%(eloop, eloop, enum, eloop))
                                                    #for_loop_begin  = for_loop_begin+('for (int %s = 0; %s < %s_environment_cfg.no_of_%s_env; %s++) begin '%(eloop, eloop, envname, ename, eloop))
                                                    for_loop_end    = for_loop_end+('end ')

                                                    log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s\n"%(scb_env_cfg_hir, scb_env_hir))
                                                else:
                                                    if len(env_ele_scb[1].split(":"))>1:
                                                        ename = (env_ele_scb[1].split(":")[0]).replace("__c","").replace("__s","")
                                                    else:
                                                        ename = env_ele_scb[1].replace("__c","").replace("__s","")
                                                    
                                                    scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+scb_env_ifdef
                                                    scb_env_endif = ('`endif ')+scb_env_endif
                                                    
                                                    scb_env_cfg_hir = ('%s_environment_cfg'%(ename))+"."+scb_env_cfg_hir
                                                    scb_env_hir = ('%s_env'%(ename))+"."+scb_env_hir 
                                                    log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s\n"%(scb_env_cfg_hir, scb_env_hir))
                                        else:
                                            #log.debug("mon-scb-con:3 : %s %s"%(str(((mc_env_cfg_pool[scb_no][0]).split(","))[1].replace("__c","").replace("__s","")), envname_org))
                                            #if ((mc_env_cfg_pool[scb_no][0]).split(","))[1].replace("__c","").replace("__s","") == envname_org:
                                            
                                            log.debug("mon-scb-con:3 : %s %s"%(str(((mc_env_cfg_pool[scb_no][0]).split(","))[1]), envname_org))
                                            if ((mc_env_cfg_pool[scb_no][0]).split(","))[1] == envname_org:
                                                if len(env_ele_scb[1].split(":"))>1:
                                                    ename = (env_ele_scb[1].split(":")[0]).replace("__c","").replace("__s","")
                                                else:
                                                    ename = env_ele_scb[1].replace("__c","").replace("__s","")

                                                scb_env_cfg_hir = ('%s_environment_cfg'%(ename))+scb_env_cfg_hir
                                                log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s\n"%(scb_env_cfg_hir, scb_env_hir))
                                                break
                                            else:
                                                # If it has more hierarchy, and if the env has more instance then get the for_loop_begin info
                                                if len(env_ele_scb[1].split(":"))>1:
                                                    ename = (env_ele_scb[1].split(":")[0]).replace("__c","").replace("__s","")
                                                    enum  = int(env_ele_scb[1].split(":")[1])
                                                    eloop = str_arr[str_arr_idx] 

                                                    scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+scb_env_ifdef
                                                    scb_env_endif = ('`endif ')+scb_env_endif
                                                    
                                                    scb_env_cfg_hir = ('%s_environment_cfg[%s]'%(ename,eloop))+scb_env_cfg_hir
                                                    scb_env_hir = ('%s_env[%s]'%(ename,eloop))+scb_env_hir 
                                                    
                                                    for_loop_begin  = ('for (int %s = 0; %s < %d; %s++) begin '%(eloop, eloop, enum, eloop))+for_loop_begin
                                                    #for_loop_begin  = ('for (int %s = 0; %s < %s_environment_cfg.no_of_%s_env; %s++) begin '%(eloop, eloop, envname, ename, eloop))+for_loop_begin
                                                    for_loop_end    = ('end ')+for_loop_end

                                                    log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s\n"%(scb_env_cfg_hir, scb_env_hir))
                                                else:
                                                    if len(env_ele_scb[1].split(":"))>1:
                                                        ename = (env_ele_scb[1].split(":")[0]).replace("__c","").replace("__s","")
                                                    else:
                                                        ename = env_ele_scb[1].replace("__c","").replace("__s","")

                                                    scb_env_ifdef = ('`ifndef DISABLE_%s_ENV '%(ename.upper()))+scb_env_ifdef
                                                    scb_env_endif = ('`endif ')+scb_env_endif
                                                    
                                                    scb_env_cfg_hir = ('%s_environment_cfg'%(ename))+scb_env_cfg_hir
                                                    scb_env_hir = ('%s_env'%(ename))+scb_env_hir 
                                                    log.debug("mc_create_phase : scb_env_cfg_hir %s scb_env_hir %s\n"%(scb_env_cfg_hir, scb_env_hir))

                                        while scb_no_idx < len(mc_env_cfg_pool):
                                            if ele_to_search in mc_env_cfg_pool[scb_no_idx][0]:
                                                scb_no = scb_no_idx
                                                scb_no_idx = 0; scb_iter += 1; str_arr_idx += 1
                                                break 
                                            else:
                                                scb_no_idx += 1; scb_iter += 1; str_arr_idx += 1


                                    log.debug("mc_create_phase : mc_curr_env_set_c %d, %s, %s!\n"%(mc_curr_env_set_c, mc_env_cfg_pool, len(scb_arr[scb_idx].split(":"))))
                                    #log.debug("mc_create_phase : mc_curr_env_set_c %d, %s, %s!\n"%(mc_curr_env_set_c, mc_env_cfg_pool[env_idx_mon][2][agt_idx][2], len(scb_arr[scb_idx].split(":"))))
                                   
                                    log.debug("mc_create_phase: mon_env_cfg_hir %s mon_env_hir %s mon_env_ifdef %s mon_env_endif %s\n"%(mon_env_cfg_hir, mon_env_hir, mon_env_ifdef, mon_env_endif))
                                    log.debug("mc_create_phase: scb_env_cfg_hir %s scb_env_hir %s scb_env_ifdef %s scb_env_endif %s\n"%(scb_env_cfg_hir, scb_env_hir, scb_env_ifdef, scb_env_endif))
                                    log.debug("mc_create_phase: for_loop_begin %s for_loop_end %s\n"%(for_loop_begin, for_loop_end))
                                   
                                    log.debug("mc_create_phase: mon_arr %s, scb_arr %s, scb_idx %s\n"%(mon_arr, scb_arr, scb_idx))
                                    log.debug("mc_create_phase: if condition : %s, %s\n"%(len(mon_arr[mon_idx].split(":")), len(scb_arr[scb_idx].split(":"))))
                                    if not len(mon_arr[mon_idx].split(":"))>1 and not len(scb_arr[scb_idx].split(":"))>1:
                                        log.debug("mc_create_phase : agent monitor == 1, scoreboard == 1!\n")
                                       
                                        for x in range (len(cp_monscb_con_arr)): 
                                            if "__c" in cp_monscb_con_arr[x].split(",")[0]:
                                                con_name = cp_monscb_con_arr[x].split(",")[0].replace("__c","")
                                            elif "__s" in cp_monscb_con_arr[x].split(",")[0]:
                                                con_name = cp_monscb_con_arr[x].split(",")[0].replace("__s","")
                                            else:
                                                con_name = cp_monscb_con_arr[x].split(",")[0]
                                            mon_con_name = envmonname+"_"+con_name

                                            #if "__c" in cp_monscb_con_arr[x].split(",")[0] or "__s" in cp_monscb_con_arr[x].split(",")[0] or mc_curr_env_set_c == 1:
                                            if "__c" in cp_monscb_con_arr[x].split(",")[0] or mc_curr_env_set_c == 1 or ("__s" in cp_monscb_con_arr[x].split(",")[0] and mc_curr_env_set_s == 0):
                                                log.debug("mc_create_phase : mon_env_hir %s  scb_env_hir %s!\n"%(mon_env_hir, scb_env_hir))
                                                if not mon_env_hir and not scb_env_hir: 
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ if (%s.%s_is_active && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ  %s_mon.%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ end\n\n')
                                                elif not mon_env_hir and scb_env_hir:    
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(scb_env_ifdef))\
                                                        +('µ if (%s.%s_is_active && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ  %s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ end\n')\
                                                        +('µ%s\n\n'%(scb_env_endif))
                                                    else:      
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(scb_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ if (%s.%s_is_active && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ  %s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s\n\n'%(scb_env_endif))
                                                elif mon_env_hir and not scb_env_hir:    
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(mon_env_ifdef))\
                                                        +('µ if (%s.%s_is_active && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ  %s.%s_mon.%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                        +('µ end\n')\
                                                        +('µ%s\n\n'%(mon_env_endif))
                                                    else:    
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(mon_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ if (%s.%s_is_active && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ  %s.%s_mon.%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s\n\n'%(mon_env_endif))
                                                elif mon_env_hir and scb_env_hir:    
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                        +('µ if (%s.%s_is_active && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ  %s.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ end\n')\
                                                        +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                                    else:    
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ if (%s.%s_is_active && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ  %s.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                        log.debug("mc_create_phase : env_mon_scb_stg %s!\n"%env_mon_scb_stg)
                                    
                                    elif not len(mon_arr[mon_idx].split(":"))>1 and len(scb_arr[scb_idx].split(":"))>1:
                                        log.debug("mc_create_phase : agent monitor == 1, scoreboard > 1!\n")
                                    
                                        for x in range (len(cp_monscb_con_arr)): 
                                            if "__c" in cp_monscb_con_arr[x].split(",")[0]:
                                                con_name = cp_monscb_con_arr[x].split(",")[0].replace("__c","")
                                            elif "__s" in cp_monscb_con_arr[x].split(",")[0]:
                                                con_name = cp_monscb_con_arr[x].split(",")[0].replace("__s","")
                                            else:
                                                con_name = cp_monscb_con_arr[x].split(",")[0]
                                            mon_con_name = envmonname+"_"+con_name

                                            #if "__c" in cp_monscb_con_arr[x].split(",")[0] or "__s" in cp_monscb_con_arr[x].split(",")[0] or mc_curr_env_set_c == 1:
                                            if "__c" in cp_monscb_con_arr[x].split(",")[0] or mc_curr_env_set_c == 1 or ("__s" in cp_monscb_con_arr[x].split(",")[0] and mc_curr_env_set_s == 0):
                                                log.debug("mc_create_phase : mon_env_hir %s  scb_env_hir %s!\n"%(mon_env_hir, scb_env_hir))
                                                if not mon_env_hir and not scb_env_hir: 
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ  if (%s.%s_is_active[i] && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ   %s_mon.%s_%s_analysis_port.connect(%s_scb[i].%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n\n')
                                                elif not mon_env_hir and scb_env_hir:    
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(scb_env_ifdef))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ  if (%s.%s_is_active[i] && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ   %s_mon.%s_%s_analysis_port.connect(%s.%s_scb[i].%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n\n'%(scb_env_endif))
                                                    else:     
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(scb_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ  if (%s.%s_is_active[i] && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ   %s_mon.%s_%s_analysis_port.connect(%s.%s_scb[i].%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s\n\n'%(scb_env_endif))
                                                elif mon_env_hir and not scb_env_hir:    
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(mon_env_ifdef))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ  if (%s.%s_is_active[i] && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ   %s.%s_mon.%s_%s_analysis_port.connect(%s_scb[i].%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n\n'%(mon_env_endif))
                                                    else:     
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(mon_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ  if (%s.%s_is_active[i] && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ   %s.%s_mon.%s_%s_analysis_port.connect(%s_scb[i].%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s\n\n'%(mon_env_endif))
                                                elif mon_env_hir and scb_env_hir:    
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ  if (%s.%s_is_active[i] && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ   %s.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb[i].%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                                    else:      
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ  if (%s.%s_is_active[i] && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ   %s.%s_mon.%s_%s_analysis_port.connect(%s.%s_scb[i].%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))

                                        log.debug("mc_create_phase : env_mon_scb_stg %s!\n"%env_mon_scb_stg)
                                   
                                    elif len(mon_arr[mon_idx].split(":"))>1 and not len(scb_arr[scb_idx].split(":"))>1:
                                        log.debug("mc_create_phase : agent monitor > 1, scoreboard == 1!\n")
                                    
                                        for x in range (len(cp_monscb_con_arr)): 
                                            if "__c" in cp_monscb_con_arr[x].split(",")[0]:
                                                con_name = cp_monscb_con_arr[x].split(",")[0].replace("__c","")
                                            elif "__s" in cp_monscb_con_arr[x].split(",")[0]:
                                                con_name = cp_monscb_con_arr[x].split(",")[0].replace("__s","")
                                            else:
                                                con_name = cp_monscb_con_arr[x].split(",")[0]
                                            mon_con_name = envmonname+"_"+con_name

                                            #if "__c" in cp_monscb_con_arr[x].split(",")[0] or "__s" in cp_monscb_con_arr[x].split(",")[0] or mc_curr_env_set_c == 1:
                                            if "__c" in cp_monscb_con_arr[x].split(",")[0] or mc_curr_env_set_c == 1 or ("__s" in cp_monscb_con_arr[x].split(",")[0] and mc_curr_env_set_s == 0):
                                                log.debug("mc_create_phase : mon_env_hir %s  scb_env_hir %s!\n"%(mon_env_hir, scb_env_hir))
                                                if not mon_env_hir and not scb_env_hir: 
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                    +('µ  if (%s.%s_is_active && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ   %s_mon[i].%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ  end\n')\
                                                    +('µ end\n\n')
                                                elif not mon_env_hir and scb_env_hir: 
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(scb_env_ifdef))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                        +('µ  if (%s.%s_is_active && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ   %s_mon[i].%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n\n'%(scb_env_endif))
                                                    else:     
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(scb_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                        +('µ  if (%s.%s_is_active && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ   %s_mon[i].%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s\n\n'%(scb_env_endif))
                                                elif mon_env_hir and not scb_env_hir: 
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(mon_env_ifdef))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                        +('µ  if (%s.%s_is_active && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ   %s.%s_mon[i].%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n\n'%(mon_env_endif))
                                                    else:     
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(mon_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                        +('µ  if (%s.%s_is_active && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ   %s.%s_mon[i].%s_%s_analysis_port.connect(%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s\n\n'%(mon_env_endif))
                                                elif mon_env_hir and scb_env_hir: 
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                        +('µ  if (%s.%s_is_active && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ   %s.%s_mon[i].%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                                    else:     
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                        +('µ  if (%s.%s_is_active && %s.%s_is_active) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ   %s.%s_mon[i].%s_%s_analysis_port.connect(%s.%s_scb.%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))

                                        log.debug("mc_create_phase : env_mon_scb_stg %s!\n"%env_mon_scb_stg)

                                    elif len(mon_arr[mon_idx].split(":"))>1 and len(scb_arr[scb_idx].split(":"))>1:
                                        log.debug("mc_create_phase : agent monitor > 1, scoreboard > 1!\n")

                                        for x in range (len(cp_monscb_con_arr)): 
                                            if "__c" in cp_monscb_con_arr[x].split(",")[0]:
                                                con_name = cp_monscb_con_arr[x].split(",")[0].replace("__c","")
                                            elif "__s" in cp_monscb_con_arr[x].split(",")[0]:
                                                con_name = cp_monscb_con_arr[x].split(",")[0].replace("__s","")
                                            else:
                                                con_name = cp_monscb_con_arr[x].split(",")[0]
                                            mon_con_name = envmonname+"_"+con_name

                                            #if "__c" in cp_monscb_con_arr[x].split(",")[0] or "__s" in cp_monscb_con_arr[x].split(",")[0] or mc_curr_env_set_c == 1:
                                            if "__c" in cp_monscb_con_arr[x].split(",")[0] or mc_curr_env_set_c == 1 or ("__s" in cp_monscb_con_arr[x].split(",")[0] and mc_curr_env_set_s == 0):
                                                log.debug("mc_create_phase : mon_env_hir %s  scb_env_hir %s!\n"%(mon_env_hir, scb_env_hir))
                                                if not mon_env_hir and not scb_env_hir: 
                                                    env_mon_scb_stg = env_mon_scb_stg\
                                                    +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                    +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                    +('µ   if (%s.%s_is_active[j] && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                    +('µ    %s_mon[i].%s_%s_analysis_port.connect(%s_scb[j].%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                    +('µ   end\n')\
                                                    +('µ  end\n')\
                                                    +('µ end\n\n')
                                                elif not mon_env_hir and scb_env_hir: 
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(scb_env_ifdef))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                        +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ   if (%s.%s_is_active[j] && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ    %s_mon[i].%s_%s_analysis_port.connect(%s.%s_scb[j].%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ   end\n')\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n\n'%(scb_env_endif))
                                                    else:       
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(scb_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                        +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ   if (%s.%s_is_active[j] && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ    %s_mon[i].%s_%s_analysis_port.connect(%s.%s_scb[j].%s_%s_analysis_export);\n'%(envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ   end\n')\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s\n\n'%(scb_env_endif))
                                                elif mon_env_hir and not scb_env_hir: 
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(mon_env_ifdef))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                        +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ   if (%s.%s_is_active[j] && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ    %s.%s_mon[i].%s_%s_analysis_port.connect(%s_scb[j].%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                        +('µ   end\n')\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n\n'%(mon_env_endif))
                                                    else:      
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s\n'%(mon_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                        +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ   if (%s.%s_is_active[j] && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ    %s.%s_mon[i].%s_%s_analysis_port.connect(%s_scb[j].%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, envscbname, envscbname, mon_con_name))\
                                                        +('µ   end\n')\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s\n\n'%(mon_env_endif))
                                                elif mon_env_hir and scb_env_hir: 
                                                    if not for_loop_begin:
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                        +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ   if (%s.%s_is_active[j] && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ    %s.%s_mon[i].%s_%s_analysis_port.connect(%s.%s_scb[j].%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ   end\n')\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))
                                                    else:       
                                                        env_mon_scb_stg = env_mon_scb_stg\
                                                        +('µ%s %s\n'%(mon_env_ifdef, scb_env_ifdef))\
                                                        +('µ%s\n'%(for_loop_begin))\
                                                        +('µ for (int i = 0; i < %s.no_of_%s_mon; i++) begin\n'%(mon_env_cfg_hir, envmonname))\
                                                        +('µ  for (int j = 0; j < %s.no_of_%s_scb; i++) begin\n'%(scb_env_cfg_hir, envscbname))\
                                                        +('µ   if (%s.%s_is_active[j] && %s.%s_is_active[i]) begin\n'%(scb_env_cfg_hir, envscbname, mon_env_cfg_hir, envmonname))\
                                                        +('µ    %s.%s_mon[i].%s_%s_analysis_port.connect(%s.%s_scb[j].%s_%s_analysis_export);\n'%(mon_env_hir, envmonname, envmonname, con_name, scb_env_hir, envscbname, envscbname, mon_con_name))\
                                                        +('µ   end\n')\
                                                        +('µ  end\n')\
                                                        +('µ end\n')\
                                                        +('µ%s\n'%(for_loop_end))\
                                                        +('µ%s %s\n\n'%(mon_env_endif, scb_env_endif))

                                        log.debug("mc_create_phase : env_mon_scb_stg %s!\n"%env_mon_scb_stg)
                                    log.debug("mc_create_phase : if len(cp_mon_arr) == 3: For mon-scb connectivity loop is done!\n")
                                    log.debug("mc_create_phase: if condition : %s, %s\n"%(len(mon_arr[mon_idx].split(":")), len(scb_arr[scb_idx].split(":"))))

                            pos = env_stg.find(' // Connect Analysis Port\n')
                            apos = pos + len(' // Connect Analysis Port\n') + len("µ // -------------\n")
                            env_stg = env_stg[:apos]+env_mon_scb_stg+env_stg[apos:]

                        # Cleaning local vars
                        env_mon_scb_stg = ''
                        #----------------------------------------------------------------------


                        #----------------------------------------------------------------------
                        # Loading up the env config array content into file 
                        #----------------------------------------------------------------------
                        log.debug("mc_create_phase: Value of env_stg %s"%(env_stg))
                        mc_env_input_file = open("%s/%s_environment.sv"%(envpath, envname), "w")
                        mc_env_array = env_stg.split('µ')
                        for lines in mc_env_array:
                            mc_env_input_file.write(lines)
                        mc_env_input_file.close()
                        #----------------------------------------------------------------------
                
                
                    #----------------------------------------------------------------------
                    # Edit the Agent Related Files 
                    #----------------------------------------------------------------------
                    # Top Agents directory
                    envagttopdirpath = envdirpath+'/'+'agents'

                    if mc_env_cfg_pool[a][2] != ['']:
                        # Opening the agent config file and edit
                        envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
        
                        for e in range (int(envagtname_arr[0])):
                            if "__c" in envagtname_arr[e+1]:
                                #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__c","")
                                envagtname = (envagtname_arr[e+1]).replace("__c","")
                            elif "__s" in envagtname_arr[e+1]:
                                #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__s","")
                                envagtname = (envagtname_arr[e+1]).replace("__s","")
                            else:
                                #envagtname = envname+"_"+(envagtname_arr[e+1])
                                envagtname = (envagtname_arr[e+1])
                            
                            # Original Name
                            agtname_org = envagtname_arr[e+1]
                            log.debug("mc_edit_phase : agtname_org %s!\n"%(agtname_org))

                            # Directory Path For Environment Monitors
                            envagtdirpath = envagttopdirpath+'/'+envagtname+'_agent'
                            envagtseqdirpath = envagtdirpath+'/'+'sequences'
                            log.debug("mc_edit_phase : envagtdirpath %s envagtseqdirpath %s!\n"%(envagtdirpath, envagtseqdirpath))

                            if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1:
                                mc_curr_env_agt_set_c = 1
                            elif "__s" in envagtname_arr[e+1] or mc_curr_env_set_s == 1:
                                mc_curr_env_agt_set_s = 1

                            #----------------------------------------------------------------------
                            # Code for Editing Agent Configuration File 
                            #----------------------------------------------------------------------
                            mc_agt_cfg_array = []
                    
                            if not os.path.isfile('%s/%s_agent_config.sv'%(envagtdirpath, envagtname)):
                                log.error("%s/%s_agent_config.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envagtdirpath, envagtname))
                            else:
                                log.info("%s/%s_agent_config.sv file does exists! Progressing Further.\n"%(envagtdirpath, envagtname))
                                mc_agt_cfg_input_file = open("%s/%s_agent_config.sv"%(envagtdirpath, envagtname),"r+")

                                agt_cfg_stg = '' 
                                agt_int_stg = ''

                                for lines in mc_agt_cfg_input_file:
                                    agt_cfg_stg = agt_cfg_stg+lines+'µ' 
                                log.debug("mc_edit_phase: Value of agt_cfg_stg %s"%(agt_cfg_stg))

                                #----------------------------------------------------------------------
                                # Code for Agent Interface Instantiation inside agt_cfg File
                                #----------------------------------------------------------------------
                                if mc_env_cfg_pool[a][2][e+1][3] != '':
                                    envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                    log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                    for e1 in range (int(envagtdrvname_arr[0])):
                                        if (len(envagtdrvname_arr) == 1 and "__c" in envagtdrvname_arr) or (len(envagtdrvname_arr) == 1 and "__s" in envagtdrvname_arr) or (len(envagtdrvname_arr) == 1 and int(envagtdrvname_arr[0]) == 1):
                                            envagtdrvname = envagtname 
                                            
                                            #if "__c" in envagtdrvname_arr or "__s" in envagtdrvname_arr or mc_curr_env_agt_set_c == 1: 
                                            if "__c" in envagtdrvname_arr or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr and mc_curr_env_agt_set_s == 0): 
                                                agt_int_stg = agt_int_stg+("µ virtual %s_interface %s_vif;\n"%(envagtdrvname, envagtdrvname))
                                        else:
                                            if "__c" in envagtdrvname_arr[e1+1] or "__s" in envagtdrvname_arr[e1+1]: 
                                                envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1].replace("__c","").replace("__s","")
                                            else: # WATCHOUT : 010720|TUE    
                                                envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                                        
                                            #if "__c" in envagtdrvname_arr[e1+1] or "__s" in envagtdrvname_arr[e1+1] or mc_curr_env_agt_set_c == 1: 
                                            if "__c" in envagtdrvname_arr[e1+1] or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr[e1+1] and mc_curr_env_agt_set_s == 0): 
                                                agt_int_stg = agt_int_stg+("µ virtual %s_interface %s_vif;\n"%(envagtdrvname, envagtdrvname))
                                        
                                    pos = agt_cfg_stg.find(' // Agent Interface Instantiation\n')
                                    apos = pos + len(' // Agent Interface Instantiation\n')+len('µ //------------------------------------------\n')
                                    agt_cfg_stg = agt_cfg_stg[:apos]+agt_int_stg+agt_cfg_stg[apos:]

                                # Cleaning local vars
                                agt_int_stg = ''
                                #----------------------------------------------------------------------
      
                    
                                #----------------------------------------------------------------------
                                # Code for Agent Knobs inside agt_cfg File
                                #----------------------------------------------------------------------
                                if mc_env_cfg_pool[a][2][e+1][3] != '':
                                    envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                    log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                    for e1 in range (int(envagtdrvname_arr[0])):
                                        if (len(envagtdrvname_arr) == 1 and "__c" in envagtdrvname_arr) or (len(envagtdrvname_arr) == 1 and "__s" in envagtdrvname_arr) or (len(envagtdrvname_arr) == 1 and int(envagtdrvname_arr[0]) == 1):
                                            envagtdrvname = envagtname 
                                            
                                            #if "__c" in envagtdrvname_arr or "__s" in envagtdrvname_arr or mc_curr_env_agt_set_c == 1: 
                                            if "__c" in envagtdrvname_arr or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr and mc_curr_env_agt_set_s == 0): 
                                                agt_int_stg = agt_int_stg+("µ rand uvm_active_passive_enum %s_is_active = UVM_ACTIVE;\n"%(envagtdrvname))
                                        else:
                                            if "__c" in envagtdrvname_arr[e1+1] or "__s" in envagtdrvname_arr[e1+1]: 
                                                envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1].replace("__c","").replace("__s","")
                                            else: # WATCHOUT : 010720|TUE    
                                                envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]

                                            #if "__c" in envagtdrvname_arr[e1+1] or "__s" in envagtdrvname_arr[e1+1] or mc_curr_env_agt_set_c == 1: 
                                            if "__c" in envagtdrvname_arr[e1+1] or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr[e1+1] and mc_curr_env_agt_set_s == 0): 
                                                agt_int_stg = agt_int_stg+("µ rand uvm_active_passive_enum %s_is_active = UVM_ACTIVE;\n"%(envagtdrvname))
                                        
                                    if agt_int_stg:
                                        pos = agt_cfg_stg[agt_cfg_stg.find('// Agent Driver Knobs'):agt_cfg_stg.find('// Constraints')].find("`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                        if pos == -1:
                                            pos = agt_cfg_stg.find(' // Agent Driver Knobs\n')
                                            apos = pos + len(' // Agent Driver Knobs\n')+len('µ //------------------------------------------\n')
                                            agt_cfg_stg = agt_cfg_stg[:apos]+("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+agt_int_stg+("µ`endif // ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+agt_cfg_stg[apos:]
                                        else:
                                            pos = agt_cfg_stg.find(' // Agent Driver Knobs\n')
                                            apos = pos + len(' // Agent Driver Knobs\n') + len('µ //------------------------------------------\n') + len("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                            agt_cfg_stg = agt_cfg_stg[:apos]+agt_int_stg+agt_cfg_stg[apos:]

                                # Cleaning local vars
                                agt_int_stg = ''
                                #----------------------------------------------------------------------


                                #----------------------------------------------------------------------
                                # Code for Agent Knobs inside agt_cfg File
                                #----------------------------------------------------------------------
                                if mc_env_cfg_pool[a][2][e+1][4] != '':
                                    envagtmonname_arr = str(mc_env_cfg_pool[a][2][e+1][4]).split(",")
                                    log.debug("mc_edit_phase : envname %s  envagtmonname_arr %s envagtdirpath %s!\n"%(envname, envagtmonname_arr, envagtdirpath))
                                    for e1 in range (int(envagtmonname_arr[0])):
                                        if (len(envagtmonname_arr) == 1 and "__c" in envagtmonname_arr) or (len(envagtmonname_arr) == 1 and  "__s" in envagtmonname_arr) or (len(envagtmonname_arr) == 1 and int(envagtmonname_arr[0]) == 1):
                                            envagtmonname = envagtname 
                                            
                                            #if "__c" in envagtmonname_arr or "__s" in envagtmonname_arr or mc_curr_env_agt_set_c == 1: 
                                            if "__c" in envagtmonname_arr or mc_curr_env_agt_set_c == 1 or ("__s" in envagtmonname_arr and mc_curr_env_agt_set_s == 0): 
                                                agt_int_stg = agt_int_stg+("µ rand uvm_active_passive_enum %s_is_active = UVM_ACTIVE;\n"%(envagtmonname))
                                        else:
                                            if "__c" in envagtmonname_arr[e1+1] or "__s" in envagtmonname_arr[e1+1]: 
                                                envagtmonname = envagtname+"_"+envagtmonname_arr[e1+1].replace("__c","").replace("__s","")
                                            else:
                                                envagtmonname = envagtname+"_"+envagtmonname_arr[e1+1]

                                            #if "__c" in envagtmonname_arr[e1+1] or "__s" in envagtmonname_arr[e1+1] or mc_curr_env_agt_set_c == 1: 
                                            if "__c" in envagtmonname_arr[e1+1] or mc_curr_env_agt_set_c == 1 or ("__s" in envagtmonname_arr[e1+1] and mc_curr_env_agt_set_s == 0): 
                                                agt_int_stg = agt_int_stg+("µ rand uvm_active_passive_enum %s_is_active = UVM_ACTIVE;\n"%(envagtmonname))
                                        
                                    pos = agt_cfg_stg.find(' // Agent Monitor Knobs\n')
                                    apos = pos + len(' // Agent Monitor Knobs\n')+len('µ //------------------------------------------\n')
                                    agt_cfg_stg = agt_cfg_stg[:apos]+agt_int_stg+agt_cfg_stg[apos:]

                                # Cleaning local vars
                                agt_int_stg = ''
                                #----------------------------------------------------------------------


                                #----------------------------------------------------------------------
                                # Loading up the Agent array content into file 
                                #----------------------------------------------------------------------
                                log.debug("mc_edit_phase: Value of agt_cfg_stg %s"%(agt_cfg_stg))
                                mc_agt_cfg_input_file = open("%s/%s_agent_config.sv"%(envagtdirpath, envagtname), "w")
                                mc_agt_cfg_array = agt_cfg_stg.split('µ')
                                for lines in mc_agt_cfg_array:
                                    mc_agt_cfg_input_file.write(lines)
                                mc_agt_cfg_input_file.close()
                                #----------------------------------------------------------------------
                        
                        
                            #----------------------------------------------------------------------
                            # Opening the Agent File and Edit
                            #----------------------------------------------------------------------
                            mc_agt_array = []
                            
                            if not os.path.isfile('%s/%s_agent.sv'%(envagtdirpath, envagtname)):
                                log.error("%s/%s_agent.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envagtdirpath, envagtname))
                            else:
                                log.info("%s/%s_agent.sv file does exists! Progressing Further.\n"%(envagtdirpath, envagtname))
                                mc_agt_input_file = open("%s/%s_agent.sv"%(envagtdirpath, envagtname),"r+")

                                agt_stg = '' 
                                agt_int_stg = ''
                                agt_loc_stg = ''

                                for lines in mc_agt_input_file:
                                    agt_stg = agt_stg+lines+'µ' 
                                log.debug("mc_edit_phase: Value of agt_stg %s"%(agt_stg))
                                    
                                
                                #----------------------------------------------------------------------
                                # Code for Instantiation Local Variables 
                                #----------------------------------------------------------------------
                                if mc_curr_env_agt_set_c == 1:
                                    pos = agt_stg[agt_stg.find(' // Data Members\n'):agt_stg.find(' // Agent Configuration Instantiation')].find(' int unsigned %s_agent_id;\n'%(envagtname))
                                    if pos == -1:
                                        pos = agt_stg.find(' // Data Members\n')
                                        apos = pos + len(' // Data Members\n') + len('µ //------------------------------------------\n')
                                        agt_loc_stg = agt_loc_stg+'µ int unsigned %s_agent_id;\n'%(envagtname)
                                        agt_stg = agt_stg[:apos]+agt_loc_stg+agt_stg[apos:]
                                
                                # Cleaning local vars
                                agt_loc_stg = ''
                                #----------------------------------------------------------------------

                                
                                #----------------------------------------------------------------------
                                # Code for Agent Instantiation
                                #----------------------------------------------------------------------
                                if mc_curr_env_agt_set_c == 1:
                                    pos = agt_stg[agt_stg.find(' // Agent Configuration Instantiation\n'):agt_stg.find(' // Agent Driver-Sequencer Instantiation')].find(' %s_agent_config %s_agent_cfg;\n'%(envagtname, envagtname))
                                    if pos == -1:
                                        pos = agt_stg.find(' // Agent Configuration Instantiation\n')
                                        apos = pos + len(' // Agent Configuration Instantiation\n') + len('µ //------------------------------------------\n')
                                        agt_loc_stg = agt_loc_stg+'µ %s_agent_config %s_agent_cfg;\n'%(envagtname, envagtname)
                                        agt_stg = agt_stg[:apos]+agt_loc_stg+agt_stg[apos:]
                                
                                # Cleaning local vars
                                agt_loc_stg = ''
                                #----------------------------------------------------------------------

                                
                                #----------------------------------------------------------------------
                                # Code for Agent Codes - Component Instantiation 
                                #----------------------------------------------------------------------
                                if mc_env_cfg_pool[a][2][e+1][3] != '':
                                    envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                    log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                    for e1 in range (int(envagtdrvname_arr[0])):
                                        if (len(envagtdrvname_arr) == 1 and "__c" in envagtdrvname_arr[0]) or (len(envagtdrvname_arr) == 1 and "__s" in envagtdrvname_arr[0]) or (len(envagtdrvname_arr) == 1 and int(envagtdrvname_arr[0]) == 1):
                                            envagtdrvname = envagtname 
                                        
                                            if "__c" in envagtdrvname_arr or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr and mc_curr_env_agt_set_s == 0):
                                                agt_int_stg = agt_int_stg+("µ %s_sequencer  %s_sqr;\n"%(envagtdrvname, envagtdrvname))
                                                agt_int_stg = agt_int_stg+("µ %s_driver  %s_drv;\n"%(envagtdrvname, envagtdrvname))
                                        else:
                                            if "__c" in envagtdrvname_arr[e1+1]:
                                                envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1].replace("__c","")
                                            elif "__s" in envagtdrvname_arr[e1+1]:
                                                envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1].replace("__s","")
                                            else:
                                                envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                                       
                                            if "__c" in envagtdrvname_arr[e1+1] or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr[e1+1] and mc_curr_env_agt_set_s == 0):
                                                agt_int_stg = agt_int_stg+("µ %s_sequencer  %s_seqr;\n"%(envagtdrvname, envagtdrvname))
                                                agt_int_stg = agt_int_stg+("µ %s_driver  %s_drv;\n"%(envagtdrvname, envagtdrvname))
                                        
                                    pos = agt_stg[agt_stg.find('// Agent Driver-Sequencer Instantiation'):agt_stg.find('// Agent Monitor Instantiation')].find("`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                    if pos == -1:
                                        pos = agt_stg.find(' // Agent Driver-Sequencer Instantiation\n')
                                        apos = pos + len(' // Agent Driver-Sequencer Instantiation\n')+len('µ //------------------------------------------\n')
                                        agt_stg = agt_stg[:apos]+("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+agt_int_stg+("µ`endif // ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+agt_stg[apos:]
                                    else:
                                        pos = agt_stg.find(' // Agent Driver-Sequencer Instantiation\n')
                                        apos = pos + len(' // Agent Driver-Sequencer Instantiation\n') + len('µ //------------------------------------------\n') + len("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                        agt_stg = agt_stg[:apos]+agt_int_stg+agt_stg[apos:]

                                # Cleaning local vars
                                agt_int_stg = ''
                                #----------------------------------------------------------------------


                                #----------------------------------------------------------------------
                                # Code for Agent Codes - Component Instantiation 
                                #----------------------------------------------------------------------
                                if mc_env_cfg_pool[a][2][e+1][4] != '':
                                    envagtmonname_arr = str(mc_env_cfg_pool[a][2][e+1][4]).split(",")
                                    log.debug("mc_edit_phase : envname %s  envagtmonname_arr %s envagtdirpath %s!\n"%(envname, envagtmonname_arr, envagtdirpath))
                                    for e1 in range (int(envagtmonname_arr[0])):
                                        if (len(envagtmonname_arr) == 1 and "__c" in envagtmonname_arr[0]) or (len(envagtmonname_arr) == 1 and "__s" in envagtmonname_arr[0]) or (len(envagtmonname_arr) == 1 and int(envagtmonname_arr[0]) == 1):
                                            envagtmonname = envagtname 
                                            
                                            if "__c" in envagtmonname_arr or mc_curr_env_agt_set_c == 1 or ("__s" in envagtmonname_arr and mc_curr_env_agt_set_s == 0):
                                                agt_int_stg = agt_int_stg+("µ %s_monitor  %s_mon;\n"%(envagtmonname, envagtmonname))
                                        else:
                                            if "__c" in envagtmonname_arr[e1+1]:
                                                envagtmonname = envagtname+"_"+envagtmonname_arr[e1+1].replace("__c","")
                                            elif "__s" in envagtmonname_arr[e1+1]:
                                                envagtmonname = envagtname+"_"+envagtmonname_arr[e1+1].replace("__s","")
                                            else:
                                                envagtmonname = envagtname+"_"+envagtmonname_arr[e1+1]
                                        
                                            if "__c" in envagtmonname_arr[e1+1] or mc_curr_env_agt_set_c == 1 or ("__s" in envagtmonname_arr[e1+1] and mc_curr_env_agt_set_s == 0):
                                                agt_int_stg = agt_int_stg+("µ %s_monitor  %s_mon;\n"%(envagtmonname, envagtmonname))
                                        
                                    pos = agt_stg.find(' // Agent Monitor Instantiation\n')
                                    apos = pos + len(' // Agent Monitor Instantiation\n')+len('µ //------------------------------------------\n')
                                    agt_stg = agt_stg[:apos]+agt_int_stg+agt_stg[apos:]

                                # Cleaning local vars
                                agt_int_stg = ''
                                #----------------------------------------------------------------------


                                #----------------------------------------------------------------------
                                # Code for Registration The Variables In Factory 
                                #----------------------------------------------------------------------
                                if mc_curr_env_agt_set_c == 1:
                                    pos = agt_stg[agt_stg.find(' // Add field configurations\n'):agt_stg.find(' `uvm_component_utils_end\n')].find(' `uvm_field_int(%s_agent_id, UVM_ALL_ON);\n'%(envagtname))
                                    if pos == -1:                            
                                        pos = agt_stg.find(' // Add field configurations\n')
                                        apos = pos + len(' // Add field configurations\n') + len('µ  // -----------------\n')
                                        agt_loc_stg = agt_loc_stg+("µ `uvm_field_int(%s_agent_id, UVM_ALL_ON)\n"%(envagtname))
                                        agt_stg = agt_stg[:apos]+agt_loc_stg+agt_stg[apos:]
                                
                                # Cleaning local vars
                                agt_loc_stg = ''
                                #----------------------------------------------------------------------
            

                                #----------------------------------------------------------------------
                                # Code for Getting Agent Config Instantiation
                                #----------------------------------------------------------------------
                                if mc_curr_env_agt_set_c == 1:
                                    pos = agt_stg[agt_stg.find(' // Get Agent Configuration\n'):agt_stg.find(' // Construct children\n')].find(' if (!uvm_config_db#(%s_agent_config)::get(this, "*", "%s_agent_config", %s_agent_cfg))\n'%(envagtname, envagtname, envagtname))
                                    if pos == -1:                
                                        agt_loc_stg = agt_loc_stg\
                                        +('µ if (!uvm_config_db#(%s_agent_config)::get(this, "*", "%s_agent_config", %s_agent_cfg))\n'%(envagtname, envagtname, envagtname))\
                                        +('µ begin\n')\
                                        +('µ  `uvm_error(get_type_name(), "%s_agent_config object is not found in config_db!");\n'%(envagtname))\
                                        +('µ end\n')\
                                        +('µ else\n')\
                                        +('µ begin\n')\
                                        +('µ  %s_agent_cfg.print();\n'%(envagtname))\
                                        +('µ end\n')\
                                    
                                pos = agt_stg.find(' // Get Agent Configuration\n')
                                apos = pos + len(' // Get Agent Configuration\n')
                                agt_stg = agt_stg[:apos]+agt_loc_stg+agt_stg[apos:]
 
                                # Cleaning local vars
                                agt_loc_stg = ''
                                #----------------------------------------------------------------------


                                #----------------------------------------------------------------------
                                # Code for Agent Codes - Component Instantiation 
                                #----------------------------------------------------------------------
                                if mc_env_cfg_pool[a][2][e+1][4] != '':
                                    envagtmonname_arr = str(mc_env_cfg_pool[a][2][e+1][4]).split(",")
                                    log.debug("mc_edit_phase : envname %s  envagtmonname_arr %s envagtdirpath %s!\n"%(envname, envagtmonname_arr, envagtdirpath))
                                    for e1 in range (int(envagtmonname_arr[0])):
                                        if (len(envagtmonname_arr) == 1 and "__c" in envagtmonname_arr[0]) or (len(envagtmonname_arr) == 1 and "__s" in envagtmonname_arr[0]) or (len(envagtmonname_arr) == 1 and int(envagtmonname_arr[0]) == 1):
                                            envagtmonname = envagtname 
                                        
                                            if "__c" in envagtmonname_arr or mc_curr_env_agt_set_c == 1 or ("__s" in envagtmonname_arr and mc_curr_env_agt_set_s == 0):
                                                agt_loc_stg = agt_loc_stg\
                                                +('µ if (%s_agent_cfg.%s_is_active) %s_mon = %s_monitor::type_id::create("%s_mon",this);\n'%(envagtname, envagtmonname, envagtmonname, envagtmonname, envagtmonname))
                                        else:
                                            if "__c" in envagtmonname_arr[e1+1]:
                                                envagtmonname = envagtname+"_"+envagtmonname_arr[e1+1].replace("__c","")
                                            elif "__s" in envagtmonname_arr[e1+1]:
                                                envagtmonname = envagtname+"_"+envagtmonname_arr[e1+1].replace("__s","")
                                            else:
                                                envagtmonname = envagtname+"_"+envagtmonname_arr[e1+1]
                                        
                                            if "__c" in envagtmonname_arr[e1+1] or mc_curr_env_agt_set_c == 1 or ("__s" in envagtmonname_arr[e1+1] and mc_curr_env_agt_set_s == 0):
                                                agt_loc_stg = agt_loc_stg\
                                                +('µ if (%s_agent_cfg.%s_is_active) %s_mon = %s_monitor::type_id::create("%s_mon",this);\n'%(envagtname, envagtmonname, envagtmonname, envagtmonname, envagtmonname))
                                        
                                    pos = agt_stg.find(' // Construct Agent Monitors\n')
                                    apos = pos + len(' // Construct Agent Monitors\n')
                                    agt_stg = agt_stg[:apos]+agt_loc_stg+agt_stg[apos:]

                                # Cleaning local vars
                                agt_loc_stg = ''
                                #----------------------------------------------------------------------


                                #----------------------------------------------------------------------
                                # Code for Agent Codes - Driver Component Creation 
                                #----------------------------------------------------------------------
                                if mc_env_cfg_pool[a][2][e+1][3] != '':
                                    envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                    log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                    for e1 in range (int(envagtdrvname_arr[0])):
                                        if (len(envagtdrvname_arr) == 1 and "__c" in envagtdrvname_arr[0]) or (len(envagtdrvname_arr) == 1 and "__s" in envagtdrvname_arr[0]) or (len(envagtdrvname_arr) == 1 and int(envagtdrvname_arr[0]) == 1):
                                            envagtdrvname = envagtname 
                                        
                                            if "__c" in envagtdrvname_arr or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr and mc_curr_env_agt_set_s == 0):
                                                agt_loc_stg = agt_loc_stg\
                                                +('µ if (%s_agent_cfg.%s_is_active) begin\n'%(envagtname, envagtdrvname))\
                                                +('µ  %s_drv = %s_driver::type_id::create("%s_drv",this);\n'%(envagtdrvname, envagtdrvname, envagtdrvname))\
                                                +('µ  %s_sqr = %s_sequencer::type_id::create("%s_sqr",this);\n'%(envagtdrvname, envagtdrvname, envagtdrvname))\
                                                +('µ end\n')
                                        else:
                                            if "__c" in envagtdrvname_arr[e1+1]:
                                                envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1].replace("__c","")
                                            elif "__s" in envagtdrvname_arr[e1+1]:
                                                envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1].replace("__s","")
                                            else:
                                                envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]

                                            if "__c" in envagtdrvname_arr[e1+1] or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr[e1+1] and mc_curr_env_agt_set_s == 0):
                                                agt_loc_stg = agt_loc_stg\
                                                +('µ if (%s_agent_cfg.%s_is_active) begin\n'%(envagtname, envagtdrvname))\
                                                +('µ  %s_drv = %s_driver::type_id::create("%s_drv",this);\n'%(envagtdrvname, envagtdrvname, envagtdrvname))\
                                                +('µ  %s_sqr = %s_sequencer::type_id::create("%s_sqr",this);\n'%(envagtdrvname, envagtdrvname, envagtdrvname))\
                                                +('µ end\n')

                                    pos = agt_stg[agt_stg.find('// Construct Agent Driver-Sequencers'):agt_stg.find('// Configure Children')].find("`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                    if pos == -1:
                                        pos = agt_stg.find(' // Construct Agent Driver-Sequencers\n')
                                        apos = pos + len(' // Construct Agent Driver-Sequencers\n')
                                        agt_stg = agt_stg[:apos]+("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+agt_loc_stg+("µ`endif // ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+agt_stg[apos:]
                                    else:
                                        pos = agt_stg.find(' // Construct Agent Driver-Sequencers\n')
                                        apos = pos + len(' // Construct Agent Driver-Sequencers\n') + len("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                        agt_stg = agt_stg[:apos]+agt_loc_stg+agt_stg[apos:]

                                # Cleaning local vars
                                agt_loc_stg = ''
                                #----------------------------------------------------------------------


                                #----------------------------------------------------------------------
                                # Code for Agent Codes - Driver Component Connection 
                                #----------------------------------------------------------------------
                                if mc_env_cfg_pool[a][2][e+1][3] != '':
                                    envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                    log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                    for e1 in range (int(envagtdrvname_arr[0])):
                                        if (len(envagtdrvname_arr) == 1 and "__c" in envagtdrvname_arr[0]) or (len(envagtdrvname_arr) == 1 and "__s" in envagtdrvname_arr[0]) or (len(envagtdrvname_arr) == 1 and int(envagtdrvname_arr[0]) == 1):
                                            envagtdrvname = envagtname 
                                        
                                            if "__c" in envagtdrvname_arr or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr and mc_curr_env_agt_set_s == 0):
                                                agt_loc_stg = agt_loc_stg\
                                                +('µ if (%s_agent_cfg.%s_is_active) begin\n'%(envagtname, envagtdrvname))\
                                                +('µ  %s_drv.seq_item_port.connect(%s_sqr.seq_item_export);\n'%(envagtdrvname, envagtdrvname))\
                                                +('µ end\n')
                                        else:
                                            if "__c" in envagtdrvname_arr[e1+1]:
                                                envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1].replace("__c","")
                                            elif "__s" in envagtdrvname_arr[e1+1]:
                                                envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1].replace("__s","")
                                            else:
                                                envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]

                                            if "__c" in envagtdrvname_arr[e1+1] or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr[e1+1] and mc_curr_env_agt_set_s == 0):
                                                agt_loc_stg = agt_loc_stg\
                                                +('µ if (%s_agent_cfg.%s_is_active) begin\n'%(envagtname, envagtdrvname))\
                                                +('µ  %s_drv.seq_item_port.connect(%s_sqr.seq_item_export);\n'%(envagtdrvname, envagtdrvname))\
                                                +('µ end\n')

                                    pos = agt_stg[agt_stg.find('// Connect Agent Driver-Sequencers'):agt_stg.find('//endfunction: connect_phase')].find("`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                    if pos == -1:
                                        pos = agt_stg.find(' // Connect Agent Driver-Sequencers\n')
                                        apos = pos + len(' // Connect Agent Driver-Sequencers\n')
                                        agt_stg = agt_stg[:apos]+("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+agt_loc_stg+("µ`endif // ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+agt_stg[apos:]
                                    else:
                                        pos = agt_stg.find(' // Connect Agent Driver-Sequencers\n')
                                        apos = pos + len(' // Connect Agent Driver-Sequencers\n') + len("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                        agt_stg = agt_stg[:apos]+agt_loc_stg+agt_stg[apos:]

                                # Cleaning local vars
                                agt_loc_stg = ''
                                #----------------------------------------------------------------------


                                #----------------------------------------------------------------------
                                # Loading up the Agent array content into file 
                                #----------------------------------------------------------------------
                                log.debug("mc_edit_phase: Value of agt_stg %s"%(agt_stg))
                                mc_agt_input_file = open("%s/%s_agent.sv"%(envagtdirpath, envagtname), "w")
                                mc_agt_array = agt_stg.split('µ')
                                for lines in mc_agt_array:
                                    mc_agt_input_file.write(lines)
                                mc_agt_input_file.close()
                                #----------------------------------------------------------------------
                        
                        
                            #----------------------------------------------------------------------
                            # Opening the Driver File and Edit
                            #----------------------------------------------------------------------
                            if mc_env_cfg_pool[a][2][e+1][3] != '':
                                envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                for e1 in range (int(envagtdrvname_arr[0])):
                                    if (len(envagtdrvname_arr) == 1 and "__c" in envagtdrvname_arr[0]) or (len(envagtdrvname_arr) == 1 and "__s" in envagtdrvname_arr[0]) or (len(envagtdrvname_arr) == 1 and int(envagtdrvname_arr[0]) == 1):
                                        envagtdrvname = envagtname 
                                        
                                        #----------------------------------------------------------------------
                                        # Loading up the Driver Interface Details : Mainly for the user defined interface
                                        #----------------------------------------------------------------------
                                        if "__c" in envagtdrvname_arr or mc_curr_env_agt_set_c == 1:
                                            log.debug(mc_env_cfg_pool[a][2][e+1][5][e1][2])
                                            if int(mc_env_cfg_pool[a][2][e+1][5][e1][2]) == 3:
                                                log.debug("mc_edit_phase: drv intf: envagtdrvname %s, envagtdirpath %s, cfg %s"%(envagtdrvname, envagtdirpath, mc_env_cfg_pool[a][2][e+1][5][e1]))
                                                self.mc_gen_intf(envagtdrvname, envagtdirpath, mc_env_cfg_pool[a][2][e+1][5][e1]) 
                                        #----------------------------------------------------------------------
                                
                                        #----------------------------------------------------------------------
                                        # Driver Interface Wrapper Editing : 12122020SAT
                                        #----------------------------------------------------------------------
                                            log.debug("mc_edit_phase: drv intf wrapper: envagtdrvname %s, envagtdirpath %s, cfg %s"%(envagtdrvname, envagtdirpath, mc_env_cfg_pool[a][2][e+1][5][e1]))
                                            if mc_env_cfg_pool[a][2][e+1][2] != '':
                                                self.mc_gen_intf_wrapper(envagtdrvname, envagtdirpath, int(mc_env_cfg_pool[a][2][e+1][2])) 
                                            else:
                                                self.mc_gen_intf_wrapper(envagtdrvname, envagtdirpath, 0) 
                                        #----------------------------------------------------------------------
                                
                                        #----------------------------------------------------------------------
                                        # Driver Interface Macros Addition : 12122020SAT
                                        #----------------------------------------------------------------------
                                            log.debug("mc_edit_phase: env macros: envagtdrvname %s, envname %s, envdirpath %s, cfg %s"%(envagtdrvname, envname, envdirpath, mc_env_cfg_pool[a][2][e+1][5][e1]))
                                            if mc_env_cfg_pool[a][2][e+1][2] != '':
                                                self.mc_gen_env_macros(envagtdrvname, envname, envpath, int(mc_env_cfg_pool[a][2][e+1][2])) 
                                            else:
                                                self.mc_gen_env_macros(envagtdrvname, envname, envpath, 0) 
                                        #----------------------------------------------------------------------
                                    else:
                                        if "__c" in envagtdrvname_arr[e1+1]:
                                            envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1].replace("__c","")
                                        elif "__s" in envagtdrvname_arr[e1+1]:
                                            envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1].replace("__s","")
                                        else:
                                            envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                                        
                                        #----------------------------------------------------------------------
                                        # Loading up the Driver Interface Details : Mainly for the user defined interface
                                        #----------------------------------------------------------------------
                                        if "__c" in envagtdrvname_arr[e1+1] or mc_curr_env_agt_set_c == 1:
                                            log.debug(mc_env_cfg_pool[a][2][e+1][5][e1][2])
                                            if int(mc_env_cfg_pool[a][2][e+1][5][e1][2]) == 3:
                                                log.debug("mc_edit_phase: drv intf: envagtdrvname %s, envagtdirpath %s, cfg %s"%(envagtdrvname, envagtdirpath, mc_env_cfg_pool[a][2][e+1][5][e1]))
                                                self.mc_gen_intf(envagtdrvname, envagtdirpath, mc_env_cfg_pool[a][2][e+1][5][e1]) 
                                        #----------------------------------------------------------------------
                                        
                                        #----------------------------------------------------------------------
                                        # Driver Interface Wrapper Editing : 12122020SAT
                                        #----------------------------------------------------------------------
                                            log.debug("mc_edit_phase: drv intf wrapper: envagtdrvname %s, envagtdirpath %s, cfg %s"%(envagtdrvname, envagtdirpath, mc_env_cfg_pool[a][2][e+1][5][e1]))
                                            if mc_env_cfg_pool[a][2][e+1][2] != '':
                                                self.mc_gen_intf_wrapper(envagtdrvname, envagtdirpath, int(mc_env_cfg_pool[a][2][e+1][2])) 
                                            else:
                                                self.mc_gen_intf_wrapper(envagtdrvname, envagtdirpath, 0) 
                                        #----------------------------------------------------------------------
                                        
                                        #----------------------------------------------------------------------
                                        # Driver Interface Macros Addition : 12122020SAT
                                        #----------------------------------------------------------------------
                                            log.debug("mc_edit_phase: env macros: envagtdrvname %s, envname %s, envdirpath %s, cfg %s"%(envagtdrvname, envname, envdirpath, mc_env_cfg_pool[a][2][e+1][5][e1]))
                                            if mc_env_cfg_pool[a][2][e+1][2] != '':
                                                self.mc_gen_env_macros(envagtdrvname, envname, envpath, int(mc_env_cfg_pool[a][2][e+1][2])) 
                                            else:
                                                self.mc_gen_env_macros(envagtdrvname, envname, envpath, 0) 
                                        #----------------------------------------------------------------------

                                    mc_drv_array = []
                            
                                    if not os.path.isfile('%s/%s_driver.sv'%(envagtdirpath, envagtdrvname)):
                                        log.error("%s/%s_driver.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envagtdirpath, envagtdrvname))
                                    else:
                                        log.info("%s/%s_driver.sv file does exists! Progressing Further.\n"%(envagtdirpath, envagtdrvname))
                                        mc_drv_input_file = open("%s/%s_driver.sv"%(envagtdirpath, envagtdrvname),"r+")

                                        drv_stg = '' 
                                        drv_loc_stg = ''

                                        for lines in mc_drv_input_file:
                                            drv_stg = drv_stg+lines+'µ' 
                                        log.debug("mc_edit_phase: Value of drv_stg %s"%(drv_stg))

                                        
                                        #----------------------------------------------------------------------
                                        # Code for Instantiation Local Variables 
                                        #----------------------------------------------------------------------
                                        if mc_curr_env_agt_set_c == 1:
                                            pos = drv_stg[drv_stg.find(' // Data Members\n'):drv_stg.find(' // Interface Instantiation')].find(' int unsigned %s_agent_id;\n'%(envagtname))
                                            if pos == -1:
                                                pos = drv_stg.find(' // Data Members\n')
                                                apos = pos + len(' // Data Members\n') + len('µ //------------------------------------------\n')
                                                drv_loc_stg = drv_loc_stg+'µ int unsigned %s_agent_id;\n'%(envagtname)
                                                drv_stg = drv_stg[:apos]+drv_loc_stg+drv_stg[apos:]
                                        
                                        # Cleaning local vars
                                        drv_loc_stg = ''
                                        #----------------------------------------------------------------------


                                        #----------------------------------------------------------------------
                                        # Code for Driver Interface Instantiation inside agt_cfg File
                                        #----------------------------------------------------------------------
                                        if mc_curr_env_agt_set_c == 1:
                                            pos = drv_stg[drv_stg.find(' // Interface Instantiation\n'):drv_stg.find(' // Agent Configuration Instantiation')].find(' virtual %s_interface %s_vif;\n'%(envagtdrvname, envagtdrvname))
                                            if pos == -1:                                    
                                                drv_loc_stg = drv_loc_stg+("µ virtual %s_interface %s_vif;\n"%(envagtdrvname, envagtdrvname))
                                                
                                        pos = drv_stg.find(' // Interface Instantiation\n')
                                        apos = pos + len(' // Interface Instantiation\n')+len('µ //------------------------------------------\n')
                                        drv_stg = drv_stg[:apos]+drv_loc_stg+drv_stg[apos:]

                                        # Cleaning local vars
                                        drv_loc_stg = ''
                                        #----------------------------------------------------------------------

                                            
                                        #----------------------------------------------------------------------
                                        # Code for Agent Configuration Instantiation
                                        #----------------------------------------------------------------------
                                        if mc_curr_env_agt_set_c == 1:
                                            pos = drv_stg[drv_stg.find(' // Agent Configuration Instantiation\n'):drv_stg.find(' // Constraints')].find(' %s_agent_config %s_agent_cfg;\n'%(envagtname, envagtname))
                                            if pos == -1:                                    
                                                pos = drv_stg.find(' // Agent Configuration Instantiation\n')
                                                apos = pos + len(' // Agent Configuration Instantiation\n') + len('µ //------------------------------------------\n')
                                                drv_loc_stg = drv_loc_stg+'µ %s_agent_config %s_agent_cfg;\n'%(envagtname, envagtname)
                                                drv_stg = drv_stg[:apos]+drv_loc_stg+drv_stg[apos:]
                                        
                                        # Cleaning local vars
                                        drv_loc_stg = ''
                                        #----------------------------------------------------------------------

                                        
                                        #----------------------------------------------------------------------
                                        # Code for Registration The Variables In Factory 
                                        #----------------------------------------------------------------------
                                        if mc_curr_env_agt_set_c == 1:
                                            pos = drv_stg[drv_stg.find(' // Add field configurations\n'):drv_stg.find(' `uvm_component_utils_end')].find(' `uvm_field_int(%s_agent_id, UVM_ALL_ON)\n'%(envagtname))
                                            if pos == -1:                                    
                                                pos = drv_stg.find(' // Add field configurations\n')
                                                apos = pos + len(' // Add field configurations\n') + len('µ  // -----------------\n')
                                                drv_loc_stg = drv_loc_stg+("µ `uvm_field_int(%s_agent_id, UVM_ALL_ON)\n"%(envagtname))
                                                drv_stg = drv_stg[:apos]+drv_loc_stg+drv_stg[apos:]
                                        
                                        # Cleaning local vars
                                        drv_loc_stg = ''
                                        #----------------------------------------------------------------------

                                        
                                        #----------------------------------------------------------------------
                                        # Code for Getting Agent Config Instantiation
                                        #----------------------------------------------------------------------
                                        if mc_curr_env_agt_set_c == 1:
                                            pos = drv_stg[drv_stg.find(' // Get Agent Configuration\n'):drv_stg.find(' // Construct children\n')].find(' if (!uvm_config_db#(%s_agent_config)::get(this, "*", "%s_agent_config", %s_agent_cfg))\n'%(envagtname, envagtname, envagtname))
                                            if pos == -1:                                    
                                                drv_loc_stg = drv_loc_stg\
                                                +('µ if (!uvm_config_db#(%s_agent_config)::get(this, "*", "%s_agent_config", %s_agent_cfg))\n'%(envagtname, envagtname, envagtname))\
                                                +('µ begin\n')\
                                                +('µ  `uvm_error(get_type_name(), "%s_agent_config object is not found in config_db!");\n'%(envagtname))\
                                                +('µ end\n')\
                                                +('µ else\n')\
                                                +('µ begin\n')\
                                                +('µ  %s_agent_cfg.print();\n'%(envagtname))\
                                                +('µ end\n')\
                                            
                                        pos = drv_stg.find(' // Get Agent Configuration\n')
                                        apos = pos + len(' // Get Agent Configuration\n')
                                        drv_stg = drv_stg[:apos]+drv_loc_stg+drv_stg[apos:]
 
                                        # Cleaning local vars
                                        drv_loc_stg = ''
                                        #----------------------------------------------------------------------


                                        #----------------------------------------------------------------------
                                        # Code for Making the vif assignment from config to local interface 
                                        #----------------------------------------------------------------------
                                        if mc_curr_env_agt_set_c == 1:
                                            pos = drv_stg[drv_stg.find(' // Configure children\n'):drv_stg.find('endfunction: build_phase\n')].find(' %s_vif = %s_agent_cfg.%s_vif\n'%(envagtdrvname, envagtname, envagtdrvname))
                                            if pos == -1:                                    
                                                drv_loc_stg = drv_loc_stg+("µ %s_vif = %s_agent_cfg.%s_vif;\n"%(envagtdrvname, envagtname, envagtdrvname))
                                                
                                        pos = drv_stg.find(' // Configure children\n')
                                        apos = pos + len(' // Configure children\n')+len('µ // ------------------\n')
                                        drv_stg = drv_stg[:apos]+drv_loc_stg+drv_stg[apos:]

                                        # Cleaning local vars
                                        drv_loc_stg = ''
                                        #----------------------------------------------------------------------


                                        #----------------------------------------------------------------------
                                        # Loading up the Driver array content into file 
                                        #----------------------------------------------------------------------
                                        log.debug("mc_edit_phase: Value of drv_stg %s"%(drv_stg))
                                        mc_drv_input_file = open("%s/%s_driver.sv"%(envagtdirpath, envagtdrvname), "w")
                                        mc_drv_array = drv_stg.split('µ')
                                        for lines in mc_drv_array:
                                            mc_drv_input_file.write(lines)
                                        mc_drv_input_file.close()
                                        #----------------------------------------------------------------------
                                
                            
                            #----------------------------------------------------------------------
                            # Opening the Monitor File and Edit
                            #----------------------------------------------------------------------
                            if mc_env_cfg_pool[a][2][e+1][4] != '':
                                envagtmonname_arr = str(mc_env_cfg_pool[a][2][e+1][4]).split(",")
                                log.debug("mc_edit_phase : envname %s  envagtmonname_arr %s envagtdirpath %s!\n"%(envname, envagtmonname_arr, envagtdirpath))
                                for e1 in range (int(envagtmonname_arr[0])):
                                    if (len(envagtmonname_arr) == 1 and "__c" in envagtmonname_arr[0]) or (len(envagtmonname_arr) == 1 and "__s" in envagtmonname_arr[0]) or (len(envagtmonname_arr) == 1 and int(envagtmonname_arr[0]) == 1):
                                        envagtmonname = envagtname 
                                    else:
                                        if "__c" in envagtmonname_arr[e1+1]:
                                            envagtmonname = envagtname+"_"+envagtmonname_arr[e1+1].replace("__c","")
                                        elif "__s" in envagtmonname_arr[e1+1]:
                                            envagtmonname = envagtname+"_"+envagtmonname_arr[e1+1].replace("__s","")
                                        else:
                                            envagtmonname = envagtname+"_"+envagtmonname_arr[e1+1]

                                    mc_mon_array = []
                                    
                                    if not os.path.isfile('%s/%s_monitor.sv'%(envagtdirpath, envagtmonname)):
                                        log.error("%s/%s_monitor.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envagtdirpath, envagtmonname))
                                    else:
                                        log.info("%s/%s_monitor.sv file does exists! Progressing Further.\n"%(envagtdirpath, envagtmonname))
                                        mc_mon_input_file = open("%s/%s_monitor.sv"%(envagtdirpath, envagtmonname),"r+")

                                        mon_stg = '' 
                                        mon_loc_stg = ''
                                        mon_por_stg = ''

                                        for lines in mc_mon_input_file:
                                            mon_stg = mon_stg+lines+'µ' 
                                        log.debug("mc_edit_phase: Value of mon_stg %s"%(mon_stg))

                                        
                                        #----------------------------------------------------------------------
                                        # Code for Instantiation Local Variables 
                                        #----------------------------------------------------------------------
                                        if mc_curr_env_agt_set_c == 1:
                                            pos = mon_stg[mon_stg.find(' // Data Members\n'):mon_stg.find(' // Interface Instantiation\n')].find(' int unsigned %s_agent_id;\n'%(envagtname))
                                            if pos == -1:
                                                pos = mon_stg.find(' // Data Members\n')
                                                apos = pos + len(' // Data Members\n') + len('µ //------------------------------------------\n')
                                                mon_loc_stg = mon_loc_stg+'µ int unsigned %s_agent_id;\n'%(envagtname)
                                                mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
                                        
                                        # Cleaning local vars
                                        mon_loc_stg = ''
                                        #----------------------------------------------------------------------


                                        #----------------------------------------------------------------------
                                        # Code for Interface Instantiation inside Monitor File 
                                        #----------------------------------------------------------------------
                                        if mc_env_cfg_pool[a][2][e+1][3] != '':
                                            envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                            log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                            for e2 in range (int(envagtdrvname_arr[0])):
                                                if (len(envagtdrvname_arr) == 1 and "__c" in envagtdrvname_arr[0]) or (len(envagtdrvname_arr) == 1 and "__s" in envagtdrvname_arr[0]) or (len(envagtdrvname_arr) == 1 and int(envagtdrvname_arr[0]) == 1):
                                                    envagtdrvname = envagtname 
                                                
                                                    if "__c" in envagtdrvname_arr or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr and mc_curr_env_agt_set_s == 0):
                                                        mon_loc_stg = mon_loc_stg+("µ virtual %s_interface %s_vif;\n"%(envagtdrvname, envagtdrvname))
                                                else:
                                                    if "__c" in envagtdrvname_arr[e2+1]:
                                                        envagtdrvname = envagtname+"_"+envagtdrvname_arr[e2+1].replace("__c","")
                                                    elif "__s" in envagtdrvname_arr[e2+1]:
                                                        envagtdrvname = envagtname+"_"+envagtdrvname_arr[e2+1].replace("__s","")
                                                    else:
                                                        envagtdrvname = envagtname+"_"+envagtdrvname_arr[e2+1]

                                                    if "__c" in envagtdrvname_arr[e2+1] or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr[e2+1] and mc_curr_env_agt_set_s == 0):
                                                        mon_loc_stg = mon_loc_stg+("µ virtual %s_interface %s_vif;\n"%(envagtdrvname, envagtdrvname))
                                                
                                        pos = mon_stg.find(' // Interface Instantiation\n')
                                        apos = pos + len(' // Interface Instantiation\n')+len('µ //------------------------------------------\n')
                                        mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]

                                        # Cleaning local vars
                                        mon_loc_stg = ''
                                        #----------------------------------------------------------------------

                    
                                        #----------------------------------------------------------------------
                                        # Code for Agent Configuration Instantiation
                                        #----------------------------------------------------------------------
                                        if mc_curr_env_agt_set_c == 1:
                                            pos = mon_stg[mon_stg.find(' // Agent Configuration Instantiation\n'):mon_stg.find(' // Constraints')].find(' %s_agent_config %s_agent_cfg;\n'%(envagtname, envagtname))
                                            if pos == -1:
                                                pos = mon_stg.find(' // Agent Configuration Instantiation\n')
                                                apos = pos + len(' // Agent Configuration Instantiation\n') + len('µ //------------------------------------------\n')
                                                mon_loc_stg = mon_loc_stg+'µ %s_agent_config %s_agent_cfg;\n'%(envagtname, envagtname)
                                                mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
                                        
                                        # Cleaning local vars
                                        mon_loc_stg = ''
                                        #----------------------------------------------------------------------
   
                                        
                                        #----------------------------------------------------------------------
                                        # Code for Registration The Variables In Factory 
                                        #----------------------------------------------------------------------
                                        if mc_curr_env_agt_set_c == 1:
                                            pos = mon_stg[mon_stg.find(' // Add field configurations\n'):mon_stg.find(' `uvm_component_utils_end')].find(' `uvm_field_int(%s_agent_id, UVM_ALL_ON)\n'%(envagtname))
                                            if pos == -1:  
                                                pos = mon_stg.find(' // Add field configurations\n')
                                                apos = pos + len(' // Add field configurations\n') + len('µ  // -----------------\n')
                                                mon_loc_stg = mon_loc_stg+("µ `uvm_field_int(%s_agent_id, UVM_ALL_ON)\n"%(envagtname))
                                                mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
                                        
                                        # Cleaning local vars
                                        mon_loc_stg = ''
                                        #----------------------------------------------------------------------

            
                                        #----------------------------------------------------------------------
                                        # Code for Getting Agent Config Instantiation
                                        #----------------------------------------------------------------------
                                        if mc_curr_env_agt_set_c == 1:
                                            pos = mon_stg[mon_stg.find(' // Get Agent Configuration\n'):mon_stg.find(' // Construct children\n')].find(' if (!uvm_config_db#(%s_agent_config)::get(this, "*", "%s_agent_config", %s_agent_cfg))\n'%(envagtname, envagtname, envagtname))
                                            if pos == -1:
                                                mon_loc_stg = mon_loc_stg\
                                                +('µ if (!uvm_config_db#(%s_agent_config)::get(this, "*", "%s_agent_config", %s_agent_cfg))\n'%(envagtname, envagtname, envagtname))\
                                                +('µ begin\n')\
                                                +('µ  `uvm_error(get_type_name(), "%s_agent_config object is not found in config_db!");\n'%(envagtname))\
                                                +('µ end\n')\
                                                +('µ else\n')\
                                                +('µ begin\n')\
                                                +('µ  %s_agent_cfg.print();\n'%(envagtname))\
                                                +('µ end\n')\
                                            
                                        pos = mon_stg.find(' // Get Agent Configuration\n')
                                        apos = pos + len(' // Get Agent Configuration\n')
                                        mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
 
                                        # Cleaning local vars
                                        mon_loc_stg = ''
                                        #----------------------------------------------------------------------

                                        
                                        #----------------------------------------------------------------------
                                        # Code for Making the vif assignment from config to local interface 
                                        #----------------------------------------------------------------------
                                        if mc_env_cfg_pool[a][2][e+1][3] != '':
                                            envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                            log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                            for e3 in range (int(envagtdrvname_arr[0])):
                                                if (len(envagtdrvname_arr) == 1 and "__c" in envagtdrvname_arr[0]) or (len(envagtdrvname_arr) == 1 and "__s" in envagtdrvname_arr[0]) or (len(envagtdrvname_arr) == 1 and int(envagtdrvname_arr[0]) == 1):
                                                    envagtdrvname = envagtname 
                                                    
                                                    if "__c" in envagtdrvname_arr or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr and mc_curr_env_agt_set_s == 0):
                                                        mon_loc_stg = mon_loc_stg+("µ %s_vif = %s_agent_cfg.%s_vif;\n"%(envagtdrvname, envagtname, envagtdrvname))
                                                else:
                                                    if "__c" in envagtdrvname_arr[e3+1]:
                                                        envagtdrvname = envagtname+"_"+envagtdrvname_arr[e3+1].replace("__c","")
                                                    elif "__s" in envagtdrvname_arr[e3+1]:
                                                        envagtdrvname = envagtname+"_"+envagtdrvname_arr[e3+1].replace("__s","")
                                                    else:
                                                        envagtdrvname = envagtname+"_"+envagtdrvname_arr[e3+1]
                                                
                                                    if "__c" in envagtdrvname_arr[e3+1] or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr[e3+1] and mc_curr_env_agt_set_s == 0):
                                                        mon_loc_stg = mon_loc_stg+("µ %s_vif = %s_agent_cfg.%s_vif;\n"%(envagtdrvname, envagtname, envagtdrvname))
                                                
                                        pos = mon_stg.find(' // Configure children\n')
                                        apos = pos + len(' // Configure children\n')+len('µ // ------------------\n')
                                        mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]

                                        # Cleaning local vars
                                        mon_loc_stg = ''
                                        #----------------------------------------------------------------------
                                   

                                        #----------------------------------------------------------------------
                                        # Getting the original name
                                        #----------------------------------------------------------------------
                                        if len(envagtmonname_arr) == 1:
                                            agtmonname_org = agtname_org 
                                        else:
                                            agtmonname_org = envagtmonname_arr[e1+1]

                                        log.debug("mc_edit_phase : agtmonname_org %s!\n"%(agtmonname_org))
                                        #----------------------------------------------------------------------
                                        
                                        
                                        #----------------------------------------------------------------------
                                        # Code for Monitor Port Instantiation 
                                        #----------------------------------------------------------------------
                                        #mon_port_ele  = envagtmonname_org.replace("_",",")
                                        mon_port_ele  = envname_org+","+agtname_org+","+agtmonname_org 
                                        mon_port_idx  = self.find_index_sub_string(mon_port_ele, mc_global_env_mon_scb_con_arr)
                                        temp1 = []; mon_port_list = []
                                        log.debug("mc_edit_phase: mon_port_ele %s mon_port_idx %s mc_global_env_mon_scb_con_arr %s\n"%(mon_port_ele, mon_port_idx, mc_global_env_mon_scb_con_arr))
                                        
                                        for p in range (len(mon_port_idx)):
                                            temp = ((mc_global_env_mon_scb_con_arr[mon_port_idx[p]].split("-"))[2]).split("/")
                                            log.debug("mc_edit_phase: mon port process : temp %s\n"%(temp))
                                           
                                            temp1 = []
                                            for q in range (len(temp)):
                                                temp1.append(temp[q].split(",")[0])
                                            log.debug("mc_edit_phase: mon port process : temp %s temp1 %s\n"%(temp, temp1))
                                            
                                            for r in range (len(temp1)):
                                                if not self.find_index(temp1[r], mon_port_list):                                        
                                                    mon_port_list.append(temp1[r])
                                            log.debug("mc_edit_phase: mon port process : temp %s temp1 %s mon_port_list %s\n"%(temp, temp1, mon_port_list))

                                        for s in range (len(mon_port_list)):
                                            if "__c" in mon_port_list[s] or mc_curr_env_agt_set_c == 1:
                                                mon_loc_stg = mon_loc_stg+("µ uvm_analysis_port #(%s_sequence_item_base) %s_%s_analysis_port;\n"%(envagtmonname, envagtmonname, mon_port_list[s].replace("__c","")))
                                                mon_por_stg = mon_por_stg+('µ %s_%s_analysis_port = new("%s_%s_analysis_port", this);\n'%(envagtmonname, mon_port_list[s].replace("__c",""), envagtmonname, mon_port_list[s].replace("__c","")))
                                            elif "__s" in mon_port_list[s] and mc_curr_env_agt_set_s == 0:
                                                mon_loc_stg = mon_loc_stg+("µ uvm_analysis_port #(%s_sequence_item_base) %s_%s_analysis_port;\n"%(envagtmonname, envagtmonname, mon_port_list[s].replace("__s","")))
                                                mon_por_stg = mon_por_stg+('µ %s_%s_analysis_port = new("%s_%s_analysis_port", this);\n'%(envagtmonname, mon_port_list[s].replace("__s",""), envagtmonname, mon_port_list[s].replace("__s","")))

                                        pos = mon_stg.find(' // Port Declaration\n')
                                        apos = pos + len(' // Port Declaration\n')+len('µ //--------------------------------------------\n')
                                        mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
                                        
                                        pos = mon_stg.find(' // Port Construction\n')
                                        apos = pos + len(' // Port Construction\n')+len('µ // -----------------\n')
                                        mon_stg = mon_stg[:apos]+mon_por_stg+mon_stg[apos:]
                                        
                                        # Cleaning local vars
                                        mon_loc_stg = ''
                                        mon_por_stg = ''
                                        #----------------------------------------------------------------------


                                        #----------------------------------------------------------------------
                                        # Loading up the Monitor array content into file 
                                        #----------------------------------------------------------------------
                                        log.debug("mc_edit_phase: Value of mon_stg %s"%(mon_stg))
                                        mc_mon_input_file = open("%s/%s_monitor.sv"%(envagtdirpath, envagtmonname), "w")
                                        mc_mon_array = mon_stg.split('µ')
                                        for lines in mc_mon_array:
                                            mc_mon_input_file.write(lines)
                                        mc_mon_input_file.close()
                                        #----------------------------------------------------------------------
                    
                            # Clearning Important local variables : WATCHOUT : Moved the variables clean up 012320|THU
                            if mc_curr_env_agt_set_c:
                                mc_curr_env_agt_set_c = 0
                            if mc_curr_env_agt_set_s:
                                mc_curr_env_agt_set_s = 0
                    #----------------------------------------------------------------------
               

                    #----------------------------------------------------------------------
                    # Edit the Environment Monitor Files 
                    #----------------------------------------------------------------------
                    if mc_env_cfg_pool[a][3] != '':
                        envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                        
                        log.debug("mc_edit_phase : envname %s  envmonname_arr %s envmondirpath %s!\n"%(envname, envmonname_arr, envmondirpath))
                        for e1 in range (int(envmonname_arr[0])):
                            if len(envmonname_arr[e1+1].split(":"))>1:
                                if "__c" in envmonname_arr[e1+1]:
                                    #envmonname = envname+"_"+(envmonname_arr[e1+1].split(":")[0]).replace("__c","")
                                    envmonname = (envmonname_arr[e1+1].split(":")[0]).replace("__c","")
                                elif "__s" in envmonname_arr[e1+1]:
                                    #envmonname = envname+"_"+(envmonname_arr[e1+1].split(":")[0]).replace("__s","")
                                    envmonname = (envmonname_arr[e1+1].split(":")[0]).replace("__s","")
                                else:
                                    #envmonname = envname+"_"+(envmonname_arr[e1+1].split(":")[0])
                                    envmonname = (envmonname_arr[e1+1].split(":")[0])
                            else:
                                if "__c" in envmonname_arr[e1+1] or mc_curr_env_set_c == 1:
                                    #envmonname = envname+"_"+envmonname_arr[e1+1].replace("__c","")
                                    envmonname = envmonname_arr[e1+1].replace("__c","")
                                elif "__s" in envmonname_arr[e1+1] or mc_curr_env_set_c == 1:
                                    #envmonname = envname+"_"+envmonname_arr[e1+1].replace("__s","")
                                    envmonname = envmonname_arr[e1+1].replace("__s","")
                                else: 
                                    #envmonname = envname+"_"+envmonname_arr[e1+1]
                                    envmonname = envmonname_arr[e1+1]

                            mc_mon_array = []
                            
                            if not os.path.isfile('%s/%s_monitor.sv'%(envmondirpath, envmonname)):
                                log.error("%s/%s_monitor.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envmondirpath, envmonname))
                            else:
                                log.info("%s/%s_monitor.sv file does exists! Progressing Further.\n"%(envmondirpath, envmonname))
                                mc_mon_input_file = open("%s/%s_monitor.sv"%(envmondirpath, envmonname),"r+")

                                mon_stg = '' 
                                mon_loc_stg = ''
                                mon_por_stg = ''
                                mon_int_stg = ''

                                for lines in mc_mon_input_file:
                                    mon_stg = mon_stg+lines+'µ' 
                                log.debug("mc_edit_phase: Value of mon_stg %s"%(mon_stg))

                                
                                #NOTVALIDFOR_ENVMON #----------------------------------------------------------------------
                                #NOTVALIDFOR_ENVMON # Code for Instantiation Local Variables 
                                #NOTVALIDFOR_ENVMON #----------------------------------------------------------------------
                                #NOTVALIDFOR_ENVMON pos = mon_stg.find(' // Data Members\n')
                                #NOTVALIDFOR_ENVMON apos = pos + len(' // Data Members\n') + len('µ //------------------------------------------\n')
                                #NOTVALIDFOR_ENVMON mon_loc_stg = mon_loc_stg+'µ int unsigned %s_agent_id;\n'%(envagtname)
                                #NOTVALIDFOR_ENVMON mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
                                #NOTVALIDFOR_ENVMON 
                                #NOTVALIDFOR_ENVMON # Cleaning local vars
                                #NOTVALIDFOR_ENVMON mon_loc_stg = ''
                                #NOTVALIDFOR_ENVMON #----------------------------------------------------------------------


                                #----------------------------------------------------------------------
                                # Code for Interface Instantiation inside Monitor File 
                                #----------------------------------------------------------------------
                                if mc_env_cfg_pool[a][7] != []:
                                    if mc_env_cfg_pool[a][7][0] != '':
                                        envintfname_arr = str(mc_env_cfg_pool[a][7][0]).split(",")
                                        log.debug("mc_edit_phase : envname %s  envintfname_arr %s envmondirpath %s!\n"%(envname, envintfname_arr, envmondirpath))
                                        for e2 in range (int(envintfname_arr[0])):
                                            if (len(envintfname_arr) == 1 and "__c" in envintfname_arr[0]) or (len(envintfname_arr) == 1 and "__s" in envintfname_arr[0]) and (len(envintfname_arr) == 1 and int(envintfname_arr[0]==1)):
                                                envintfname = envname 
                                            
                                                if "__c" in envintfname_arr or mc_curr_env_set_c == 1:
                                                    mon_loc_stg = mon_loc_stg+("µ virtual %s_interface %s_vif;\n"%(envintfname, envintfname))
                                                    mon_int_stg = mon_int_stg+("µ %s_vif = %s_environment_cfg.%s_vif;\n"%(envintfname, envname, envintfname))
                                                elif "__s" in envintfname_arr and mc_curr_env_set_s == 0:
                                                    mon_loc_stg = mon_loc_stg+("µ virtual %s_interface %s_vif;\n"%(envintfname, envintfname))
                                                    mon_int_stg = mon_int_stg+("µ %s_vif = %s_environment_cfg.%s_vif;\n"%(envintfname, envname, envintfname))
                                            else:
                                                if "__c" in envintfname_arr[e2+1]:
                                                    #envintfname = envname+"_"+envintfname_arr[e2+1].replace("__c","")
                                                    envintfname = envintfname_arr[e2+1].replace("__c","")
                                                elif "__s" in envintfname_arr[e2+1]:
                                                    #envintfname = envname+"_"+envintfname_arr[e2+1].replace("__s","")
                                                    envintfname = envintfname_arr[e2+1].replace("__s","")
                                                else:    
                                                    #envintfname = envname+"_"+envintfname_arr[e2+1]
                                                    envintfname = envintfname_arr[e2+1]

                                                if "__c" in envintfname_arr[e2+1] or mc_curr_env_set_c == 1:
                                                    mon_loc_stg = mon_loc_stg+("µ virtual %s_interface %s_vif;\n"%(envintfname, envintfname))
                                                    mon_int_stg = mon_int_stg+("µ %s_vif = %s_environment_cfg.%s_vif;\n"%(envintfname, envname, envintfname))
                                                elif "__s" in envintfname_arr[e2+1] and mc_curr_env_set_s == 0:
                                                    mon_loc_stg = mon_loc_stg+("µ virtual %s_interface %s_vif;\n"%(envintfname, envintfname))
                                                    mon_int_stg = mon_int_stg+("µ %s_vif = %s_environment_cfg.%s_vif;\n"%(envintfname, envname, envintfname))
                                        
                                pos = mon_stg.find(' // Interface Instantiation\n')
                                apos = pos + len(' // Interface Instantiation\n')+len('µ //------------------------------------------\n')
                                mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
                                
                                pos = mon_stg.find(' // Configure children\n')
                                apos = pos + len(' // Configure children\n')+len('µ // ------------------\n')
                                mon_stg = mon_stg[:apos]+mon_int_stg+mon_stg[apos:]

                                # Cleaning local vars
                                mon_loc_stg = ''
                                mon_int_stg = ''
                                #----------------------------------------------------------------------

                    
                                #----------------------------------------------------------------------
                                # Code for Agent Configuration Instantiation
                                #----------------------------------------------------------------------
                                if mc_curr_env_set_c == 1:
                                    pos = mon_stg[mon_stg.find(' // Environment Configuration Instantiation\n'):mon_stg.find(' // Constraints')].find(' %s_environment_config %s_environment_cfg;\n'%(envname, envname))
                                    if pos == -1:                                 
                                        pos = mon_stg.find(' // Environment Configuration Instantiation\n')
                                        apos = pos + len(' // Environment Configuration Instantiation\n') + len('µ //------------------------------------------\n')
                                        mon_loc_stg = mon_loc_stg+'µ %s_environment_config %s_environment_cfg;\n'%(envname, envname)
                                        mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
                                
                                # Cleaning local vars
                                mon_loc_stg = ''
                                #----------------------------------------------------------------------
   
                                
                                #NOTVALIDFOR_ENVMON #----------------------------------------------------------------------
                                #NOTVALIDFOR_ENVMON # Code for Registration The Variables In Factory 
                                #NOTVALIDFOR_ENVMON #----------------------------------------------------------------------
                                #NOTVALIDFOR_ENVMON pos = mon_stg.find(' // Add field configurations\n')
                                #NOTVALIDFOR_ENVMON apos = pos + len(' // Add field configurations\n') + len('µ  // -----------------\n')
                                #NOTVALIDFOR_ENVMON mon_loc_stg = mon_loc_stg+("µ `uvm_field_int(%s_agent_id, UVM_ALL_ON)\n"%(envagtname))
                                #NOTVALIDFOR_ENVMON mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
                                #NOTVALIDFOR_ENVMON 
                                #NOTVALIDFOR_ENVMON # Cleaning local vars
                                #NOTVALIDFOR_ENVMON mon_loc_stg = ''
                                #NOTVALIDFOR_ENVMON #----------------------------------------------------------------------

            
                                #----------------------------------------------------------------------
                                # Code for Getting Environment Config Instantiation
                                #----------------------------------------------------------------------
                                if mc_curr_env_set_c == 1:
                                    pos = mon_stg[mon_stg.find(' // Get Environment Configuration\n'):mon_stg.find(' // Construct children\n')].find(' if (!uvm_config_db#(%s_environment_config)::get(this, "*", "%s_environment_config", %s_environment_cfg))\n'%(envname, envname, envname))
                                    if pos == -1:
                                        mon_loc_stg = mon_loc_stg\
                                        +('µ if (!uvm_config_db#(%s_environment_config)::get(this, "*", "%s_environment_config", %s_environment_cfg))\n'%(envname, envname, envname))\
                                        +('µ begin\n')\
                                        +('µ  `uvm_error(get_type_name(), "%s_environment_config object is not found in config_db!");\n'%(envname))\
                                        +('µ end\n')\
                                        +('µ else\n')\
                                        +('µ begin\n')\
                                        +('µ  %s_environment_cfg.print();\n'%(envname))\
                                        +('µ end\n')\
                                    
                                pos = mon_stg.find(' // Get Environment Configuration\n')
                                apos = pos + len(' // Get Environment Configuration\n')
                                mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
 
                                # Cleaning local vars
                                mon_loc_stg = ''
                                #----------------------------------------------------------------------

                                
                                # #----------------------------------------------------------------------
                                # # Code for Making the vif assignment from config to local interface 
                                # #----------------------------------------------------------------------
                                # if mc_env_cfg_pool[a][2][e+1][3] != '':
                                #     envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                #     log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                #     for e1 in range (int(envagtdrvname_arr[0])):
                                #         if len(envagtdrvname_arr) == 1:
                                #             envagtdrvname = envagtname 
                                #         else:
                                #             envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]

                                #         mon_loc_stg = mon_loc_stg+("µ %s_vif = %s_environment_cfg.%s_vif;\n"%(envagtdrvname, envagtname, envagtdrvname))
                                #         
                                # pos = mon_stg.find(' // Configure children\n')
                                # apos = pos + len(' // Configure children\n')+len('µ // ------------------\n')
                                # mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]

                                # # Cleaning local vars
                                # mon_loc_stg = ''
                                # #----------------------------------------------------------------------
                           

                                #----------------------------------------------------------------------
                                # Getting the original envmonname 
                                #----------------------------------------------------------------------
                                #envmonname_org = envmonname_arr[e1+1]
                                envmonname_org = envmonname_arr[e1+1].split(":")[0]
                                log.debug("mc_edit_phase : envmonname_org %s!\n"%(envmonname_org))
                                #----------------------------------------------------------------------
                           

                                #----------------------------------------------------------------------
                                # Code for Monitor Port Instantiation 
                                #----------------------------------------------------------------------
                                #mon_port_ele  = envmonname_org.replace("_",",")
                                mon_port_ele  = envname_org+","+envmonname_org 
                                mon_port_idx  = self.find_index_sub_string(mon_port_ele, mc_global_env_mon_scb_con_arr)
                                temp1 = []; mon_port_list = []
                                log.debug("mc_edit_phase: mon_port_ele %s mon_port_idx %s mc_global_env_mon_scb_con_arr %s\n"%(mon_port_ele, mon_port_idx, mc_global_env_mon_scb_con_arr))
                                
                                for p in range (len(mon_port_idx)):
                                    temp = ((mc_global_env_mon_scb_con_arr[mon_port_idx[p]].split("-"))[2]).split("/")
                                    log.debug("mc_edit_phase: mon port process : temp %s\n"%(temp))
                                   
                                    temp1 = []
                                    for q in range (len(temp)):
                                        temp1.append(temp[q].split(",")[0])
                                    log.debug("mc_edit_phase: mon port process : temp %s temp1 %s\n"%(temp, temp1))
                                    
                                    for r in range (len(temp1)):
                                        if not self.find_index(temp1[r], mon_port_list):                                        
                                            mon_port_list.append(temp1[r])
                                    log.debug("mc_edit_phase: mon port process : temp %s temp1 %s mon_port_list %s\n"%(temp, temp1, mon_port_list))

                                for s in range (len(mon_port_list)):
                                    if "__c" in mon_port_list[s] or mc_curr_env_set_c == 1:
                                        mon_loc_stg = mon_loc_stg+("µ uvm_analysis_port #(%s_sequence_item_base) %s_%s_analysis_port;\n"%(envmonname, envmonname, mon_port_list[s].replace("__c","")))
                                        mon_por_stg = mon_por_stg+('µ %s_%s_analysis_port = new("%s_%s_analysis_port", this);\n'%(envmonname, mon_port_list[s].replace("__c",""), envmonname, mon_port_list[s].replace("__c","")))
                                    elif "__s" in mon_port_list[s] and mc_curr_env_set_s == 0:
                                        mon_loc_stg = mon_loc_stg+("µ uvm_analysis_port #(%s_sequence_item_base) %s_%s_analysis_port;\n"%(envmonname, envmonname, mon_port_list[s].replace("__s","")))
                                        mon_por_stg = mon_por_stg+('µ %s_%s_analysis_port = new("%s_%s_analysis_port", this);\n'%(envmonname, mon_port_list[s].replace("__s",""), envmonname, mon_port_list[s].replace("__s","")))

                                pos = mon_stg.find(' // Port Declaration\n')
                                apos = pos + len(' // Port Declaration\n')+len('µ //--------------------------------------------\n')
                                mon_stg = mon_stg[:apos]+mon_loc_stg+mon_stg[apos:]
                                
                                pos = mon_stg.find(' // Port Construction\n')
                                apos = pos + len(' // Port Construction\n')+len('µ // -----------------\n')
                                mon_stg = mon_stg[:apos]+mon_por_stg+mon_stg[apos:]
                                
                                # Cleaning local vars
                                mon_loc_stg = ''
                                mon_por_stg = ''
                                #----------------------------------------------------------------------


                                #----------------------------------------------------------------------
                                # Loading up the Monitor array content into file 
                                #----------------------------------------------------------------------
                                log.debug("mc_edit_phase: Value of mon_stg %s"%(mon_stg))
                                mc_mon_input_file = open("%s/%s_monitor.sv"%(envmondirpath, envmonname), "w")
                                mc_mon_array = mon_stg.split('µ')
                                for lines in mc_mon_array:
                                    mc_mon_input_file.write(lines)
                                mc_mon_input_file.close()
                                #----------------------------------------------------------------------
                    #----------------------------------------------------------------------
                
                
                    #----------------------------------------------------------------------
                    # Edit the Environment Scoreboard Files 
                    #----------------------------------------------------------------------
                    if mc_env_cfg_pool[a][4] != '':
                        envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                        
                        log.debug("mc_edit_phase : envname %s  envscbname_arr %s envscbdirpath %s!\n"%(envname, envscbname_arr, envscbdirpath))
                        for e1 in range (int(envscbname_arr[0])):
                            if len(envscbname_arr[e1+1].split(":"))>1:
                                if "__c" in envscbname_arr[e1+1]:
                                    #envscbname = envname+"_"+(envscbname_arr[e1+1].split(":")[0]).replace("__c","")
                                    envscbname = (envscbname_arr[e1+1].split(":")[0]).replace("__c","")
                                    scbname = (envscbname_arr[e1+1].split(":")[0]).replace("__c","")
                                elif "__s" in envscbname_arr[e1+1]:
                                    #envscbname = envname+"_"+(envscbname_arr[e1+1].split(":")[0]).replace("__s","")
                                    envscbname = (envscbname_arr[e1+1].split(":")[0]).replace("__s","")
                                    scbname = (envscbname_arr[e1+1].split(":")[0]).replace("__s","")
                                else:
                                    #envscbname = envname+"_"+(envscbname_arr[e1+1].split(":")[0])
                                    envscbname = (envscbname_arr[e1+1].split(":")[0])
                                    scbname = (envscbname_arr[e1+1].split(":")[0])
                            else:
                                if "__c" in envscbname_arr[e1+1] or mc_curr_env_set_c == 1:
                                    #envscbname = envname+"_"+envscbname_arr[e1+1].replace("__c","")
                                    envscbname = envscbname_arr[e1+1].replace("__c","")
                                    scbname = envscbname_arr[e1+1].replace("__c","")
                                elif "__s" in envscbname_arr[e1+1] or mc_curr_env_set_c == 1:
                                    #envscbname = envname+"_"+envscbname_arr[e1+1].replace("__s","")
                                    envscbname = envscbname_arr[e1+1].replace("__s","")
                                    scbname = envscbname_arr[e1+1].replace("__s","")
                                else: 
                                    #envscbname = envname+"_"+envscbname_arr[e1+1]
                                    envscbname = envscbname_arr[e1+1]
                                    scbname = envscbname_arr[e1+1]

                            mc_scb_array = []
                            
                            if not os.path.isfile('%s/%s_scoreboard.sv'%(envscbdirpath, envscbname)):
                                log.error("%s/%s_scoreboard.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envscbdirpath, envscbname))
                            else:
                                log.info("%s/%s_scoreboard.sv file does exists! Progressing Further.\n"%(envscbdirpath, envscbname))
                                mc_scb_input_file = open("%s/%s_scoreboard.sv"%(envscbdirpath, envscbname),"r+")

                                scb_stg = '' 
                                scb_loc_stg = ''
                                scb_pl1_stg = ''
                                scb_pl2_stg = ''
                                scb_pl3_stg = ''
                                scb_pl4_stg = ''
                                scb_pl5_stg = ''

                                for lines in mc_scb_input_file:
                                    scb_stg = scb_stg+lines+'µ' 
                                log.debug("mc_edit_phase: Value of scb_stg %s"%(scb_stg))

                                
                                #----------------------------------------------------------------------
                                # Code for Environment Configuration Instantiation
                                #----------------------------------------------------------------------
                                if mc_curr_env_set_c == 1:
                                    pos = scb_stg[scb_stg.find(' // Environment Configuration Instantiation\n'):scb_stg.find(' // Constraints')].find(' %s_environment_config %s_environment_cfg;\n'%(envname, envname))
                                    if pos == -1:
                                        pos = scb_stg.find(' // Environment Configuration Instantiation\n')
                                        apos = pos + len(' // Environment Configuration Instantiation\n') + len('µ //------------------------------------------\n')
                                        scb_loc_stg = scb_loc_stg+'µ %s_environment_config %s_environment_cfg;\n'%(envname, envname)
                                        scb_stg = scb_stg[:apos]+scb_loc_stg+scb_stg[apos:]
                                
                                # Cleaning local vars
                                scb_loc_stg = ''
                                #----------------------------------------------------------------------


                                #----------------------------------------------------------------------
                                # Code for Getting Environment Config Instantiation
                                #----------------------------------------------------------------------
                                if mc_curr_env_set_c == 1:
                                    pos = scb_stg[scb_stg.find(' // Get Environment Configuration\n'):scb_stg.find(' // Construct children\n')].find(' if (!uvm_config_db#(%s_environment_config)::get(this, "*", "%s_environment_config", %s_environment_cfg))\n'%(envname, envname, envname))
                                    if pos == -1:
                                        scb_loc_stg = scb_loc_stg\
                                        +('µ if (!uvm_config_db#(%s_environment_config)::get(this, "*", "%s_environment_config", %s_environment_cfg))\n'%(envname, envname, envname))\
                                        +('µ begin\n')\
                                        +('µ  `uvm_error(get_type_name(), "%s_environment_config object is not found in config_db!");\n'%(envname))\
                                        +('µ end\n')\
                                        +('µ else\n')\
                                        +('µ begin\n')\
                                        +('µ  %s_environment_cfg.print();\n'%(envname))\
                                        +('µ end\n')\
                                    
                                pos = scb_stg.find(' // Get Environment Configuration\n')
                                apos = pos + len(' // Get Environment Configuration\n')
                                scb_stg = scb_stg[:apos]+scb_loc_stg+scb_stg[apos:]
 
                                # Cleaning local vars
                                scb_loc_stg = ''
                                #----------------------------------------------------------------------
                           

                                #----------------------------------------------------------------------
                                # Getting the Original Name
                                #----------------------------------------------------------------------
                                #envscbname_org = envscbname_arr[e1+1]
                                envscbname_org = envscbname_arr[e1+1].split(":")[0]
                                log.debug("mc_edit_phase: envscbname_org : envscbname_org %s\n"%(envscbname_org))
                                #----------------------------------------------------------------------

                                
                                #----------------------------------------------------------------------
                                # Code for Scoreboard Port Instantiation 
                                #----------------------------------------------------------------------
                                #scb_port_ele  = envscbname_org.replace("_",",")
                                scb_port_ele  = envname_org+","+envscbname_org 
                                scb_port_idx  = self.find_index_sub_string(scb_port_ele, mc_global_env_mon_scb_con_arr)
                                temp1 = []; scb_port_list = []
                                log.debug("mc_edit_phase: scb_port_ele %s scb_port_idx %s mc_global_env_mon_scb_con_arr %s\n"%(scb_port_ele, scb_port_idx, mc_global_env_mon_scb_con_arr))
                                
                                for p in range (len(scb_port_idx)):
                                    temp = ((mc_global_env_mon_scb_con_arr[scb_port_idx[p]].split("-"))[2]).split("/")
                                    log.debug("mc_edit_phase: scb port process : temp %s\n"%(temp))
                                   
                                    monname = ((mc_global_env_mon_scb_con_arr[scb_port_idx[p]].split("-"))[0])
                                    log.debug("mc_edit_phase: monname : monname %s\n"%(monname))
                                    
                                    for r in range (len(temp)):
                                        temp[r] = monname+"-"+temp[r]
                                        if not self.find_index(temp[r], scb_port_list):                                        
                                            scb_port_list.append(temp[r])
                                    log.debug("mc_edit_phase: scb port process : temp %s scb_port_list %s\n"%(temp, scb_port_list))

                                for s in range (len(scb_port_list)):
                                    scb_pl1_stg = ''
                                    scb_pl2_stg = ''
                                    scb_pl3_stg = ''
                                    scb_pl4_stg = ''
                                    scb_pl5_stg = ''
                                    
                                    mname_tmp = (scb_port_list[s].split("-")[0]).split(",")
                                    log.debug("mc_edit_phase: mname_tmp %s\n"%(mname_tmp))
                                    
                                    # if len(mname_tmp) == 4:
                                    #     mname = mname_tmp[1].split(":")[0]+"_"+mname_tmp[2]+"_"+mname_tmp[3]
                                    # elif len(mname_tmp) == 3:
                                    #     mname = mname_tmp[1].split(":")[0]+"_"+mname_tmp[2]
                                    
                                    if len(mname_tmp) == 4:
                                        mname = mname_tmp[2]+"_"+mname_tmp[3]
                                    elif len(mname_tmp) == 3:
                                        mname = mname_tmp[2]
                                    
                                    log.debug("mc_edit_phase: scb port process : mname %s\n"%(mname))

                                    if "__c" in mname:
                                        mname = mname.replace("__c","")
                                    elif "__s" in mname:
                                        mname = mname.replace("__s","")
                                        log.debug("mc_edit_phase: scb port process : mname %s\n"%(mname))

                                    pname_tmp = (scb_port_list[s].split("-")[1]).split(",")
                                    
                                    if len(mname_tmp) == 4:
                                        pname = mname_tmp[-2]+"_"+mname_tmp[-1]+"_"+pname_tmp[0]
                                    elif len(mname_tmp) == 3:
                                        pname = mname_tmp[-1]+"_"+pname_tmp[0]
                                    
                                    ptype = int(pname_tmp[1])
                                    
                                    log.debug("mc_edit_phase: mname_tmp %s mname %s pname_tmp %s pname %s pty %d\n"%(mname_tmp, mname, pname_tmp, pname, ptype))

                                    if ptype == 1:
                                        if "__c" in pname or mc_curr_env_set_c == 1:
                                            scb_pl1_stg = scb_pl1_stg\
                                            +('µ uvm_analysis_export #(%s_sequence_item_base) %s_%s_analysis_export;\n'%(mname, envscbname, pname.replace("__c","")))\
                                            +('µ local uvm_tlm_analysis_fifo #(%s_sequence_item_base) %s_%s_analysis_fifo;\n\n'%(mname, envscbname, pname.replace("__c","")))
                                        elif "__s" in pname and mc_curr_env_set_s == 0:
                                            scb_pl1_stg = scb_pl1_stg\
                                            +('µ uvm_analysis_export #(%s_sequence_item_base) %s_%s_analysis_export;\n'%(mname, envscbname, pname.replace("__s","")))\
                                            +('µ local uvm_tlm_analysis_fifo #(%s_sequence_item_base) %s_%s_analysis_fifo;\n\n'%(mname, envscbname, pname.replace("__s","")))
                                    
                                        if "__c" in pname or mc_curr_env_set_c == 1:
                                            scb_pl2_stg = scb_pl2_stg\
                                            +('µ %s_%s_analysis_export = new("%s_%s_analysis_export", this);\n'%(envscbname, pname.replace("__c",""), envscbname, pname.replace("__c","")))\
                                            +('µ %s_%s_analysis_fifo = new("%s_%s_analysis_fifo", this);\n\n'%(envscbname, pname.replace("__c",""), envscbname, pname.replace("__c","")))
                                        elif "__s" in pname and mc_curr_env_set_s == 0:
                                            scb_pl2_stg = scb_pl2_stg\
                                            +('µ %s_%s_analysis_export = new("%s_%s_analysis_export", this);\n'%(envscbname, pname.replace("__s",""), envscbname, pname.replace("__s","")))\
                                            +('µ %s_%s_analysis_fifo = new("%s_%s_analysis_fifo", this);\n\n'%(envscbname, pname.replace("__s",""), envscbname, pname.replace("__s","")))
                                        
                                        if "__c" in pname or mc_curr_env_set_c == 1:
                                            scb_pl3_stg = scb_pl3_stg\
                                            +('µ %s_%s_analysis_export.connect(%s_%s_analysis_fifo.analysis_export);\n'%(envscbname, pname.replace("__c",""), envscbname, pname.replace("__c","")))
                                        elif "__s" in pname and mc_curr_env_set_s == 0:
                                            scb_pl3_stg = scb_pl3_stg\
                                            +('µ %s_%s_analysis_export.connect(%s_%s_analysis_fifo.analysis_export);\n'%(envscbname, pname.replace("__s",""), envscbname, pname.replace("__s","")))

                                        pos = scb_stg.find(' // Port Declaration\n')
                                        apos = pos + len(' // Port Declaration\n')+len('µ //--------------------------------------------\n')
                                        scb_stg = scb_stg[:apos]+scb_pl1_stg+scb_stg[apos:]
                                        
                                        pos = scb_stg.find(' super.new(name, parent);\n')
                                        apos = pos + len(' super.new(name, parent);\n') 
                                        scb_stg = scb_stg[:apos]+scb_pl2_stg+scb_stg[apos:]
                                        
                                        pos = scb_stg.find(' super.connect_phase(phase);\n')
                                        apos = pos + len(' super.connect_phase(phase);\n')
                                        scb_stg = scb_stg[:apos]+scb_pl3_stg+scb_stg[apos:]
                                   
                                        log.debug("mc_edit_phase: scb_pl1_stg %s\n scb_pl2_stg %s\n scb_pl3_stg %s\n scb_pl4_stg %s\n scb_pl5_stg %s\n scb_stg %s\n"%(scb_pl1_stg, scb_pl2_stg, scb_pl3_stg, scb_pl4_stg, scb_pl5_stg, scb_stg))
                                    elif ptype == 2:
                                        if "__c" in pname or mc_curr_env_set_c == 1:
                                            scb_pl1_stg = scb_pl1_stg\
                                            +('µ`uvm_analysis_imp_decl(_%s_%s_scoreboard)\n'%(scbname, pname.replace("__c","")))
                                        elif "__s" in pname and mc_curr_env_set_s == 0:
                                            scb_pl1_stg = scb_pl1_stg\
                                            +('µ`uvm_analysis_imp_decl(_%s_%s_scoreboard)\n'%(scbname, pname.replace("__s","")))
                                        log.debug("mc_edit_phase: scb_pl1_stg %s\n scb_pl2_stg %s\n scb_pl3_stg %s\n scb_pl4_stg %s\n scb_pl5_stg %s\n scb_stg %s\n"%(scb_pl1_stg, scb_pl2_stg, scb_pl3_stg, scb_pl4_stg, scb_pl5_stg, scb_stg))
                                        
                                        if "__c" in pname or mc_curr_env_set_c == 1:
                                            scb_pl2_stg = scb_pl2_stg\
                                            +('µ uvm_analysis_imp_%s_%s_scoreboard #(%s_sequence_item_base, %s_scoreboard) %s_%s_analysis_export;\n\n'%(scbname, pname.replace("__c",""), mname, envscbname, envscbname, pname.replace("__c","")))
                                        elif "__s" in pname and mc_curr_env_set_s == 0:
                                            scb_pl2_stg = scb_pl2_stg\
                                            +('µ uvm_analysis_imp_%s_%s_scoreboard #(%s_sequence_item_base, %s_scoreboard) %s_%s_analysis_export;\n\n'%(scbname, pname.replace("__s",""), mname, envscbname, envscbname, pname.replace("__s","")))
                                        log.debug("mc_edit_phase: scb_pl1_stg %s\n scb_pl2_stg %s\n scb_pl3_stg %s\n scb_pl4_stg %s\n scb_pl5_stg %s\n scb_stg %s\n"%(scb_pl1_stg, scb_pl2_stg, scb_pl3_stg, scb_pl4_stg, scb_pl5_stg, scb_stg))

                                        if "__c" in pname or mc_curr_env_set_c == 1:
                                            scb_pl3_stg = scb_pl3_stg\
                                            +('µ extern virtual function void write_%s_%s_scoreboard(%s_sequence_item_base %s_seq_item_base);\n'%(scbname, pname.replace("__c",""), mname, mname))
                                        elif "__s" in pname and mc_curr_env_set_s == 0:
                                            scb_pl3_stg = scb_pl3_stg\
                                            +('µ extern virtual function void write_%s_%s_scoreboard(%s_sequence_item_base %s_seq_item_base);\n'%(scbname, pname.replace("__s",""), mname, mname))
                                        log.debug("mc_edit_phase: scb_pl1_stg %s\n scb_pl2_stg %s\n scb_pl3_stg %s\n scb_pl4_stg %s\n scb_pl5_stg %s\n scb_stg %s\n"%(scb_pl1_stg, scb_pl2_stg, scb_pl3_stg, scb_pl4_stg, scb_pl5_stg, scb_stg))
                                        
                                        if "__c" in pname or mc_curr_env_set_c == 1:
                                            scb_pl4_stg = scb_pl4_stg\
                                            +('µ %s_%s_analysis_export = new("%s_%s_analysis_export", this);\n\n'%(envscbname, pname.replace("__c",""), envscbname, pname.replace("__c","")))
                                        elif "__s" in pname and mc_curr_env_set_s == 0:
                                            scb_pl4_stg = scb_pl4_stg\
                                            +('µ %s_%s_analysis_export = new("%s_%s_analysis_export", this);\n\n'%(envscbname, pname.replace("__s",""), envscbname, pname.replace("__s","")))
                                        log.debug("mc_edit_phase: scb_pl1_stg %s\n scb_pl2_stg %s\n scb_pl3_stg %s\n scb_pl4_stg %s\n scb_pl5_stg %s\n scb_stg %s\n"%(scb_pl1_stg, scb_pl2_stg, scb_pl3_stg, scb_pl4_stg, scb_pl5_stg, scb_stg))

                                        if "__c" in pname or mc_curr_env_set_c == 1:
                                            scb_pl5_stg = scb_pl5_stg\
                                            +('µ //---------------------------------------------------------------\n')\
                                            +('µ // Function: write_%s_%s_scoreboard\n'%(scbname, pname.replace("__c","")))\
                                            +('µ // \n')\
                                            +('µ //---------------------------------------------------------------\n')\
                                            +('µ \n')\
                                            +('µ function void %s_scoreboard::write_%s_%s_scoreboard(%s_sequence_item_base %s_seq_item_base);\n'%(envscbname, scbname, pname.replace("__c",""), mname, mname))\
                                            +('µ endfunction: write_%s_%s_scoreboard\n'%(scbname, pname.replace("__c","")))\
                                            +('µ \n')
                                        elif "__s" in pname and mc_curr_env_set_s == 0:
                                            scb_pl5_stg = scb_pl5_stg\
                                            +('µ //---------------------------------------------------------------\n')\
                                            +('µ // Function: write_%s_%s_scoreboard\n'%(scbname, pname.replace("__s","")))\
                                            +('µ // \n')\
                                            +('µ //---------------------------------------------------------------\n')\
                                            +('µ \n')\
                                            +('µ function void %s_scoreboard::write_%s_%s_scoreboard(%s_sequence_item_base %s_seq_item_base);\n'%(envscbname, scbname, pname.replace("__s",""), mname, mname))\
                                            +('µ endfunction: write_%s_%s_scoreboard\n'%(scbname, pname.replace("__s","")))\
                                            +('µ \n')
                                        log.debug("mc_edit_phase: scb_pl1_stg %s\n scb_pl2_stg %s\n scb_pl3_stg %s\n scb_pl4_stg %s\n scb_pl5_stg %s\n scb_stg %s\n"%(scb_pl1_stg, scb_pl2_stg, scb_pl3_stg, scb_pl4_stg, scb_pl5_stg, scb_stg))

                                        pos = scb_stg.find('// TLM Analysis Imp Declaration\n')
                                        apos = pos + len('// TLM Analysis Imp Declaration\n')
                                        scb_stg = scb_stg[:apos]+scb_pl1_stg+scb_stg[apos:]
                                        
                                        pos = scb_stg.find(' // Port Declaration\n')
                                        apos = pos + len(' // Port Declaration\n')+len('µ //--------------------------------------------\n')
                                        scb_stg = scb_stg[:apos]+scb_pl2_stg+scb_stg[apos:]
                                        
                                        pos = scb_stg.find(' // User Defined APIs\n')
                                        apos = pos + len(' // User Defined APIs\n')+len('µ // -----------------\n')
                                        scb_stg = scb_stg[:apos]+scb_pl3_stg+scb_stg[apos:]
                                        
                                        pos = scb_stg.find(' super.new(name, parent);\n')
                                        apos = pos + len(' super.new(name, parent);\n') 
                                        scb_stg = scb_stg[:apos]+scb_pl4_stg+scb_stg[apos:]
                                        
                                        pos = scb_stg.find('endfunction: final_phase\n')
                                        apos = pos + len('endfunction: final_phase\n')+len('µ\n')
                                        scb_stg = scb_stg[:apos]+scb_pl5_stg+scb_stg[apos:]
                                        
                                        # log.debug("mc_edit_phase: scb_pl1_stg %s\n scb_pl2_stg %s\n scb_pl3_stg %s\n scb_pl4_stg %s\n scb_pl5_stg %s\n scb_stg %s\n"%(scb_pl1_stg, scb_pl2_stg, scb_pl3_stg, scb_pl4_stg, scb_pl5_stg, scb_stg))
                                
                                # Cleaning local vars
                                scb_loc_stg = ''
                                scb_pl1_stg = ''
                                scb_pl2_stg = ''
                                scb_pl3_stg = ''
                                scb_pl4_stg = ''
                                scb_pl5_stg = ''
                                #----------------------------------------------------------------------

                        
                                #----------------------------------------------------------------------
                                # Loading up the Scoreboard array content into file 
                                #----------------------------------------------------------------------
                                log.debug("mc_edit_phase: Value of scb_stg %s"%(scb_stg))
                                mc_scb_input_file = open("%s/%s_scoreboard.sv"%(envscbdirpath, envscbname), "w")
                                mc_scb_array = scb_stg.split('µ')
                                for lines in mc_scb_array:
                                    mc_scb_input_file.write(lines)
                                mc_scb_input_file.close()
                                #----------------------------------------------------------------------
                    #----------------------------------------------------------------------
           

                    # Moved to the original place where the drivers file is modified : 010420|SAT
                    #   #----------------------------------------------------------------------
                    #   # Opening the Driver File and Edit
                    #   #----------------------------------------------------------------------
                    #   if mc_env_cfg_pool[a][2][e+1][3] != '':
                    #       envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                    #       log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                    #       for e1 in range (int(envagtdrvname_arr[0])):
                    #           if (len(envagtdrvname_arr) == 1 and "__c" in envagtdrvname_arr[0]) or (len(envagtdrvname_arr) == 1 and "__s" in envagtdrvname_arr[0]) or (len(envagtdrvname_arr) == 1 and int(envagtdrvname_arr[0]) == 1):
                    #               envagtdrvname = envagtname 
                    #               
                    #               #----------------------------------------------------------------------
                    #               # Loading up the Driver Interface Details : Mainly for the user defined interface
                    #               #----------------------------------------------------------------------
                    #               if "__c" in envagtdrvname_arr or mc_curr_env_agt_set_c == 1:
                    #                   log.debug(mc_env_cfg_pool[a][2][e+1][5][e1][2])
                    #                   if int(mc_env_cfg_pool[a][2][e+1][5][e1][2]) == 3:
                    #                       log.debug("mc_edit_phase: drv intf: envagtdrvname %s, envagtdirpath %s, cfg %s"%(envagtdrvname, envagtdirpath, mc_env_cfg_pool[a][2][e+1][5][e1]))
                    #                       self.mc_gen_intf(envagtdrvname, envagtdirpath, mc_env_cfg_pool[a][2][e+1][5][e1]) 
                    #           else:
                    #               if "__c" in envagtdrvname_arr[e1+1]:
                    #                   envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1].replace("__c","")
                    #               elif "__s" in envagtdrvname_arr[e1+1]:
                    #                   envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1].replace("__s","")
                    #               else:
                    #                   envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                    #                   
                    #               #----------------------------------------------------------------------
                    #               # Loading up the Driver Interface Details : Mainly for the user defined interface
                    #               #----------------------------------------------------------------------
                    #               if "__c" in envagtdrvname_arr[e1+1] or mc_curr_env_agt_set_c == 1:
                    #                   log.debug(mc_env_cfg_pool[a][2][e+1][5][e1][2])
                    #                   if int(mc_env_cfg_pool[a][2][e+1][5][e1][2]) == 3:
                    #                       log.debug("mc_edit_phase: drv intf: envagtdrvname %s, envagtdirpath %s, cfg %s"%(envagtdrvname, envagtdirpath, mc_env_cfg_pool[a][2][e+1][5][e1]))
                    #                       self.mc_gen_intf(envagtdrvname, envagtdirpath, mc_env_cfg_pool[a][2][e+1][5][e1]) 
                    #   #----------------------------------------------------------------------
                    
                    
                    #----------------------------------------------------------------------
                    # Code for Creating Environment Interface During the mc_create_phase under __c  
                    #----------------------------------------------------------------------
                    if mc_env_cfg_pool[a][7] != []:
                        if mc_env_cfg_pool[a][7][0] != '':
                            envintfname_arr = str(mc_env_cfg_pool[a][7][0]).split(",")
                            log.debug("mc_create_phase : envname %s  envintfname_arr %s!\n"%(envname, envintfname_arr))
                            
                            for b in range (int(envintfname_arr[0])):
                                if (len(envintfname_arr) == 1 and "__c" in envintfname_arr[0]) or (len(envintfname_arr) == 1 and "__s" in envintfname_arr[0]) or (len(envintfname_arr) == 1 and int(envintfname_arr[0]) == 1):
                                    envintfname = envname
                                    
                                    if "__c" in envintfname_arr or mc_curr_env_set_c == 1:
                                        #----------------------------------------------------------------------
                                        # Loading up the Env Interface Details : Mainly for the user defined interface
                                        #----------------------------------------------------------------------
                                        log.debug(mc_env_cfg_pool[a][7][b+1][2])
                                        if int(mc_env_cfg_pool[a][7][b+1][2]) == 3:
                                            log.debug("mc_edit_phase: drv intf: envintfname %s, envintfdirpath %s, cfg %s"%(envagtdrvname, envagtdirpath, mc_env_cfg_pool[a][7][b+1]))
                                            self.mc_gen_intf(envintfname, envintfdirpath, mc_env_cfg_pool[a][7][b+1]) 
                                        #----------------------------------------------------------------------
                                
                                        #----------------------------------------------------------------------
                                        # Environment Interface Wrapper Editing : 12122020SAT
                                        #----------------------------------------------------------------------
                                        log.debug("mc_edit_phase: env intf wrapper: envintfname %s, envintfdirpath %s, cfg %s"%(envintfname, envintfdirpath, 0))
                                        self.mc_gen_intf_wrapper(envintfname, envintfdirpath, 0)
                                        #----------------------------------------------------------------------
                                
                                        #----------------------------------------------------------------------
                                        # Environment Interface Macros Addition : 12122020SAT
                                        #----------------------------------------------------------------------
                                        log.debug("mc_edit_phase: env macros: envintfname %s, envname %s, envdirpath %s, cfg %s"%(envintfname, envname, envdirpath, 0))
                                        self.mc_gen_env_macros(envintfname, envname, envpath, 0) 
                                        #----------------------------------------------------------------------
                                else:
                                    if "__c" in envintfname_arr[b+1]:
                                        #envintfname = envname+"_"+envintfname_arr[b+1].replace("__c","")
                                        envintfname = envintfname_arr[b+1].replace("__c","")
                                    elif "__s" in envintfname_arr[b+1]:
                                        #envintfname = envname+"_"+envintfname_arr[b+1].replace("__s","")
                                        envintfname = envintfname_arr[b+1].replace("__s","")
                                    else:
                                        #envintfname = envname+"_"+envintfname_arr[b+1]
                                        envintfname = envintfname_arr[b+1]
                        
                                    if "__c" in envintfname_arr[b+1] or mc_curr_env_set_c == 1:
                                        #----------------------------------------------------------------------
                                        # Loading up the Env Interface Details : Mainly for the user defined interface
                                        #----------------------------------------------------------------------
                                        log.debug(mc_env_cfg_pool[a][7][b+1][2])
                                        if int(mc_env_cfg_pool[a][7][b+1][2]) == 3:
                                            log.debug("mc_edit_phase: drv intf: envintfname %s, envintfdirpath %s, cfg %s"%(envagtdrvname, envagtdirpath, mc_env_cfg_pool[a][7][b+1]))
                                            self.mc_gen_intf(envintfname, envintfdirpath, mc_env_cfg_pool[a][7][b+1]) 
                                        #----------------------------------------------------------------------
                                        
                                        #----------------------------------------------------------------------
                                        # Environment Interface Wrapper Editing : 12122020SAT
                                        #----------------------------------------------------------------------
                                        log.debug("mc_edit_phase: env intf wrapper: envintfname %s, envintfdirpath %s, cfg %s"%(envintfname, envintfdirpath, 0))
                                        self.mc_gen_intf_wrapper(envintfname, envintfdirpath, 0)
                                        #----------------------------------------------------------------------
                                        
                                        #----------------------------------------------------------------------
                                        # Environment Interface Macros Addition : 12122020SAT
                                        #----------------------------------------------------------------------
                                        log.debug("mc_edit_phase: env macros: envintfname %s, envname %s, envdirpath %s, cfg %s"%(envintfname, envname, envdirpath, 0))
                                        self.mc_gen_env_macros(envintfname, envname, envpath, 0) 
                                        #----------------------------------------------------------------------
                    #----------------------------------------------------------------------

       
                    #----------------------------------------------------------------------
                    # Edit the Test File  
                    #----------------------------------------------------------------------
                    if (mc_env_cfg_pool[a][0]):
                        if mc_curr_env_set_c == 1:
                            # Opening the Test file and edit
                            mc_test_array = []
                            
                            if not os.path.isfile('%s/%s_test.sv'%(envtestdirpath, envname)):
                                log.error("%s/%s_test.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envtestdirpath, envname))
                            else:
                                log.info("%s/%s_test.sv file does exists! Progressing Further.\n"%(envtestdirpath, envname))
                                mc_test_input_file = open("%s/%s_test.sv"%(envtestdirpath, envname),"r+")

                                test_stg = '' 
                                test_loc_stg = '' 
                                id_temp = "%0d"

                                for lines in mc_test_input_file:
                                    test_stg = test_stg+lines+'µ' 
                                log.debug("mc_create_phase: Value of test_stg %s"%(test_stg))

                                if len(envname_org.split(":"))>1:
                                    #----------------------------------------------------------------------
                                    # Environment Local Variables
                                    #----------------------------------------------------------------------
                                    pos = test_stg.find('// Environment Data Members\n')
                                    apos = pos + len('// Environment Data Members\n')
                                    test_stg = test_stg[:apos]+'µ string env_inst_name;\n'+test_stg[apos:]
                                    #----------------------------------------------------------------------
                                    
                                    
                                    #----------------------------------------------------------------------
                                    test_loc_stg = test_loc_stg+("µ rand int unsigned no_of_%s_env;\n"%(envname))

                                    pos = test_stg.find(' // Environment Data Members\n')
                                    apos = pos + len(' // Environment Data Members\n')
                                    test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]
    
                                    test_loc_stg = ''
                                    #----------------------------------------------------------------------

                                    
                                    #----------------------------------------------------------------------
                                    test_loc_stg = test_loc_stg+("µ `uvm_field_int(no_of_%s_env, UVM_ALL_ON)\n"%(envname))

                                    pos = test_stg.find('// Add field configurations\n')
                                    apos = pos + len('// Add field configurations\n')+len('µ  // -----------------\n')
                                    test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]
    
                                    test_loc_stg = ''
                                    #----------------------------------------------------------------------


                                    #----------------------------------------------------------------------
                                    test_loc_stg = test_loc_stg+("µ extern virtual function void construct_%s_env(int unsigned num_envs);\n"%(envname))

                                    pos = test_stg.find('// User Defined APIs\n')
                                    apos = pos + len('// User Defined APIs\n')+len('µ // -----------------\n')
                                    test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]
    
                                    test_loc_stg = ''
                                    #----------------------------------------------------------------------

                                    
                                    #----------------------------------------------------------------------
                                    test_loc_stg = test_loc_stg\
                                    +('µ if (!uvm_config_db#(int)::get(uvm_root::get(), "*", "no_of_%s_env", no_of_%s_env))\n'%(envname, envname))\
                                    +("µ begin\n")\
                                    +('µ  `uvm_warning(get_type_name(), "no_of_%s_env setting is not found in config_db! Setting default value of 1");\n'%(envname))\
                                    +("µ   no_of_%s_env = 1;\n"%(envname))\
                                    +("µ end\n")

                                    pos = test_stg.find('// Get Configuration\n')
                                    apos = pos + len('// Get Configuration\n')+len('µ // -----------------\n')
                                    test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]
    
                                    test_loc_stg = ''
                                    #----------------------------------------------------------------------

                                
                                    #----------------------------------------------------------------------
                                    test_loc_stg = test_loc_stg\
                                    +("µ\n")\
                                    +("µ//---------------------------------------------------------------\n")\
                                    +("µ// Function: construct_%s_env\n"%envname)\
                                    +("µ// \n")\
                                    +("µ//---------------------------------------------------------------\n")\
                                    +("µ\n")\
                                    +("µfunction void %s_test::construct_%s_env(int unsigned num_envs);\n"%(envname, envname))\
                                    +("µ // Get The Number Of Envs\n")\
                                    +("µ no_of_%s_env = num_envs;\n"%envname)\
                                    +("µ\n")\
                                    +("µ // Create The Required Number of %s Env Configurations\n"%(envname))\
                                    +("µ %s_environment_cfg = new[no_of_%s_env];\n"%(envname, envname))\
                                    +("µ\n")\
                                    +("µ // Create The Required Number of %s Env\n"%(envname))\
                                    +("µ %s_env = new[no_of_%s_env];\n"%(envname, envname))\
                                    +("µ\n")\
                                    +("µ // Construct the %s Envs & Configurations\n"%(envname))\
                                    +("µ for (int i = 0; i < no_of_%s_env; i++) begin\n"%(envname))\
                                    +('µ  $sformat(env_inst_name, "%s_environment_cfg[%s]", i);\n'%(envname, "%0d"))\
                                    +('µ  %s_environment_cfg[i] = %s_environment_config::type_id::create(env_inst_name);\n'%(envname, envname))\
                                    +("µ\n")\
                                    +('µ  $sformat(env_inst_name, "%s_env[%s]", i);\n'%(envname, "%0d"))\
                                    +('µ  %s_env[i] = %s_environment::type_id::create(env_inst_name);\n'%(envname, envname))\
                                    +("µ end\n")\
                                    +("µendfunction: construct_%s_env\n"%envname) 
                                
                                    pos = test_stg.find('endfunction: final_phase\n')
                                    apos = pos + len('endfunction: final_phase\n')
                                    test_stg = test_stg[:apos]+('\n')+test_loc_stg+test_stg[apos:]
    
                                    test_loc_stg = ''
                                    #----------------------------------------------------------------------


                                    #----------------------------------------------------------------------
                                    test_loc_stg = test_loc_stg+("µ %s_environment %s_env[];\n"%(envname, envname))
                                
                                    pos = test_stg.find('// Environments Instantiation\n')
                                    apos = pos + len('// Environments Instantiation\n')
                                    test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]

                                    # Cleaning local variables 
                                    test_loc_stg = ''
                                    #----------------------------------------------------------------------

            
                                    #----------------------------------------------------------------------
                                    test_loc_stg = test_loc_stg+("µ %s_environment_config %s_environment_cfg[];\n"%(envname, envname))
                                    
                                    pos = test_stg.find('// Environment Configuration Object Instantiation\n')
                                    apos = pos + len('// Environment Configuration Object Instantiation\n')
                                    test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]

                                    # Cleaning local variables 
                                    test_loc_stg = ''
                                    #----------------------------------------------------------------------


                                    #----------------------------------------------------------------------
                                    test_loc_stg = test_loc_stg+("µ construct_%s_env(no_of_%s_env);\n"%(envname, envname))

                                    pos = test_stg.find('// Construct Components and Configuration\n')
                                    apos = pos + len('// Construct Components and Configuration\n') + len('µ // -----------------\n')
                                    test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]
    
                                    test_loc_stg = ''
                                    #----------------------------------------------------------------------


                                    #----------------------------------------------------------------------
                                    test_loc_stg = test_loc_stg\
                                    +("µ for (int i = 0; i < no_of_%s_env; i++) begin\n"%(envname))\
                                    +('µ  $sformat(env_inst_name, "*%s_env[%s]*", i);\n'%(envname, str(id_temp)))\
                                    +('µ  uvm_config_db#(%s_environment_config)::set(this, env_inst_name, "%s_environment_config", %s_environment_cfg[i]);\n'%(envname, envname, envname))\
                                    +("µ end\n")

                                    pos = test_stg.find('// Configure Environments\n')
                                    apos = pos + len('// Configure Environments\n')
                                    test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]

                                    # Cleaning local variables 
                                    test_loc_stg = ''
                                    #----------------------------------------------------------------------
                                else:
                                    #----------------------------------------------------------------------
                                    test_loc_stg = test_loc_stg+("µ %s_environment %s_env;\n"%(envname, envname))
                                    
                                    pos = test_stg.find('// Environments Instantiation\n')
                                    apos = pos + len('// Environments Instantiation\n')
                                    test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]

                                    # Cleaning local variables 
                                    test_loc_stg = ''
                                    #----------------------------------------------------------------------
     

                                    #----------------------------------------------------------------------
                                    test_loc_stg = test_loc_stg\
                                    +('µ %s_env = %s_environment::type_id::create("%s_env",this);\n'%(envname, envname, envname))
                                    
                                    pos = test_stg.find('// Construct Environments\n')
                                    apos = pos + len('// Construct Environments\n')
                                    test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]

                                    # Cleaning local variables 
                                    test_loc_stg = ''
                                    #----------------------------------------------------------------------


                                    #----------------------------------------------------------------------
                                    test_loc_stg = test_loc_stg+("µ %s_environment_config %s_environment_cfg;\n"%(envname, envname))
                                    
                                    pos = test_stg.find('// Environment Configuration Object Instantiation\n')
                                    apos = pos + len('// Environment Configuration Object Instantiation\n')
                                    test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]

                                    # Cleaning local variables 
                                    test_loc_stg = ''
                                    #----------------------------------------------------------------------
     

                                    #----------------------------------------------------------------------
                                    test_loc_stg = test_loc_stg\
                                    +('µ %s_environment_cfg = %s_environment_config::type_id::create("%s_environment_cfg",this);\n'%(envname, envname, envname))
                                    
                                    pos = test_stg.find('// Construct Environments Configuration\n')
                                    apos = pos + len('// Construct Environments Configuration\n')
                                    test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]

                                    # Cleaning local variables 
                                    test_loc_stg = ''
                                    #----------------------------------------------------------------------


                                    #----------------------------------------------------------------------
                                    test_loc_stg = test_loc_stg\
                                    +('µ uvm_config_db#(%s_environment_config)::set(this, "*%s_env*", "%s_environment_config", %s_environment_cfg);\n'%(envname, envname, envname, envname))
                                    
                                    pos = test_stg.find('// Configure Environments\n')
                                    apos = pos + len('// Configure Environments\n')
                                    test_stg = test_stg[:apos]+test_loc_stg+test_stg[apos:]

                                    # Cleaning local variables 
                                    test_loc_stg = ''
                                    #----------------------------------------------------------------------


                                #----------------------------------------------------------------------
                                # Loading up the Test array content into file 
                                #----------------------------------------------------------------------
                                log.debug("mc_create_phase: Value of test_stg %s"%(test_stg))
                                mc_test_input_file = open("%s/%s_test.sv"%(envtestdirpath, envname), "w")
                                mc_test_array = test_stg.split('µ')
                                for lines in mc_test_array:
                                    mc_test_input_file.write(lines)
                                mc_test_input_file.close()
                                #----------------------------------------------------------------------
                    #----------------------------------------------------------------------
                    
                    #----------------------------------------------------------------------
                    # Edit the Top TB File 
                    #----------------------------------------------------------------------
                    if (mc_env_cfg_pool[a][0]):
                        # Opening the Test file and edit
                        mc_tb_top_array = []
                            
                        if not os.path.isfile('%s/%s_tb_top.sv'%(tbpath, envname)):
                            log.error("%s/%s_tb_top.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(tbpath, envname))
                        else:
                            log.info("%s/%s_tb_top.sv file does exists! Progressing Further.\n"%(tbpath, envname))
                            mc_tb_top_input_file = open("%s/%s_tb_top.sv"%(tbpath, envname),"r+")

                            tb_top_stg = '' 
                            tb_top_loc_stg = '' 

                            for lines in mc_tb_top_input_file:
                                tb_top_stg = tb_top_stg+lines+'µ' 
                            log.debug("mc_create_phase: Value of tb_top_stg %s"%(tb_top_stg))
                       

                            #----------------------------------------------------------------------
                            # Code for Adding Interface - Virtual Interface Macro Connectivity : 12142020MON 
                            #----------------------------------------------------------------------
                            # Driver Interface Details
                            #----------------------------------------------------------------------
                            if mc_env_cfg_pool[a][2] != ['']:
                                # envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                                envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                                log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
                                    
                                for e in range (int(envagtname_arr[0])):
                                    if "__c" in envagtname_arr[e+1]:
                                        envagtname = (envagtname_arr[e+1]).replace("__c","")
                                    elif "__s" in envagtname_arr[e+1]:
                                        envagtname = (envagtname_arr[e+1]).replace("__s","")
                                    else: 
                                        envagtname = envagtname_arr[e+1]

                                    # Condition to check/set the global variable but WATCHOUT, this is also set below under the agent section
                                    if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1:
                                        mc_curr_env_agt_set_c = 1
                                    elif "__s" in envagtname_arr[e+1] or mc_curr_env_set_s == 1:
                                        mc_curr_env_agt_set_s = 1

                                    if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1 or ("__s" in envagtname_arr[e+1] and mc_curr_env_set_s == 0):
                                        if mc_env_cfg_pool[a][2][e+1][3] != '':
                                            envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                            log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s!\n"%(envname, envagtdrvname_arr))
                                            for e1 in range (int(envagtdrvname_arr[0])):
                                                if (len(envagtdrvname_arr) == 1 and "__c" in envagtdrvname_arr) or (len(envagtdrvname_arr) == 1 and "__s" in envagtdrvname_arr) or (len(envagtdrvname_arr) == 1 and int(envagtdrvname_arr[0]) == 1):
                                                    envagtdrvname = envagtname
                                                
                                                    if "__c" in envagtdrvname_arr or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr and mc_curr_env_agt_set_s == 0): 
                                                        if mc_env_cfg_pool[a][2][e+1][2]:
                                                            for f in range (int(mc_env_cfg_pool[a][2][e+1][2])):
                                                                tb_top_loc_stg = tb_top_loc_stg\
                                                                +('µ `%s_if_wrapper_bind(%s_tb_top, %d)\n'%(envagtdrvname, envname, f))
                                                        else:
                                                            tb_top_loc_stg = tb_top_loc_stg\
                                                            +('µ `%s_if_wrapper_bind(%s_tb_top)\n'%(envagtdrvname, envname))
                                                else:
                                                    if "__c" in envagtdrvname_arr[e1+1] or "__s" in envagtdrvname_arr[e1+1]: 
                                                        envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1].replace("__c","").replace("__s","")
                                                    else: # WATCHOUT : 010720|TUE    
                                                        envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                                                    
                                                    if "__c" in envagtdrvname_arr[e1+1] or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr[e1+1] and mc_curr_env_agt_set_s == 0):
                                                        if mc_env_cfg_pool[a][2][e+1][2]:
                                                            for f in range (int(mc_env_cfg_pool[a][2][e+1][2])):
                                                                tb_top_loc_stg = tb_top_loc_stg\
                                                                +('µ `%s_if_wrapper_bind(%s_tb_top, %d)\n'%(envagtdrvname, envname, f))
                                                        else:
                                                            tb_top_loc_stg = tb_top_loc_stg\
                                                            +('µ `%s_if_wrapper_bind(%s_tb_top)\n'%(envagtdrvname, envname))
                                        
                                        pos = tb_top_stg.find('// Interface - Virtual Interface Config_db Setup\n')
                                        apos = pos + len('// Interface - Virtual Interface Config_db Setup\n') + len(' //------------------------------------------\n\n')
                                        tb_top_stg = tb_top_stg[:apos]+tb_top_loc_stg+tb_top_stg[apos:]

                                        # Cleaning local vars
                                        tb_top_loc_stg = ''
                                    else:
                                        if mc_env_cfg_pool[a][2][e+1][3] != '':
                                            envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                            log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s!\n"%(envname, envagtdrvname_arr))
                                            for e1 in range (int(envagtdrvname_arr[0])):
                                                if (len(envagtdrvname_arr) == 1 and "__c" in envagtdrvname_arr) or (len(envagtdrvname_arr) == 1 and "__s" in envagtdrvname_arr) or (len(envagtdrvname_arr) == 1 and int(envagtdrvname_arr[0]) == 1):
                                                    envagtdrvname = envagtname 
                                                    
                                                    if "__c" in envagtdrvname_arr or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr and mc_curr_env_agt_set_s == 0): 
                                                        if mc_env_cfg_pool[a][2][e+1][2]:
                                                            for f in range (int(mc_env_cfg_pool[a][2][e+1][2])):
                                                                tb_top_loc_stg = tb_top_loc_stg\
                                                                +('µ `%s_if_wrapper_bind(%s_tb_top, %d)\n'%(envagtdrvname, envname, f))
                                                        else:
                                                            tb_top_loc_stg = tb_top_loc_stg\
                                                            +('µ `%s_if_wrapper_bind(%s_tb_top)\n'%(envagtdrvname, envname))
                                                else:
                                                    if "__c" in envagtdrvname_arr[e1+1] or "__s" in envagtdrvname_arr[e1+1]: 
                                                        envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1].replace("__c","").replace("__s","")
                                                    else: # WATCHOUT : 010720|TUE    
                                                        envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                                                
                                                    if "__c" in envagtdrvname_arr[e1+1] or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr[e1+1] and mc_curr_env_agt_set_s == 0): 
                                                        if mc_env_cfg_pool[a][2][e+1][2]:
                                                            for f in range (int(mc_env_cfg_pool[a][2][e+1][2])):
                                                                tb_top_loc_stg = tb_top_loc_stg\
                                                                +('µ `%s_if_wrapper_bind(%s_tb_top, %d)\n'%(envagtdrvname, envname, f))
                                                        else:
                                                            tb_top_loc_stg = tb_top_loc_stg\
                                                            +('µ `%s_if_wrapper_bind(%s_tb_top)\n'%(envagtdrvname, envname))
                                        
                                            pos = tb_top_stg.find('// Interface - Virtual Interface Config_db Setup\n')
                                            apos = pos + len('// Interface - Virtual Interface Config_db Setup\n') + len(' //------------------------------------------\n\n')
                                            tb_top_stg = tb_top_stg[:apos]+tb_top_loc_stg+tb_top_stg[apos:]
                                            
                                            # Cleaning local vars
                                            tb_top_loc_stg = ''
                                                   
                                    # Cleaning The Variables FOr Each Agent Loop   
                                    if mc_curr_env_agt_set_c:
                                        mc_curr_env_agt_set_c = 0
                                    if mc_curr_env_agt_set_s:
                                        mc_curr_env_agt_set_s = 0

                            # Cleaning local vars
                            tb_top_loc_stg = ''
                            #----------------------------------------------------------------------
                            # Environment Interface Details  
                            #----------------------------------------------------------------------
                            if (mc_env_cfg_pool[a][0]):
                                if mc_env_cfg_pool[a][7] != []:
                                    if mc_env_cfg_pool[a][7][0] != '':
                                        envintfname_arr = str(mc_env_cfg_pool[a][7][0]).split(",")
                                        log.debug("mc_create_phase : envname %s  envintfname_arr %s!\n"%(envname, envintfname_arr))
                                        
                                        for b in range (int(envintfname_arr[0])):
                                            if (len(envintfname_arr) == 1 and "__c" in envintfname_arr[0]) or (len(envintfname_arr) == 1 and "__s" in envintfname_arr[0]) or (len(envintfname_arr) == 1 and int(envintfname_arr[0]) == 1):
                                                envintfname = envname
                                                
                                                if "__c" in envintfname_arr or mc_curr_env_set_c == 1:
                                                    tb_top_loc_stg = tb_top_loc_stg\
                                                    +('µ `%s_if_wrapper_bind(%s_tb_top)\n'%(envintfname, envname))
                                            else:
                                                if "__c" in envintfname_arr[b+1]:
                                                    envintfname = envintfname_arr[b+1].replace("__c","")
                                                elif "__s" in envintfname_arr[b+1]:
                                                    envintfname = envintfname_arr[b+1].replace("__s","")
                                                else:
                                                    envintfname = envintfname_arr[b+1]
                                
                                                if "__c" in envintfname_arr[b+1] or mc_curr_env_set_c == 1:
                                                    tb_top_loc_stg = tb_top_loc_stg\
                                                    +('µ `%s_if_wrapper_bind(%s_tb_top)\n'%(envintfname, envname))
                                                        

                                        if "__c" in str(envintfname_arr) or mc_curr_env_set_c == 1:
                                            pos = tb_top_stg.find('// Interface - Virtual Interface Config_db Setup\n')
                                            apos = pos + len('// Interface - Virtual Interface Config_db Setup\n') + len(' //------------------------------------------\n\n')
                                            tb_top_stg = tb_top_stg[:apos]+tb_top_loc_stg+tb_top_stg[apos:] 
                            
                            # Cleaning local vars
                            tb_top_loc_stg = ''
                            #----------------------------------------------------------------------
                            
                            #----------------------------------------------------------------------
                            # Loading up the Test array content into file 
                            #----------------------------------------------------------------------
                            log.debug("mc_create_phase: Value of tb_top_stg %s"%(tb_top_stg))
                            mc_tb_top_input_file = open("%s/%s_tb_top.sv"%(tbpath, envname), "w")
                            mc_tb_top_array = tb_top_stg.split('µ')
                            for lines in mc_tb_top_array:
                                mc_tb_top_input_file.write(lines)
                            mc_tb_top_input_file.close()
                            #----------------------------------------------------------------------
                    #----------------------------------------------------------------------


                    #----------------------------------------------------------------------
                    # Edit All the Required Packages 
                    #----------------------------------------------------------------------
                    if (mc_env_cfg_pool[a][0]):
                        #----------------------------------------------------------------------
                        # SEQUENCE ITEM PKG
                        #----------------------------------------------------------------------
                        mc_seq_item_array = []
                        
                        if not os.path.isfile('%s/%s_seq_item_package.sv'%(envpath, envname)):
                            log.error("%s/%s_seq_item_package.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envpath, envname))
                        else:
                            log.info("%s/%s_seq_item_package.sv file does exists! Progressing Further.\n"%(envpath, envname))
                            mc_seq_item_input_file = open("%s/%s_seq_item_package.sv"%(envpath, envname),"r+")

                            seq_item_stg = '' 
                            seq_item_loc_stg = '' 
                            seq_item_drv_loc_stg = '' 

                            for lines in mc_seq_item_input_file:
                                seq_item_stg = seq_item_stg+lines+'µ' 
                            log.debug("mc_create_phase: Value of seq_item_stg %s"%(seq_item_stg))
                            
                            #----------------------------------------------------------------------
                            # Code for Including the Environment Monitor Seq Item Files 
                            #----------------------------------------------------------------------
                            if mc_env_cfg_pool[a][3] != '':
                                envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                                log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                    
                                for c in range (int(envmonname_arr[0])):
                                    if len(envmonname_arr[c+1].split(":"))>1:
                                        if "__c" in envmonname_arr[c+1]:
                                            #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                            envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                        elif "__s" in envmonname_arr[c+1]:
                                            #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                            envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                        else:
                                            #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0])
                                            envmonname = (envmonname_arr[c+1].split(":")[0])
                                    else:
                                        if "__c" in envmonname_arr[c+1] or mc_curr_env_set_c == 1:
                                            #envmonname = envname+"_"+envmonname_arr[c+1].replace("__c","")
                                            envmonname = envmonname_arr[c+1].replace("__c","")
                                        elif "__s" in envmonname_arr[c+1] or mc_curr_env_set_c == 1:
                                            #envmonname = envname+"_"+envmonname_arr[c+1].replace("__s","")
                                            envmonname = envmonname_arr[c+1].replace("__s","")
                                        else: 
                                            #envmonname = envname+"_"+envmonname_arr[c+1]
                                            envmonname = envmonname_arr[c+1]
                                    
                                    if "__c" in envmonname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envmonname_arr[c+1] and mc_curr_env_set_s == 0):
                                        seq_item_loc_stg = seq_item_loc_stg+('µ`include "%s_sequence_item_base.sv"\n'%(envmonname))
                                
                                        # Setting the variable based on if the env mon seq item exists inside the env for instantiating the seq_item_pkg: 022720|THU
                                        mc_curr_env_mon_exists = 1
        
                                pos = seq_item_stg.find('// Environment Monitor Sequence Items\n')
                                apos = pos + len('// Environment Monitor Sequence Items\n')
                                seq_item_stg = seq_item_stg[:apos]+seq_item_loc_stg+seq_item_stg[apos:]

                            # Cleaning local vars
                            seq_item_loc_stg = ''
                            #----------------------------------------------------------------------

                            #----------------------------------------------------------------------
                            # Code for Including the Agent Driver & Monitor Seq Item Files 
                            #----------------------------------------------------------------------
                            if mc_env_cfg_pool[a][2] != ['']:
                                envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                                log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
        
                                for e in range (int(envagtname_arr[0])):
                                    if "__c" in envagtname_arr[e+1]:
                                        #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__c","")
                                        envagtname = (envagtname_arr[e+1]).replace("__c","")
                                    elif "__s" in envagtname_arr[e+1]:
                                        #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__s","")
                                        envagtname = (envagtname_arr[e+1]).replace("__s","")
                                    else:
                                        #envagtname = envname+"_"+(envagtname_arr[e+1])
                                        envagtname = (envagtname_arr[e+1])
                                      
                                    # Setting the _c or _s variables for the agent  
                                    if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1:
                                        mc_curr_env_agt_set_c = 1
                                    elif "__s" in envagtname_arr[e+1] or mc_curr_env_set_s == 1:
                                        mc_curr_env_agt_set_s = 1

                                    log.debug("mc_create_phase : envname %s  envagtname_arr %s envagtname %s mc_curr_env_set_c %d mc_curr_env_set_s %d mc_curr_env_agt_set_c %d mc_curr_env_agt_set_s %d!\n"%(envname, envagtname_arr, envagtname, mc_curr_env_set_c, mc_curr_env_set_s, mc_curr_env_agt_set_c, mc_curr_env_agt_set_s))

                                    if mc_env_cfg_pool[a][2][e+1][3] != '':
                                        envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                        log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                        for e1 in range (int(envagtdrvname_arr[0])):
                                            if (len(envagtdrvname_arr) == 1 and "__c" in envagtdrvname_arr) or (len(envagtdrvname_arr) == 1 and "__s" in envagtdrvname_arr) or (len(envagtdrvname_arr) == 1 and int(envagtdrvname_arr[0]) == 1):
                                                envagtdrvname = envagtname 
                                        
                                                log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdrvname %s!\n"%(envname, envagtdrvname_arr, envagtdrvname))
                                                
                                                if "__c" in envagtdrvname_arr or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr and mc_curr_env_agt_set_s == 0): 
                                                    seq_item_drv_loc_stg = seq_item_drv_loc_stg+('µ`include "%s_sequence_item_base.sv"\n'%(envagtdrvname))
                                            else:
                                                if "__c" in envagtdrvname_arr[e1+1] or "__s" in envagtdrvname_arr[e1+1]: 
                                                    envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1].replace("__c","").replace("__s","")
                                                else:
                                                    envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                                                
                                                log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdrvname %s!\n"%(envname, envagtdrvname_arr, envagtdrvname))

                                                if "__c" in envagtdrvname_arr[e1+1] or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr[e1+1] and mc_curr_env_agt_set_s == 0):     
                                                    seq_item_drv_loc_stg = seq_item_drv_loc_stg+('µ`include "%s_sequence_item_base.sv"\n'%(envagtdrvname))
                                    
                                        pos = seq_item_stg[seq_item_stg.find('// Agent Driver Sequence Items'):seq_item_stg.find('// Agent Monitor Sequence Items')].find("`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                        if pos == -1:
                                            pos = seq_item_stg.find('// Agent Driver Sequence Items\n')
                                            apos = pos + len('// Agent Driver Sequence Items\n')
                                            seq_item_stg = seq_item_stg[:apos]+("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+seq_item_drv_loc_stg+("µ`endif // ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+seq_item_stg[apos:]
                                        else:
                                            pos = seq_item_stg.find('`ifndef ENABLE_%s_DIET_MODEL\n'%(envname.upper()))
                                            apos = pos + len('`ifndef ENABLE_%s_DIET_MODEL\n'%(envname.upper()))
                                            seq_item_stg = seq_item_stg[:apos]+seq_item_drv_loc_stg+seq_item_stg[apos:]
                                
                                        # Cleaning local vars
                                        seq_item_drv_loc_stg = ''

                                    if mc_env_cfg_pool[a][2][e+1][4] != '':
                                        envagtmonname_arr = str(mc_env_cfg_pool[a][2][e+1][4]).split(",")
                                        log.debug("mc_edit_phase : envname %s  envagtmonname_arr %s envagtdirpath %s!\n"%(envname, envagtmonname_arr, envagtdirpath))
                                        for e1 in range (int(envagtmonname_arr[0])):
                                            if (len(envagtmonname_arr) == 1 and "__c" in envagtmonname_arr) or (len(envagtmonname_arr) == 1 and  "__s" in envagtmonname_arr) or (len(envagtmonname_arr) == 1 and int(envagtmonname_arr[0]) == 1):
                                                envagtmonname = envagtname 
                                                
                                                log.debug("mc_edit_phase : envname %s  envagtmonname_arr %s envagtmonname %s!\n"%(envname, envagtmonname_arr, envagtmonname))
                                                
                                                if "__c" in envagtmonname_arr or mc_curr_env_agt_set_c == 1 or ("__s" in envagtmonname_arr and mc_curr_env_agt_set_s == 0): 
                                                    seq_item_loc_stg = seq_item_loc_stg+('µ`include "%s_sequence_item_base.sv"\n'%(envagtmonname))
                                            else:
                                                if "__c" in envagtmonname_arr[e1+1] or "__s" in envagtmonname_arr[e1+1]: 
                                                    envagtmonname = envagtname+"_"+envagtmonname_arr[e1+1].replace("__c","").replace("__s","")
                                                else:
                                                    envagtmonname = envagtname+"_"+envagtmonname_arr[e1+1]

                                                log.debug("mc_edit_phase : envname %s  envagtmonname_arr %s envagtmonname %s!\n"%(envname, envagtmonname_arr, envagtmonname))
                                                
                                                if "__c" in envagtmonname_arr[e1+1] or mc_curr_env_agt_set_c == 1 or ("__s" in envagtmonname_arr[e1+1] and mc_curr_env_agt_set_s == 0): 
                                                    seq_item_loc_stg = seq_item_loc_stg+('µ`include "%s_sequence_item_base.sv"\n'%(envagtmonname))
                                        
                                        pos = seq_item_stg.find('// Agent Monitor Sequence Items\n')
                                        apos = pos + len('// Agent Monitor Sequence Items\n')
                                        seq_item_stg = seq_item_stg[:apos]+seq_item_loc_stg+seq_item_stg[apos:]
                                    
                                        # Cleaning local vars
                                        seq_item_loc_stg = ''
                                
                                    # Clearning Important local variables
                                    if mc_curr_env_agt_set_c:
                                        mc_curr_env_agt_set_c = 0
                                    if mc_curr_env_agt_set_s:
                                        mc_curr_env_agt_set_s = 0
                       
                                # Clearning Important local variables : Note : WATCHOUT : Moving the local variables cleanup above per agent loop : 012320|THU
                                #   if mc_curr_env_agt_set_c:
                                #       mc_curr_env_agt_set_c = 0
                                #   if mc_curr_env_agt_set_s:
                                #       mc_curr_env_agt_set_s = 0

                            
                            #----------------------------------------------------------------------
                            # Loading up the Seq Item Package array content into file 
                            #----------------------------------------------------------------------
                            log.debug("mc_create_phase: Value of seq_item_stg %s"%(seq_item_stg))
                            mc_seq_item_input_file = open("%s/%s_seq_item_package.sv"%(envpath, envname), "w")
                            mc_seq_item_array = seq_item_stg.split('µ')
                            for lines in mc_seq_item_array:
                                mc_seq_item_input_file.write(lines)
                            mc_seq_item_input_file.close()
                            #----------------------------------------------------------------------
                        #----------------------------------------------------------------------
               
                        
                        #----------------------------------------------------------------------
                        # SEQUENCE PKG
                        #----------------------------------------------------------------------
                        mc_seq_array = []
                        
                        if not os.path.isfile('%s/%s_seq_package.sv'%(envpath, envname)):
                            log.error("%s/%s_seq_package.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envpath, envname))
                        else:
                            log.info("%s/%s_seq_package.sv file does exists! Progressing Further.\n"%(envpath, envname))
                            mc_seq_input_file = open("%s/%s_seq_package.sv"%(envpath, envname),"r+")

                            seq_stg = '' 
                            seq_loc_stg = '' 
                            seq_drv_loc_stg = '' 

                            for lines in mc_seq_input_file:
                                seq_stg = seq_stg+lines+'µ' 
                            log.debug("mc_create_phase: Value of seq_stg %s"%(seq_stg))
                                        
                            #----------------------------------------------------------------------
                            # Code for Including the Agent Driver & Monitor Seq Item Files 
                            #----------------------------------------------------------------------
                            if mc_env_cfg_pool[a][2] != ['']:
                                envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                                log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))

                                for e in range (int(envagtname_arr[0])):
                                    if "__c" in envagtname_arr[e+1]:
                                        #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__c","")
                                        envagtname = (envagtname_arr[e+1]).replace("__c","")
                                    elif "__s" in envagtname_arr[e+1]:
                                        #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__s","")
                                        envagtname = (envagtname_arr[e+1]).replace("__s","")
                                    else:
                                        #envagtname = envname+"_"+(envagtname_arr[e+1])
                                        envagtname = (envagtname_arr[e+1])
                                      
                                    # Setting the _c or _s variables for the agent  
                                    if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1:
                                        mc_curr_env_agt_set_c = 1
                                    elif "__s" in envagtname_arr[e+1] or mc_curr_env_set_s == 1:
                                        mc_curr_env_agt_set_s = 1

                                    log.debug("mc_create_phase : envname %s  envagtname_arr %s envagtname %s mc_curr_env_set_c %d mc_curr_env_set_s %d mc_curr_env_agt_set_c %d mc_curr_env_agt_set_s %d!\n"%(envname, envagtname_arr, envagtname, mc_curr_env_set_c, mc_curr_env_set_s, mc_curr_env_agt_set_c, mc_curr_env_agt_set_s))

                                    if mc_env_cfg_pool[a][2][e+1][3] != '':
                                        envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                        log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                        for e1 in range (int(envagtdrvname_arr[0])):
                                            if (len(envagtdrvname_arr) == 1 and "__c" in envagtdrvname_arr) or (len(envagtdrvname_arr) == 1 and "__s" in envagtdrvname_arr) or (len(envagtdrvname_arr) == 1 and int(envagtdrvname_arr[0]) == 1):
                                                envagtdrvname = envagtname 
                                                
                                                log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdrvname %s!\n"%(envname, envagtdrvname_arr, envagtdrvname))

                                                if "__c" in envagtdrvname_arr or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr and mc_curr_env_agt_set_s == 0): 
                                                    seq_drv_loc_stg = seq_drv_loc_stg+('µ`include "%s_sequence.sv"\n'%(envagtdrvname))
                                                    
                                                    # Setting the variable based on if the sequences exists inside the env for instantiating the seq_pkg inside the test pkg : 022720|THU
                                                    mc_curr_env_seq_exists = 1
                                            else:
                                                if "__c" in envagtdrvname_arr[e1+1] or "__s" in envagtdrvname_arr[e1+1]: 
                                                    envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1].replace("__c","").replace("__s","")
                                                else:
                                                    envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                                                
                                                log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdrvname %s!\n"%(envname, envagtdrvname_arr, envagtdrvname))

                                                if "__c" in envagtdrvname_arr[e1+1] or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr[e1+1] and mc_curr_env_agt_set_s == 0):     
                                                    seq_drv_loc_stg = seq_drv_loc_stg+('µ`include "%s_sequence.sv"\n'%(envagtdrvname))
                                        
                                                    # Setting the variable based on if the sequences exists inside the env for instantiating the seq_pkg inside the test pkg : 022720|THU
                                                    mc_curr_env_seq_exists = 1
                                    
                                        pos = seq_stg[seq_stg.find('// Sequence Objects'):seq_stg.find('// Agent Components')].find("`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                        if pos == -1:
                                            pos = seq_stg.find('// Sequence Objects\n')
                                            apos = pos + len('// Sequence Objects\n') + len("µ //------------------------------------------\n")
                                            seq_stg = seq_stg[:apos]+("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+seq_drv_loc_stg+("µ`endif // ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+seq_stg[apos:]
                                        else:
                                            pos = seq_stg.find('`ifndef ENABLE_%s_DIET_MODEL\n'%(envname.upper()))
                                            apos = pos + len('`ifndef ENABLE_%s_DIET_MODEL\n'%(envname.upper()))
                                            seq_stg = seq_stg[:apos]+seq_drv_loc_stg+seq_stg[apos:]
                                
                                        # Cleaning local vars
                                        seq_drv_loc_stg = ''
                                    
                                    # Clearning Important local variables
                                    if mc_curr_env_agt_set_c:
                                        mc_curr_env_agt_set_c = 0
                                    if mc_curr_env_agt_set_s:
                                        mc_curr_env_agt_set_s = 0
                       
                                # Clearning Important local variables : Note : WATCHOUT : Moving the local variables cleanup above per agent loop : 012320|THU
                                # if mc_curr_env_agt_set_c:
                                #     mc_curr_env_agt_set_c = 0
                                # if mc_curr_env_agt_set_s:
                                #     mc_curr_env_agt_set_s = 0
                            
                            
                            if (mc_curr_env_set_c and mc_curr_env_seq_exists):
                                #----------------------------------------------------------------------
                                # Importing the seq item pkg into seq pkg 
                                #----------------------------------------------------------------------
                                seq_loc_stg = seq_loc_stg+('µ import %s_seq_item_package::*;\n'%(envname))
                                pos = seq_stg.find('// Sequence Item Packages\n')
                                apos = pos + len('// Sequence Item Packages\n')
                                seq_stg = seq_stg[:apos]+seq_loc_stg+seq_stg[apos:]
                                
                                # Cleaning local vars
                                seq_loc_stg = ''
                            elif (not mc_curr_env_set_c and mc_curr_env_seq_exists):
                                pos = seq_stg[seq_stg.find('// Sequence Item Packages'):seq_stg.find('// Sequence Packages')].find("import %s_seq_item_package::*;\n"%(envname))
                                if pos == -1:
                                    #----------------------------------------------------------------------
                                    # Importing the seq item pkg into seq pkg 
                                    #----------------------------------------------------------------------
                                    seq_loc_stg = seq_loc_stg+('µ import %s_seq_item_package::*;\n'%(envname))
                                    pos = seq_stg.find('// Sequence Item Packages\n')
                                    apos = pos + len('// Sequence Item Packages\n')
                                    seq_stg = seq_stg[:apos]+seq_loc_stg+seq_stg[apos:]
                                else:
                                    log.debug("mc_create_phase: %s_seq_item_package is already imported!\n"%(envname))
                                
                                # Cleaning local vars
                                seq_loc_stg = ''

                            
                            #----------------------------------------------------------------------
                            # Loading up the Seq Package array content into file 
                            #----------------------------------------------------------------------
                            log.debug("mc_create_phase: Value of seq_stg %s"%(seq_stg))
                            mc_seq_input_file = open("%s/%s_seq_package.sv"%(envpath, envname), "w")
                            mc_seq_array = seq_stg.split('µ')
                            for lines in mc_seq_array:
                                mc_seq_input_file.write(lines)
                            mc_seq_input_file.close()
                            #----------------------------------------------------------------------
                        #----------------------------------------------------------------------

                    
                        #----------------------------------------------------------------------
                        # ENVIRONMENT PKG
                        #----------------------------------------------------------------------
                        mc_env_pkg_array = []
                        
                        if not os.path.isfile('%s/%s_env_package.sv'%(envpath, envname)):
                            log.error("%s/%s_env_package.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envpath, envname))
                        else:
                            log.info("%s/%s_env_package.sv file does exists! Progressing Further.\n"%(envpath, envname))
                            mc_env_pkg_input_file = open("%s/%s_env_package.sv"%(envpath, envname),"r+")

                            env_pkg_stg = '' 
                            env_pkg_loc_stg = '' 
                            env_pkg_drv_loc_stg = '' 

                            for lines in mc_env_pkg_input_file:
                                env_pkg_stg = env_pkg_stg+lines+'µ' 
                            log.debug("mc_create_phase: Value of env_pkg_stg %s"%(env_pkg_stg))
                     
                            if (mc_curr_env_set_c and (mc_curr_env_seq_exists or mc_curr_env_mon_exists)):
                                #----------------------------------------------------------------------
                                # Importing the seq item pkg into seq pkg 
                                #----------------------------------------------------------------------
                                env_pkg_loc_stg = env_pkg_loc_stg+('µ import %s_seq_item_package::*;\n'%(envname))

                                pos = env_pkg_stg.find('// Sequence Item Packages\n')
                                apos = pos + len('// Sequence Item Packages\n')
                                env_pkg_stg = env_pkg_stg[:apos]+env_pkg_loc_stg+env_pkg_stg[apos:]
                                
                                # Cleaning local vars
                                env_pkg_loc_stg = ''
                                #----------------------------------------------------------------------
                            elif (not mc_curr_env_set_c and (mc_curr_env_seq_exists or mc_curr_env_mon_exists)):
                                pos = env_pkg_stg[env_pkg_stg.find('// Sequence Item Packages'):env_pkg_stg.find('// Sequence Packages')].find("import %s_seq_item_package::*;\n"%(envname))
                                if pos == -1:
                                    #----------------------------------------------------------------------
                                    # Importing the seq item pkg into seq pkg 
                                    #----------------------------------------------------------------------
                                    env_pkg_loc_stg = env_pkg_loc_stg+('µ import %s_seq_item_package::*;\n'%(envname))
                                    pos = env_pkg_stg.find('// Sequence Item Packages\n')
                                    apos = pos + len('// Sequence Item Packages\n')
                                    env_pkg_stg = env_pkg_stg[:apos]+env_pkg_loc_stg+env_pkg_stg[apos:]
                                
                                    # Cleaning local vars
                                    env_pkg_loc_stg = ''
                                else:
                                    log.debug("mc_create_phase: %s_seq_item_package is already imported!\n"%(envname))
                                
                            
                            #----------------------------------------------------------------------
                            # Importing Required Sequence Item Package From Other Environments : 12182020FRI
                            #----------------------------------------------------------------------
                            monscbconarr = (mc_env_cfg_pool[a][5])
                            log.debug("mc_create_phase : envname %s  monscbconarr %s!\n"%(envname, monscbconarr))
                            con_has_c_or_s = '' 
                            
                            for n in range (len(monscbconarr)):
                                cp_mon_arr = (monscbconarr[n].split("-"))[0].split(",")
                                envname_tmp = cp_mon_arr[1]
                                envname_tmp_mod = envname_tmp.replace("__c","").replace("__s","")
                                if "__c" or "__s" in str(monscbconarr[n]):
                                    con_has_c_or_s = 1

                                log.debug("mc_create_phase : envname_tmp %s, envname_tmp_mod %s, cp_mon_arr %s, cp_mon_arr[1] %s!\n"%(envname_tmp, envname_tmp_mod, cp_mon_arr, cp_mon_arr[1]))

                                if (envname != envname_tmp_mod):
                                    env_pkg_loc_stg = env_pkg_loc_stg+('µ import %s_seq_item_package::*;\n'%(envname_tmp_mod))

                                if ("__c" in envname_tmp or mc_curr_env_set_c == 1 or ("__s" in envname_tmp and mc_curr_env_set_s == 0) or con_has_c_or_s == 1) and env_pkg_loc_stg != '':
                                    pos = env_pkg_stg[env_pkg_stg.find('// Sequence Item Packages'):env_pkg_stg.find('// Sequence Packages')].find("`ifndef DISABLE_%s_ENV\n"%(envname_tmp_mod.upper()))
                                    if pos == -1:
                                        pos = env_pkg_stg.find('// Sequence Item Packages\n')
                                        apos = pos + len('// Sequence Item Packages\n')
                                        env_pkg_stg = env_pkg_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(envname_tmp_mod.upper()))+env_pkg_loc_stg+("µ`endif // DISABLE_%s_ENV\n"%(envname_tmp_mod.upper()))+env_pkg_stg[apos:]
                                    else:
                                        pos = env_pkg_stg.find('`ifndef DISABLE_%s_ENV\n'%(envname_tmp_mod.upper()))
                                        apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(envname_tmp_mod.upper()))
                                        env_pkg_stg = env_pkg_stg[:apos]+env_pkg_drv_loc_stg+env_pkg_stg[apos:]

                                    # Cleaning local vars
                                    env_pkg_loc_stg = ''
                                    con_has_c_or_s = ''
                            #----------------------------------------------------------------------

                               
                            #----------------------------------------------------------------------
                            # Importing the Sub-Environment Packages 
                            #----------------------------------------------------------------------
                            if mc_env_cfg_pool[a][1] != '':
                                subenvname_arr = str(mc_env_cfg_pool[a][1]).split(",")
                                log.debug("mc_create_phase : envname %s  subenvname_arr %s!\n"%(envname, subenvname_arr))

                                for f in range (int(subenvname_arr[0])):
                                    subenvname_tmp = subenvname_arr[f+1]
                               
                                    if len(subenvname_tmp.split(":"))>1:
                                        if "__c" in subenvname_tmp.split(":")[0]:
                                            subenvname = (subenvname_tmp.split(":")[0]).replace("__c","")
                                        elif "__s" in subenvname_tmp.split(":")[0]:
                                            subenvname = (subenvname_tmp.split(":")[0]).replace("__s","")
                                        else:
                                            subenvname = subenvname_tmp.split(":")[0]
                                    else:
                                        if "__c" in subenvname_tmp:
                                            subenvname = subenvname_tmp.replace("__c","")
                                        elif "__s" in subenvname_tmp:
                                            subenvname = subenvname_tmp.replace("__s","")
                                        else:
                                            subenvname = subenvname_tmp

                                    if "__c" in subenvname_arr[f+1] or mc_curr_env_set_c == 1 or ("__s" in subenvname_arr[f+1] and mc_curr_env_set_s == 0):
                                        env_pkg_loc_stg = env_pkg_loc_stg+('µ import %s_env_package::*;\n'%(subenvname))

                                    pos = env_pkg_stg[env_pkg_stg.find('// Environment Packages'):env_pkg_stg.find('// Including VIP Files')].find("`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))
                                    if pos == -1:
                                        pos = env_pkg_stg.find('// Environment Packages\n')
                                        apos = pos + len('// Environment Packages\n')
                                        env_pkg_stg = env_pkg_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(subenvname.upper()))+env_pkg_loc_stg+("µ`endif // DISABLE_%s_ENV\n"%(subenvname.upper()))+env_pkg_stg[apos:]
                                    else:
                                        pos = env_pkg_stg.find('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper()))
                                        apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(subenvname.upper()))
                                        env_pkg_stg = env_pkg_stg[:apos]+env_pkg_drv_loc_stg+env_pkg_stg[apos:]

                                    # Cleaning local vars
                                    env_pkg_loc_stg = ''
                            #----------------------------------------------------------------------


                            if mc_curr_env_set_c == 1:
                                #----------------------------------------------------------------------
                                # Code for Including the Environment and Configuration File 
                                #----------------------------------------------------------------------
                                env_pkg_loc_stg = env_pkg_loc_stg+('µ`include "%s_environment_config.sv"\n'%(envname))
        
                                pos = env_pkg_stg.find('// Environment Configuration Files\n')
                                apos = pos + len('// Environment Configuration Files\n')
                                env_pkg_stg = env_pkg_stg[:apos]+env_pkg_loc_stg+env_pkg_stg[apos:]

                                # Cleaning local vars
                                env_pkg_loc_stg = ''
                                #----------------------------------------------------------------------

                            
                            if mc_curr_env_set_c == 1:
                                #----------------------------------------------------------------------
                                # Code for Including the Environment and Configuration File 
                                #----------------------------------------------------------------------
                                env_pkg_loc_stg = env_pkg_loc_stg+('µ`include "%s_environment.sv"\n'%(envname))
        
                                pos = env_pkg_stg.find('// Environment Files\n')
                                apos = pos + len('// Environment Files\n')
                                env_pkg_stg = env_pkg_stg[:apos]+env_pkg_loc_stg+env_pkg_stg[apos:]

                                # Cleaning local vars
                                env_pkg_loc_stg = ''
                                #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            # Code for Including the Environment Monitor Components Files 
                            #----------------------------------------------------------------------
                            if mc_env_cfg_pool[a][3] != '':
                                envmonname_arr = str(mc_env_cfg_pool[a][3]).split(",")
                                log.debug("mc_create_phase : envname %s  envmonname_arr %s!\n"%(envname, envmonname_arr))
                                    
                                for c in range (int(envmonname_arr[0])):
                                    if len(envmonname_arr[c+1].split(":"))>1:
                                        if "__c" in envmonname_arr[c+1]:
                                            #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                            envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__c","")
                                        elif "__s" in envmonname_arr[c+1]:
                                            #envmonname = envname+"_"+(envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                            envmonname = (envmonname_arr[c+1].split(":")[0]).replace("__s","")
                                        else:    
                                            #envmonname = envname+"_"+envmonname_arr[c+1].split(":")[0]
                                            envmonname = envmonname_arr[c+1].split(":")[0]
                                    else:
                                        if "__c" in envmonname_arr[c+1]:
                                            #envmonname = envname+"_"+envmonname_arr[c+1].replace("__c","")
                                            envmonname = envmonname_arr[c+1].replace("__c","")
                                        elif "__s" in envmonname_arr[c+1]:
                                            #envmonname = envname+"_"+envmonname_arr[c+1].replace("__s","")
                                            envmonname = envmonname_arr[c+1].replace("__s","")
                                        else:    
                                            #envmonname = envname+"_"+envmonname_arr[c+1]
                                            envmonname = envmonname_arr[c+1]
                                        
                                    if "__c" in envmonname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envmonname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_pkg_loc_stg = env_pkg_loc_stg+('µ`include "%s_monitor.sv"\n'%(envmonname))
        
                                pos = env_pkg_stg.find('// Environment Monitor Files\n')
                                apos = pos + len('// Environment Monitor Files\n')
                                env_pkg_stg = env_pkg_stg[:apos]+env_pkg_loc_stg+env_pkg_stg[apos:]

                            # Cleaning local vars
                            env_pkg_loc_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            # Code for Including the Environment Scoreboard Components Files 
                            #----------------------------------------------------------------------
                            if mc_env_cfg_pool[a][4] != '':
                                envscbname_arr = str(mc_env_cfg_pool[a][4]).split(",")
                                log.debug("mc_create_phase : envname %s  envscbname_arr %s!\n"%(envname, envscbname_arr))
                                    
                                for c in range (int(envscbname_arr[0])):
                                    if len(envscbname_arr[c+1].split(":"))>1:
                                        if "__c" in envscbname_arr[c+1]:
                                            #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                            envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__c","")
                                        elif "__s" in envscbname_arr[c+1]:
                                            #envscbname = envname+"_"+(envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                            envscbname = (envscbname_arr[c+1].split(":")[0]).replace("__s","")
                                        else:    
                                            #envscbname = envname+"_"+envscbname_arr[c+1].split(":")[0]
                                            envscbname = envscbname_arr[c+1].split(":")[0]
                                    else:
                                        if "__c" in envscbname_arr[c+1]:
                                            #envscbname = envname+"_"+envscbname_arr[c+1].replace("__c","")
                                            envscbname = envscbname_arr[c+1].replace("__c","")
                                        elif "__s" in envscbname_arr[c+1]:
                                            #envscbname = envname+"_"+envscbname_arr[c+1].replace("__s","")
                                            envscbname = envscbname_arr[c+1].replace("__s","")
                                        else:    
                                            #envscbname = envname+"_"+envscbname_arr[c+1]
                                            envscbname = envscbname_arr[c+1]
                                        
                                    if "__c" in envscbname_arr[c+1] or mc_curr_env_set_c == 1 or ("__s" in envscbname_arr[c+1] and mc_curr_env_set_s == 0):
                                        env_pkg_loc_stg = env_pkg_loc_stg+('µ`include "%s_scoreboard.sv"\n'%(envscbname))
        
                                pos = env_pkg_stg.find('// Environment Scoreboard Files\n')
                                apos = pos + len('// Environment Scoreboard Files\n')
                                env_pkg_stg = env_pkg_stg[:apos]+env_pkg_loc_stg+env_pkg_stg[apos:]

                            # Cleaning local vars
                            env_pkg_loc_stg = ''
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            # Code for Including the Agent Component and Configuration Files 
                            #----------------------------------------------------------------------
                            if mc_env_cfg_pool[a][2] != ['']:
                                envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                                log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))

                                for e in range (int(envagtname_arr[0])):
                                    if "__c" in envagtname_arr[e+1]:
                                        #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__c","")
                                        envagtname = (envagtname_arr[e+1]).replace("__c","")
                                    elif "__s" in envagtname_arr[e+1]:
                                        #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__s","")
                                        envagtname = (envagtname_arr[e+1]).replace("__s","")
                                    else:
                                        #envagtname = envname+"_"+(envagtname_arr[e+1])
                                        envagtname = (envagtname_arr[e+1])
                                      
                                    # Setting the _c or _s variables for the agent  
                                    if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1:
                                        mc_curr_env_agt_set_c = 1
                                    elif "__s" in envagtname_arr[e+1] or mc_curr_env_set_s == 1:
                                        mc_curr_env_agt_set_s = 1
                                
                                    log.debug("mc_create_phase : envname %s  envagtname_arr %s envagtname %s mc_curr_env_set_c %d mc_curr_env_set_s %d mc_curr_env_agt_set_c %d mc_curr_env_agt_set_s %d!\n"%(envname, envagtname_arr, envagtname, mc_curr_env_set_c, mc_curr_env_set_s, mc_curr_env_agt_set_c, mc_curr_env_agt_set_s))

                                    if mc_curr_env_agt_set_c == 1 or (mc_curr_env_agt_set_s == 1 and mc_curr_env_set_s == 0):
                                        #----------------------------------------------------------------------
                                        # Adding Agent Configuration Files 
                                        #----------------------------------------------------------------------
                                        env_pkg_loc_stg = env_pkg_loc_stg+('µ`include "%s_agent_config.sv"\n'%(envagtname))
                                            
                                        pos = env_pkg_stg.find('// Agent Configuration Files\n')
                                        apos = pos + len('// Agent Configuration Files\n')
                                        env_pkg_stg = env_pkg_stg[:apos]+env_pkg_loc_stg+env_pkg_stg[apos:]
                                        
                                        # Cleaning local vars
                                        env_pkg_loc_stg = ''


                                    if mc_curr_env_agt_set_c == 1 or (mc_curr_env_agt_set_s == 1 and mc_curr_env_set_s == 0):
                                        #----------------------------------------------------------------------
                                        # Adding Agent Files 
                                        #----------------------------------------------------------------------
                                        env_pkg_loc_stg = env_pkg_loc_stg+('µ`include "%s_agent.sv"\n'%(envagtname))
                                            
                                        pos = env_pkg_stg.find('// Agent Files\n')
                                        apos = pos + len('// Agent Files\n')
                                        env_pkg_stg = env_pkg_stg[:apos]+env_pkg_loc_stg+env_pkg_stg[apos:]
                                        
                                        # Cleaning local vars
                                        env_pkg_loc_stg = ''
                                
                                    # Clearning Important local variables
                                    if mc_curr_env_agt_set_c:
                                        mc_curr_env_agt_set_c = 0
                                    if mc_curr_env_agt_set_s:
                                        mc_curr_env_agt_set_s = 0
                            #----------------------------------------------------------------------


                            #----------------------------------------------------------------------
                            # Code for Including the Agent Driver & Monitor Components Files 
                            #----------------------------------------------------------------------
                            if mc_env_cfg_pool[a][2] != ['']:
                                envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                                log.debug("mc_create_phase : envname %s  envagtname_arr %s!\n"%(envname, envagtname_arr))
        
                                for e in range (int(envagtname_arr[0])):
                                    if "__c" in envagtname_arr[e+1]:
                                        #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__c","")
                                        envagtname = (envagtname_arr[e+1]).replace("__c","")
                                    elif "__s" in envagtname_arr[e+1]:
                                        #envagtname = envname+"_"+(envagtname_arr[e+1]).replace("__s","")
                                        envagtname = (envagtname_arr[e+1]).replace("__s","")
                                    else:
                                        #envagtname = envname+"_"+(envagtname_arr[e+1])
                                        envagtname = (envagtname_arr[e+1])
                                      
                                    # Setting the _c or _s variables for the agent  
                                    if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1:
                                        mc_curr_env_agt_set_c = 1
                                    elif "__s" in envagtname_arr[e+1] or mc_curr_env_set_s == 1:
                                        mc_curr_env_agt_set_s = 1

                                    log.debug("mc_create_phase : envname %s  envagtname_arr %s envagtname %s mc_curr_env_set_c %d mc_curr_env_set_s %d mc_curr_env_agt_set_c %d mc_curr_env_agt_set_s %d!\n"%(envname, envagtname_arr, envagtname, mc_curr_env_set_c, mc_curr_env_set_s, mc_curr_env_agt_set_c, mc_curr_env_agt_set_s))

                                    #----------------------------------------------------------------------
                                    # Adding Agent Driver Files 
                                    #----------------------------------------------------------------------
                                    if mc_env_cfg_pool[a][2][e+1][3] != '':
                                        envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                        log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdirpath %s!\n"%(envname, envagtdrvname_arr, envagtdirpath))
                                        for e1 in range (int(envagtdrvname_arr[0])):
                                            if (len(envagtdrvname_arr) == 1 and "__c" in envagtdrvname_arr) or (len(envagtdrvname_arr) == 1 and "__s" in envagtdrvname_arr) or (len(envagtdrvname_arr) == 1 and int(envagtdrvname_arr[0]) == 1):
                                                envagtdrvname = envagtname 
                                               
                                                log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdrvname %s!\n"%(envname, envagtdrvname_arr, envagtdrvname))

                                                if "__c" in envagtdrvname_arr or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr and mc_curr_env_agt_set_s == 0): 
                                                    env_pkg_drv_loc_stg = env_pkg_drv_loc_stg\
                                                    +('µ`include "%s_driver.sv"\n'%(envagtdrvname))\
                                                    +('µ`include "%s_sequencer.sv"\n'%(envagtdrvname))
                                            else:
                                                if "__c" in envagtdrvname_arr[e1+1] or "__s" in envagtdrvname_arr[e1+1]: 
                                                    envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1].replace("__c","").replace("__s","")
                                                else:
                                                    envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                                                
                                                log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdrvname %s!\n"%(envname, envagtdrvname_arr, envagtdrvname))

                                                if "__c" in envagtdrvname_arr[e1+1] or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr[e1+1] and mc_curr_env_agt_set_s == 0):     
                                                    env_pkg_drv_loc_stg = env_pkg_drv_loc_stg\
                                                    +('µ`include "%s_driver.sv"\n'%(envagtdrvname))\
                                                    +('µ`include "%s_sequencer.sv"\n'%(envagtdrvname))
                                    
                                        pos = env_pkg_stg[env_pkg_stg.find('// Agent Driver & Sequencer Files'):env_pkg_stg.find('// Agent Files')].find("`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                        if pos == -1:
                                            pos = env_pkg_stg.find('// Agent Driver & Sequencer Files\n')
                                            apos = pos + len('// Agent Driver & Sequencer Files\n')
                                            env_pkg_stg = env_pkg_stg[:apos]+("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+env_pkg_drv_loc_stg+("µ`endif // ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+env_pkg_stg[apos:]
                                        else:
                                            pos = env_pkg_stg.find('`ifndef ENABLE_%s_DIET_MODEL\n'%(envname.upper()))
                                            apos = pos + len('`ifndef ENABLE_%s_DIET_MODEL\n'%(envname.upper()))
                                            env_pkg_stg = env_pkg_stg[:apos]+env_pkg_drv_loc_stg+env_pkg_stg[apos:]
                                
                                        # Cleaning local vars
                                        env_pkg_drv_loc_stg = ''

                                    #----------------------------------------------------------------------
                                    # Adding Agent Monitor Files 
                                    #----------------------------------------------------------------------
                                    if mc_env_cfg_pool[a][2][e+1][4] != '':
                                        envagtmonname_arr = str(mc_env_cfg_pool[a][2][e+1][4]).split(",")
                                        log.debug("mc_edit_phase : envname %s  envagtmonname_arr %s envagtdirpath %s!\n"%(envname, envagtmonname_arr, envagtdirpath))
                                        for e1 in range (int(envagtmonname_arr[0])):
                                            if (len(envagtmonname_arr) == 1 and "__c" in envagtmonname_arr) or (len(envagtmonname_arr) == 1 and  "__s" in envagtmonname_arr) or (len(envagtmonname_arr) == 1 and int(envagtmonname_arr[0]) == 1):
                                                envagtmonname = envagtname 
                                                
                                                log.debug("mc_edit_phase : envname %s  envagtmonname_arr %s envagtmonname %s!\n"%(envname, envagtmonname_arr, envagtmonname))

                                                if "__c" in envagtmonname_arr or mc_curr_env_agt_set_c == 1 or ("__s" in envagtmonname_arr and mc_curr_env_agt_set_s == 0): 
                                                    env_pkg_loc_stg = env_pkg_loc_stg+('µ`include "%s_monitor.sv"\n'%(envagtmonname))
                                            else:
                                                if "__c" in envagtmonname_arr[e1+1] or "__s" in envagtmonname_arr[e1+1]: 
                                                    envagtmonname = envagtname+"_"+envagtmonname_arr[e1+1].replace("__c","").replace("__s","")
                                                else:
                                                    envagtmonname = envagtname+"_"+envagtmonname_arr[e1+1]

                                                log.debug("mc_edit_phase : envname %s  envagtmonname_arr %s envagtmonname %s!\n"%(envname, envagtmonname_arr, envagtmonname))

                                                if "__c" in envagtmonname_arr[e1+1] or mc_curr_env_agt_set_c == 1 or ("__s" in envagtmonname_arr[e1+1] and mc_curr_env_agt_set_s == 0): 
                                                    env_pkg_loc_stg = env_pkg_loc_stg+('µ`include "%s_monitor.sv"\n'%(envagtmonname))
                                        
                                        pos = env_pkg_stg.find('// Agent Monitor Files\n')
                                        apos = pos + len('// Agent Monitor Files\n')
                                        env_pkg_stg = env_pkg_stg[:apos]+env_pkg_loc_stg+env_pkg_stg[apos:]
                                    
                                        # Cleaning local vars
                                        env_pkg_loc_stg = ''
                                
                                    # Clearning Important local variables
                                    if mc_curr_env_agt_set_c:
                                        mc_curr_env_agt_set_c = 0
                                    if mc_curr_env_agt_set_s:
                                        mc_curr_env_agt_set_s = 0

                            
                            #----------------------------------------------------------------------
                            # Loading up the Environment Package array content into file 
                            #----------------------------------------------------------------------
                            log.debug("mc_create_phase: Value of env_pkg_stg %s"%(env_pkg_stg))
                            mc_env_pkg_input_file = open("%s/%s_env_package.sv"%(envpath, envname), "w")
                            mc_env_pkg_array = env_pkg_stg.split('µ')
                            for lines in mc_env_pkg_array:
                                mc_env_pkg_input_file.write(lines)
                            mc_env_pkg_input_file.close()
                            #----------------------------------------------------------------------
                        #----------------------------------------------------------------------
   
                        
                        #----------------------------------------------------------------------
                        # TEST PKG
                        #----------------------------------------------------------------------
                        mc_test_pkg_array = []
                        
                        if not os.path.isfile('%s/%s_test_package.sv'%(envpath, envname)):
                            log.error("%s/%s_test_package.sv file doesn't exists! Please Checkout. Skipping File Edit.\n"%(envpath, envname))
                        else:
                            log.info("%s/%s_test_package.sv file does exists! Progressing Further.\n"%(envpath, envname))
                            mc_test_pkg_input_file = open("%s/%s_test_package.sv"%(envpath, envname),"r+")

                            test_pkg_stg = '' 
                            test_pkg_loc_stg = '' 

                            for lines in mc_test_pkg_input_file:
                                test_pkg_stg = test_pkg_stg+lines+'µ' 
                            log.debug("mc_create_phase: Value of test_pkg_stg %s"%(test_pkg_stg))


                            if (mc_curr_env_set_c and mc_curr_env_seq_exists):
                                #----------------------------------------------------------------------
                                # Importing the Sequence Package 
                                #----------------------------------------------------------------------
                                test_pkg_loc_stg = test_pkg_loc_stg+('µ import %s_seq_package::*;\n'%(envname))

                                pos = test_pkg_stg[test_pkg_stg.find('// Sequence Packages'):test_pkg_stg.find('// Environment Packages')].find("`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                if pos == -1:
                                    pos = test_pkg_stg.find('// Sequence Packages\n')
                                    apos = pos + len('// Sequence Packages\n')
                                    test_pkg_stg = test_pkg_stg[:apos]+("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+test_pkg_loc_stg+("µ`endif // ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+test_pkg_stg[apos:]
                                else:
                                    pos = test_pkg_stg.find('`ifndef ENABLE_%s_DIET_MODEL\n'%(envname.upper()))
                                    apos = pos + len('`ifndef ENABLE_%s_DIET_MODEL\n'%(envname.upper()))
                                    test_pkg_stg = test_pkg_stg[:apos]+test_pkg_loc_stg+test_pkg_stg[apos:]


                                # Cleaning local vars
                                test_pkg_loc_stg = ''
                                #----------------------------------------------------------------------
                            elif (not mc_curr_env_set_c and mc_curr_env_seq_exists):
                                pos = test_pkg_stg[test_pkg_stg.find('// Sequence Packages'):test_pkg_stg.find('// Environment Packages')].find("import %s_seq_package::*;\n"%(envname))
                                if pos == -1:
                                    #----------------------------------------------------------------------
                                    # Importing the Sequence Package 
                                    #----------------------------------------------------------------------
                                    test_pkg_loc_stg = test_pkg_loc_stg+('µ import %s_seq_package::*;\n'%(envname))

                                    pos = test_pkg_stg[test_pkg_stg.find('// Sequence Packages'):test_pkg_stg.find('// Environment Packages')].find("`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))
                                    if pos == -1:
                                        pos = test_pkg_stg.find('// Sequence Packages\n')
                                        apos = pos + len('// Sequence Packages\n')
                                        test_pkg_stg = test_pkg_stg[:apos]+("µ`ifndef ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+test_pkg_loc_stg+("µ`endif // ENABLE_%s_DIET_MODEL\n"%(envname.upper()))+test_pkg_stg[apos:]
                                    else:
                                        pos = test_pkg_stg.find('`ifndef ENABLE_%s_DIET_MODEL\n'%(envname.upper()))
                                        apos = pos + len('`ifndef ENABLE_%s_DIET_MODEL\n'%(envname.upper()))
                                        test_pkg_stg = test_pkg_stg[:apos]+test_pkg_loc_stg+test_pkg_stg[apos:]

                                    # Cleaning local vars
                                    test_pkg_loc_stg = ''
                                    #----------------------------------------------------------------------
                                else:
                                    log.debug("mc_create_phase: %s_seq_item_package is already imported!\n"%(envname))

                            
                            if mc_curr_env_set_c == 1:
                                #----------------------------------------------------------------------
                                # Importing the Environment pkg
                                #----------------------------------------------------------------------
                                test_pkg_loc_stg = test_pkg_loc_stg+('µ import %s_env_package::*;\n'%(envname))

                                pos = test_pkg_stg[test_pkg_stg.find('// Environment Packages'):test_pkg_stg.find('// Including VIP Files')].find("`ifndef DISABLE_%s_ENV\n"%(envname.upper()))
                                if pos == -1:
                                    pos = test_pkg_stg.find('// Environment Packages\n')
                                    apos = pos + len('// Environment Packages\n')
                                    test_pkg_stg = test_pkg_stg[:apos]+("µ`ifndef DISABLE_%s_ENV\n"%(envname.upper()))+test_pkg_loc_stg+("µ`endif // DISABLE_%s_ENV\n"%(envname.upper()))+test_pkg_stg[apos:]
                                else:
                                    pos = test_pkg_stg.find('`ifndef DISABLE_%s_ENV\n'%(envname.upper()))
                                    apos = pos + len('`ifndef DISABLE_%s_ENV\n'%(envname.upper()))
                                    test_pkg_stg = test_pkg_stg[:apos]+test_pkg_loc_stg+test_pkg_stg[apos:]

                                # Cleaning local vars
                                test_pkg_loc_stg = ''
                                #----------------------------------------------------------------------


                            if mc_curr_env_set_c == 1:
                                #----------------------------------------------------------------------
                                # Code for Including the Test File 
                                #----------------------------------------------------------------------
                                test_pkg_loc_stg = test_pkg_loc_stg+('µ`include "%s_test.sv"\n'%(envname))
        
                                pos = test_pkg_stg.find('// Test Components\n')
                                apos = pos + len('// Test Components\n') + len('µ //------------------------------------------\n')
                                test_pkg_stg = test_pkg_stg[:apos]+test_pkg_loc_stg+test_pkg_stg[apos:]

                                # Cleaning local vars
                                test_pkg_loc_stg = ''
                                #----------------------------------------------------------------------

                            #----------------------------------------------------------------------
                            # Loading up the Test Package array content into file 
                            #----------------------------------------------------------------------
                            log.debug("mc_create_phase: Value of test_pkg_stg %s"%(test_pkg_stg))
                            mc_test_pkg_input_file = open("%s/%s_test_package.sv"%(envpath, envname), "w")
                            mc_test_pkg_array = test_pkg_stg.split('µ')
                            for lines in mc_test_pkg_array:
                                mc_test_pkg_input_file.write(lines)
                            mc_test_pkg_input_file.close()
                            #----------------------------------------------------------------------
                        #----------------------------------------------------------------------
                    #----------------------------------------------------------------------


            #----------------------------------------------------------------------
            # Cleaning the const variables 
            #----------------------------------------------------------------------
            if mc_curr_env_set_c:
                mc_curr_env_set_c = 0
            if mc_curr_env_set_s:
                mc_curr_env_set_s = 0
            if mc_curr_env_seq_exists:
                mc_curr_env_seq_exists = 0
            if mc_curr_env_mon_exists:
                mc_curr_env_mon_exists = 0
            #----------------------------------------------------------------------


    def mc_gen_intf(self, intf_name, intf_path, intf_details = []):
        global le 
        global ree
        log.debug("mc_gen_intf: intf_name %s, intf_path %s, intf_details %s"%(intf_name, intf_path, intf_details))
        
        udi_input_file = open("%s/%s_interface.sv"%(intf_path, intf_name), "r+")
        
        # Default Values for the variables
        udi_array = []
        udie_cb_cfg_array = []
        udie_clock_cfg_array = []
        udie_mp_cfg_array = []
        udie_intf_cfg_array = []
        udi_decl = 0
        udi_le_var_temp = [] 
        udi_re_var_temp = []
        udi_nolere_var_temp = []

        udie_intf_cfg_array = intf_details[4]
        udie_clock_cfg_array = intf_details[5]
        udie_cb_cfg_array = intf_details[6]
        udie_mp_cfg_array = intf_details[7]

        log.debug("mc_gen_intf : udie_intf_cfg_array %s"% udie_intf_cfg_array)
        log.debug("mc_gen_intf : udie_clock_cfg_array %s"% udie_clock_cfg_array)
        log.debug("mc_gen_intf : udie_cb_cfg_array %s"% udie_cb_cfg_array)
        log.debug("mc_gen_intf : udie_mp_cfg_array %s"% udie_mp_cfg_array)
        
        for lines in udi_input_file:
            udi_array.append(lines)
            if (udi_decl == 0) and lines.startswith(" // Signal Instantiation"):
                udi_decl = 1
            if (udi_decl == 1) and lines.startswith(" //-"):
                udi_decl = 0
                
                for i in range (1,(udie_intf_cfg_array[0]+1)):
                    udie_cb_cnt =  len(udie_intf_cfg_array[i])    
                   
                    log.debug("Value of udie_cb_cnt is %d"% udie_cb_cnt)
                    log.debug("Value of udie_int_cfg_array is %s"% udie_intf_cfg_array)
                    
                    #for x in range(2, udie_cb_cnt):
                    x=2
                    while x<udie_cb_cnt:
                        log.debug("Inside Loop x %d"% x)
                        if ("le" == udie_intf_cfg_array[i][x]):
                            le = 1
                            log.debug("loop value is %s"% udie_intf_cfg_array[i][x+1])
                            while((x<udie_cb_cnt and x+1<udie_cb_cnt) and ((udie_intf_cfg_array[i][x+1] != 'ree') and ("_cb" not in udie_intf_cfg_array[i][x+1]) and ("_mp" not in udie_intf_cfg_array[i][x+1]))):
                                log.debug("loop value is 2nd %s"% udie_intf_cfg_array[i][x+1])
                                if udie_intf_cfg_array[i][x+1].isdigit() == True:
                                    udi_le_var_temp.append(int(udie_intf_cfg_array[i][x+1])-1)
                                    x += 1    
                                else:
                                    udi_le_var_temp.append(udie_intf_cfg_array[i][x+1])
                                    x += 1    
                        elif ("ree" == udie_intf_cfg_array[i][x]):
                            ree = 1
                            while((x<udie_cb_cnt and x+1<udie_cb_cnt) and ((udie_intf_cfg_array[i][x+1] != 'le') and ('_cb' not in udie_intf_cfg_array[i][x+1]) and ('_mp' not in udie_intf_cfg_array[i][x+1]))):
                                if udie_intf_cfg_array[i][x+1].isdigit() == True:
                                    udi_re_var_temp.append(int(udie_intf_cfg_array[i][x+1])-1)
                                    x += 1    
                                else:    
                                    udi_re_var_temp.append(udie_intf_cfg_array[i][x+1])
                                    x += 1    
                        else:
                            while(x<udie_cb_cnt and (('_cb' not in udie_intf_cfg_array[i][x]) and ('_mp' not in udie_intf_cfg_array[i][x]) \
                            and ('output' not in udie_intf_cfg_array[i][x]) and ('input' not in udie_intf_cfg_array[i][x]) \
                            and ('inout' not in udie_intf_cfg_array[i][x]) and ('clocking' not in udie_intf_cfg_array[i][x]))):
                                if ((le==1 or ree==1) and x+1<udie_cb_cnt):
                                    x+= 1
                                else:
                                    log.debug("Inside Loop : Value of x %d"% x)
                                    if udie_intf_cfg_array[i][x].isdigit() == True:
                                        udi_nolere_var_temp.append(int(udie_intf_cfg_array[i][x])-1)
                                        x += 1   
                                        log.debug("Incremented x value %d"% x)
                                    else:
                                        udi_nolere_var_temp.append(udie_intf_cfg_array[i][x])
                                        x += 1   
                        x += 1               
                    
                    log.debug("Value of udi_le_var_temp %s"% udi_le_var_temp)
                    log.debug("Value of udi_re_var_temp %s"% udi_re_var_temp)
                    log.debug("Value of udi_nolere_var_temp %s"% udi_nolere_var_temp)

                    if (le == 1 and ree == 0):
                        le_temp = len(udi_le_var_temp)
                        le_temp_final = []
                        le_temp_list = ['%s', '%s']
                        le_temp_list_val = [str(udie_intf_cfg_array[i][1]), str(udie_intf_cfg_array[i][0])]
                        for i in range (le_temp):
                            if (str(udi_le_var_temp[i]).isdigit() == True):
                                le_temp_list.insert(1,'[%d:0]')
                            else:
                                le_temp_list.insert(1,'[%s-1:0]')
                            le_temp_list_val.insert(1, udi_le_var_temp[i])

                        log.debug("value of le_temp_list %s"% le_temp_list)
                        log.debug("value of le_temp_list_val %s"% le_temp_list_val )
                
                        for x, y in zip(le_temp_list, le_temp_list_val):
                            le_temp_final.append(x%y)
                        # print(' '.join(le_temp_final) + ';')

                        udi_array.append(' '+' '.join(le_temp_final) + ';')
                        udi_array.append("\n")

                        del le_temp_final[:] 
                        del le_temp_list[:] 
                        del le_temp_list_val[:] 
                        del udi_le_var_temp[:]
                        del udi_re_var_temp[:]
                        del udi_nolere_var_temp[:]

                    elif (le == 0 and ree == 1):
                        re_temp = len(udi_re_var_temp)
                        re_temp_final = []
                        re_temp_list = ['%s', '%s']
                        re_temp_list_val = [str(udie_intf_cfg_array[i][1]), str(udie_intf_cfg_array[i][0])]
                        for i in range (re_temp):
                            if (str(udi_re_var_temp[i]).isdigit() == True):
                                re_temp_list.insert(len(re_temp_list),'[%d:0]')
                            else:
                                re_temp_list.insert(len(re_temp_list),'[%s-1:0]')
                            re_temp_list_val.insert(len(re_temp_list_val), udi_re_var_temp[i])

                        log.debug("value of re_temp_list %s"% re_temp_list)
                        log.debug("value of re_temp_list_val %s"% re_temp_list_val)
                
                        for x, y in zip(re_temp_list, re_temp_list_val):
                            re_temp_final.append(x%y)
                        # print(' '.join(re_temp_final) + ';')

                        udi_array.append(' '+' '.join(re_temp_final) + ';')
                        udi_array.append("\n")

                        del re_temp_final[:] 
                        del re_temp_list[:] 
                        del re_temp_list_val[:] 
                        del udi_le_var_temp[:]
                        del udi_re_var_temp[:]
                        del udi_nolere_var_temp[:]
                    
                    elif (le == 1 and ree == 1): 
                        le_temp = len(udi_le_var_temp)
                        re_temp = len(udi_re_var_temp)
                        
                        lere_temp_final = []
                        lere_temp_list = ['%s', '%s']
                        lere_temp_list_val = [str(udie_intf_cfg_array[i][1]), str(udie_intf_cfg_array[i][0])]
                        
                        for i in range (le_temp):
                            if (str(udi_le_var_temp[i]).isdigit() == True):
                                lere_temp_list.insert(1,'[%d:0]')
                            else:
                                lere_temp_list.insert(1,'[%s-1:0]')
                            lere_temp_list_val.insert(1, udi_le_var_temp[i])

                        for i in range (re_temp):
                            if (str(udi_re_var_temp[i]).isdigit() == True):
                                lere_temp_list.insert(len(lere_temp_list),'[%d:0]')
                            else:
                                lere_temp_list.insert(len(lere_temp_list),'[%s-1:0]')
                            lere_temp_list_val.insert(len(lere_temp_list_val), udi_re_var_temp[i])


                        log.debug("value of lere_temp_list %s"% lere_temp_list)
                        log.debug("value of lere_temp_list_val %s"% lere_temp_list_val)
                
                        for x, y in zip(lere_temp_list, lere_temp_list_val):
                            lere_temp_final.append(x%y)
                        # print(' '.join(lere_temp_final) + ';')

                        udi_array.append(' '+' '.join(lere_temp_final) + ';')
                        udi_array.append("\n")

                        del lere_temp_final[:] 
                        del lere_temp_list[:] 
                        del lere_temp_list_val[:] 
                        del udi_le_var_temp[:] 
                        del udi_re_var_temp[:] 
                        del udi_nolere_var_temp[:] 
                    
                    else:
                        if "-clk" not in udie_intf_cfg_array[i][1]:
                            nolere_temp = len(udi_nolere_var_temp)
                            nolere_temp_final = []
                            nolere_temp_list = ['%s', '%s']
                            nolere_temp_list_val = [str(udie_intf_cfg_array[i][1]), str(udie_intf_cfg_array[i][0])]
                            for i in range (nolere_temp):
                                if (str(udi_nolere_var_temp[i]).isdigit() == True):
                                    nolere_temp_list.insert(1,'[%d:0]')
                                else:
                                    nolere_temp_list.insert(1,'[%s-1:0]')
                                nolere_temp_list_val.insert(1, udi_nolere_var_temp[i])

                            log.debug("value of nolere_temp_list %s"% nolere_temp_list)
                            log.debug("value of nolere_temp_list_val %s"% nolere_temp_list_val)
                
                            for x, y in zip(nolere_temp_list, nolere_temp_list_val):
                                nolere_temp_final.append(x%y)
                            # print(' '.join(nolere_temp_final) + ';')

                            udi_array.append(' '+' '.join(nolere_temp_final) + ';')
                            udi_array.append("\n")

                            del nolere_temp_final[:] 
                            del nolere_temp_list[:] 
                            del nolere_temp_list_val[:] 
                            del udi_le_var_temp[:]
                            del udi_re_var_temp[:]
                            del udi_nolere_var_temp[:]

                    # Clearning The Global Variables
                    le = 0
                    ree = 0
                    element_loop = 0

                if udie_cb_cfg_array:
                    udi_array.append("\n")
                    udi_array.append(" //------------------------------------------\n")
                    udi_array.append(" // Clocking Block Declaration\n")
                    udi_array.append(" //------------------------------------------\n")
        
                    log.debug("Value of udie_clock_cfg_array %s"% udie_clock_cfg_array)
                    log.debug("Value of udie_cb_cfg_array %s"% udie_cb_cfg_array)
                    log.debug("Value of udie_mp_cfg_array %s"% udie_mp_cfg_array)
                    #log.debug("Value of udie_cb_element_loop %s"% udie_cb_element_loop)
                    #log.debug("Value of udie_mp_element_loop %s"% udie_mp_element_loop)
                    
                    # Adding Logic For Updating Clocking Block
                    # for i in range (0,udie_cb_element_loop):
                    for i in range (0, len(udie_cb_cfg_array)):
                        cb_ele_cnt = len(udie_cb_cfg_array[i])
                        cb_ele_cnt = cb_ele_cnt-1
                        log.debug("Value of cb_ele_cnt %d"% cb_ele_cnt)
                        log.debug("Value of udie_cb_cfg_array %s"% udie_cb_cfg_array[i])
                        log.debug("Value of udie_cb_cfg_array %s"% str(udie_cb_cfg_array[i][0]).translate(mt_rm_sym))
                        elem_cb_find = str(udie_cb_cfg_array[i][0]).translate(mt_rm_sym)
                        elem_cb_indx = self.find_index(elem_cb_find, udie_clock_cfg_array)
                        log.debug("Value of elem_cb_indx %s"% elem_cb_indx)
                        if elem_cb_indx != None:
                            udi_array.append(' clocking %s@(%s %s);\n'%(str(udie_cb_cfg_array[i][0]).translate(mt_rm_sym), udie_clock_cfg_array[elem_cb_indx[0]][elem_cb_indx[1]+1], udie_clock_cfg_array[elem_cb_indx[0]][0]))
                        else:
                            udi_array.append(' clocking %s@();\n'%(str(udie_cb_cfg_array[i][0]).translate(mt_rm_sym), ))
                        for j in range (1, (cb_ele_cnt+1)):
                            if (j%2):
                                udi_array.append('  %s       %s;\n'%(str(udie_cb_cfg_array[i][j+1]).translate(None, "'[]"), str(udie_cb_cfg_array[i][j]).translate(mt_rm_sym), ))
                        udi_array.append(' endclocking: %s\n'%(str(udie_cb_cfg_array[i][0]).translate(mt_rm_sym), ))
                        if (i != len(udie_cb_cfg_array)):
                            udi_array.append("\n")
                    

                if udie_mp_cfg_array:
                    udi_array.append("\n")
                    udi_array.append(" //------------------------------------------\n")
                    udi_array.append(" // Mod Port Declaration\n")
                    udi_array.append(" //------------------------------------------\n")
                    
                    log.debug("Value of udie_clock_cfg_array %s"% udie_clock_cfg_array)
                    log.debug("Value of udie_cb_cfg_array %s"% udie_cb_cfg_array)
                    log.debug("Value of udie_mp_cfg_array %s"% udie_mp_cfg_array)
                    #log.debug("Value of udie_cb_element_loop %s"% udie_cb_element_loop)
                    #log.debug("Value of udie_mp_element_loop %s"% udie_mp_element_loop)
                    
                    # Adding Logic For Updating Modports        
                    for i in range (0, len(udie_mp_cfg_array)):
                        mp_ele_cnt = len(udie_mp_cfg_array[i])
                        mp_ele_cnt = mp_ele_cnt-1
                        udi_array.append(' modport %s(\n'%(str(udie_mp_cfg_array[i][0]).translate(mt_rm_sym), ))
                        
                        elem_mpcb_indx = self.find_index('clocking', udie_mp_cfg_array[i])
                        log.debug("Value of udie_mp_cfg_array[%d] %s"%(i, udie_mp_cfg_array[i]))
                        if elem_mpcb_indx != None:
                            #log.debug("Value of udie_mp_element_loop is %s"% udie_mp_element_loop)
                            log.debug("Value of mp is %s"% str(udie_mp_cfg_array[i][0]).translate(mt_rm_sym))
                            mp_ele_tmp = str(udie_mp_cfg_array[i][0]).translate(mt_rm_sym)
                            mp_ele_tmp = mp_ele_tmp.replace('mp','cb')
                            elem_mp_indx = self.find_index(mp_ele_tmp, udie_clock_cfg_array)
                            
                            if elem_mp_indx != None:
                                # No Signal Type To be defined while defining the clock in modport - 081418|TUE
                                udi_array.append('  input %s, clocking %s\n'%(udie_clock_cfg_array[elem_mp_indx[0]][0],  str(mp_ele_tmp), ))
                            else:    
                                udi_array.append('  clocking %s\n'%(str(mp_ele_tmp), ))
                        else:
                            for j in range (1, (mp_ele_cnt+1)):
                                if (j%2):
                                    if (j == (mp_ele_cnt-1)):
                                        if 'clocking' not in str(udie_mp_cfg_array[i][j+1]).translate(mt_rm_sym):
                                            udi_array.append('  %s       %s\n'%(str(udie_mp_cfg_array[i][j+1]).translate(mt_rm_sym), str(udie_mp_cfg_array[i][j]).translate(mt_rm_sym), ))
                                    else: 
                                        if 'clocking' not in str(udie_mp_cfg_array[i][j+1]).translate(mt_rm_sym):
                                            udi_array.append('  %s       %s,\n'%(str(udie_mp_cfg_array[i][j+1]).translate(mt_rm_sym), str(udie_mp_cfg_array[i][j]).translate(mt_rm_sym), ))

                        udi_array.append(' );\n')
                        udi_array.append("\n")
        
        udi_input_file = open("%s/%s_interface.sv"%(intf_path, intf_name), "w")
        
        udi_array_final = []
        for lines in udi_array:
            if lines.startswith("interface "):
                tmp = lines.split()
                numelem = len(udie_clock_cfg_array)
                log.debug("Value of numelem %d"% numelem)
                if numelem == 1:
                    tmpstr = ('('+'input'+' '+udie_clock_cfg_array[0][1]+' '+udie_clock_cfg_array[0][0]+')')
                    tmp.insert(2,tmpstr)
                else:
                    for i in range (numelem):
                        if i == 0:
                            tmpstr = ('input'+' '+udie_clock_cfg_array[i][1]+' '+udie_clock_cfg_array[i][0]+')')
                        elif i == numelem-1:
                            tmpstr = ('('+'input'+' '+udie_clock_cfg_array[i][1]+' '+udie_clock_cfg_array[i][0]+',')
                        else:
                            tmpstr = ('input'+' '+udie_clock_cfg_array[i][1]+' '+udie_clock_cfg_array[i][0]+',')
                        tmp.insert(2,tmpstr)
                udi_array_final.append(' '.join(tmp)) 
                udi_array_final.append('\n') 
            else:
                udi_array_final.append(lines)
        
        for lines in udi_array_final:
            udi_input_file.write(lines)
        udi_input_file.close()


    def mc_gen_intf_wrapper(self, intf_name, intf_path, num_intf):
        log.debug("mc_gen_intf_wrapper: intf_name %s, intf_path %s, num_intf %d"%(intf_name, intf_path, num_intf))
        
        intf_wrap_array = []
        intf_wrap_file = open("%s/%s_interface_wrapper.sv"%(intf_path, intf_name), "r+")
        
        intf_wrap_stg = '' 
        intf_wrap_loc_stg = '' 

        for lines in intf_wrap_file:
            intf_wrap_stg = intf_wrap_stg+lines+'µ' 
        log.debug("mc_gen_intf_wrapper: Value of intf_wrap_stg %s"%(intf_wrap_stg))


        #----------------------------------------------------------------------
        # Enabling inst_num based on N-Agents 
        #----------------------------------------------------------------------
        if num_intf:
            intf_wrap_loc_stg = intf_wrap_loc_stg+('parameter int inst_num = 0')

            pos = intf_wrap_stg.find("#(")
            apos = pos + len('#(')
            intf_wrap_stg = intf_wrap_stg[:apos]+intf_wrap_loc_stg+intf_wrap_stg[apos:]

            # Cleaning local vars
            intf_wrap_loc_stg = ''
        #----------------------------------------------------------------------


        #----------------------------------------------------------------------
        # Interface Instance
        #----------------------------------------------------------------------
        intf_wrap_loc_stg = intf_wrap_loc_stg+(' %s_interface    %s_intf();\n'%(intf_name, intf_name))
        
        pos = intf_wrap_stg.find("// Interface Instantiation")
        apos = pos + len(' // Interface Instantiation\n')+len(' //------------------------------------------\n')
        intf_wrap_stg = intf_wrap_stg[:apos]+intf_wrap_loc_stg+intf_wrap_stg[apos:]

        # Cleaning local vars
        intf_wrap_loc_stg = ''
        #----------------------------------------------------------------------


        #----------------------------------------------------------------------
        # Config db Instance 
        #----------------------------------------------------------------------
        if num_intf:
            intf_wrap_loc_stg = intf_wrap_loc_stg\
            +("µ initial begin\n")\
            +('µ   uvm_config_db #(virtual %s_interface)::set(null, "*", $psprintf("%s_vif_%s", inst_num), %s_intf);\n'%(intf_name, intf_name, "%0d", intf_name))\
            +("µ end\n")
        else:
            intf_wrap_loc_stg = intf_wrap_loc_stg\
            +("µ initial begin\n")\
            +('µ   uvm_config_db #(virtual %s_interface)::set(null, "*", $psprintf("%s_vif"), %s_intf);\n'%(intf_name, intf_name, intf_name))\
            +("µ end\n")
        
        pos = intf_wrap_stg.find("// Registering Interface Into config_db")
        apos = pos + len(' // Registering Interface Into config_db\n')+len(' //------------------------------------------\n')
        intf_wrap_stg = intf_wrap_stg[:apos]+intf_wrap_loc_stg+intf_wrap_stg[apos:]

        # Cleaning local vars
        intf_wrap_loc_stg = ''
        #----------------------------------------------------------------------


        #----------------------------------------------------------------------
        # Loading up the Interface Wrapper Onto File 
        #----------------------------------------------------------------------
        log.debug("mc_gen_intf_wrapper: Value of intf_wrap_stg %s"%(intf_wrap_stg))
        intf_wrap_file = open("%s/%s_interface_wrapper.sv"%(intf_path, intf_name), "w")
        intf_wrap_array = intf_wrap_stg.split('µ')
        for lines in intf_wrap_array:
            intf_wrap_file.write(lines)
        intf_wrap_file.close()
        #----------------------------------------------------------------------


    def mc_gen_env_macros(self, intf_name, env_name, path, num_intf):
        log.debug("mc_gen_env_macros: intf_name %s, env_name %s, path %s, num_intf %d"%(intf_name, env_name, path, num_intf))
        
        env_macro_array = []
        env_macro_file = open("%s/%s_environment_macros.sv"%(path, env_name), "r+")
        
        env_macro_stg = '' 
        env_macro_loc_stg = '' 

        for lines in env_macro_file:
            env_macro_stg = env_macro_stg+lines+'µ' 
        log.debug("mc_gen_env_macros: Value of env_macro_stg %s"%(env_macro_stg))


        #----------------------------------------------------------------------
        # Macro Instance 
        #----------------------------------------------------------------------
        if num_intf:
            env_macro_loc_stg = env_macro_loc_stg\
            +("µ\n")\
            +("µ\n")\
            +("µ// %s Interface Bind\n"%(intf_name))\
            +("µ`define %s_if_wrapper_bind(HIER, INSTNUM)\\\n"%(intf_name))\
            +("µ    bind ``HIER`` %s_interface_wrapper #(.inst_num(``INSTNUM``)) %s_interface_wrapper_``INSTNUM`` ();\n"%(intf_name, intf_name))
        else:
            env_macro_loc_stg = env_macro_loc_stg\
            +("µ\n")\
            +("µ\n")\
            +("µ// %s Interface Bind\n"%(intf_name))\
            +("µ`define %s_if_wrapper_bind(HIER)\\\n"%(intf_name))\
            +("µ    bind ``HIER`` %s_interface_wrapper #() %s_interface_wrapper_inst ();\n"%(intf_name, intf_name))
            
        pos = env_macro_stg.find("// Interface Wrapper Macro Definition")
        apos = pos + len('// Interface Wrapper Macro Definition\n')+len('//---------------------------------------------------------------\n')
        env_macro_stg = env_macro_stg[:apos]+env_macro_loc_stg+env_macro_stg[apos:]

        # Cleaning local vars
        env_macro_loc_stg = ''
        #----------------------------------------------------------------------


        #----------------------------------------------------------------------
        # Loading up the Interface Wrapper Onto File 
        #----------------------------------------------------------------------
        log.debug("mc_gen_env_macros: Value of env_macro_stg %s"%(env_macro_stg))
        env_macro_file = open("%s/%s_environment_macros.sv"%(path, env_name), "w")
        env_macro_array = env_macro_stg.split('µ')
        for lines in env_macro_array:
            env_macro_file.write(lines)
        env_macro_file.close()
        #----------------------------------------------------------------------


    def mc_script_config_phase(self):
        global mc_curr_env_set_c 
        global mc_curr_env_set_s
        global mc_curr_env_agt_set_c 
        global mc_curr_env_agt_set_s 
        cs = ''
        so = ''
        whichenvchanged = [[] for x in range(len(mc_env_cfg_pool))]

        log.debug("mc_script_config_phase : Calling the mc_script_config_phase!\n")
   
        # Create the Environment Configuration File 
        log.debug("mc_script_config_phase: Value of mc_env_cfg_pool %s\n"%(mc_env_cfg_pool))

        # Copying the mc_env_cfg_pool to local and converting/remove all __c and __s
        mc_env_cfg_pool_l = ast.literal_eval(str(mc_env_cfg_pool).replace("__c","").replace("__s",""))
        log.debug("mc_script_config_phase: Value of mc_env_cfg_pool_l %s\n"%(mc_env_cfg_pool_l))

        # Logic to find which env cfg file needs to be re-done 
        for g in range (len(mc_env_cfg_pool)):
            cs = self.substr_str_search('__c', mc_env_cfg_pool[g])
            so = self.substr_str_search('__s', mc_env_cfg_pool[g])
            log.debug("mc_script_config_phase: Value of cs %s, so %s, mc_env_cfg_pool[%0d] %s\n"%(cs,so,g,mc_env_cfg_pool[g]))
            if cs != [] or so != []:
                whichenvchanged[g] = "yes"
        log.debug("mc_script_config_phase: Value of whichenvchanged %s\n"%(whichenvchanged))

        # Code to take care of N-instance of the environment 
        for z in range (len(mc_env_cfg_pool_l)):
            if mc_env_cfg_pool_l[z][1] != '':
                subenv_arr_org = mc_env_cfg_pool_l[z][1]
                subenv_arr = mc_env_cfg_pool_l[z][1].split(",")
                log.debug("mc_script_config_phase: subenv_arr_org %s, subenv_arr %s\n"%(subenv_arr_org, subenv_arr))
                
                for y in range (int(subenv_arr[0])):
                    if len(subenv_arr[y+1].split(":"))>1:
                        whattoreplace = subenv_arr[y+1]
                        replacewith = subenv_arr[y+1].split(":")[0]     
                        mc_env_cfg_pool_l = ast.literal_eval(re.sub(r'\b%s\b'%(whattoreplace),'%s'%(replacewith), str(mc_env_cfg_pool_l)))
                        mc_env_cfg_pool_l[z][1] = subenv_arr_org
                        log.debug("mc_script_config_phase : whattoreplace %s, replacewith %s!\n"%(whattoreplace, replacewith))
        log.debug("mc_script_config_phase: Value of mc_env_cfg_pool_l %s\n"%(mc_env_cfg_pool_l))

        for a in range (len(mc_env_cfg_pool_l)):
            if whichenvchanged[a] == "yes" or not self.substr_str_search("yes", whichenvchanged):
                # Default envname and parenvname
                if len(((mc_env_cfg_pool_l[a][0].split(","))[0]).split(":"))>1:
                    parenvname = ((mc_env_cfg_pool_l[a][0].split(","))[0]).split(":")[0]
                    parenvname_org = (mc_env_cfg_pool_l[a][0].split(","))[0]
                else:
                    parenvname = (mc_env_cfg_pool_l[a][0].split(","))[0]
                    parenvname_org = (mc_env_cfg_pool_l[a][0].split(","))[0]
                
                if len(((mc_env_cfg_pool_l[a][0].split(","))[1]).split(":"))>1:
                    envname = ((mc_env_cfg_pool_l[a][0].split(","))[1]).split(":")[0]
                    envname_org = (mc_env_cfg_pool_l[a][0].split(","))[1]
                else:
                    envname = (mc_env_cfg_pool_l[a][0].split(","))[1]
                    envname_org = (mc_env_cfg_pool_l[a][0].split(","))[1]
        
                #----------------------------------------------------------------------
                # Code to dump out the environment Configuration
                #----------------------------------------------------------------------
                
                # Environment Directory Path 
                envdirpath = mc_env_cfg_pool_l[a][6]+"/"+"%s_env"%(envname)
                envdocspath = envdirpath+'/'+'docs'
                envcfgfilepath = envdocspath+"/"+'%s_env_cfg_file.xlsx'%(envname)
                log.debug("mc_script_config_phase : envname %s envdirpath %s envdocspath %s envcfgfilepath %s\n"%(envname, envdirpath, envdocspath, envcfgfilepath))

                # Logic to edit/create/add new sheet
                if os.path.isfile(envcfgfilepath):
                    env_wb = load_workbook(envcfgfilepath)

                    if not "%s_env_cfg"%(envname) in env_wb.sheetnames:
                        env_wb.create_sheet("%s_env_cfg"%(envname), 0)
                        env_wb.save(envcfgfilepath)
                    else:
                        env_sheet = env_wb['%s_env_cfg'%(envname)]
                        env_sheet_title = "%s_env_cfg"%(envname)+"_"+self.rtn_date_time_full()
                        log.debug("mc_script_config_phase : Value of env_sheet_title %s"%(env_sheet_title))
                        env_sheet.title = env_sheet_title 

                        env_wb.create_sheet("%s_env_cfg"%(envname), 0)
                        env_wb.save(envcfgfilepath)
                else:
                    env_wb = Workbook() 
                    env_wb.create_sheet("%s_env_cfg"%(envname), 0)
                    env_wb.save(filename = "%s_env_cfg_file.xlsx"%(envname))
                    shutil.move('./%s_env_cfg_file.xlsx'%(envname), '%s'%(envdocspath))

                #----------------------------------------------------------------------
                # Get the respective Sheet and start filling up the details !!
                #----------------------------------------------------------------------
                env_sheet = env_wb['%s_env_cfg'%(envname)]

                # Define the top column Variable names
                env_sheet['A1'] = 'EnvironmentNo'
                env_sheet['B1'] = 'Environment' 
                env_sheet['C1'] = 'ParentEnvironment'
                env_sheet['D1'] = 'SubEnvironment'
                env_sheet['E1'] = 'Monitor'
                env_sheet['F1'] = 'Scoreboard'
                env_sheet['G1'] = 'Agent'
                env_sheet['H1'] = 'AgentConfig'
                env_sheet['I1'] = 'MonScbCon'
                env_sheet['J1'] = 'EnvIntfDetails'
                env_sheet['K1'] = 'Directory' 
                env_sheet['L1'] = 'EnvCfgFilePath'

                # Loop through the Variables inside environment 
                env_lno = 0
                env_rno = 2
                env_intf_rno = env_rno
                env_agt_rno = env_rno

                # EnvironmentNo
                if mc_env_cfg_pool_l[a][0] != '':
                    env_sheet.cell(row=env_rno, column=1).value = env_lno

                # Environment Name 
                if mc_env_cfg_pool_l[a][0] != '':
                    if a == 0:
                        env_sheet.cell(row=env_rno, column=2).value = envname_org 
                    else:
                        env_sheet.cell(row=env_rno, column=2).value = envname 
                
                # Parent Environment Name
                if mc_env_cfg_pool_l[a][0] != '':
                    env_sheet.cell(row=env_rno, column=3).value = 'top' 

                # Sub-Environment Name
                if mc_env_cfg_pool_l[a][1] != '':
                    env_sheet.cell(row=env_rno, column=4).value = str(mc_env_cfg_pool_l[a][1]) 
                
                # Environment Monitors 
                if mc_env_cfg_pool_l[a][3] != '':
                    env_sheet.cell(row=env_rno, column=5).value = str(mc_env_cfg_pool_l[a][3]) 
                
                # Environment Scoreboard 
                if mc_env_cfg_pool_l[a][4] != '':
                    env_sheet.cell(row=env_rno, column=6).value = str(mc_env_cfg_pool_l[a][4]) 

                # Loading up the Agent Details 
                if mc_env_cfg_pool_l[a][2] != '':
                    if mc_env_cfg_pool_l[a][2][0] != '':
                        
                        # Loading up the Agent list
                        env_sheet.cell(row=env_agt_rno, column=7).value = str(mc_env_cfg_pool_l[a][2][0])

                        for u in range (int(((mc_env_cfg_pool_l[a][2][0]).split(","))[0])):
                            if mc_env_cfg_pool_l[a][2][u+1] != []:
                                drvintfstr = ''
                                
                                # Loading agt with inst name
                                if mc_env_cfg_pool_l[a][2][u+1][2] != '':
                                    #agtinstname = str(mc_env_cfg_pool_l[a][2][u+1][1])+","+str(mc_env_cfg_pool_l[a][2][u+1][2])
                                    agtinstname = str(mc_env_cfg_pool_l[a][2][u+1][1])+":"+str(mc_env_cfg_pool_l[a][2][u+1][2])
                                else:
                                    agtinstname = str(mc_env_cfg_pool_l[a][2][u+1][1])
                                
                                # Loading the Agent With Instance Name
                                if u == 0:
                                    env_sheet.cell(row=env_agt_rno, column=8).value = agtinstname 
                                else:
                                    env_agt_rno = env_agt_rno+1
                                    env_sheet.cell(row=env_agt_rno, column=8).value = agtinstname 

                                # Loading Agent Driver Details 
                                if mc_env_cfg_pool_l[a][2][u+1][3] != '':
                                    env_agt_rno = env_agt_rno+1
                                    env_sheet.cell(row=env_agt_rno, column=8).value = str(mc_env_cfg_pool_l[a][2][u+1][3]) 
                                else:
                                    env_agt_rno = env_agt_rno+1

                                # Loading Agent Monitor Details 
                                if mc_env_cfg_pool_l[a][2][u+1][4] != '':
                                    env_agt_rno = env_agt_rno+1
                                    env_sheet.cell(row=env_agt_rno, column=8).value = str(mc_env_cfg_pool_l[a][2][u+1][4]) 
                                else:
                                    env_agt_rno = env_agt_rno+1

                                # Loading Agent Driver Interface Details 
                                if mc_env_cfg_pool_l[a][2][u+1][3] != '':
                                    for v in range (int(((mc_env_cfg_pool_l[a][2][u+1][3]).split(","))[0])):
                                        if mc_env_cfg_pool_l[a][2][u+1][5][v] != []:
                                            if int(mc_env_cfg_pool_l[a][2][u+1][5][v][2]) == 1:
                                                if (v==0):
                                                    drvintfstr = drvintfstr+"1"
                                                else:
                                                    drvintfstr = drvintfstr+"-"+"1"
                                            elif int(mc_env_cfg_pool_l[a][2][u+1][5][v][2]) == 3:
                                                if (v==0):
                                                    drvintfstr = drvintfstr+"3"+":"+str(mc_env_cfg_pool_l[a][2][u+1][5][v][8])
                                                else:
                                                    drvintfstr = drvintfstr+"-"+"3"+":"+str(mc_env_cfg_pool_l[a][2][u+1][5][v][8])
                                    
                                    # Loading up the agt drv intf list details
                                    env_agt_rno = env_agt_rno+1
                                    env_sheet.cell(row=env_agt_rno, column=8).value = drvintfstr 
                                    env_sheet.cell(row=env_agt_rno, column=8).alignment = Alignment(wrap_text=True) 
                                else:
                                    env_agt_rno = env_agt_rno+1


                # MonScbCon 
                if mc_env_cfg_pool_l[a][5] != []:
                    monscbcon_str = ''
                    if len(mc_env_cfg_pool_l[a][5])>1:
                        for p in range (len(mc_env_cfg_pool_l[a][5])):
                            if (p == 0):
                                monscbcon_l = (mc_env_cfg_pool_l[a][5][p]).split("-")
                                monscbcon_0 = monscbcon_l[0].split(","); # monscbcon_0.pop(0) 
                                monscbcon_1 = monscbcon_l[1].split(","); # monscbcon_1.pop(0)
                                
                                if (monscbcon_l[0].startswith(envname) and monscbcon_l[1].startswith(envname)) or (monscbcon_l[0].startswith('top') and monscbcon_l[1].startswith('top')):
                                    monscbcon_0.pop(0); monscbcon_1.pop(0)

                                log.debug("mc_script_config_phase: monscbcon_l %s, monscbcon_0 %s, monscbcon_1 %s\n"%(monscbcon_l, monscbcon_0, monscbcon_1))

                                monscbcon_l = ",".join(monscbcon_0)+"-"+ ",".join(monscbcon_1)+"-"+monscbcon_l[2]
                                log.debug("mc_script_config_phase: monscbcon_l %s, monscbcon_0 %s, monscbcon_1 %s\n"%(monscbcon_l, monscbcon_0, monscbcon_1))
                                
                                #monscbcon_str = monscbcon_str+mc_env_cfg_pool_l[a][5][p]
                                monscbcon_str = monscbcon_str+monscbcon_l
                            else:
                                monscbcon_l = (mc_env_cfg_pool_l[a][5][p]).split("-")
                                monscbcon_0 = monscbcon_l[0].split(","); # monscbcon_0.pop(0) 
                                monscbcon_1 = monscbcon_l[1].split(","); # monscbcon_1.pop(0)
                                
                                if (monscbcon_l[0].startswith(envname) and monscbcon_l[1].startswith(envname)) or (monscbcon_l[0].startswith('top') and monscbcon_l[1].startswith('top')):
                                    monscbcon_0.pop(0); monscbcon_1.pop(0)
                                
                                log.debug("mc_script_config_phase: monscbcon_l %s, monscbcon_0 %s, monscbcon_1 %s\n"%(monscbcon_l, monscbcon_0, monscbcon_1))
                                
                                monscbcon_l = ",".join(monscbcon_0)+"-"+ ",".join(monscbcon_1)+"-"+monscbcon_l[2]
                                log.debug("mc_script_config_phase: monscbcon_l %s, monscbcon_0 %s, monscbcon_1 %s\n"%(monscbcon_l, monscbcon_0, monscbcon_1))
                                
                                #monscbcon_str = monscbcon_str+"|"+mc_env_cfg_pool_l[a][5][p]
                                monscbcon_str = monscbcon_str+"|"+monscbcon_l

                        env_sheet.cell(row=env_rno, column=9).value = monscbcon_str 
                    else:
                        monscbcon_l = (mc_env_cfg_pool_l[a][5][0]).split("-")
                        monscbcon_0 = monscbcon_l[0].split(","); # monscbcon_0.pop(0) 
                        monscbcon_1 = monscbcon_l[1].split(","); # monscbcon_1.pop(0)
                        
                        if (monscbcon_l[0].startswith(envname) and monscbcon_l[1].startswith(envname)) or (monscbcon_l[0].startswith('top') and monscbcon_l[1].startswith('top')):
                            monscbcon_0.pop(0); monscbcon_1.pop(0)
                        
                        log.debug("mc_script_config_phase: monscbcon_l %s, monscbcon_0 %s, monscbcon_1 %s\n"%(monscbcon_l, monscbcon_0, monscbcon_1))
                        
                        monscbcon_l = ",".join(monscbcon_0)+"-"+ ",".join(monscbcon_1)+"-"+monscbcon_l[2]
                        log.debug("mc_script_config_phase: monscbcon_l %s, monscbcon_0 %s, monscbcon_1 %s\n"%(monscbcon_l, monscbcon_0, monscbcon_1))
                        
                        #env_sheet.cell(row=env_rno, column=9).value = str(mc_env_cfg_pool_l[a][5][0])
                        env_sheet.cell(row=env_rno, column=9).value = str(monscbcon_l)

                    env_sheet.cell(row=env_rno, column=9).alignment = Alignment(wrap_text=True) 


                # Env Interface Details Loading 
                if mc_env_cfg_pool_l[a][7] != []:
                    if mc_env_cfg_pool_l[a][7][0] != '':
                        envintfstr = ''

                        # Loading up the env intf list
                        env_sheet.cell(row=env_intf_rno, column=10).value = str(mc_env_cfg_pool_l[a][7][0])
                        
                        for u in range (int(((mc_env_cfg_pool_l[a][7][0]).split(","))[0])):
                            if mc_env_cfg_pool_l[a][7][u+1] != []:
                                if int(mc_env_cfg_pool_l[a][7][u+1][2]) == 1:
                                    if (u==0):
                                        envintfstr = envintfstr+"1"
                                    else:
                                        envintfstr = envintfstr+"-"+"1"
                                elif int(mc_env_cfg_pool_l[a][7][u+1][2]) == 3:
                                    if (u==0):
                                        envintfstr = envintfstr+"3"+":"+str(mc_env_cfg_pool_l[a][7][u+1][8])
                                    else:
                                        envintfstr = envintfstr+"-"+"3"+":"+str(mc_env_cfg_pool_l[a][7][u+1][8])
                        
                        # Loading up the env intf list details
                        env_intf_rno = env_intf_rno+1
                        env_sheet.cell(row=env_intf_rno, column=10).value = envintfstr 
                        env_sheet.cell(row=env_intf_rno, column=10).alignment = Alignment(wrap_text=True) 
                                        
                # Directory Path 
                if mc_env_cfg_pool_l[a][6] != '':
                    env_sheet.cell(row=env_rno, column=11).value = str(mc_env_cfg_pool_l[a][6]) 
                    env_sheet.cell(row=env_rno, column=11).alignment = Alignment(wrap_text=True) 
                
                # Removing the same before you load/add info on envcfgfilepath only for sub-envs and not the current env : 011020
                # EnvCfgFilePath 
                #env_sheet.cell(row=env_rno, column=12).value = envcfgfilepath 
                #env_sheet.cell(row=env_rno, column=12).alignment = Alignment(wrap_text=True) 
                
                # Logic to find the last row no 
                if env_agt_rno>env_intf_rno:
                    env_rno = env_agt_rno
                else:
                    env_rno = env_intf_rno
                log.debug("mc_script_config_phase: env_rno %d, env_agt_rno %d, env_intf_rno %d\n"%(env_rno, env_agt_rno, env_intf_rno))
                

                # Sub Env Details 
                if mc_env_cfg_pool_l[a][1] != '':
                    subenv_arr = str(mc_env_cfg_pool_l[a][1]).split(",")
                    for m in range (int(subenv_arr[0])):
                        if a == 0:
                            whattosearch = envname_org+","+(subenv_arr[m+1]).split(":")[0]   
                        else:
                            whattosearch = envname+","+(subenv_arr[m+1]).split(":")[0]   

                        whattosearch_idx = self.find_index(whattosearch, mc_env_cfg_pool_l)
                        log.debug("mc_script_config_phase: whattosearch %s, whattosearch_idx %s\n"%(whattosearch, whattosearch_idx))

                        # Incrementing The env_rno 
                        env_rno = env_rno+1
    
                        # Loading the env_lno
                        env_lno = env_lno+1
                        env_sheet.cell(row=env_rno, column=1).value = env_lno
    
                        # Loading the env name
                        env_sheet.cell(row=env_rno, column=2).value = subenv_arr[m+1] 
                        
                        # Loading the parent name
                        if a == 0:
                            env_sheet.cell(row=env_rno, column=3).value = envname_org 
                        else:    
                            env_sheet.cell(row=env_rno, column=3).value = envname 

                        # Loading the links to the subenvs
                        subenvcfgfilepath = mc_env_cfg_pool_l[whattosearch_idx[0]][6]+"/"+"%s_env"%(subenv_arr[m+1].split(":")[0])+"/docs"+"/%s_env_cfg_file.xlsx"%(subenv_arr[m+1].split(":")[0])
                        subenvcfgfilepath = subenvcfgfilepath+","+"%s_env_cfg"%(subenv_arr[m+1].split(":")[0])
                        log.debug("mc_script_config_phase: subenvcfgfilepath %s\n"%(subenvcfgfilepath))
                        
                        env_sheet.cell(row=env_rno, column=12).value = subenvcfgfilepath 
                        env_sheet.cell(row=env_rno, column=12).alignment = Alignment(wrap_text=True) 


                # Saving the EnvCfgFile After Loading All the Details
                env_wb.save(envcfgfilepath)
                env_wb.close()

        #----------------------------------------------------------------------
        # Code to dump out the List file
        #----------------------------------------------------------------------
        self.mc_list_file()
        
        #----------------------------------------------------------------------
        # Code to dump out the Environment TB Setup Script 
        #----------------------------------------------------------------------
        self.mc_tb_setup()


    def mc_list_file(self):
        global mc_env_cfg_pool
        global create_stitch
        global stitch_only
        global cxn_only
        global ei_only
        global mc_curr_env_set_c 
        global mc_curr_env_agt_set_c 
        global mc_curr_env_set_s 
        global mc_curr_env_agt_set_s
        does_agt_has_seq = ''

        log.debug("mc_list_file : Calling the mc_list_file! mc_env_cfg_pool %s, size of mc_env_cfg_pool %d\n"%(mc_env_cfg_pool, len(mc_env_cfg_pool)))
        
        # Cycle through all the environment and create all the files
        for a in range (len(mc_env_cfg_pool)):
            if not create_stitch and not stitch_only and not cxn_only and not ei_only:
                log.debug("mc_list_file : List all the directory !\n")
            
                envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                envnamefull = envname+"_env"
                log.debug("mc_list_file : envname %s !\n"%(envname))

                #------------------------------------------------------------------------------
                # Creating Directory Structure For Environment, Checkers
                #------------------------------------------------------------------------------
                # Note: Instead of full directory, keeping it as $TB_DIR : 02212021SUN 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    if mc_env_cfg_pool[a][6] != []:
                        if mc_env_cfg_pool[a][6] == 'pwd':
                            envdirpath_full = str(os.popen('pwd').read()).strip()
                        else:
                            envdirpath_full = str(mc_env_cfg_pool[a][6]).strip('[,],\'')
                    
                if (mc_env_cfg_pool[a][0]):
                    # Environment Directory Path
                    
                    envdirpath_full = envdirpath_full+'/'+((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]+'_env'   
                    envdirpath = "$%s_TB_DIR"%(envname.upper())
                    
                    log.debug("mc_list_file : envdirpath %s, envdirpath_full %s!\n"%(envdirpath, envdirpath_full))
                   
                    envpath = envdirpath+'/'+'env'
                    envdocspath = envdirpath+'/'+'docs'
                    envrunpath = envdirpath_full+'/'+'run'
                    envflpath = envdirpath_full+'/'+'filelist'
                    tbpath = envdirpath+'/'+'tb'

                    log.debug("mc_list_file : envdocspath %s, envrunpath %s, envflpath %s!\n"%(envdocspath, envrunpath, envflpath))
                
                
                #------------------------------------------------------------------------------
                # Code for creating the necessary .fl files list 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    mc_env_fl_arr = []
                    mc_env_fl_input_file = open("%s/%s_environment.f"%(envflpath, envname),"r+")
                    #mc_env_fl_input_file = open("%s/%s_environment.fl"%(envrunpath, envname),"r+")
                    #mc_env_fl_input_file = open("%s/%s_environment.fl"%(envdocspath, envname),"r+")
                   
                    mc_tbtop_fl_arr = []
                    mc_tbtop_fl_input_file = open("%s/%s_tbtop.f"%(envflpath, envname),"r+")
                    #mc_tbtop_fl_input_file = open("%s/%s_tbtop.fl"%(envrunpath, envname),"r+")
                    #mc_tbtop_fl_input_file = open("%s/%s_tbtop.fl"%(envdocspath, envname),"r+")

                    fl_stg = ''
                    tbtop_fl_stg = ''
                    fl_loc_stg = ''
                    tbtop_fl_loc_stg = ''

                    for lines in mc_env_fl_input_file:
                        fl_stg = fl_stg+lines+'µ' 
                    log.debug("mc_list_file: Value of fl_stg %s"%(fl_stg))
                   
                    for lines in mc_tbtop_fl_input_file:
                        tbtop_fl_stg = tbtop_fl_stg+lines+'µ' 
                    log.debug("mc_list_file: Value of tbtop_fl_stg %s"%(tbtop_fl_stg))

                
                #------------------------------------------------------------------------------
                # Code to modify the my $ for the Environment Path 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    envdirpath_hir = envdirpath.split("/"); envhir = ''
                    log.debug("mc_list_file: Value of envdirpath %s"%(envdirpath))
                    
                    for i in range (len(envdirpath_hir)):
                        if "_env" in envdirpath_hir[i]:
                            envhir = envhir+"/"+envdirpath_hir[i] 
                    log.debug("mc_list_file: Value of envhir %s"%(envhir))
                    
                #------------------------------------------------------------------------------
                # Adding Sub-Environment List Files In the Parent Environment 
                #------------------------------------------------------------------------------
                if mc_env_cfg_pool[a][1] != '':
                    subenv_arr = str(mc_env_cfg_pool[a][1]).split(",")
                    for m in range (int(subenv_arr[0])):
                        # if a == 0:
                        #     whattosearch = envname_org+","+(subenv_arr[m+1]).split(":")[0]   
                        # else:
                        #     whattosearch = envname+","+(subenv_arr[m+1]).split(":")[0]   
                        whattosearch = envname+","+(subenv_arr[m+1]).split(":")[0]   

                        whattosearch_idx = self.find_index(whattosearch, mc_env_cfg_pool)
                        log.debug("mc_list_file: whattosearch %s, whattosearch_idx %s\n"%(whattosearch, whattosearch_idx))

                        # Loading the links to the subenvs
                        #subenvflpath = "-f " + mc_env_cfg_pool[whattosearch_idx[0]][6]+"/"+"%s_env"%(subenv_arr[m+1].split(":")[0])+"/docs"+"/%s_environment.fl\n"%(subenv_arr[m+1].split(":")[0])
                        # ORG: subenvflpath = "-f " + mc_env_cfg_pool[whattosearch_idx[0]][6]+"/"+"%s_env"%(subenv_arr[m+1].split(":")[0])+"/run"+"/%s_environment.fl\n"%(subenv_arr[m+1].split(":")[0])
                        #subenvflpath = "-f " + "$%s_TB_DIR"%(subenv_arr[m+1].split(":")[0].upper())+"/run"+"/%s_environment.f\n"%(subenv_arr[m+1].split(":")[0])
                        subenvflpath = "-f " + "$%s_TB_DIR"%(subenv_arr[m+1].split(":")[0].upper())+"/filelist"+"/%s_environment.f\n"%(subenv_arr[m+1].split(":")[0])
                        log.debug("mc_list_file: subenvflpath %s\n"%(subenvflpath))

                        pos = fl_stg.find('# Sub-Environment List Files\n')
                        apos = pos + len('# Sub-Environment List Files\n')
                        fl_stg = fl_stg[:apos]+subenvflpath+fl_stg[apos:]


                #------------------------------------------------------------------------------
                # Adding Environment Directory  
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envdirpath))
                   
                    envpath = envdirpath+"/"+"env"
                    fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envpath))

                    pos = fl_stg.find('# Environment Directory\n')
                    apos = pos + len('# Environment Directory\n')
                    fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                    
                    # Clearning Local Variables
                    fl_loc_stg = '' 
                #------------------------------------------------------------------------------

                #------------------------------------------------------------------------------
                # Directory Path For Environment Misc Directories 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    # Environment Directory Path
                    # envdirpath = envdirpath+'/'+((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]+'_env'   
                    # log.debug("mc_list_file : envdirpath %s!\n"%envdirpath)
                    
                    # Directory Path For Other Env Directory 
                    # envtrkpath = envdirpath+'/'+'trackers'
                    
                    envchkrpath = envdirpath+'/'+'checkers'
                    
                    # envconfilepath = envdirpath+'/'+'conn_file'
                    
                    #log.debug("mc_list_file : envtrkpath %s, envchkrpath %s, envconfilepath %s!\n"%(envtrkpath, envchkrpath, envconfilepath))
                    log.debug("mc_list_file : envchkrpath %s!\n"%(envchkrpath))
                

                #------------------------------------------------------------------------------
                # Directory Path For Environment Interface Files  
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    envintfdirpath = envdirpath+'/'+'env_interfaces'
                    log.debug("mc_list_file : envintfdirpath %s!\n"%envintfdirpath)
                    
                    fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envintfdirpath))
                    
                    pos = fl_stg.find('# Environment Interface Files Directory\n')
                    apos = pos + len('# Environment Interface Files Directory\n')
                    fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                    
                    # Clearning Local Variables
                    fl_loc_stg = '' 
                #------------------------------------------------------------------------------

                
                #------------------------------------------------------------------------------
                # Directory Path For Environment RAL, Memory Models 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    envmdldirpath = envdirpath+'/'+'models'
                    log.debug("mc_list_file : envmdldirpath %s!\n"%envmdldirpath)
                    
                    fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envmdldirpath))
                    
                    pos = fl_stg.find('# Environment RAL, Memory Models Directory\n')
                    apos = pos + len('# Environment RAL, Memory Models Directory\n')
                    fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                    
                    # Clearning Local Variables
                    fl_loc_stg = '' 
                #------------------------------------------------------------------------------


                #------------------------------------------------------------------------------
                # Creating directory for environment monitors
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    envmondirpath = envdirpath+'/'+'env_monitors'
                    log.debug("mc_list_file : envmondirpath %s!\n"%envmondirpath)

                    fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envmondirpath))
                    
                    pos = fl_stg.find('# Environment Monitor Files Directory\n')
                    apos = pos + len('# Environment Monitor Files Directory\n')
                    fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                    
                    # Clearning Local Variables
                    fl_loc_stg = '' 
                #------------------------------------------------------------------------------


                #------------------------------------------------------------------------------
                # Creating directory for environment and test sequences directory 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    envseqdirpath = envdirpath+'/'+'env_sequences'
                    log.debug("mc_list_file : envseqdirpath %s!\n"%envseqdirpath)

                    fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envseqdirpath))
                    
                    pos = fl_stg.find('# Environment and Test Sequence Files Directory\n')
                    apos = pos + len('# Environment and Test Sequence Files Directory\n')
                    fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                    
                    # Clearning Local Variables
                    fl_loc_stg = '' 
                #------------------------------------------------------------------------------


                #------------------------------------------------------------------------------
                # Creating directory for environment scoreboards
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    envscbdirpath = envdirpath+'/'+'scoreboards'
                    log.debug("mc_list_file : envscbdirpath %s!\n"%envscbdirpath)

                    fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envscbdirpath))
                    
                    pos = fl_stg.find('# Environment Scoreboard Files Directory\n')
                    apos = pos + len('# Environment Scoreboard Files Directory\n')
                    fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                    
                    # Clearning Local Variables
                    fl_loc_stg = '' 
                #------------------------------------------------------------------------------


                #------------------------------------------------------------------------------
                # Creating the top agent directory inside the environment
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    envagttopdirpath = envdirpath+'/'+'agents'

                    fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envagttopdirpath))
                    
                    pos = fl_stg.find('# Environment Agents Directory\n')
                    apos = pos + len('# Environment Agents Directory\n')
                    fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                    
                    # Clearning Local Variables
                    fl_loc_stg = '' 
                    #------------------------------------------------------------------------------
                    
                    if mc_env_cfg_pool[a][2] != ['']:
                        #envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                        envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                        
                        log.debug("mc_list_file : envname %s envagtname_arr %s envagttopdirpath %s!\n"%(envname, envagtname_arr, envagttopdirpath))
                        
                        for e in range (int(envagtname_arr[0])):
                            #envagtname = envname+"_"+envagtname_arr[e+1]
                            envagtname = envagtname_arr[e+1]
                        
                            # Directory Path For Environment Monitors
                            envagtdirpath = envagttopdirpath+'/'+envagtname+'_agent'
                           
                            fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envagtdirpath))
                            
                            pos = fl_stg.find('# Agents Directory\n')
                            apos = pos + len('# Agents Directory\n')
                            fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                            
                            # Clearning Local Variables
                            fl_loc_stg = '' 
                            #------------------------------------------------------------------------------

                            envagtseqdirpath = envagtdirpath+'/'+'sequences'
                            
                            fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envagtseqdirpath))
                            
                            pos = fl_stg.find('# Agents Sequence Directory\n')
                            apos = pos + len('# Agents Sequence Directory\n')
                            fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                            
                            # Clearning Local Variables
                            fl_loc_stg = '' 
                            #------------------------------------------------------------------------------
                            
                            log.debug("mc_list_file : envagtdirpath %s envagtseqdirpath %s!\n"%(envagtdirpath, envagtseqdirpath))
                            
                            #------------------------------------------------------------------------------
                            # Code to identify if the respective Env has sequences or not
                            #------------------------------------------------------------------------------
                            if mc_env_cfg_pool[a][2][e+1][3] != '':
                                does_agt_has_seq = 1
    

                #------------------------------------------------------------------------------
                # Creating the Test Directory Path 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    # Directory Path For ENV tests 
                    envtestdirpath = envdirpath+'/'+'tests'
                    log.debug("mc_list_file : envtestdirpath %s!\n"%envtestdirpath)
           
                    fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envtestdirpath))
                    
                    pos = fl_stg.find('# Test Directory\n')
                    apos = pos + len('# Test Directory\n')
                    fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                    
                    # Clearning Local Variables
                    fl_loc_stg = '' 
                    #------------------------------------------------------------------------------


                #------------------------------------------------------------------------------
                # Include all the Driver Interface Files 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    envagttopdirpath = envdirpath+'/'+'agents'

                    if mc_env_cfg_pool[a][2] != ['']:
                        envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                        
                        log.debug("mc_list_file : envname %s envagtname_arr %s envagttopdirpath %s!\n"%(envname, envagtname_arr, envagttopdirpath))
                        
                        for e in range (int(envagtname_arr[0])):
                            envagtname = envagtname_arr[e+1]
                        
                            # Directory Path For Environment Monitors
                            envagtdirpath = envagttopdirpath+'/'+envagtname+'_agent'
                         
                            if mc_env_cfg_pool[a][2][e+1][3] != '':
                                envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                
                                log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s!\n"%(envname, envagtdrvname_arr))
                                
                                for e1 in range (int(envagtdrvname_arr[0])):
                                    if len(envagtdrvname_arr) == 1:
                                        envagtdrvname = envagtname 
                                    else:
                                        envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]

                                    envagtdrvintfpath = envagtdirpath+'/'+envagtdrvname+"_interface.sv"
                                    envagtdrvintfwrappath = envagtdirpath+'/'+envagtdrvname+"_interface_wrapper.sv"

                                    fl_loc_stg = fl_loc_stg+("µ%s\n"%(envagtdrvintfpath))
                                    fl_loc_stg = fl_loc_stg+("µ%s\n"%(envagtdrvintfwrappath))
                                    
                                    pos = fl_stg.find('# Interface, Interface Wrapper Files\n')
                                    apos = pos + len('# Interface, Interface Wrapper Files\n')
                                    fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                                    
                                    # Clearning Local Variables
                                    fl_loc_stg = '' 
                #------------------------------------------------------------------------------

                #------------------------------------------------------------------------------
                # Include all the Environment Interface Files 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    envintfdirpath = envdirpath+'/'+'env_interfaces'
                    log.debug("mc_list_file : envintfdirpath %s!\n"%envintfdirpath)
                   
                    if mc_env_cfg_pool[a][7] != []:
                        if mc_env_cfg_pool[a][7][0] != '':
                            envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envintfname_arr = str(mc_env_cfg_pool[a][7][0]).split(",")
                            
                            log.debug("mc_create_phase : envname %s  envintfname_arr %s!\n"%(envname, envintfname_arr))
                            
                            for b in range (int(envintfname_arr[0])):
                                if int(envintfname_arr[0]==1) and len(envintfname_arr) == 1:
                                    envintfname = envname
                                else:
                                    envintfname = envintfname_arr[b+1]
                        
                                envintfpath = envintfdirpath+'/'+envintfname+"_interface.sv"
                                envintfwrappath = envintfdirpath+'/'+envintfname+"_interface_wrapper.sv"

                                fl_loc_stg = fl_loc_stg+("µ%s\n"%(envintfpath))
                                fl_loc_stg = fl_loc_stg+("µ%s\n"%(envintfwrappath))
                                    
                                pos = fl_stg.find('# Interface, Interface Wrapper Files\n')
                                apos = pos + len('# Interface, Interface Wrapper Files\n')
                                fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                                
                                # Clearning Local Variables
                                fl_loc_stg = '' 
                #------------------------------------------------------------------------------

    
                #------------------------------------------------------------------------------
                # Adding the Macros Related Files 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    fl_loc_stg = fl_loc_stg+("µ%s/%s_environment_macros.sv\n"%(envpath, envname))
                    
                    pos = fl_stg.find('# Macros Files\n')
                    apos = pos + len('# Macros Files\n')
                    fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                    
                    # Clearning Local Variables
                    fl_loc_stg = '' 
                #------------------------------------------------------------------------------


                #------------------------------------------------------------------------------
                # Include all the necessary package files
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    envpath = envdirpath+'/'+'env' 
                    #------------------------------------------------------------------------------
                    # Sequence Item Package
                    #------------------------------------------------------------------------------
                    fl_loc_stg = fl_loc_stg+("µ%s/%s_seq_item_package.sv\n"%(envpath, envname))
                    
                    pos = fl_stg.find('# Env Sequence Item Package\n')
                    apos = pos + len('# Env Sequence Item Package\n')
                    fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                    
                    # Clearning Local Variables
                    fl_loc_stg = '' 

                    #------------------------------------------------------------------------------
                    # Sequence Package
                    #------------------------------------------------------------------------------
                    if does_agt_has_seq:
                        fl_loc_stg = fl_loc_stg+("µ%s/%s_seq_package.sv\n"%(envpath, envname))
                        
                        pos = fl_stg.find('# Env Sequence Package\n')
                        apos = pos + len('# Env Sequence Package\n')
                        fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                        
                        # Clearning Local Variables
                        fl_loc_stg = '' 

                    #------------------------------------------------------------------------------
                    # Env Package
                    #------------------------------------------------------------------------------
                    fl_loc_stg = fl_loc_stg+("µ%s/%s_env_package.sv\n"%(envpath, envname))
                    
                    pos = fl_stg.find('# Env Package\n')
                    apos = pos + len('# Env Package\n')
                    fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                    
                    # Clearning Local Variables
                    fl_loc_stg = '' 
                    
                    #------------------------------------------------------------------------------
                    # Env Test Package
                    #------------------------------------------------------------------------------
                    fl_loc_stg = fl_loc_stg+("µ%s/%s_test_package.sv\n"%(envpath, envname))
                    
                    pos = fl_stg.find('# Env Test Package\n')
                    apos = pos + len('# Env Test Package\n')
                    fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                    
                    # Clearning Local Variables
                    fl_loc_stg = '' 

                   
                    # Disabling the tb_top_package as its not requried : 011720
                    # #------------------------------------------------------------------------------
                    # # Top Tb Package
                    # #------------------------------------------------------------------------------
                    # fl_loc_stg = fl_loc_stg+("µ%s_tb_top_package.sv\n"%(envname))
                    # 
                    # pos = fl_stg.find('# Top Tb Package\n')
                    # apos = pos + len('# Top Tb Package\n')
                    # fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                    # 
                    # # Clearning Local Variables
                    # fl_loc_stg = '' 

                #------------------------------------------------------------------------------
                # Adding the tbtop in the respective tbtop.fl 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    #------------------------------------------------------------------------------
                    # TB Top Directory 
                    #------------------------------------------------------------------------------
                    tbtop_fl_loc_stg = tbtop_fl_loc_stg+("µ+incdir+%s\n"%(tbpath))
                    
                    pos = tbtop_fl_stg.find('# TB Top Directory\n')
                    apos = pos + len('# TB Top Directory\n')
                    tbtop_fl_stg = tbtop_fl_stg[:apos]+tbtop_fl_loc_stg+tbtop_fl_stg[apos:]
                    
                    # Clearning Local Variables
                    tbtop_fl_loc_stg = '' 
                    #------------------------------------------------------------------------------
                    
                    
                    #------------------------------------------------------------------------------
                    # TB Top Files 
                    #------------------------------------------------------------------------------
                    tbtop_fl_loc_stg = tbtop_fl_loc_stg+("µ%s/%s_tb_top.sv\n"%(tbpath, envname))
                    
                    pos = tbtop_fl_stg.find('# TB Top Files\n')
                    apos = pos + len('# TB Top Files\n')
                    tbtop_fl_stg = tbtop_fl_stg[:apos]+tbtop_fl_loc_stg+tbtop_fl_stg[apos:]
                    
                    # Clearning Local Variables
                    tbtop_fl_loc_stg = '' 
                    #------------------------------------------------------------------------------     
                    

                #----------------------------------------------------------------------
                # Loading up the env config array content into file 
                #----------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    log.debug("mc_create_phase: Value of fl_stg %s"%(fl_stg))
                    
                    
                    mc_env_fl_input_file = open("%s/%s_environment.f"%(envflpath, envname), "w")
                    #mc_env_fl_input_file = open("%s/%s_environment.fl"%(envrunpath, envname), "w")
                    #mc_env_fl_input_file = open("%s/%s_environment.fl"%(envdocspath, envname), "w")
                    mc_env_fl_arr = fl_stg.split('µ')
                    for lines in mc_env_fl_arr:
                        mc_env_fl_input_file.write(lines)
                    mc_env_fl_input_file.close()
                    
                    mc_tbtop_fl_input_file = open("%s/%s_tbtop.f"%(envflpath, envname), "w")
                    #mc_tbtop_fl_input_file = open("%s/%s_tbtop.fl"%(envrunpath, envname), "w")
                    #mc_tbtop_fl_input_file = open("%s/%s_tbtop.fl"%(envdocspath, envname), "w")
                    mc_tbtop_fl_arr = tbtop_fl_stg.split('µ')
                    for lines in mc_tbtop_fl_arr:
                        mc_tbtop_fl_input_file.write(lines)
                    mc_tbtop_fl_input_file.close()
                    #----------------------------------------------------------------------
            
                #----------------------------------------------------------------------
                # Cleaning the local Variable 
                #----------------------------------------------------------------------
                does_agt_has_seq = 0
                fl_stg = ''
                fl_loc_stg = ''
            else:
                log.debug("mc_list_file : Update List files with Only the Necessary files needed for the environment!\n")
                
                # Calling the env file create API
                if (mc_env_cfg_pool[a][0]):
                    envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                    envname_org = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                    if "__c" in envname:
                        mc_curr_env_set_c = 1
                        envname = envname.replace("__c","")
                        
                        log.debug("mc_list_file : envname %s mc_curr_env_set_c %d!\n"%(envname, mc_curr_env_set_c))
                        
                        #-----------------------------------------------------------------------------------------
                        # Creating the env directory structure only if its like __c for the environment as a whole!
                        #-----------------------------------------------------------------------------------------
                        if mc_env_cfg_pool[a][6] != []:
                            if mc_env_cfg_pool[a][6] == 'pwd':
                                envdirpath_full = str(os.popen('pwd').read()).strip()
                            else:
                                envdirpath_full = str(mc_env_cfg_pool[a][6]).strip('[,],\'')
                        
                            # Director Path For Env 
                            envdirpath_full = envdirpath_full+'/'+envname+'_env'   
                            envdirpath = "$%s_TB_DIR"%(envname.upper())
                            
                            log.debug("mc_list_file : envdirpath %s, envdirpath_full %s!\n"%(envdirpath, envdirpath_full))
                        #-----------------------------------------------------------------------------------------
                    else:
                        envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                        
                        if "__s" in envname:
                            mc_curr_env_set_s = 1
                            envname = envname.replace("__s","")

                        log.debug("mc_list_file : envname %s!\n"%(envname))

                        # Just creating the envdirpath for other components
                        if mc_env_cfg_pool[a][6] != []:
                            if mc_env_cfg_pool[a][6] == 'pwd':
                                envdirpath_full = str(os.popen('pwd').read()).strip()
                            else:
                                envdirpath_full = str(mc_env_cfg_pool[a][6]).strip('[,],\'')
                        
                            # Director Path For Env 
                            envdirpath_full = envdirpath_full+'/'+envname+'_env'   
                            envdirpath = "$%s_TB_DIR"%(envname.upper())
                            
                            log.debug("mc_list_file : envdirpath %s, envdirpath_full %s!\n"%(envdirpath, envdirpath_full))
                    
                    envnamefull = envname+"_env"
                    log.debug("mc_list_file : envname %s envnamefull %s!\n"%(envname, envnamefull))
                
                
                #-----------------------------------------------------------------------------------------
                # Directory Path For Misc 
                #-----------------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    envpath = envdirpath+'/'+'env' 
                    envdocspath = envdirpath+'/'+'docs'
                    envrunpath = envdirpath_full+'/'+'run'
                    envflpath = envdirpath_full+'/'+'filelist'
                    envscriptspath = envdirpath+'/'+'scripts'
                    tbpath = envdirpath+'/'+'tb'

                
                #------------------------------------------------------------------------------
                # Code for creating the necessary .fl files list 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    mc_env_fl_arr = []
                    mc_env_fl_input_file = open("%s/%s_environment.f"%(envflpath, envname),"r+")
                    #mc_env_fl_input_file = open("%s/%s_environment.fl"%(envrunpath, envname),"r+")
                    #mc_env_fl_input_file = open("%s/%s_environment.fl"%(envdocspath, envname),"r+")
                   
                    mc_tbtop_fl_arr = []
                    mc_tbtop_fl_input_file = open("%s/%s_tbtop.f"%(envflpath, envname),"r+")
                    #mc_tbtop_fl_input_file = open("%s/%s_tbtop.fl"%(envrunpath, envname),"r+")
                    #mc_tbtop_fl_input_file = open("%s/%s_tbtop.fl"%(envdocspath, envname),"r+")

                    fl_stg = ''
                    tbtop_fl_stg = ''
                    fl_loc_stg = ''
                    tbtop_fl_loc_stg = ''

                    for lines in mc_env_fl_input_file:
                        fl_stg = fl_stg+lines+'µ' 
                    log.debug("mc_list_file: Value of fl_stg %s"%(fl_stg))
                   
                    for lines in mc_tbtop_fl_input_file:
                        tbtop_fl_stg = tbtop_fl_stg+lines+'µ' 
                    log.debug("mc_list_file: Value of tbtop_fl_stg %s"%(tbtop_fl_stg))

                
                #------------------------------------------------------------------------------
                # Code to modify the my $ for the Environment Path 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]) and mc_curr_env_set_c == 1:
                    envdirpath_hir = envdirpath.split("/"); envhir = ''
                    log.debug("mc_list_file: Value of envdirpath %s"%(envdirpath))
                    
                    for i in range (len(envdirpath_hir)):
                        if "_env" in envdirpath_hir[i]:
                            envhir = envhir+"/"+envdirpath_hir[i] 
                    log.debug("mc_list_file: Value of envhir %s"%(envhir))
                    
                #------------------------------------------------------------------------------
                # Adding Sub-Environment List Files In the Parent Environment 
                #------------------------------------------------------------------------------
                if mc_env_cfg_pool[a][1] != '':
                    subenvname_arr = str(mc_env_cfg_pool[a][1]).split(",")
                    for m in range (int(subenvname_arr[0])):
                        # if a == 0:
                        #     whattosearch = envname_org+","+(subenvname_arr[m+1]).split(":")[0]   
                        # else:
                        #     whattosearch = envname+","+(subenvname_arr[m+1]).split(":")[0]   
                       
                        subenvname_tmp = subenvname_arr[m+1]
                           
                        if len(subenvname_tmp.split(":"))>1:
                            if "__c" in subenvname_tmp.split(":")[0]:
                                subenvname = (subenvname_tmp.split(":")[0]).replace("__c","")
                            elif "__s" in subenvname_tmp.split(":")[0]:
                                subenvname = (subenvname_tmp.split(":")[0]).replace("__s","")
                            else:
                                subenvname = subenvname_tmp.split(":")[0]
                        else:
                            if "__c" in subenvname_tmp:
                                subenvname = subenvname_tmp.replace("__c","")
                            elif "__s" in subenvname_tmp:
                                subenvname = subenvname_tmp.replace("__s","")
                            else:
                                subenvname = subenvname_tmp

                        whattosearch = envname_org+","+(subenvname_arr[m+1]).split(":")[0]   
                        # whattosearch = envname+","+subenvname

                        whattosearch_idx = self.find_index(whattosearch, mc_env_cfg_pool)
                        log.debug("mc_list_file: whattosearch %s, whattosearch_idx %s\n"%(whattosearch, whattosearch_idx))

                        if "__c" in subenvname_arr[m+1] or mc_curr_env_set_c == 1 or ("__s" in subenvname_arr[m+1] and mc_curr_env_set_s == 0):
                            # subenvflpath = "-f " + mc_env_cfg_pool[whattosearch_idx[0]][6]+"/"+"%s_env"%(subenvname_arr[m+1].split(":")[0])+"/docs"+"/%s_environment.fl\n"%(subenvname_arr[m+1].split(":")[0])
                            #subenvflpath = "-f " + mc_env_cfg_pool[whattosearch_idx[0]][6]+"/"+"%s_env"%(subenvname)+"/docs"+"/%s_environment.fl\n"%(subenvname)
                            #ORG subenvflpath = "-f " + mc_env_cfg_pool[whattosearch_idx[0]][6]+"/"+"%s_env"%(subenvname)+"/run"+"/%s_environment.fl\n"%(subenvname)
                            #subenvflpath = "-f " + "$%s_TB_DIR"%(subenvname.upper())+"/run"+"/%s_environment.f\n"%(subenvname)
                            subenvflpath = "-f " + "$%s_TB_DIR"%(subenvname.upper())+"/filelist"+"/%s_environment.f\n"%(subenvname)
                            log.debug("mc_list_file: subenvflpath %s\n"%(subenvflpath))

                            pos = fl_stg.find('# Sub-Environment List Files\n')
                            apos = pos + len('# Sub-Environment List Files\n')
                            fl_stg = fl_stg[:apos]+subenvflpath+fl_stg[apos:]

                
                #------------------------------------------------------------------------------
                # Adding Environment Directory  
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]) and mc_curr_env_set_c == 1:
                    fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envdirpath))
                    
                    envpath = envdirpath+"/"+"env"
                    fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envpath))
                    
                    pos = fl_stg.find('# Environment Directory\n')
                    apos = pos + len('# Environment Directory\n')
                    fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                    
                    # Clearning Local Variables
                    fl_loc_stg = '' 
                
                #------------------------------------------------------------------------------
                # Directory Path For Environment Misc Directories 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]) and mc_curr_env_set_c == 1:
                    # Directory Path For Other Env Directory 
                    # envtrkpath = envdirpath+'/'+'trackers'
                    
                    envchkrpath = envdirpath+'/'+'checkers'
                    
                    # envconfilepath = envdirpath+'/'+'conn_file'
                    
                    #log.debug("mc_list_file : envtrkpath %s, envchkrpath %s, envconfilepath %s!\n"%(envtrkpath, envchkrpath, envconfilepath))
                    log.debug("mc_list_file : envchkrpath %s!\n"%(envchkrpath))


                #------------------------------------------------------------------------------
                # Directory Path For Environment Interface Files  
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]) and mc_env_cfg_pool[a][7] != []:
                    if mc_env_cfg_pool[a][7][0] != '':
                        envintfdirpath = envdirpath+'/'+'env_interfaces'
                        log.debug("mc_list_file : envintfdirpath %s!\n"%envintfdirpath)
                        
                        fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envintfdirpath))
                        
                        #if self.substr_str_search('__c', mc_env_cfg_pool[a][7]) or mc_curr_env_set_c == 1:
                        if mc_curr_env_set_c == 1:
                            pos = fl_stg.find('# Environment Interface Files Directory\n')
                            apos = pos + len('# Environment Interface Files Directory\n')
                            fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                            
                        # Clearning Local Variables
                        fl_loc_stg = '' 
                #------------------------------------------------------------------------------
                   
               
                #------------------------------------------------------------------------------
                # Creating directory for environment RAL, Memory Models 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    envmdldirpath = envdirpath+'/'+'models'
                    log.debug("mc_list_file : envmdldirpath %s!\n"%envmdldirpath)

                    fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envmdldirpath))
                    
                    #if self.substr_str_search('__c', mc_env_cfg_pool[a][3]) or mc_curr_env_set_c == 1:
                    if mc_curr_env_set_c == 1:
                        pos = fl_stg.find('# Environment RAL, Memory Models Directory\n')
                        apos = pos + len('# Environment RAL, Memory Models Directory\n')
                        fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                        
                    # Clearning Local Variables
                    fl_loc_stg = '' 
                #------------------------------------------------------------------------------
                
   
                #------------------------------------------------------------------------------
                # Creating directory for environment monitors
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    envmondirpath = envdirpath+'/'+'env_monitors'
                    log.debug("mc_list_file : envmondirpath %s!\n"%envmondirpath)

                    fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envmondirpath))
                    
                    #if self.substr_str_search('__c', mc_env_cfg_pool[a][3]) or mc_curr_env_set_c == 1:
                    if mc_curr_env_set_c == 1:
                        pos = fl_stg.find('# Environment Monitor Files Directory\n')
                        apos = pos + len('# Environment Monitor Files Directory\n')
                        fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                        
                    # Clearning Local Variables
                    fl_loc_stg = '' 
                #------------------------------------------------------------------------------


                #------------------------------------------------------------------------------
                # Creating directory for environment and test sequences directory 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    envseqdirpath = envdirpath+'/'+'env_sequences'
                    log.debug("mc_list_file : envseqdirpath %s!\n"%envseqdirpath)

                    fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envseqdirpath))
                    
                    #if self.substr_str_search('__c', mc_env_cfg_pool[a][3]) or mc_curr_env_set_c == 1:
                    if mc_curr_env_set_c == 1:
                        pos = fl_stg.find('# Environment and Test Sequence Files Directory\n')
                        apos = pos + len('# Environment and Test Sequence Files Directory\n')
                        fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                        
                    # Clearning Local Variables
                    fl_loc_stg = '' 
                #------------------------------------------------------------------------------

                
                #------------------------------------------------------------------------------
                # Creating directory for environment scoreboards
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    envscbdirpath = envdirpath+'/'+'scoreboards'
                    log.debug("mc_list_file : envscbdirpath %s!\n"%envscbdirpath)

                    fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envscbdirpath))
                    
                    #if self.substr_str_search('__c', mc_env_cfg_pool[a][4]) or mc_curr_env_set_c == 1:
                    if mc_curr_env_set_c == 1:
                        pos = fl_stg.find('# Environment Scoreboard Files Directory\n')
                        apos = pos + len('# Environment Scoreboard Files Directory\n')
                        fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                        
                    # Clearning Local Variables
                    fl_loc_stg = '' 
                #------------------------------------------------------------------------------
    

                #------------------------------------------------------------------------------
                # Calling the env Agent file create API
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]) and mc_env_cfg_pool[a][2] != ['']:
                    envagttopdirpath = envdirpath+'/'+'agents'

                    fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envagttopdirpath))
                    
                    #if self.substr_str_search('__c', mc_env_cfg_pool[a][2]) or mc_curr_env_set_c == 1:
                    if mc_curr_env_set_c == 1:
                        pos = fl_stg.find('# Environment Agents Directory\n')
                        apos = pos + len('# Environment Agents Directory\n')
                        fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                        
                    # Clearning Local Variables
                    fl_loc_stg = '' 
                    #------------------------------------------------------------------------------

                    envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                    
                    log.debug("mc_list_file : envname %s mc_curr_env_set_c %d envagtname_arr %s envagttopdirpath %s!\n"%(envname, mc_curr_env_set_c, envagtname_arr, envagttopdirpath))

                    for e in range (int(envagtname_arr[0])):
                        if "__c" in envagtname_arr[e+1]:
                            #envagtname = envname+"_"+envagtname_arr[e+1].replace("__c","")
                            envagtname = envagtname_arr[e+1].replace("__c","")
                        else:
                            #envagtname = envname+"_"+envagtname_arr[e+1]
                            envagtname = envagtname_arr[e+1]
                            
                        # Directory Path For Environment Agents 
                        envagtdirpath = envagttopdirpath+'/'+envagtname+'_agent'
                        
                        fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envagtdirpath))
                        
                        if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1:
                            mc_curr_env_agt_set_c = 1
                            if self.substr_str_search('__c', envagtname_arr[e+1]) or mc_curr_env_agt_set_c == 1:
                                pos = fl_stg.find('# Agents Directory\n')
                                apos = pos + len('# Agents Directory\n')
                                fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                                
                        # Clearning Local Variables
                        fl_loc_stg = '' 
                        #------------------------------------------------------------------------------
                        
                        envagtseqdirpath = envagtdirpath+'/'+'sequences'
                       
                        fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envagtseqdirpath))
                        
                        if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1:
                            mc_curr_env_agt_set_c = 1
                            if self.substr_str_search('__c', envagtname_arr[e+1]) or mc_curr_env_agt_set_c == 1:
                                pos = fl_stg.find('# Agents Sequence Directory\n')
                                apos = pos + len('# Agents Sequence Directory\n')
                                fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                                
                        # Clearning Local Variables
                        fl_loc_stg = '' 
                        #------------------------------------------------------------------------------

                        # Clearning the agent related variable 
                        mc_curr_env_agt_set_c = 0

                        #------------------------------------------------------------------------------
                        # Code to identify if the respective Env has sequences or not
                        #------------------------------------------------------------------------------
                        if mc_env_cfg_pool[a][2][e+1][3] != '':
                            does_agt_has_seq = 1


                #------------------------------------------------------------------------------
                # Creating the Test Directory Path 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]) and mc_curr_env_set_c == 1:
                    # Directory Path For ENV tests 
                    envtestdirpath = envdirpath+'/'+'tests'
                    log.debug("mc_list_file : envtestdirpath %s!\n"%envtestdirpath)
           
                    fl_loc_stg = fl_loc_stg+("µ+incdir+%s\n"%(envtestdirpath))
                    
                    if mc_curr_env_set_c == 1:
                        pos = fl_stg.find('# Test Directory\n')
                        apos = pos + len('# Test Directory\n')
                        fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                        
                    # Clearning Local Variables
                    fl_loc_stg = '' 
                    #------------------------------------------------------------------------------

                
                #------------------------------------------------------------------------------
                # Include all the Driver Interface Files 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    envagttopdirpath = envdirpath+'/'+'agents'

                    if mc_env_cfg_pool[a][2] != ['']:
                        envagtname_arr = str(mc_env_cfg_pool[a][2][0]).split(",")
                        
                        log.debug("mc_list_file : envname %s envagtname_arr %s envagttopdirpath %s!\n"%(envname, envagtname_arr, envagttopdirpath))
                        
                        for e in range (int(envagtname_arr[0])):
                            # Clearning Local Variables For Agent level 
                            mc_curr_env_agt_set_c = 0
                            mc_curr_env_agt_set_s = 0
                            
                            if "__c" in envagtname_arr[e+1]:
                                envagtname = (envagtname_arr[e+1]).replace("__c","")
                            elif "__s" in envagtname_arr[e+1]:
                                envagtname = (envagtname_arr[e+1]).replace("__s","")
                            else:
                                envagtname = (envagtname_arr[e+1])
                              
                            # Setting the _c or _s variables for the agent  
                            if "__c" in envagtname_arr[e+1] or mc_curr_env_set_c == 1:
                                mc_curr_env_agt_set_c = 1
                            elif "__s" in envagtname_arr[e+1] or mc_curr_env_set_s == 1:
                                mc_curr_env_agt_set_s = 1

                            # Directory Path For Environment Monitors
                            envagtdirpath = envagttopdirpath+'/'+envagtname+'_agent'
                         
                            if mc_env_cfg_pool[a][2][e+1][3] != '':
                                envagtdrvname_arr = str(mc_env_cfg_pool[a][2][e+1][3]).split(",")
                                
                                log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s!\n"%(envname, envagtdrvname_arr))
                                
                                for e1 in range (int(envagtdrvname_arr[0])):
                                    if (len(envagtdrvname_arr) == 1 and "__c" in envagtdrvname_arr) or (len(envagtdrvname_arr) == 1 and "__s" in envagtdrvname_arr) or (len(envagtdrvname_arr) == 1 and int(envagtdrvname_arr[0]) == 1):
                                        envagtdrvname = envagtname 
                                       
                                        log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdrvname %s!\n"%(envname, envagtdrvname_arr, envagtdrvname))

                                        if "__c" in envagtdrvname_arr or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr and mc_curr_env_agt_set_s == 0): 
                                            envagtdrvintfpath = envagtdirpath+'/'+envagtdrvname+"_interface.sv"
                                            envagtdrvintfwrappath = envagtdirpath+'/'+envagtdrvname+"_interface_wrapper.sv"

                                            fl_loc_stg = fl_loc_stg+("µ%s\n"%(envagtdrvintfpath))
                                            fl_loc_stg = fl_loc_stg+("µ%s\n"%(envagtdrvintfwrappath))
                                            
                                            pos = fl_stg.find('# Interface, Interface Wrapper Files\n')
                                            apos = pos + len('# Interface, Interface Wrapper Files\n')
                                            fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                                    else:
                                        if "__c" in envagtdrvname_arr[e1+1] or "__s" in envagtdrvname_arr[e1+1]: 
                                            envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1].replace("__c","").replace("__s","")
                                        else:
                                            envagtdrvname = envagtname+"_"+envagtdrvname_arr[e1+1]
                                        
                                        log.debug("mc_edit_phase : envname %s  envagtdrvname_arr %s envagtdrvname %s!\n"%(envname, envagtdrvname_arr, envagtdrvname))

                                        if "__c" in envagtdrvname_arr[e1+1] or mc_curr_env_agt_set_c == 1 or ("__s" in envagtdrvname_arr[e1+1] and mc_curr_env_agt_set_s == 0):     
                                            envagtdrvintfpath = envagtdirpath+'/'+envagtdrvname+"_interface.sv"
                                            envagtdrvintfwrappath = envagtdirpath+'/'+envagtdrvname+"_interface_wrapper.sv"

                                            fl_loc_stg = fl_loc_stg+("µ%s\n"%(envagtdrvintfpath))
                                            fl_loc_stg = fl_loc_stg+("µ%s\n"%(envagtdrvintfwrappath))
                                    
                                            pos = fl_stg.find('# Interface, Interface Wrapper Files\n')
                                            apos = pos + len('# Interface, Interface Wrapper Files\n')
                                            fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                                            
                                    # Clearning Local Variables
                                    fl_loc_stg = '' 
                        # Clearning Local Variables For Agent level 
                        mc_curr_env_agt_set_c = 0
                        mc_curr_env_agt_set_s = 0
                #------------------------------------------------------------------------------

                #------------------------------------------------------------------------------
                # Include all the Environment Interface Files 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    envintfdirpath = envdirpath+'/'+'env_interfaces'
                    log.debug("mc_list_file : envintfdirpath %s!\n"%envintfdirpath)
                   
                    if mc_env_cfg_pool[a][7] != []:
                        if mc_env_cfg_pool[a][7][0] != '':
                            # envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                            envintfname_arr = str(mc_env_cfg_pool[a][7][0]).split(",")
                            
                            log.debug("mc_create_phase : envname %s  envintfname_arr %s!\n"%(envname, envintfname_arr))
                            
                            for b in range (int(envintfname_arr[0])):
                                if (len(envintfname_arr) == 1 and "__c" in envintfname_arr[0]) or (len(envintfname_arr) == 1 and "__s" in envintfname_arr[0]) or (len(envintfname_arr) == 1 and int(envintfname_arr[0]) == 1):
                                    envintfname = envname
                                    if "__c" in envintfname_arr or mc_curr_env_set_c == 1:
                                        envintfpath = envintfdirpath+'/'+envintfname+"_interface.sv"
                                        envintfwrappath = envintfdirpath+'/'+envintfname+"_interface_wrapper.sv"

                                        fl_loc_stg = fl_loc_stg+("µ%s\n"%(envintfpath))
                                        fl_loc_stg = fl_loc_stg+("µ%s\n"%(envintfwrappath))
                                            
                                        pos = fl_stg.find('# Interface, Interface Wrapper Files\n')
                                        apos = pos + len('# Interface, Interface Wrapper Files\n')
                                        fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                                else:
                                    if "__c" in envintfname_arr[b+1]:
                                        envintfname = envintfname_arr[b+1].replace("__c","")
                                    elif "__s" in envintfname_arr[b+1]:
                                        envintfname = envintfname_arr[b+1].replace("__s","")
                                    else:
                                        envintfname = envintfname_arr[b+1]
                        
                                    if "__c" in envintfname_arr[b+1] or mc_curr_env_set_c == 1: 
                                        envintfpath = envintfdirpath+'/'+envintfname+"_interface.sv"
                                        envintfwrappath = envintfdirpath+'/'+envintfname+"_interface_wrapper.sv"

                                        fl_loc_stg = fl_loc_stg+("µ%s\n"%(envintfpath))
                                        fl_loc_stg = fl_loc_stg+("µ%s\n"%(envintfwrappath))
                                            
                                        pos = fl_stg.find('# Interface, Interface Wrapper Files\n')
                                        apos = pos + len('# Interface, Interface Wrapper Files\n')
                                        fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                                        
                                # Clearning Local Variables
                                fl_loc_stg = '' 
                #------------------------------------------------------------------------------

                #------------------------------------------------------------------------------
                # Adding the Macros Related Files 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]) and mc_curr_env_set_c == 1:
                    fl_loc_stg = fl_loc_stg+("µ%s/%s_environment_macros.sv\n"%(envpath, envname))
                    
                    pos = fl_stg.find('# Macros Files\n')
                    apos = pos + len('# Macros Files\n')
                    fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                    
                    # Clearning Local Variables
                    fl_loc_stg = '' 
                #------------------------------------------------------------------------------

                #------------------------------------------------------------------------------
                # Include all the necessary package files
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]) and mc_curr_env_set_c == 1:
                    #------------------------------------------------------------------------------
                    # Sequence Item Package
                    #------------------------------------------------------------------------------
                    fl_loc_stg = fl_loc_stg+("µ%s/%s_seq_item_package.sv\n"%(envpath, envname))
                    
                    pos = fl_stg.find('# Env Sequence Item Package\n')
                    apos = pos + len('# Env Sequence Item Package\n')
                    fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                    
                    # Clearning Local Variables
                    fl_loc_stg = '' 

                    #------------------------------------------------------------------------------
                    # Sequence Package
                    #------------------------------------------------------------------------------
                    if does_agt_has_seq:
                        fl_loc_stg = fl_loc_stg+("µ%s/%s_seq_package.sv\n"%(envpath, envname))
                        
                        pos = fl_stg.find('# Env Sequence Package\n')
                        apos = pos + len('# Env Sequence Package\n')
                        fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                        
                        # Clearning Local Variables
                        fl_loc_stg = '' 

                    #------------------------------------------------------------------------------
                    # Env Package
                    #------------------------------------------------------------------------------
                    fl_loc_stg = fl_loc_stg+("µ%s/%s_env_package.sv\n"%(envpath, envname))
                    
                    pos = fl_stg.find('# Env Package\n')
                    apos = pos + len('# Env Package\n')
                    fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                    
                    # Clearning Local Variables
                    fl_loc_stg = '' 
                   
                    
                    #------------------------------------------------------------------------------
                    # Env Test Package
                    #------------------------------------------------------------------------------
                    fl_loc_stg = fl_loc_stg+("µ%s/%s_test_package.sv\n"%(envpath, envname))
                    
                    pos = fl_stg.find('# Env Test Package\n')
                    apos = pos + len('# Env Test Package\n')
                    fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                    
                    # Clearning Local Variables
                    fl_loc_stg = '' 

                   
                    # Disabling the tb_top_package as its not requried : 011720
                    # #------------------------------------------------------------------------------
                    # # Top Tb Package
                    # #------------------------------------------------------------------------------
                    # fl_loc_stg = fl_loc_stg+("µ%s_tb_top_package.sv\n"%(envname))
                    # 
                    # pos = fl_stg.find('# Top Tb Package\n')
                    # apos = pos + len('# Top Tb Package\n')
                    # fl_stg = fl_stg[:apos]+fl_loc_stg+fl_stg[apos:]
                    # 
                    # # Clearning Local Variables
                    # fl_loc_stg = '' 


                #------------------------------------------------------------------------------
                # Adding the tbtop in the respective tbtop.fl 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]) and mc_curr_env_set_c == 1:
                    #------------------------------------------------------------------------------
                    # TB Top Directory 
                    #------------------------------------------------------------------------------
                    tbtop_fl_loc_stg = tbtop_fl_loc_stg+("µ+incdir+%s\n"%(tbpath))
                    
                    pos = tbtop_fl_stg.find('# TB Top Directory\n')
                    apos = pos + len('# TB Top Directory\n')
                    tbtop_fl_stg = tbtop_fl_stg[:apos]+tbtop_fl_loc_stg+tbtop_fl_stg[apos:]
                    
                    # Clearning Local Variables
                    tbtop_fl_loc_stg = '' 
                    
                    
                    #------------------------------------------------------------------------------
                    # TB Top Files 
                    #------------------------------------------------------------------------------
                    tbtop_fl_loc_stg = tbtop_fl_loc_stg+("µ%s/%s_tb_top.sv\n"%(tbpath, envname))
                    
                    pos = tbtop_fl_stg.find('# TB Top Files\n')
                    apos = pos + len('# TB Top Files\n')
                    tbtop_fl_stg = tbtop_fl_stg[:apos]+tbtop_fl_loc_stg+tbtop_fl_stg[apos:]
                    
                    # Clearning Local Variables
                    tbtop_fl_loc_stg = '' 
                #------------------------------------------------------------------------------


                #----------------------------------------------------------------------
                # Loading up the env config array content into file 
                #----------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    log.debug("mc_create_phase: Value of fl_stg %s, tbtop_fl_stg %s"%(fl_stg, tbtop_fl_stg))
                    
                    
                    mc_env_fl_input_file = open("%s/%s_environment.f"%(envflpath, envname), "w")
                    #mc_env_fl_input_file = open("%s/%s_environment.fl"%(envrunpath, envname), "w")
                    #mc_env_fl_input_file = open("%s/%s_environment.fl"%(envdocspath, envname), "w")
                    mc_env_fl_arr = fl_stg.split('µ')
                    for lines in mc_env_fl_arr:
                        mc_env_fl_input_file.write(lines)
                    mc_env_fl_input_file.close()
                   
                    mc_tbtop_fl_input_file = open("%s/%s_tbtop.f"%(envflpath, envname), "w")
                    #mc_tbtop_fl_input_file = open("%s/%s_tbtop.fl"%(envrunpath, envname), "w")
                    #mc_tbtop_fl_input_file = open("%s/%s_tbtop.fl"%(envdocspath, envname), "w")
                    mc_tbtop_fl_arr = tbtop_fl_stg.split('µ')
                    for lines in mc_tbtop_fl_arr:
                        mc_tbtop_fl_input_file.write(lines)
                    mc_tbtop_fl_input_file.close()
                    #----------------------------------------------------------------------


                # Clearning the variable 
                mc_curr_env_set_c = 0
                does_agt_has_seq = 0
                fl_stg = ''
                fl_loc_stg = ''
            
            #----------------------------------------------------------------------
            # Cleaning the const variables 
            #----------------------------------------------------------------------
            if mc_curr_env_set_c:
                mc_curr_env_set_c = 0
            if mc_curr_env_set_s:
                mc_curr_env_set_s = 0
            #----------------------------------------------------------------------


    def mc_tb_setup(self):
        global mc_env_cfg_pool
        global create_stitch
        global stitch_only
        global cxn_only
        global ei_only
        global mc_curr_env_set_c 
        global mc_curr_env_set_s 

        log.debug("mc_tb_setup : Calling the mc_tb_setup! mc_env_cfg_pool %s, size of mc_env_cfg_pool %d\n"%(mc_env_cfg_pool, len(mc_env_cfg_pool)))
        
        # Cycle through all the environment and create all the files
        for a in range (len(mc_env_cfg_pool)):
            if not create_stitch and not stitch_only and not cxn_only and not ei_only:
                log.debug("mc_tb_setup : List all the directory !\n")
            
                envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                log.debug("mc_tb_setup : envname %s !\n"%(envname))

                #------------------------------------------------------------------------------
                # Creating Directory Structure For Environment, Scripts 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    if mc_env_cfg_pool[a][6] != []:
                        if mc_env_cfg_pool[a][6] == 'pwd':
                            envdirpath = str(os.popen('pwd').read()).strip()
                        else:
                            envdirpath = str(mc_env_cfg_pool[a][6]).strip('[,],\'')
                    
                if (mc_env_cfg_pool[a][0]):
                    # Environment Directory Path
                    envdirpath = envdirpath+'/'+envname+'_env'   
                    log.debug("mc_tb_setup : envdirpath %s!\n"%(envdirpath))
                    
                    envscriptspath = envdirpath+'/'+'scripts'
                    log.debug("mc_tb_setup : envscriptspath %s!\n"%(envscriptspath))
                
                #------------------------------------------------------------------------------
                # Code for creating the necessary environment setup variables 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    mc_env_tb_setup_arr = []
                    mc_env_tb_setup_input_file = open("%s/%s_tb_setup.sh"%(envscriptspath, envname),"r+")
                   
                    tb_setup_stg = ''
                    tb_setup_loc_stg = ''

                    for lines in mc_env_tb_setup_input_file:
                        tb_setup_stg = tb_setup_stg+lines+'µ' 
                    log.debug("mc_tb_setup: Value of tb_setup_stg %s"%(tb_setup_stg))
                
                #------------------------------------------------------------------------------
                # Adding Environment Sourcing Simulation Environment Variables 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    # Source sub env variable path 
                    tbsource = "setenv %s_TB_DIR %s\n"%(envname.upper(), envdirpath)
                    log.debug("mc_tb_setup: tbsource %s\n"%(tbsource))

                    pos = tb_setup_stg.find('# Source Simulation Environment Variables\n')
                    apos = pos + len('# Source Simulation Environment Variables\n')
                    tb_setup_stg = tb_setup_stg[:apos]+tbsource+tb_setup_stg[apos:]


                #------------------------------------------------------------------------------
                # Adding Sub-Environment Sourcing Simulation Environment Variables 
                #------------------------------------------------------------------------------
                if mc_env_cfg_pool[a][1] != '':
                    subenv_arr = str(mc_env_cfg_pool[a][1]).split(",")
                    for m in range (int(subenv_arr[0])):
                        whattosearch = envname+","+(subenv_arr[m+1]).split(":")[0]
                        whattosearch_idx = self.find_index(whattosearch, mc_env_cfg_pool)
                        log.debug("mc_tb_setup: whattosearch %s, whattosearch_idx %s\n"%(whattosearch, whattosearch_idx))
           
                        subenvname = (subenv_arr[m+1]).split(":")[0]
                        subenvdirpath = str(mc_env_cfg_pool[whattosearch_idx[0]][6])+"/"+subenvname+"_env"
                        log.debug("mc_tb_setup: subenvname %s, subenvdirpath %s\n"%(subenvname, subenvdirpath))

                        # Source sub env variable path 
                        subtbsource = "setenv %s_TB_DIR %s\n"%(subenvname.upper(), subenvdirpath)
                        log.debug("mc_tb_setup: subtbsource %s\n"%(subtbsource))

                        pos = tb_setup_stg.find('# Source Simulation Environment Variables\n')
                        apos = pos + len('# Source Simulation Environment Variables\n')
                        tb_setup_stg = tb_setup_stg[:apos]+subtbsource+tb_setup_stg[apos:]


                #----------------------------------------------------------------------
                # Loading up the tb setup source onto file 
                #----------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    log.debug("mc_tb_setup: Value of tb_setup_stg %s"%(tb_setup_stg))
                    
                    mc_env_tb_setup_input_file = open("%s/%s_tb_setup.sh"%(envscriptspath, envname), "w")
                    mc_env_tb_setup_arr = tb_setup_stg.split('µ')
                    for lines in mc_env_tb_setup_arr:
                        mc_env_tb_setup_input_file.write(lines)
                    mc_env_tb_setup_input_file.close()
                    #----------------------------------------------------------------------
            
                #----------------------------------------------------------------------
                # Cleaning the local Variable 
                #----------------------------------------------------------------------
                tb_setup_stg = ''
                tb_setup_loc_stg = ''
            else:
                log.debug("mc_tb_setup : Update the tb source file with Only New Environment is created / stitched!\n")
                if (mc_env_cfg_pool[a][0]):
                    envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                    envname_org = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                    if "__c" in envname:
                        mc_curr_env_set_c = 1
                        envname = envname.replace("__c","")
                        
                        log.debug("mc_tb_setup : envname %s mc_curr_env_set_c %d!\n"%(envname, mc_curr_env_set_c))
                        
                        #-----------------------------------------------------------------------------------------
                        # Creating the env directory structure only if its like __c for the environment as a whole!
                        #-----------------------------------------------------------------------------------------
                        if mc_env_cfg_pool[a][6] != []:
                            if mc_env_cfg_pool[a][6] == 'pwd':
                                envdirpath = str(os.popen('pwd').read()).strip()
                            else:
                                envdirpath = str(mc_env_cfg_pool[a][6]).strip('[,],\'')
                        
                            # Director Path For Env 
                            envdirpath = envdirpath+'/'+envname+'_env'   
                            log.debug("mc_tb_setup : envdirpath %s!\n"%envdirpath)
                            
                        #-----------------------------------------------------------------------------------------
                    else:
                        envname = ((mc_env_cfg_pool[a][0].split(","))[1]).split(":")[0]
                        
                        if "__s" in envname:
                            mc_curr_env_set_s = 1
                            envname = envname.replace("__s","")

                        log.debug("mc_tb_setup : envname %s!\n"%(envname))

                        # Just creating the envdirpath for other components
                        if mc_env_cfg_pool[a][6] != []:
                            if mc_env_cfg_pool[a][6] == 'pwd':
                                envdirpath = str(os.popen('pwd').read()).strip()
                            else:
                                envdirpath = str(mc_env_cfg_pool[a][6]).strip('[,],\'')
                        
                            # Director Path For Env 
                            envdirpath = envdirpath+'/'+envname+'_env'   
                            log.debug("mc_list_file : envdirpath %s!\n"%envdirpath)
                    
                    envnamefull = envname+"_env"
                    log.debug("mc_list_file : envname %s envnamefull %s!\n"%(envname, envnamefull))
                
                
                #-----------------------------------------------------------------------------------------
                # Directory Path For Scripts
                #-----------------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    envscriptspath = envdirpath+'/'+'scripts'

                
                #------------------------------------------------------------------------------
                # Code for creating the necessary environment source file 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    mc_env_tb_setup_arr = []
                    mc_env_tb_setup_input_file = open("%s/%s_tb_setup.sh"%(envscriptspath, envname),"r+")
                   
                    tb_setup_stg = ''
                    tb_setup_loc_stg = ''

                    for lines in mc_env_tb_setup_input_file:
                        tb_setup_stg = tb_setup_stg+lines+'µ' 
                    log.debug("mc_tb_setup: Value of tb_setup_stg %s"%(tb_setup_stg))
               

                #------------------------------------------------------------------------------
                # Adding Environment Sourcing Simulation Environment Variables 
                #------------------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]) and mc_curr_env_set_c == 1:
                    # Source sub env variable path 
                    tbsource = "setenv %s_TB_DIR %s\n"%(envname.upper(), envdirpath)
                    log.debug("mc_tb_setup: tbsource %s\n"%(tbsource))

                    pos = tb_setup_stg.find('# Source Simulation Environment Variables\n')
                    apos = pos + len('# Source Simulation Environment Variables\n')
                    tb_setup_stg = tb_setup_stg[:apos]+tbsource+tb_setup_stg[apos:]

                
                #------------------------------------------------------------------------------
                # Adding Sub-Environment List Files In the Parent Environment 
                #------------------------------------------------------------------------------
                if mc_env_cfg_pool[a][1] != '':
                    subenv_arr = str(mc_env_cfg_pool[a][1]).split(",")
                    for m in range (int(subenv_arr[0])):
                        subenv_tmp = subenv_arr[m+1]
                           
                        if len(subenv_tmp.split(":"))>1:
                            if "__c" in subenv_tmp.split(":")[0]:
                                subenvname = (subenv_tmp.split(":")[0]).replace("__c","")
                            elif "__s" in subenv_tmp.split(":")[0]:
                                subenvname = (subenv_tmp.split(":")[0]).replace("__s","")
                            else:
                                subenvname = subenv_tmp.split(":")[0]
                        else:
                            if "__c" in subenv_tmp:
                                subenvname = subenv_tmp.replace("__c","")
                            elif "__s" in subenv_tmp:
                                subenvname = subenv_tmp.replace("__s","")
                            else:
                                subenvname = subenv_tmp

                        whattosearch = envname_org+","+(subenv_arr[m+1]).split(":")[0]   
                        whattosearch_idx = self.find_index(whattosearch, mc_env_cfg_pool)
                        log.debug("mc_tb_setup: whattosearch %s, whattosearch_idx %s\n"%(whattosearch, whattosearch_idx))
                        
                        subenvdirpath = str(mc_env_cfg_pool[whattosearch_idx[0]][6])+"/"+subenvname+"_env"
                        log.debug("mc_tb_setup: subenvname %s, subenvdirpath %s\n"%(subenvname, subenvdirpath))

                        log.debug("mc_tb_setup: subenv_arr[%0d] %s, mc_curr_env_set_c %s, mc_curr_env_set_s %s\n"%(m+1, subenv_arr[m+1], mc_curr_env_set_c, mc_curr_env_set_s))
                        
                        if "__c" in subenv_arr[m+1] or mc_curr_env_set_c == 1 or ("__s" in subenv_arr[m+1] and mc_curr_env_set_s == 0):
                            # Source sub env variable path 
                            subtbsource = "setenv %s_TB_DIR %s\n"%(subenvname.upper(), subenvdirpath)
                            log.debug("mc_tb_setup: subtbsource %s\n"%(subtbsource))

                            pos = tb_setup_stg.find('# Source Simulation Environment Variables\n')
                            apos = pos + len('# Source Simulation Environment Variables\n')
                            tb_setup_stg = tb_setup_stg[:apos]+subtbsource+tb_setup_stg[apos:]


                #----------------------------------------------------------------------
                # Loading up the tb setup content into file 
                #----------------------------------------------------------------------
                if (mc_env_cfg_pool[a][0]):
                    log.debug("mc_tb_setup: Value of tb_setup_stg %s"%(tb_setup_stg))
                    
                    mc_env_tb_setup_input_file = open("%s/%s_tb_setup.sh"%(envscriptspath, envname), "w")
                    mc_env_tb_setup_arr = tb_setup_stg.split('µ')
                    for lines in mc_env_tb_setup_arr:
                        mc_env_tb_setup_input_file.write(lines)
                    mc_env_tb_setup_input_file.close()
                #----------------------------------------------------------------------

                
                #----------------------------------------------------------------------
                # Clearning the variable 
                #----------------------------------------------------------------------
                tb_setup_stg = ''
                tb_setup_loc_stg = ''
            
            #----------------------------------------------------------------------
            # Cleaning the const variables 
            #----------------------------------------------------------------------
            if mc_curr_env_set_c:
                mc_curr_env_set_c = 0
            if mc_curr_env_set_s:
                mc_curr_env_set_s = 0
            #----------------------------------------------------------------------


    def mc_run_phase(self):
        log.debug("mc_run_phase : Calling the mc_run_phase!\n")

        log.debug("mc_run_phase : Calling the return_button_code to get back to the default state!\n")
        self.return_button_code();
        
        log.debug("mc_run_phase : Calling the API to clean up all the Variables related to the MC process!\n")
        self.mc_clean_up_variables();


    def cv_clean_up_variables(self):
        global cv_agt_selected
        global cv_agt_selected_started
        global cv_interface_pkg
        global cv_agt_intf_cnt
        global cv_agt_intf_cnt_tmp
        global cv_agt_intf_num_of_ds_l
        global cv_agt_intf_num_of_ds_a
        global cv_choose_int_cmd_code_called
        global cv_agent_cfg_list
        global cv_agent_cfg_array
        global cv_udie_loop
        global cv_udie_frame_loop
        global cv_udie_int_cfg_array 
        global cv_udie_int_cfg_list 
        global cv_udie_intf_cfg_array 
        global cv_udie_clock_cfg_array 
        global cv_udie_cb_cfg_array 
        global cv_udie_mp_cfg_array 
        global cv_udie_tmp_var
        global cv_udie_cb_cnt
        global cv_udie_mp_cnt
        global cv_udie_cb_element_loop
        global cv_udie_mp_element_loop
        global cv_udie_cb_element_loop_tmp
        global cv_udie_mp_element_loop_tmp
        global cv_agt_loop_chk       
        global le 
        global ree
        global cv_element_loop
    
        ree = 0
        le = 0
        cv_udie_cb_element_loop_tmp = 0
        cv_udie_mp_element_loop_tmp = 0
        cv_udie_mp_cnt = 0
        cv_udie_cb_cnt = 0
        cv_udie_tmp_var = 0
        cv_agt_intf_num_of_ds_l = 0
        cv_agt_intf_num_of_ds_a = None 
        cv_interface_pkg = []
        cv_agt_intf_cnt = 0
        cv_agt_intf_cnt_tmp = 0
        cv_choose_int_cmd_code_called = 0
        cv_tbtop_clock_array = []
        cv_udie_loop = 0
        cv_udie_frame_loop = 0
        cv_agt_loop_chk = 0        
        cv_element_loop = 0
        cv_agt_selected = 0
        cv_agt_selected_started = 0
        cv_agent_cfg_list = None 
        cv_agent_cfg_array = None
        cv_udie_int_cfg_list = None
        cv_udie_int_cfg_array = None
        cv_udie_intf_cfg_array = None
        cv_udie_clock_cfg_array = None
        cv_udie_cb_cfg_array = None
        cv_udie_mp_cfg_array = None
        cv_udie_cb_element_loop = None
        cv_udie_mp_element_loop = None
        cvagt_val_loop_tmp = 0
        cvagt_val_loop = 0
        cvagt_val = 0
        cv_agt_loop_chk = 0
   

    def mc_clean_up_variables(self):
        log.debug("mc_clean_up_variables : Going to clean up all the mc related Variables!\n")
        global mc_env_no_max
        global mc_env_no_cur
        global mc_env_agt_no
        global mc_env_agt_no_tmp
        global mc_env_find_idx
        global mc_env_cfg_pool
        global mc_env_cfg_pool_pass
        global mc_env_cfg_pool_cnt
        global mc_env_cfg_started
        global mc_sub_env_arr_prev
        global mc_sub_env_arr_focus_in
        global mc_env_no_cur_prev
        global mc_curr_env_set_c
        global mc_curr_env_set_s
        global mc_curr_env_agt_set_c
        global mc_curr_env_seq_exists
        global mc_curr_env_mon_exists
        global mc_curr_env_agt_set_s
        global mc_agt_cfg_pool
        global mc_agt_cfg_pool_prev
        global mc_agt_drv_intf_cfg_pool
        global mc_agt_drv_intf_cfg_pool_prev
        global mc_agt_cfg_pool_cnt
        global mce5_arr
        global mce5_agt_cnt
        global mc_agt_drv_intf_cfg_pool_cnt 
        global mcae2_drv_cnt
        global mcae2_drv_name
        global mcae2_drv_intf_type
        global mcae2_drv_cnt_max
        global mcae2_arr
        global mc_agt_find_idx
        global mc_agt_drv_intf_find_idx
        global mc_agt_cfg_pool_dummy
        global mc_agt_drv_intf_cfg_pool_dummy
        global mc_udif_loop
        global mc_udif_frame_loop
        global mc_udif_cb_element_loop
        global mc_udif_mp_element_loop
        global mc_udif_cb_element_loop_tmp
        global mc_udif_mp_element_loop_tmp
        global mc_udif_intf_cfg_array 
        global mc_udif_cb_cfg_array 
        global mc_udif_mp_cfg_array 
        global mc_udif_int_cfg_array 
        global mc_udif_cb_cnt
        global mc_udif_clock_cfg_array
        global mc_envset_done
        global mc_curr_env_mon_arr
        global mc_curr_env_scb_arr
        global mc_global_env_mon_arr
        global mc_global_env_scb_arr
        global mc_global_env_mon_scb_con_arr
        global mc_envset_button_code_on
        global mc_final_envset_button_code_on
        global mc_curr_env_mon_scb_con_arr
        global mc_env_arr_range
        global xls_file_path_tmp
        global mc_intf_arr_range
        global mc_load_envcfg_button_code_called 
        global mc_find_till_the_leaf_arr
        global mc_mon_scb_port_range
        global mc_mon_scb_port_loop 
        global mc_mon_scb_port_loop_arr 
        global mc_mon_scb_widget_arr_cur_len 
        global mc_env_cfg_pool_prev
        global mc_env_intf_cfg_pool
        global mc_env_intf_cfg_pool_prev
        global mc_env_intf_cfg_pool_cnt 
        global mc_env_intf_type
        global mc_env_intf_find_idx
        global mc_env_intf_cfg_pool_dummy
        global mc_env_intf_cnt_max
        global mc_env_intf_cnt 
        global mc_env_intf_arr
        global mc_env_intf_name
        global mc_env_udif_loop
        global mc_env_udif_frame_loop
        global mc_env_udif_cb_element_loop
        global mc_env_udif_mp_element_loop
        global mc_env_udif_cb_element_loop_tmp
        global mc_env_udif_mp_element_loop_tmp
        global mc_env_udif_intf_cfg_array 
        global mc_env_udif_cb_cfg_array 
        global mc_env_udif_mp_cfg_array 
        global mc_env_udif_int_cfg_array 
        global mc_env_udif_cb_cnt
        global mc_env_udif_clock_cfg_array

        mc_env_arr_range = 8
        mc_intf_arr_range = 9
        mc_mon_scb_port_range = 10

        # Elements for Multi Cluster VIP : 062619|WED
        mc_env_cfg_pool = []
        mc_env_cfg_pool_pass = [[] for x in range(mc_env_arr_range)]
        mc_env_cfg_pool_prev = []
        parse_env_cfg_pool = []
        mc_env_cfg_pool_cnt = 0
        mc_env_cfg_started = 0
        mc_sub_env_arr_prev = []
        mc_sub_env_arr_focus_in = []
        mc_env_no_cur_prev = 0
        mcae2_arr = ''
        
        mc_agt_cfg_pool = []
        mc_agt_cfg_pool_prev = []
        mc_agt_drv_intf_cfg_pool = []
        mc_agt_drv_intf_cfg_pool_prev = []
        mc_agt_cfg_pool_dummy = [[],[],[],[],[],[]];
        mc_agt_drv_intf_cfg_pool_dummy = [[] for x in range(mc_intf_arr_range)] # [[],[],[],[],[],[],[],[]];
        mc_agt_cfg_pool_cnt = 0
        mc_agt_drv_intf_cfg_pool_cnt = 0
        mc_udif_loop = 0
        mc_udif_frame_loop = 0
        mc_envset_done = 0
        
        # MC Env intf variables
        mc_env_intf_cfg_pool = []
        mc_env_intf_cfg_pool_prev = []
        mc_env_intf_cfg_pool_dummy = [[] for x in range(mc_intf_arr_range)] # [[],[],[],[],[],[],[],[]];
        mc_env_intf_cfg_pool_cnt = 0
        mc_env_udif_loop = 0
        mc_env_udif_frame_loop = 0
        
        mc_curr_env_mon_arr = []
        mc_curr_env_scb_arr = []
        mc_global_env_mon_arr = []
        mc_global_env_scb_arr = []
        mc_global_env_mon_scb_con_arr = []
        mc_curr_env_mon_scb_con_arr = []
        mc_envset_button_code_on = 0
        mc_final_envset_button_code_on = 0
        
        which_parse_gb = None
        mc_load_envcfg_button_code_called = None
        mc_find_till_the_leaf_arr = []
        mc_mon_scb_port_loop = 0
        mc_mon_scb_port_loop_arr = 0
        mc_mon_scb_widget_arr_cur_len = 0
        
        # Variables for the create,edit,make,run phasese : 112519|MON
        mc_curr_env_set_c = 0
        mc_curr_env_set_s = 0
        mc_curr_env_agt_set_c = 0
        mc_curr_env_agt_set_s = 0
        mc_curr_env_seq_exists = 0
        mc_curr_env_mon_exists = 0
        
        # Generic Parsing Interface Variable
        generic_udif_frame_loop = 0
        parse_ss_env_no = 0
        
        # Variables for the mc development : 112319|SAT
        create_stitch = 0
        stitch_only = 0
        cxn_only = 0
        ei_only = 0
        
        self.mc_load_envcfg_button = None 
        self.mc_prev_envcfg_button = None 
        self.mc_next_envcfg_button = None 
        self.mc_done_envcfg_button = None 
        self.mc_envset_button = None 
        self.mc_final_envset_button = None 
        self.mc_parse_envcfg_button = None 
        
        # Variable for MC Interface : vimo : 071219|FRI
        self.mc_udif_frame = None
        self.mc_udif_name = None
        self.mc_udif_type = None
        self.mc_udif_le = None 
        self.mc_udif_re = None 
        self.mc_udif_cb = None 
        self.mc_udif_mp = None 
        self.mc_udif_name_e = [] 
        self.mc_udif_type_e = [] 
        self.mc_udif_le_e = [] 
        self.mc_udif_re_e = [] 
        self.mc_udif_cb_e = [] 
        self.mc_udif_mp_e = []
        self.mc_udi_nxt = None
        self.mc_udi_done = None
        
        # Multi Cluster VIP Code : 062419|MON
        self.mc_initial_button_frame = None
        self.mc_rlpe_frame = None
        self.mcl1 = None 
        
        self.mcl2 = None 
        self.mcl3 = None 
        self.mcl4 = None 
        self.mcl5 = None 
        self.mcl6 = None 
        self.mcl7 = None
        self.mcl8 = None # Label for env directory
        self.mcl9 = None # Label for Env Interface Directory 
        self.mcl10 = None # Label for env intf widget
        self.mcl11 = None # Label for env load intf
        
        self.mcal1 = None
        self.mcal2 = None
        self.mcal3 = None
        self.mcal4 = None
        self.mcal5 = None
        
        self.mce1 = None
        self.mce2 = None
        self.mce3 = None
        self.mce4 = None
        self.mce5 = None
        self.mce6 = None
        self.mce7 = None
        self.mce8 = None # Entry widget for getting mc env directory
        self.mce9 = None # Entry widget for getting env intf config 
        self.mce10 = None # Entry widget for env load intf config 
        
        self.mco1 = None # Option menu for env intf widget
        
        self.mcae1 = None
        self.mcae2 = None
        self.mcae3 = None
        self.mcae5 = None
        
        self.mcao1 = None
        
        self.mc_agt_button_frame = None
        self.mc_return_to_env_menu_button = None
        self.mc_prev_agt_cfg_button = None
        self.mc_next_agt_cfg_button = None
        self.mc_done_agt_cfg_button = None
        
        self.mc_agt_drv_intf_button_frame = None
        self.mc_agt_drv_intf_return_to_env_menu_button = None
        self.mc_agt_drv_intf_prev_cfg_button = None
        self.mc_agt_drv_intf_save_cfg_button = None
        self.mc_agt_drv_intf_next_cfg_button = None
        
        self.mc_choose_int_list = {}
        self.mc_choose_int_val = StringVar()
        
        self.mc_agt_nl = None
        self.mc_envset = None
        self.mc_final_envset = None
        
        self.mc_udif_frame = None
        
        self.mc_mon_scb_con_list = {}
        self.mc_mon_scb_con_val = {} 
        self.mc_mon_scb_label_list = {}
        self.mc_mon_scb_widget_arr = {}
        self.mc_mon_scb_con_save_button = None
        
        # MC Mon SCB Connectivity New Variables : 111519|FRI
        self.mc_mon_scb_con_init_val = {} 
        self.mc_mon_scb_widget_arr = {}
        self.mc_mon_scb_port_frame = None
        self.mc_mon_scb_port_label = None
        self.mc_mon_scb_port_name = [] 
        self.mc_mon_scb_port_option = [] 
        self.mc_mon_scb_port_entry = [] 
        self.mc_mon_scb_port_dd = [] 
        self.mc_mon_scb_port_dd_val = {}
        self.mc_mon_scb_port_dd_list = {}
        
        self.mc_mon_scb_port_button_frame = None
        self.mc_mon_scb_port_return_button = None
        self.mc_mon_scb_port_add_button = None
        self.mc_mon_scb_port_store_button = None
        
        # MC Spreadsheet Variables
        self.mcssl_1 = None 
        self.mcsse_1 = None
        self.mc_ss_initial_button_frame = None
        self.parse_ss_sheet = None
        self.parse_ss_sheet_side = None
        self.parse_ss_sheet_path = None
        self.parse_ss_sheet_path_generic = None
        self.parse_ss_sheet_path_side = None
        
        # MC ENV Intf Buttons
        self.mc_env_udif_frame = None
        self.mc_env_udif_name = None
        self.mc_env_udif_type = None
        self.mc_env_udif_le = None 
        self.mc_env_udif_re = None 
        self.mc_env_udif_cb = None 
        self.mc_env_udif_mp = None 
        self.mc_env_udif_name_e = [] 
        self.mc_env_udif_type_e = [] 
        self.mc_env_udif_le_e = [] 
        self.mc_env_udif_re_e = [] 
        self.mc_env_udif_cb_e = [] 
        self.mc_env_udif_mp_e = []
        self.mc_env_udi_nxt = None
        self.mc_env_udi_done = None
        
        self.mc_env_choose_int_list = {}
        self.mc_env_choose_int_val = StringVar()
        self.mc_env_intf_nl = None
        self.mc_env_intf_button_frame = None
        self.mc_env_intf_return_to_env_menu_button = None
        self.mc_env_intf_prev_cfg_button = None
        self.mc_env_intf_save_cfg_button = None
        self.mc_env_intf_next_cfg_button = None
        
        self.mc_parse_parenvname = StringVar()
        self.mc_parse_envname = StringVar()
        self.mc_parse_link = IntVar()

    
    #------------------------------------------------------------------------------
    # Generation of Default Templates 
    #------------------------------------------------------------------------------
    
    #------------------------------------------------------------------------------
    # generate_sequence_item 
    #------------------------------------------------------------------------------
    def generate_sequence_item(self, class_name, pkg_name):
        seq_itm_stg = ''

        if class_name == "":
            print("ERROR: Please Specify Class Name. Exiting The Tool!\n")
            return None
        
        if pkg_name == "":
            print("ERROR: Please Specify Package Name. Exiting The Tool!\n")
            return None

        class_name = class_name + "_sequence_item_base"
        print("INFO: Generating class %s"%(class_name))

        if (os.path.isfile('%s.sv'%class_name)):
            print("WARNING: %s.sv does exist, backing it up to %s.bak"%(class_name, class_name))
            os.rename('%s.sv %s.bak'%(class_name, class_name))

        seq_itm_stg = seq_itm_stg\
        +("//===============================================================\n")\
        +("// File Name        : <CLASS_NAME>\n")\
        +("// Description      :\n")\
        +("// Package Name     : <PACKAGE_NAME>\n")\
        +("// Name             : <CREATE_NAME>\n")\
        +("// File Created     : <CREATE_DATE>\n")\
        +("// Copyright        :\n")\
        +("//===============================================================\n")\
        +("// NOTE: Please Don't Remove Any Comments or //--- Given Below\n")\
        +("//===============================================================\n")\
        +("\n")\
        +("`ifndef <INC_GUARD>\n")\
        +("`define <INC_GUARD>\n")\
        +("\n")\
        +("//---------------------------------------------------------------\n")\
        +("// Class: <CLASS_NAME>\n")\
        +("// \n")\
        +("//---------------------------------------------------------------\n")\
        +("\n")\
        +("class <CLASS_NAME> extends uvm_sequence_item;\n")\
        +(" //------------------------------------------\n")\
        +(" // Data Members\n")\
        +(" //------------------------------------------\n")\
        +(" //------------------------------------------\n")\
        +("\n")\
        +(" //------------------------------------------\n")\
        +(" // Constraints\n")\
        +(" //------------------------------------------\n")\
        +(" //------------------------------------------\n")\
        +("\n")\
        +(" //------------------------------------------\n")\
        +(" // Methods\n")\
        +(" //------------------------------------------\n")\
        +(" //------------------------------------------\n")\
        +("\n")\
        +(" // -----------------\n")\
        +(" // Standard UVM Methods\n")\
        +(" // -----------------\n")\
        +(' extern function       new(string name="<CLASS_NAME>");\n')\
        +("\n")\
        +(" // -----------------\n")\
        +(" // User Defined APIs\n")\
        +(" // -----------------\n")\
        +("\n")\
        +(" // -----------------\n")\
        +(" // UVM Factory Registration\n")\
        +(" // -----------------\n")\
        +(" `uvm_object_utils_begin(<CLASS_NAME>)\n")\
        +(" // -----------------\n")\
        +(" // Add field configurations\n")\
        +(" // -----------------\n")\
        +(" // -----------------\n")\
        +(" `uvm_object_utils_end\n")\
        +("endclass: <CLASS_NAME>\n")\
        +("\n")\
        +("\n")\
        +("//---------------------------------------------------------------\n")\
        +("// Function: new\n")\
        +("// \n")\
        +("//---------------------------------------------------------------\n")\
        +("\n")\
        +('function <CLASS_NAME>::new(string name="<CLASS_NAME>");\n')\
        +(" super.new(name);\n")\
        +("endfunction: new\n")\
        +("\n")\
        +("`endif //<INC_GUARD>\n")

        seq_itm_stg = seq_itm_stg.replace("<CLASS_NAME>", class_name)
        seq_itm_stg = seq_itm_stg.replace("<PACKAGE_NAME>", pkg_name)
        seq_itm_stg = seq_itm_stg.replace("<INC_GUARD>", "INC_" + class_name.upper() + "_SV")
        seq_itm_stg = seq_itm_stg.replace("<CREATE_NAME>", self.rtn_usr_name())
        seq_itm_stg = seq_itm_stg.replace("<CREATE_DATE>", self.rtn_date_time_for_files())

        seq_itm_stg_file = open("%s.sv"%(class_name), "w")
        seq_itm_stg_arr = seq_itm_stg.split('µ')
        for lines in seq_itm_stg_arr:
            seq_itm_stg_file.write(lines)
        seq_itm_stg_file.close()
        
        # Cleaning Local Variables
        seq_itm_stg = ''
        seq_itm_stg_arr = ''
    #------------------------------------------------------------------------------


    #------------------------------------------------------------------------------
    # generate_sequence 
    #------------------------------------------------------------------------------
    def generate_sequence(self, class_name, pkg_name):
        seq_stg = ''

        if class_name == "":
            print("ERROR: Please Specify Class Name. Exiting The Tool!\n")
            return None
        
        if pkg_name == "":
            print("ERROR: Please Specify Package Name. Exiting The Tool!\n")
            return None

        class_name_org = class_name
        class_name = class_name + "_sequence"
        print("INFO: Generating class %s"%(class_name))

        if (os.path.isfile('%s.sv'%class_name)):
            print("WARNING: %s.sv does exist, backing it up to %s.bak"%(class_name, class_name))
            os.rename('%s.sv %s.bak'%(class_name, class_name))

        seq_stg = seq_stg\
        +('//===============================================================\n')\
        +('// File Name        : <CLASS_NAME>\n')\
        +('// Description      :\n')\
        +('// Package Name     : <PACKAGE_NAME>\n')\
        +('// Name             : <CREATE_NAME>\n')\
        +('// File Created     : <CREATE_DATE>\n')\
        +('// Copyright        :\n')\
        +('//===============================================================\n')\
        +('// NOTE: Please Don\'t Remove Any Comments or //--- Given Below\n')\
        +('//===============================================================\n')\
        +('\n')\
        +('`ifndef <INC_GUARD>\n')\
        +('`define <INC_GUARD>\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Class: <CLASS_NAME>\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('class <CLASS_NAME> extends uvm_sequence #(<PREFIX_NAME>_sequence_item_base);\n')\
        +(' //------------------------------------------\n')\
        +(' // Data Members\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Constraints\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Methods\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Standard UVM Methods\n')\
        +(' // -----------------\n')\
        +(' extern function       new(string name="<CLASS_NAME>");\n')\
        +(' extern virtual task   body();\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // User Defined APIs\n')\
        +(' // -----------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // UVM Factory Registration\n')\
        +(' // -----------------\n')\
        +(' `uvm_object_utils(<CLASS_NAME>)\n')\
        +('endclass: <CLASS_NAME>\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: new\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function <CLASS_NAME>::new(string name="<CLASS_NAME>");\n')\
        +(' super.new(name);\n')\
        +('endfunction: new\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Task: body\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('task <CLASS_NAME>::body();\n')\
        +(' super.body();\n')\
        +('endtask: body\n')\
        +('\n')\
        +('`endif //<INC_GUARD>\n')\

        seq_stg = seq_stg.replace("<CLASS_NAME>", class_name)
        seq_stg = seq_stg.replace("<PREFIX_NAME>", class_name_org)
        seq_stg = seq_stg.replace("<PACKAGE_NAME>", pkg_name)
        seq_stg = seq_stg.replace("<INC_GUARD>", "INC_" + class_name.upper() + "_SV")
        seq_stg = seq_stg.replace("<CREATE_NAME>", self.rtn_usr_name())
        seq_stg = seq_stg.replace("<CREATE_DATE>", self.rtn_date_time_for_files())

        seq_stg_file = open("%s.sv"%(class_name), "w")
        seq_stg_arr = seq_stg.split('µ')
        for lines in seq_stg_arr:
            seq_stg_file.write(lines)
        seq_stg_file.close()
        
        # Cleaning Local Variables
        seq_stg = ''
        seq_stg_arr = ''
    #------------------------------------------------------------------------------


    #------------------------------------------------------------------------------
    # generate_sequencer 
    #------------------------------------------------------------------------------
    def generate_sequencer(self, class_name, pkg_name):
        seqr_stg = ''

        if class_name == "":
            print("ERROR: Please Specify Class Name. Exiting The Tool!\n")
            return None
        
        if pkg_name == "":
            print("ERROR: Please Specify Package Name. Exiting The Tool!\n")
            return None

        class_name_org = class_name
        class_name = class_name + "_sequencer"
        print("INFO: Generating class %s"%(class_name))

        if (os.path.isfile('%s.sv'%class_name)):
            print("WARNING: %s.sv does exist, backing it up to %s.bak"%(class_name, class_name))
            os.rename('%s.sv %s.bak'%(class_name, class_name))

        seqr_stg = seqr_stg\
        +('//===============================================================\n')\
        +('// File Name        : <CLASS_NAME>\n')\
        +('// Description      :\n')\
        +('// Package Name     : <PACKAGE_NAME>\n')\
        +('// Name             : <CREATE_NAME>\n')\
        +('// File Created     : <CREATE_DATE>\n')\
        +('// Copyright        :\n')\
        +('//===============================================================\n')\
        +('// NOTE: Please Don\'t Remove Any Comments or //--- Given Below\n')\
        +('//===============================================================\n')\
        +('\n')\
        +('`ifndef <INC_GUARD>\n')\
        +('`define <INC_GUARD>\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Class: <CLASS_NAME>\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('class <CLASS_NAME> extends uvm_sequencer #(<PREFIX_NAME>_sequence_item_base);\n')\
        +('\n')\
        +(' // Standard UVM Methods\n')\
        +(' extern function       new   (string name= "<CLASS_NAME>", uvm_component parent);\n')\
        +(' extern function void  build_phase(uvm_phase phase);\n')\
        +('\n')\
        +(' // User Defined APIs\n')\
        +('\n')\
        +(' // UVM Factory Registration Macro\n')\
        +('`uvm_component_utils(<CLASS_NAME>)\n')\
        +('endclass: <CLASS_NAME>\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: new\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function <CLASS_NAME>::new(string name = "<CLASS_NAME>", uvm_component parent);\n')\
        +(' super.new(name, parent);\n')\
        +('endfunction: new\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: build_phase\n')\
        +('// \n')\
        +('// Create and configure of testbench structure\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::build_phase(uvm_phase phase);\n')\
        +(' super.build_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In build_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: build_phase\n')\
        +('\n')\
        +('`endif //<INC_GUARD>\n')

        seqr_stg = seqr_stg.replace("<CLASS_NAME>", class_name)
        seqr_stg = seqr_stg.replace("<PREFIX_NAME>", class_name_org)
        seqr_stg = seqr_stg.replace("<PACKAGE_NAME>", pkg_name)
        seqr_stg = seqr_stg.replace("<INC_GUARD>", "INC_" + class_name.upper() + "_SV")
        seqr_stg = seqr_stg.replace("<CREATE_NAME>", self.rtn_usr_name())
        seqr_stg = seqr_stg.replace("<CREATE_DATE>", self.rtn_date_time_for_files())

        seqr_stg_file = open("%s.sv"%(class_name), "w")
        seqr_stg_arr = seqr_stg.split('µ')
        for lines in seqr_stg_arr:
            seqr_stg_file.write(lines)
        seqr_stg_file.close()
        
        # Cleaning Local Variables
        seqr_stg = ''
        seqr_stg_arr = ''
    #------------------------------------------------------------------------------


    #------------------------------------------------------------------------------
    # generate_driver 
    #------------------------------------------------------------------------------
    def generate_driver(self, class_name, pkg_name):
        drv_stg = ''

        if class_name == "":
            print("ERROR: Please Specify Class Name. Exiting The Tool!\n")
            return None
        
        if pkg_name == "":
            print("ERROR: Please Specify Package Name. Exiting The Tool!\n")
            return None

        class_name_org = class_name
        class_name = class_name + "_driver"
        print("INFO: Generating class %s"%(class_name))

        if (os.path.isfile('%s.sv'%class_name)):
            print("WARNING: %s.sv does exist, backing it up to %s.bak"%(class_name, class_name))
            os.rename('%s.sv %s.bak'%(class_name, class_name))

        drv_stg = drv_stg\
        +('//===============================================================\n')\
        +('// File Name        : <CLASS_NAME>\n')\
        +('// Description      :\n')\
        +('// Package Name     : <PACKAGE_NAME>\n')\
        +('// Name             : <CREATE_NAME>\n')\
        +('// File Created     : <CREATE_DATE>\n')\
        +('// Copyright        :\n')\
        +('//===============================================================\n')\
        +('// NOTE: Please Don\'t Remove Any Comments or //--- Given Below\n')\
        +('//===============================================================\n')\
        +('\n')\
        +('`ifndef <INC_GUARD>\n')\
        +('`define <INC_GUARD>\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Class: <CLASS_NAME>\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('class <CLASS_NAME> extends uvm_driver #(<PREFIX_NAME>_sequence_item_base);\n')\
        +(' //------------------------------------------\n')\
        +(' // Data Members\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Interface Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Agent Configuration Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Constraints\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Methods\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Standard UVM Methods\n')\
        +(' // -----------------\n')\
        +(' extern function              new(string name= "<CLASS_NAME>", uvm_component parent);\n')\
        +(' extern virtual function void build_phase(uvm_phase phase);\n')\
        +(' extern virtual function void connect_phase(uvm_phase phase);\n')\
        +(' extern virtual function void end_of_elaboration_phase(uvm_phase phase);\n')\
        +(' extern virtual function void start_of_simulation_phase(uvm_phase phase);\n')\
        +(' extern virtual task          run_phase(uvm_phase phase);\n')\
        +(' extern virtual function void extract_phase(uvm_phase phase);\n')\
        +(' extern virtual function void check_phase(uvm_phase phase);\n')\
        +(' extern virtual function void report_phase(uvm_phase phase);\n')\
        +(' extern virtual function void final_phase(uvm_phase phase);\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // User Defined APIs\n')\
        +(' // -----------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // UVM Factory Registration\n')\
        +(' // -----------------\n')\
        +(' `uvm_component_utils_begin(<CLASS_NAME>)\n')\
        +('  // -----------------\n')\
        +('  // Add field configurations\n')\
        +('  // -----------------\n')\
        +('  // -----------------\n')\
        +(' `uvm_component_utils_end\n')\
        +('endclass: <CLASS_NAME>\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: new\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function <CLASS_NAME>::new(string name = "<CLASS_NAME>", uvm_component parent);\n')\
        +(' super.new(name, parent);\n')\
        +('endfunction: new\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: build_phase\n')\
        +('// \n')\
        +('// Create and configure of testbench structure\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::build_phase(uvm_phase phase);\n')\
        +(' super.build_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In build_phase...!!", UVM_DEBUG);\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Get configuration\n')\
        +(' // -----------------\n')\
        +('\n')\
        +(' // Get Agent Configuration\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Construct children\n')\
        +(' // ------------------\n')\
        +('\n')\
        +(' // ------------------\n')\
        +(' // Configure children\n')\
        +(' // ------------------\n')\
        +('endfunction: build_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: connect_phase\n')\
        +('// \n')\
        +('// Establish cross-component connections\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::connect_phase(uvm_phase phase);\n')\
        +(' super.connect_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In connect_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: connect_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: end_of_elaboration_phase\n')\
        +('// \n')\
        +('// Fine-tune the testbench\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::end_of_elaboration_phase(uvm_phase phase);\n')\
        +(' super.end_of_elaboration_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In end_of_elaboration_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: end_of_elaboration_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: start_of_simulation_phase\n')\
        +('// \n')\
        +('// Get ready for DUT to be simulated\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::start_of_simulation_phase(uvm_phase phase);\n')\
        +(' super.start_of_simulation_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In start_of_simulation_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: start_of_simulation_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Task: run_phase\n')\
        +('// \n')\
        +('// Stimulate the DUT\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('task <CLASS_NAME>::run_phase(uvm_phase phase);\n')\
        +(' super.run_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In run_phase...!!", UVM_DEBUG);\n')\
        +('endtask: run_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: extract_phase\n')\
        +('// \n')\
        +('// Extract data from different points of the verification environment\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::extract_phase(uvm_phase phase);\n')\
        +(' super.extract_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In extract_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: extract_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: check_phase\n')\
        +('// \n')\
        +('// Check for any unexpected conditions in the verification environment\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::check_phase(uvm_phase phase);\n')\
        +(' super.check_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In check_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: check_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: report_phase\n')\
        +('// \n')\
        +('// Report results of the test\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::report_phase(uvm_phase phase);\n')\
        +(' super.report_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In report_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: report_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: final_phase\n')\
        +('// \n')\
        +('// Tie up loose ends. All Simulation activities are done.\n')\
        +('// \n')\
        +('// Closing files, Ending co-simulation engines etc.\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::final_phase(uvm_phase phase);\n')\
        +(' super.final_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In final_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: final_phase\n')\
        +('\n')\
        +('\n')\
        +('`endif //<INC_GUARD>\n')\

        drv_stg = drv_stg.replace("<CLASS_NAME>", class_name)
        drv_stg = drv_stg.replace("<PREFIX_NAME>", class_name_org)
        drv_stg = drv_stg.replace("<PACKAGE_NAME>", pkg_name)
        drv_stg = drv_stg.replace("<INC_GUARD>", "INC_" + class_name.upper() + "_SV")
        drv_stg = drv_stg.replace("<CREATE_NAME>", self.rtn_usr_name())
        drv_stg = drv_stg.replace("<CREATE_DATE>", self.rtn_date_time_for_files())

        drv_stg_file = open("%s.sv"%(class_name), "w")
        drv_stg_arr = drv_stg.split('µ')
        for lines in drv_stg_arr:
            drv_stg_file.write(lines)
        drv_stg_file.close()
        
        # Cleaning Local Variables
        drv_stg = ''
        drv_stg_arr = ''
    #------------------------------------------------------------------------------


    #------------------------------------------------------------------------------
    # generate_monitor 
    #------------------------------------------------------------------------------
    def generate_monitor(self, class_name, pkg_name):
        mon_stg = ''

        if class_name == "":
            print("ERROR: Please Specify Class Name. Exiting The Tool!\n")
            return None
        
        if pkg_name == "":
            print("ERROR: Please Specify Package Name. Exiting The Tool!\n")
            return None

        class_name_org = class_name
        class_name = class_name + "_monitor"
        print("INFO: Generating class %s"%(class_name))

        if (os.path.isfile('%s.sv'%class_name)):
            print("WARNING: %s.sv does exist, backing it up to %s.bak"%(class_name, class_name))
            os.rename('%s.sv %s.bak'%(class_name, class_name))

        mon_stg = mon_stg\
        +('//===============================================================\n')\
        +('// File Name        : <CLASS_NAME>\n')\
        +('// Description      :\n')\
        +('// Package Name     : <PACKAGE_NAME>\n')\
        +('// Name             : <CREATE_NAME>\n')\
        +('// File Created     : <CREATE_DATE>\n')\
        +('// Copyright        :\n')\
        +('//===============================================================\n')\
        +('// NOTE: Please Don\'t Remove Any Comments or //--- Given Below\n')\
        +('//===============================================================\n')\
        +('\n')\
        +('`ifndef <INC_GUARD>\n')\
        +('`define <INC_GUARD>\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Class: <CLASS_NAME>\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('class <CLASS_NAME> extends uvm_monitor;\n')\
        +(' //------------------------------------------\n')\
        +(' // Data Members\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Interface Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Agent Configuration Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Constraints\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //--------------------------------------------\n')\
        +(' // Port Declaration\n')\
        +(' //--------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Methods\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Standard UVM Methods\n')\
        +(' // -----------------\n')\
        +(' extern function              new(string name= "<CLASS_NAME>", uvm_component parent);\n')\
        +(' extern virtual function void build_phase(uvm_phase phase);\n')\
        +(' extern virtual function void connect_phase(uvm_phase phase);\n')\
        +(' extern virtual function void end_of_elaboration_phase(uvm_phase phase);\n')\
        +(' extern virtual function void start_of_simulation_phase(uvm_phase phase);\n')\
        +(' extern virtual task          run_phase(uvm_phase phase);\n')\
        +(' extern virtual function void extract_phase(uvm_phase phase);\n')\
        +(' extern virtual function void check_phase(uvm_phase phase);\n')\
        +(' extern virtual function void report_phase(uvm_phase phase);\n')\
        +(' extern virtual function void final_phase(uvm_phase phase);\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // User Defined APIs\n')\
        +(' // -----------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // UVM Factory Registration\n')\
        +(' // -----------------\n')\
        +(' `uvm_component_utils_begin(<CLASS_NAME>)\n')\
        +('  // -----------------\n')\
        +('  // Add field configurations\n')\
        +('  // -----------------\n')\
        +('  // -----------------\n')\
        +(' `uvm_component_utils_end\n')\
        +('endclass :<CLASS_NAME>\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: new\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function <CLASS_NAME>::new(string name = "<CLASS_NAME>", uvm_component parent);\n')\
        +(' super.new(name, parent);\n')\
        +('endfunction :new\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: build_phase\n')\
        +('// \n')\
        +('// Create and configure of testbench structure\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::build_phase(uvm_phase phase);\n')\
        +(' super.build_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In build_phase...!!", UVM_DEBUG);\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Port Construction\n')\
        +(' // -----------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Get configuration\n')\
        +(' // -----------------\n')\
        +('\n')\
        +(' // Get Agent Configuration\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Construct children\n')\
        +(' // ------------------\n')\
        +('\n')\
        +(' // ------------------\n')\
        +(' // Configure children\n')\
        +(' // ------------------\n')\
        +('endfunction: build_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: connect_phase\n')\
        +('// \n')\
        +('// Establish cross-component connections\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::connect_phase(uvm_phase phase);\n')\
        +(' super.connect_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In connect_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: connect_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Task: run_phase\n')\
        +('// \n')\
        +('// Stimulate the DUT\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('task <CLASS_NAME>::run_phase(uvm_phase phase);\n')\
        +(' super.run_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In run_phase...!!", UVM_DEBUG);\n')\
        +('endtask: run_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: end_of_elaboration_phase\n')\
        +('// \n')\
        +('// Fine-tune the testbench\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::end_of_elaboration_phase(uvm_phase phase);\n')\
        +(' super.end_of_elaboration_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In end_of_elaboration_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: end_of_elaboration_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: start_of_simulation_phase\n')\
        +('// \n')\
        +('// Get ready for DUT to be simulated\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::start_of_simulation_phase(uvm_phase phase);\n')\
        +(' super.start_of_simulation_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In start_of_simulation_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: start_of_simulation_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: extract_phase\n')\
        +('// \n')\
        +('// Extract data from different points of the verification environment\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::extract_phase(uvm_phase phase);\n')\
        +(' super.extract_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In extract_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: extract_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: check_phase\n')\
        +('// \n')\
        +('// Check for any unexpected conditions in the verification environment\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::check_phase(uvm_phase phase);\n')\
        +(' super.check_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In check_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: check_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: report_phase\n')\
        +('// \n')\
        +('// Report results of the test\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::report_phase(uvm_phase phase);\n')\
        +(' super.report_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In report_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: report_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: final_phase\n')\
        +('// \n')\
        +('// Tie up loose ends. All Simulation activities are done.\n')\
        +('// \n')\
        +('// Closing files, Ending co-simulation engines etc.\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::final_phase(uvm_phase phase);\n')\
        +(' super.final_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In final_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: final_phase\n')\
        +('\n')\
        +('\n')\
        +('`endif //<INC_GUARD>\n')

        mon_stg = mon_stg.replace("<CLASS_NAME>", class_name)
        mon_stg = mon_stg.replace("<PREFIX_NAME>", class_name_org)
        mon_stg = mon_stg.replace("<PACKAGE_NAME>", pkg_name)
        mon_stg = mon_stg.replace("<INC_GUARD>", "INC_" + class_name.upper() + "_SV")
        mon_stg = mon_stg.replace("<CREATE_NAME>", self.rtn_usr_name())
        mon_stg = mon_stg.replace("<CREATE_DATE>", self.rtn_date_time_for_files())

        mon_stg_file = open("%s.sv"%(class_name), "w")
        mon_stg_arr = mon_stg.split('µ')
        for lines in mon_stg_arr:
            mon_stg_file.write(lines)
        mon_stg_file.close()
        
        # Cleaning Local Variables
        mon_stg = ''
        mon_stg_arr = ''
    #------------------------------------------------------------------------------


    #------------------------------------------------------------------------------
    # generate_scoreboard 
    #------------------------------------------------------------------------------
    def generate_scoreboard(self, class_name, pkg_name):
        scb_stg = ''

        if class_name == "":
            print("ERROR: Please Specify Class Name. Exiting The Tool!\n")
            return None
        
        if pkg_name == "":
            print("ERROR: Please Specify Package Name. Exiting The Tool!\n")
            return None

        class_name = class_name + "_scoreboard"
        print("INFO: Generating class %s"%(class_name))

        if (os.path.isfile('%s.sv'%class_name)):
            print("WARNING: %s.sv does exist, backing it up to %s.bak"%(class_name, class_name))
            os.rename('%s.sv %s.bak'%(class_name, class_name))

        scb_stg = scb_stg\
        +('//===============================================================\n')\
        +('// File Name        : <CLASS_NAME>\n')\
        +('// Description      :\n')\
        +('// Package Name     : <PACKAGE_NAME>\n')\
        +('// Name             : <CREATE_NAME>\n')\
        +('// File Created     : <CREATE_DATE>\n')\
        +('// Copyright        :\n')\
        +('//===============================================================\n')\
        +('// NOTE: Please Don\'t Remove Any Comments or //--- Given Below\n')\
        +('//===============================================================\n')\
        +('\n')\
        +('`ifndef <INC_GUARD>\n')\
        +('`define <INC_GUARD>\n')\
        +('\n')\
        +('// TLM Analysis Imp Declaration\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Class: <CLASS_NAME>\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('class <CLASS_NAME> extends uvm_scoreboard;\n')\
        +(' //------------------------------------------\n')\
        +(' // Data Members\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Interface Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Environment Configuration Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Constraints\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Port Declaration\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Methods\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Standard UVM Methods\n')\
        +(' // -----------------\n')\
        +(' extern function              new(string name= "<CLASS_NAME>", uvm_component parent);\n')\
        +(' extern virtual function void build_phase(uvm_phase phase);\n')\
        +(' extern virtual function void connect_phase(uvm_phase phase);\n')\
        +(' extern virtual function void end_of_elaboration_phase(uvm_phase phase);\n')\
        +(' extern virtual function void start_of_simulation_phase(uvm_phase phase);\n')\
        +(' extern virtual task          run_phase(uvm_phase phase);\n')\
        +(' extern virtual function void extract_phase(uvm_phase phase);\n')\
        +(' extern virtual function void check_phase(uvm_phase phase);\n')\
        +(' extern virtual function void report_phase(uvm_phase phase);\n')\
        +(' extern virtual function void final_phase(uvm_phase phase);\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // User Defined APIs\n')\
        +(' // -----------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // UVM Factory Registration\n')\
        +(' // -----------------\n')\
        +(' `uvm_component_utils_begin(<CLASS_NAME>)\n')\
        +('  // -----------------\n')\
        +('  // Add field configurations\n')\
        +('  // -----------------\n')\
        +('  // -----------------\n')\
        +(' `uvm_component_utils_end\n')\
        +('endclass: <CLASS_NAME>\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: new\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function <CLASS_NAME>::new(string name = "<CLASS_NAME>", uvm_component parent);\n')\
        +(' super.new(name, parent);\n')\
        +('endfunction: new\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: build_phase\n')\
        +('// \n')\
        +('// Create and configure of testbench structure\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::build_phase(uvm_phase phase);\n')\
        +(' super.build_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In build_phase...!!", UVM_DEBUG);\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Get configuration\n')\
        +(' // -----------------\n')\
        +('\n')\
        +(' // Get Environment Configuration\n')\
        +('\n')\
        +('endfunction: build_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: connect_phase\n')\
        +('// \n')\
        +('// Establish cross-component connections\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::connect_phase(uvm_phase phase);\n')\
        +(' super.connect_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In connect_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: connect_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: end_of_elaboration_phase\n')\
        +('// \n')\
        +('// Fine-tune the testbench\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::end_of_elaboration_phase(uvm_phase phase);\n')\
        +(' super.end_of_elaboration_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In end_of_elaboration_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: end_of_elaboration_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: start_of_simulation_phase\n')\
        +('// \n')\
        +('// Get ready for DUT to be simulated\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::start_of_simulation_phase(uvm_phase phase);\n')\
        +(' super.start_of_simulation_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In start_of_simulation_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: start_of_simulation_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Task: run_phase\n')\
        +('// \n')\
        +('// Stimulate the DUT\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('task <CLASS_NAME>::run_phase(uvm_phase phase);\n')\
        +(' super.run_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In run_phase...!!", UVM_DEBUG);\n')\
        +('endtask: run_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: extract_phase\n')\
        +('// \n')\
        +('// Extract data from different points of the verification environment\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::extract_phase(uvm_phase phase);\n')\
        +(' super.extract_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In extract_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: extract_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: check_phase\n')\
        +('// \n')\
        +('// Check for any unexpected conditions in the verification environment\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::check_phase(uvm_phase phase);\n')\
        +(' super.check_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In check_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: check_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: report_phase\n')\
        +('// \n')\
        +('// Report results of the test\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::report_phase(uvm_phase phase);\n')\
        +(' super.report_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In report_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: report_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: final_phase\n')\
        +('// \n')\
        +('// Tie up loose ends. All Simulation activities are done.\n')\
        +('// \n')\
        +('// Closing files, Ending co-simulation engines etc.\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::final_phase(uvm_phase phase);\n')\
        +(' super.final_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In final_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: final_phase\n')\
        +('\n')\
        +('\n')\
        +('`endif //<INC_GUARD>\n')

        scb_stg = scb_stg.replace("<CLASS_NAME>", class_name)
        scb_stg = scb_stg.replace("<PACKAGE_NAME>", pkg_name)
        scb_stg = scb_stg.replace("<INC_GUARD>", "INC_" + class_name.upper() + "_SV")
        scb_stg = scb_stg.replace("<CREATE_NAME>", self.rtn_usr_name())
        scb_stg = scb_stg.replace("<CREATE_DATE>", self.rtn_date_time_for_files())

        scb_stg_file = open("%s.sv"%(class_name), "w")
        scb_stg_arr = scb_stg.split('µ')
        for lines in scb_stg_arr:
            scb_stg_file.write(lines)
        scb_stg_file.close()
        
        # Cleaning Local Variables
        scb_stg = ''
        scb_stg_arr = ''
    #------------------------------------------------------------------------------


    #------------------------------------------------------------------------------
    # generate_test 
    #------------------------------------------------------------------------------
    def generate_test(self, class_name, pkg_name):
        test_stg = ''

        if class_name == "":
            print("ERROR: Please Specify Class Name. Exiting The Tool!\n")
            return None
        
        if pkg_name == "":
            print("ERROR: Please Specify Package Name. Exiting The Tool!\n")
            return None

        class_name = class_name + "_test"
        print("INFO: Generating class %s"%(class_name))

        if (os.path.isfile('%s.sv'%class_name)):
            print("WARNING: %s.sv does exist, backing it up to %s.bak"%(class_name, class_name))
            os.rename('%s.sv %s.bak'%(class_name, class_name))

        test_stg = test_stg\
        +('//===============================================================\n')\
        +('// File Name        : <CLASS_NAME>\n')\
        +('// Description      :\n')\
        +('// Package Name     : <PACKAGE_NAME>\n')\
        +('// Name             : <CREATE_NAME>\n')\
        +('// File Created     : <CREATE_DATE>\n')\
        +('// Copyright        :\n')\
        +('//===============================================================\n')\
        +('// NOTE: Please Don\'t Remove Any Comments or //--- Given Below\n')\
        +('//===============================================================\n')\
        +('\n')\
        +('`ifndef <INC_GUARD>\n')\
        +('`define <INC_GUARD>\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Class: <CLASS_NAME>\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('class <CLASS_NAME> extends uvm_test;\n')\
        +(' //------------------------------------------\n')\
        +(' // Data Members\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' // Environment Data Members\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Interface Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Component Declaration\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' // Environments Instantiation\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Configuration Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' // Environment Configuration Object Instantiation\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Constraints\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Methods\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Misc Instantiation\n')\
        +(' //------------------------------------------\n')\
        +(' uvm_table_printer                   printer;\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Standard UVM Methods\n')\
        +(' // -----------------\n')\
        +(' extern function              new(string name = "<CLASS_NAME>", uvm_component parent);\n')\
        +(' extern virtual function void build_phase(uvm_phase phase);\n')\
        +(' extern virtual function void connect_phase(uvm_phase phase);\n')\
        +(' extern virtual function void end_of_elaboration_phase(uvm_phase phase);\n')\
        +(' extern virtual function void start_of_simulation_phase(uvm_phase phase);\n')\
        +(' extern virtual task pre_reset_phase(uvm_phase phase); \n')\
        +(' extern virtual task reset_phase(uvm_phase phase);\n')\
        +(' extern virtual task post_reset_phase(uvm_phase phase);\n')\
        +(' extern virtual task pre_configure_phase(uvm_phase phase);\n')\
        +(' extern virtual task configure_phase(uvm_phase phase);\n')\
        +(' extern virtual task post_configure_phase(uvm_phase phase);\n')\
        +(' extern virtual task pre_main_phase(uvm_phase phase);\n')\
        +(' extern virtual task main_phase(uvm_phase phase);\n')\
        +(' extern virtual task post_main_phase(uvm_phase phase);\n')\
        +(' extern virtual task pre_shutdown_phase(uvm_phase phase);\n')\
        +(' extern virtual task shutdown_phase(uvm_phase phase);\n')\
        +(' extern virtual task post_shutdown_phase(uvm_phase phase);\n')\
        +(' extern virtual function void extract_phase(uvm_phase phase);\n')\
        +(' extern virtual function void check_phase(uvm_phase phase);\n')\
        +(' extern virtual function void report_phase(uvm_phase phase);\n')\
        +(' extern virtual function void final_phase(uvm_phase phase);\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // User Defined APIs\n')\
        +(' // -----------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // UVM Factory Registration\n')\
        +(' // -----------------\n')\
        +(' `uvm_component_utils_begin(<CLASS_NAME>)\n')\
        +('  // -----------------\n')\
        +('  // Add field configurations\n')\
        +('  // -----------------\n')\
        +('  // -----------------\n')\
        +(' `uvm_component_utils_end\n')\
        +('endclass: <CLASS_NAME>\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: new\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function <CLASS_NAME>::new(string name = "<CLASS_NAME>", uvm_component parent);\n')\
        +(' super.new(name, parent);\n')\
        +('endfunction :new\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: build_phase\n')\
        +('// \n')\
        +('// Create and configure of testbench structure\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::build_phase(uvm_phase phase);\n')\
        +(' super.build_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In build_phase...!!", UVM_DEBUG);\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Get Configuration\n')\
        +(' // -----------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Construct Components and Configuration\n')\
        +(' // -----------------\n')\
        +('\n')\
        +(' // Construct Environments\n')\
        +('\n')\
        +(' // Construct Environments Configuration\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Construct children\n')\
        +(' // ------------------\n')\
        +('\n')\
        +(' // ------------------\n')\
        +(' // Configure children\n')\
        +(' // ------------------\n')\
        +('\n')\
        +(' // Configure Environments\n')\
        +('\n')\
        +(' // ------------------\n')\
        +(' // Misc Configuration\n')\
        +(' // ------------------\n')\
        +(' printer = new();\n')\
        +('endfunction: build_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: connect_phase\n')\
        +('// \n')\
        +('// Establish cross-component connections\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::connect_phase(uvm_phase phase);\n')\
        +(' super.connect_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In connect_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: connect_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: end_of_elaboration_phase\n')\
        +('// \n')\
        +('// Fine-tune the testbench\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::end_of_elaboration_phase(uvm_phase phase);\n')\
        +(' super.end_of_elaboration_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In end_of_elaboration_phase...!!", UVM_DEBUG);\n')\
        +('`uvm_info(get_type_name(), $sformatf("Printing the Test Topology : %s", this.sprint(printer)), UVM_LOW)\n')\
        +('endfunction: end_of_elaboration_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: start_of_simulation_phase\n')\
        +('// \n')\
        +('// Get ready for DUT to be simulated\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::start_of_simulation_phase(uvm_phase phase);\n')\
        +(' super.start_of_simulation_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In start_of_simulation_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: start_of_simulation_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Task: pre_reset_phase\n')\
        +('// \n')\
        +('// It is used to perform the operations before applying reset to DUT\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('task <CLASS_NAME>::pre_reset_phase(uvm_phase phase);\n')\
        +(' super.pre_reset_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In pre_reset_phase...!!", UVM_DEBUG);\n')\
        +('endtask: pre_reset_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Task: reset_phase\n')\
        +('// \n')\
        +('// It is used to generate the reset and apply to DUT or any interface\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('task <CLASS_NAME>::reset_phase(uvm_phase phase);\n')\
        +(' super.reset_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In reset_phase...!!", UVM_DEBUG);\n')\
        +('endtask: reset_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Task: post_reset_phase\n')\
        +('// \n')\
        +('// It is used to generate the reset and apply to DUT or any interface\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('task <CLASS_NAME>::post_reset_phase(uvm_phase phase);\n')\
        +(' super.post_reset_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In post_reset_phase...!!", UVM_DEBUG);\n')\
        +('endtask: post_reset_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Task: pre_configure_phase\n')\
        +('// \n')\
        +('// This phase is used to gather the configuration information and\n')\
        +('// to wait for the components to be ready for the configuration\n')\
        +('// after rese\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('task <CLASS_NAME>::pre_configure_phase(uvm_phase phase);\n')\
        +(' super.pre_configure_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In pre_configure_phase...!!", UVM_DEBUG);\n')\
        +('endtask: pre_configure_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Task: configure_phase\n')\
        +('// \n')\
        +('// This phase is used to configure the DUT and to initialize the\n')\
        +('// memories in the testbench\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('task <CLASS_NAME>::configure_phase(uvm_phase phase);\n')\
        +(' super.configure_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In configure_phase...!!", UVM_DEBUG);\n')\
        +('endtask: configure_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Task: post_configure_phase\n')\
        +('// \n')\
        +('// This phase is used to wait for the configuration information\n')\
        +('// to progress to the DUT. It is used to ensure that the main\n')\
        +('// testcase can started for the simulation.\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('task <CLASS_NAME>::post_configure_phase(uvm_phase phase);\n')\
        +(' super.post_configure_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In post_configure_phase...!!", UVM_DEBUG);\n')\
        +('endtask: post_configure_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Task: pre_main_phase\n')\
        +('// \n')\
        +('// It is to ensure that all the components are ready to start the\n')\
        +('// simulation\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('task <CLASS_NAME>::pre_main_phase(uvm_phase phase);\n')\
        +(' super.pre_main_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In pre_main_phase...!!", UVM_DEBUG);\n')\
        +('endtask: pre_main_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Task: main_phase\n')\
        +('// \n')\
        +('// It is to ensure that all the components are ready to start the\n')\
        +('// simulation\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('task <CLASS_NAME>::main_phase(uvm_phase phase);\n')\
        +(' super.main_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In main_phase...!!", UVM_DEBUG);\n')\
        +('endtask: main_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Task: post_main_phase\n')\
        +('// \n')\
        +('// This phase is to take care of any finalization of the main_phase\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('task <CLASS_NAME>::post_main_phase(uvm_phase phase);\n')\
        +(' super.post_main_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In post_main_phase...!!", UVM_DEBUG);\n')\
        +('endtask: post_main_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Task: pre_shutdown_phase\n')\
        +('// \n')\
        +('// This phase is to wait for the stimulus generation which is still\n')\
        +('// generated\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('task <CLASS_NAME>::pre_shutdown_phase(uvm_phase phase);\n')\
        +(' super.pre_shutdown_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In pre_shutdown_phase...!!", UVM_DEBUG);\n')\
        +('endtask: pre_shutdown_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Task: shutdown_phase\n')\
        +('// \n')\
        +('// This phase is used to ensure that all the stimulus has reached\n')\
        +('// the DUT and the outputs are taken from the DUT\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('task <CLASS_NAME>::shutdown_phase(uvm_phase phase);\n')\
        +(' super.shutdown_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In shutdown_phase...!!", UVM_DEBUG);\n')\
        +('endtask: shutdown_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Task: post_shutdown_phase\n')\
        +('// \n')\
        +('// It is to perform any final activities before exiting from the \n')\
        +('// actual simulation phases\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('task <CLASS_NAME>::post_shutdown_phase(uvm_phase phase);\n')\
        +(' super.post_shutdown_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In post_shutdown_phase...!!", UVM_DEBUG);\n')\
        +('endtask: post_shutdown_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: extract_phase\n')\
        +('// \n')\
        +('// Extract data from different points of the verification environment\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::extract_phase(uvm_phase phase);\n')\
        +(' super.extract_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In extract_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: extract_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: check_phase\n')\
        +('// \n')\
        +('// Check for any unexpected conditions in the verification environment\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::check_phase(uvm_phase phase);\n')\
        +(' super.check_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In check_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: check_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: report_phase\n')\
        +('// \n')\
        +('// Report results of the test\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::report_phase(uvm_phase phase);\n')\
        +(' super.report_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In report_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: report_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: final_phase\n')\
        +('// \n')\
        +('// Tie up loose ends. All Simulation activities are done.\n')\
        +('// \n')\
        +('// Closing files, Ending co-simulation engines etc.\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::final_phase(uvm_phase phase);\n')\
        +(' super.final_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In final_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: final_phase\n')\
        +('\n')\
        +('\n')\
        +('`endif //<INC_GUARD>\n')\

        test_stg = test_stg.replace("<CLASS_NAME>", class_name)
        test_stg = test_stg.replace("<PACKAGE_NAME>", pkg_name)
        test_stg = test_stg.replace("<INC_GUARD>", "INC_" + class_name.upper() + "_SV")
        test_stg = test_stg.replace("<CREATE_NAME>", self.rtn_usr_name())
        test_stg = test_stg.replace("<CREATE_DATE>", self.rtn_date_time_for_files())

        test_stg_file = open("%s.sv"%(class_name), "w")
        test_stg_arr = test_stg.split('µ')
        for lines in test_stg_arr:
            test_stg_file.write(lines)
        test_stg_file.close()
        
        # Cleaning Local Variables
        test_stg = ''
        test_stg_arr = ''
    #------------------------------------------------------------------------------
   

    #------------------------------------------------------------------------------
    # generate_interface 
    #------------------------------------------------------------------------------
    def generate_interface(self, intf_name):
        intf_stg = ''

        if intf_name == "":
            print("ERROR: Please Specify Interface Name. Exiting The Tool!\n")
            return None
        
        intf_name = intf_name + "_interface"
        print("INFO: Generating Interface %s"%(intf_name))

        if (os.path.isfile('%s.sv'%intf_name)):
            print("WARNING: %s.sv does exist, backing it up to %s.bak"%(intf_name, intf_name))
            os.rename('%s.sv %s.bak'%(intf_name, intf_name))

        intf_stg = intf_stg\
        +('//===============================================================\n')\
        +('// File Name        : <INTERFACE_NAME>\n')\
        +('// Description      :\n')\
        +('// Name             : <CREATE_NAME>\n')\
        +('// File Created     : <CREATE_DATE>\n')\
        +('// Copyright        :\n')\
        +('//===============================================================\n')\
        +('// NOTE: Please Don\'t Remove Any Comments or //--- Given Below\n')\
        +('//===============================================================\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Interface: <INTERFACE_NAME>\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('interface <INTERFACE_NAME> ;\n')\
        +(' //------------------------------------------\n')\
        +(' // Signal Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('endinterface: <INTERFACE_NAME>\n')

        intf_stg = intf_stg.replace("<INTERFACE_NAME>", intf_name)
        intf_stg = intf_stg.replace("<CREATE_NAME>", self.rtn_usr_name())
        intf_stg = intf_stg.replace("<CREATE_DATE>", self.rtn_date_time_for_files())

        intf_stg_file = open("%s.sv"%(intf_name), "w")
        intf_stg_arr = intf_stg.split('µ')
        for lines in intf_stg_arr:
            intf_stg_file.write(lines)
        intf_stg_file.close()
        
        # Cleaning Local Variables
        intf_stg = ''
        intf_stg_arr = ''
    #------------------------------------------------------------------------------

    
    #------------------------------------------------------------------------------
    # generate_env 
    #------------------------------------------------------------------------------
    def generate_env(self, class_name, pkg_name):
        env_stg = ''

        if class_name == "":
            print("ERROR: Please Specify Class Name. Exiting The Tool!\n")
            return None
        
        if pkg_name == "":
            print("ERROR: Please Specify Package Name. Exiting The Tool!\n")
            return None

        class_name_org = class_name
        class_name = class_name + "_environment"
        print("INFO: Generating class %s"%(class_name))

        if (os.path.isfile('%s.sv'%class_name)):
            print("WARNING: %s.sv does exist, backing it up to %s.bak"%(class_name, class_name))
            os.rename('%s.sv %s.bak'%(class_name, class_name))

        env_stg = env_stg\
        +('//===============================================================\n')\
        +('// File Name        : <CLASS_NAME>\n')\
        +('// Description      :\n')\
        +('// Package Name     : <PACKAGE_NAME>\n')\
        +('// Name             : <CREATE_NAME>\n')\
        +('// File Created     : <CREATE_DATE>\n')\
        +('// Copyright        :\n')\
        +('//===============================================================\n')\
        +('// NOTE: Please Don\'t Remove Any Comments or //--- Given Below\n')\
        +('//===============================================================\n')\
        +('\n')\
        +('`ifndef <INC_GUARD>\n')\
        +('`define <INC_GUARD>\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Class: <CLASS_NAME>\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('class <CLASS_NAME> extends uvm_env;\n')\
        +(' //--------------------------------------------\n')\
        +(' // Components Instantiation\n')\
        +(' //--------------------------------------------\n')\
        +('\n')\
        +(' // Environment Monitors Instantiation\n')\
        +('\n')\
        +(' // Environment Scoreboards Instantiation\n')\
        +('\n')\
        +(' // Environment Agents Instantiation\n')\
        +('\n')\
        +(' // Sub-Environments Instantiation\n')\
        +('\n')\
        +(' //--------------------------------------------\n')\
        +(' // RAL Adapter and Predictor Instantiation\n')\
        +(' //--------------------------------------------\n')\
        +('\n')\
        +(' //--------------------------------------------\n')\
        +(' // Object Instantiation\n')\
        +(' //--------------------------------------------\n')\
        +('\n')\
        +(' // Environment Configuration Object Instantiation\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Data Members\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Constraints\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Methods\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Standard UVM Methods\n')\
        +(' // -----------------\n')\
        +(' extern function              new(string name = "<CLASS_NAME>", uvm_component parent);\n')\
        +(' extern virtual function void build_phase(uvm_phase phase);\n')\
        +(' extern virtual function void connect_phase(uvm_phase phase);\n')\
        +(' extern virtual function void end_of_elaboration_phase(uvm_phase phase);\n')\
        +(' extern virtual function void start_of_simulation_phase(uvm_phase phase);\n')\
        +(' extern virtual function void extract_phase(uvm_phase phase);\n')\
        +(' extern virtual function void check_phase(uvm_phase phase);\n')\
        +(' extern virtual function void report_phase(uvm_phase phase);\n')\
        +(' extern virtual function void final_phase(uvm_phase phase);\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // User Defined APIs\n')\
        +(' // -----------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // UVM Factory Registration\n')\
        +(' // -----------------\n')\
        +(' `uvm_component_utils_begin(<CLASS_NAME>)\n')\
        +('  // -----------------\n')\
        +('  // Add field configurations\n')\
        +('  // -----------------\n')\
        +('  // -----------------\n')\
        +(' `uvm_component_utils_end\n')\
        +('endclass: <CLASS_NAME>\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: new\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function <CLASS_NAME>::new(string name = "<CLASS_NAME>", uvm_component parent);\n')\
        +(' super.new(name, parent);\n')\
        +('endfunction: new\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: build_phase\n')\
        +('// \n')\
        +('// Create and configure of testbench structure\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::build_phase(uvm_phase phase);\n')\
        +(' super.build_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In build_phase...!!", UVM_DEBUG);\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Get configuration\n')\
        +(' // -----------------\n')\
        +('\n')\
        +(' // Get Environment Configuration\n')\
        +('\n')\
        +(' // Get Environment Monitors Configuration\n')\
        +('\n')\
        +(' // Get Environment Scoreboards Configuration\n')\
        +('\n')\
        +(' // Get Environment Agents Configuration\n')\
        +('\n')\
        +(' // Get Sub-Environments Configuration\n')\
        +('\n')\
        +(' // Get Interface Configuration\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Construct children\n')\
        +(' // ------------------\n')\
        +('\n')\
        +(' // Construct Environment Monitors\n')\
        +('\n')\
        +(' // Construct Environment Scoreboards\n')\
        +('\n')\
        +(' // Construct Environment Agents\n')\
        +('\n')\
        +(' // Construct Sub-Environments\n')\
        +('\n')\
        +(' // ------------------\n')\
        +(' // Configure children\n')\
        +(' // ------------------\n')\
        +('\n')\
        +(' // Configure Environment Monitors\n')\
        +('\n')\
        +(' // Configure Environment Scoreboards\n')\
        +('\n')\
        +(' // Configure Environment Agents\n')\
        +('\n')\
        +(' // Configure Sub-Environments\n')\
        +('\n')\
        +(' // ------------------\n')\
        +(' // Configure RAL Models\n')\
        +(' // ------------------\n')\
        +('endfunction: build_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: connect_phase\n')\
        +('// \n')\
        +('// Establish cross-component connections\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::connect_phase(uvm_phase phase);\n')\
        +(' super.connect_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In connect_phase...!!", UVM_DEBUG);\n')\
        +('\n')\
        +(' // -------------\n')\
        +(' // Connect Virtual Interface to Monitor\n')\
        +(' // -------------\n')\
        +('\n')\
        +(' // -------------\n')\
        +(' // Connect Analysis Port\n')\
        +(' // -------------\n')\
        +('\n')\
        +(' // -------------\n')\
        +(' // Adding Agent Sequencer To The Sequencer Container\n')\
        +(' // -------------\n')\
        +('\n')\
        +(' // -------------\n')\
        +(' // Setup RAL Models\n')\
        +(' // -------------\n')\
        +('endfunction: connect_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: end_of_elaboration_phase\n')\
        +('// \n')\
        +('// Fine-tune the testbench\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::end_of_elaboration_phase(uvm_phase phase);\n')\
        +(' super.end_of_elaboration_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In end_of_elaboration_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: end_of_elaboration_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: start_of_simulation_phase\n')\
        +('// \n')\
        +('// Get ready for DUT to be simulated\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::start_of_simulation_phase(uvm_phase phase);\n')\
        +(' super.start_of_simulation_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In start_of_simulation_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: start_of_simulation_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: extract_phase\n')\
        +('// \n')\
        +('// Extract data from different points of the verification environment\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::extract_phase(uvm_phase phase);\n')\
        +(' super.extract_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In extract_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: extract_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: check_phase\n')\
        +('// \n')\
        +('// Check for any unexpected conditions in the verification environment\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::check_phase(uvm_phase phase);\n')\
        +(' super.check_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In check_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: check_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: report_phase\n')\
        +('// \n')\
        +('// Report results of the test\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::report_phase(uvm_phase phase);\n')\
        +(' super.report_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In report_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: report_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: final_phase\n')\
        +('// \n')\
        +('// Tie up loose ends. All Simulation activities are done.\n')\
        +('// \n')\
        +('// Closing files, Ending co-simulation engines etc.\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::final_phase(uvm_phase phase);\n')\
        +(' super.final_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In final_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: final_phase\n')\
        +('\n')\
        +('\n')\
        +('`endif //<INC_GUARD>\n')            

        env_stg = env_stg.replace("<CLASS_NAME>", class_name)
        env_stg = env_stg.replace("<PACKAGE_NAME>", pkg_name)
        env_stg = env_stg.replace("<INC_GUARD>", "INC_" + class_name.upper() + "_SV")
        env_stg = env_stg.replace("<CREATE_NAME>", self.rtn_usr_name())
        env_stg = env_stg.replace("<CREATE_DATE>", self.rtn_date_time_for_files())

        env_stg_file = open("%s.sv"%(class_name), "w")
        env_stg_arr = env_stg.split('µ')
        for lines in env_stg_arr:
            env_stg_file.write(lines)
        env_stg_file.close()
        
        # Cleaning Local Variables
        env_stg = ''
        env_stg_arr = ''
    
        # Calling Generate Environment Configuration 
        self.generate_env_configuration(class_name, pkg_name)
    #------------------------------------------------------------------------------
    

    #------------------------------------------------------------------------------
    # generate_env_configuration 
    #------------------------------------------------------------------------------
    def generate_env_configuration(self, class_name, pkg_name):
        env_cfg_stg = ''

        if class_name == "":
            print("ERROR: Please Specify Class Name. Exiting The Tool!\n")
            return None
        
        if pkg_name == "":
            print("ERROR: Please Specify Package Name. Exiting The Tool!\n")
            return None

        class_name_org = class_name
        class_name = class_name + "_config"
        print("INFO: Generating class %s"%(class_name))

        if (os.path.isfile('%s.sv'%class_name)):
            print("WARNING: %s.sv does exist, backing it up to %s.bak"%(class_name, class_name))
            os.rename('%s.sv %s.bak'%(class_name, class_name))

        env_cfg_stg = env_cfg_stg\
        +('//===============================================================\n')\
        +('// File Name        : <CLASS_NAME>\n')\
        +('// Description      :\n')\
        +('// Package Name     : <PACKAGE_NAME>\n')\
        +('// Name             : <CREATE_NAME>\n')\
        +('// File Created     : <CREATE_DATE>\n')\
        +('// Copyright        :\n')\
        +('//===============================================================\n')\
        +('// NOTE: Please Don\'t Remove Any Comments or //--- Given Below\n')\
        +('//===============================================================\n')\
        +('\n')\
        +('`ifndef <INC_GUARD>\n')\
        +('`define <INC_GUARD>\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Class: <CLASS_NAME>\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('class <CLASS_NAME> extends uvm_object;\n')\
        +(' //------------------------------------------\n')\
        +(' // Environment Data Members\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Environment Interface Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Environment Monitor Knobs\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Environment Scoreboard Knobs\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Environment Agent Variables\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Environment Agent Config Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Sub-Environment Config Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Constraints\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Methods\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Standard UVM Methods\n')\
        +(' // -----------------\n')\
        +(' extern function       new(string name="<CLASS_NAME>");\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // User Defined APIs\n')\
        +(' // -----------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // UVM Factory Registration\n')\
        +(' // -----------------\n')\
        +(' `uvm_object_utils_begin(<CLASS_NAME>)\n')\
        +('  // -----------------\n')\
        +('  // Add field configurations\n')\
        +('  // -----------------\n')\
        +('  // -----------------\n')\
        +(' `uvm_object_utils_end\n')\
        +('endclass: <CLASS_NAME>\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: new\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function <CLASS_NAME>::new(string name="<CLASS_NAME>");\n')\
        +(' super.new(name);\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Get configuration\n')\
        +(' // -----------------\n')\
        +('\n')\
        +(' // Get Environment Monitors Configuration\n')\
        +('\n')\
        +(' // Get Environment Scoreboards Configuration\n')\
        +('\n')\
        +(' // Get Environment Agents Configuration\n')\
        +('\n')\
        +(' // Get Sub-Environments Configuration\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Construct children\n')\
        +(' // ------------------\n')\
        +('\n')\
        +(' // Construct Environment Monitors Configuration\n')\
        +('\n')\
        +(' // Construct Environment Scoreboards Configuration\n')\
        +('\n')\
        +(' // Construct Environment Agents Configuration\n')\
        +('\n')\
        +(' // Construct Sub-Environments Configuration\n')\
        +('\n')\
        +(' // ------------------\n')\
        +(' // Configure children\n')\
        +(' // ------------------\n')\
        +('\n')\
        +(' // Configure Environment Monitors Configuration\n')\
        +('\n')\
        +(' // Configure Environment Scoreboards Configuration\n')\
        +('\n')\
        +(' // Configure Environment Agents Configuration\n')\
        +('\n')\
        +(' // Configure Sub-Environments Configuration\n')\
        +('endfunction: new\n')\
        +('\n')\
        +('`endif //<INC_GUARD>\n')

        env_cfg_stg = env_cfg_stg.replace("<CLASS_NAME>", class_name)
        env_cfg_stg = env_cfg_stg.replace("<PACKAGE_NAME>", pkg_name)
        env_cfg_stg = env_cfg_stg.replace("<INC_GUARD>", "INC_" + class_name.upper() + "_SV")
        env_cfg_stg = env_cfg_stg.replace("<CREATE_NAME>", self.rtn_usr_name())
        env_cfg_stg = env_cfg_stg.replace("<CREATE_DATE>", self.rtn_date_time_for_files())

        env_cfg_stg_file = open("%s.sv"%(class_name), "w")
        env_cfg_stg_arr = env_cfg_stg.split('µ')
        for lines in env_cfg_stg_arr:
            env_cfg_stg_file.write(lines)
        env_cfg_stg_file.close()
        
        # Cleaning Local Variables
        env_cfg_stg = ''
        env_cfg_stg_arr = ''
    #------------------------------------------------------------------------------


    #------------------------------------------------------------------------------
    # generate_env_macros 
    #------------------------------------------------------------------------------
    def generate_env_macros(self, class_name):
        env_mac_stg = ''

        if class_name == "":
            print("ERROR: Please Specify Class Name. Exiting The Tool!\n")
            return None
        
        class_name_org = class_name
        class_name = class_name + "_environment_macros"
        print("INFO: Generating class %s"%(class_name))

        if (os.path.isfile('%s.sv'%class_name)):
            print("WARNING: %s.sv does exist, backing it up to %s.bak"%(class_name, class_name))
            os.rename('%s.sv %s.bak'%(class_name, class_name))

        env_mac_stg = env_mac_stg\
        +('//===============================================================\n')\
        +('// File Name        : <ENV_MACRO_NAME>\n')\
        +('// Description      :\n')\
        +('// Package Name     :\n')\
        +('// Name             : <CREATE_NAME>\n')\
        +('// File Created     : <CREATE_DATE>\n')\
        +('// Copyright        :\n')\
        +('//===============================================================\n')\
        +('// NOTE: Please Don\'t Remove Any Comments or //--- Given Below\n')\
        +('//=============================================================== \n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Interface Wrapper Macro Definition\n')\
        +('//---------------------------------------------------------------\n')

        env_mac_stg = env_mac_stg.replace("<ENV_MACRO_NAME>", class_name)
        env_mac_stg = env_mac_stg.replace("<CREATE_NAME>", self.rtn_usr_name())
        env_mac_stg = env_mac_stg.replace("<CREATE_DATE>", self.rtn_date_time_for_files())

        env_mac_stg_file = open("%s.sv"%(class_name), "w")
        env_mac_stg_arr = env_mac_stg.split('µ')
        for lines in env_mac_stg_arr:
            env_mac_stg_file.write(lines)
        env_mac_stg_file.close()
        
        # Cleaning Local Variables
        env_mac_stg = ''
        env_mac_stg_arr = ''
    #------------------------------------------------------------------------------
    

    #------------------------------------------------------------------------------
    # generate_interface_wrapper 
    #------------------------------------------------------------------------------
    def generate_interface_wrapper(self, intf_name):
        int_wra_stg = ''

        if intf_name == "":
            print("ERROR: Please Specify Interface Name. Exiting The Tool!\n")
            return None
        
        class_name_org = intf_name
        intf_name = intf_name + "_interface_wrapper"
        print("INFO: Generating class %s"%(intf_name))

        if (os.path.isfile('%s.sv'%intf_name)):
            print("WARNING: %s.sv does exist, backing it up to %s.bak"%(intf_name, intf_name))
            os.rename('%s.sv %s.bak'%(intf_name, intf_name))

        int_wra_stg = int_wra_stg\
        +('//===============================================================\n')\
        +('// File Name        : <INTERFACE_WRAPPER_NAME>\n')\
        +('// Description      :\n')\
        +('// Name             : <CREATE_NAME>\n')\
        +('// File Created     : <CREATE_DATE>\n')\
        +('// Copyright        :\n')\
        +('//===============================================================\n')\
        +('// NOTE: Please Don\'t Remove Any Comments or //--- Given Below\n')\
        +('//===============================================================\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Interface Wrapper Name           : <INTERFACE_WRAPPER_NAME>\n')\
        +('// Interface Wrapper Description    :\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('module <INTERFACE_WRAPPER_NAME> #()();\n')\
        +(' //------------------------------------------\n')\
        +(' // Importing Base Library Packages\n')\
        +(' //------------------------------------------\n')\
        +(' import uvm_pkg::*;\n')\
        +('`include "uvm_macros.svh";\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Interface Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Registering Interface Into config_db\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Interface Connectivity Details\n')\
        +(' //------------------------------------------\n')\
        +('endmodule: <INTERFACE_WRAPPER_NAME>\n')

        int_wra_stg = int_wra_stg.replace("<INTERFACE_WRAPPER_NAME>", intf_name)
        int_wra_stg = int_wra_stg.replace("<CREATE_NAME>", self.rtn_usr_name())
        int_wra_stg = int_wra_stg.replace("<CREATE_DATE>", self.rtn_date_time_for_files())

        int_wra_stg_file = open("%s.sv"%(intf_name), "w")
        int_wra_stg_arr = int_wra_stg.split('µ')
        for lines in int_wra_stg_arr:
            int_wra_stg_file.write(lines)
        int_wra_stg_file.close()
        
        # Cleaning Local Variables
        int_wra_stg = ''
        int_wra_stg_arr = ''
    #------------------------------------------------------------------------------

    
    #------------------------------------------------------------------------------
    # generate_env_monitor 
    #------------------------------------------------------------------------------
    def generate_env_monitor(self, class_name, pkg_name):
        env_mon_stg = ''

        if class_name == "":
            print("ERROR: Please Specify Class Name. Exiting The Tool!\n")
            return None
        
        if pkg_name == "":
            print("ERROR: Please Specify Package Name. Exiting The Tool!\n")
            return None

        class_name_org = class_name
        class_name = class_name + "_monitor"
        print("INFO: Generating class %s"%(class_name))

        if (os.path.isfile('%s.sv'%class_name)):
            print("WARNING: %s.sv does exist, backing it up to %s.bak"%(class_name, class_name))
            os.rename('%s.sv %s.bak'%(class_name, class_name))

        env_mon_stg = env_mon_stg\
        +('//===============================================================\n')\
        +('// File Name        : <CLASS_NAME>\n')\
        +('// Description      :\n')\
        +('// Package Name     : <PACKAGE_NAME>\n')\
        +('// Name             : <CREATE_NAME>\n')\
        +('// File Created     : <CREATE_DATE>\n')\
        +('// Copyright        :\n')\
        +('//===============================================================\n')\
        +('// NOTE: Please Don\'t Remove Any Comments or //--- Given Below\n')\
        +('//===============================================================\n')\
        +('\n')\
        +('`ifndef <INC_GUARD>\n')\
        +('`define <INC_GUARD>\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Class: <CLASS_NAME>\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('class <CLASS_NAME> extends uvm_monitor;\n')\
        +(' //------------------------------------------\n')\
        +(' // Data Members\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Interface Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Environment Configuration Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Constraints\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //--------------------------------------------\n')\
        +(' // Port Declaration\n')\
        +(' //--------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Methods\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Standard UVM Methods\n')\
        +(' // -----------------\n')\
        +(' extern function              new(string name= "<CLASS_NAME>", uvm_component parent);\n')\
        +(' extern virtual function void build_phase(uvm_phase phase);\n')\
        +(' extern virtual function void connect_phase(uvm_phase phase);\n')\
        +(' extern virtual function void end_of_elaboration_phase(uvm_phase phase);\n')\
        +(' extern virtual function void start_of_simulation_phase(uvm_phase phase);\n')\
        +(' extern virtual task          run_phase(uvm_phase phase);\n')\
        +(' extern virtual function void extract_phase(uvm_phase phase);\n')\
        +(' extern virtual function void check_phase(uvm_phase phase);\n')\
        +(' extern virtual function void report_phase(uvm_phase phase);\n')\
        +(' extern virtual function void final_phase(uvm_phase phase);\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // User Defined APIs\n')\
        +(' // -----------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // UVM Factory Registration\n')\
        +(' // -----------------\n')\
        +(' `uvm_component_utils_begin(<CLASS_NAME>)\n')\
        +('  // -----------------\n')\
        +('  // Add field configurations\n')\
        +('  // -----------------\n')\
        +('  // -----------------\n')\
        +(' `uvm_component_utils_end\n')\
        +('endclass :<CLASS_NAME>\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: new\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function <CLASS_NAME>::new(string name = "<CLASS_NAME>", uvm_component parent);\n')\
        +(' super.new(name, parent);\n')\
        +('endfunction :new\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: build_phase\n')\
        +('// \n')\
        +('// Create and configure of testbench structure\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::build_phase(uvm_phase phase);\n')\
        +(' super.build_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In build_phase...!!", UVM_DEBUG);\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Port Construction\n')\
        +(' // -----------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Get configuration\n')\
        +(' // -----------------\n')\
        +('\n')\
        +(' // Get Environment Configuration\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Construct children\n')\
        +(' // ------------------\n')\
        +('\n')\
        +(' // ------------------\n')\
        +(' // Configure children\n')\
        +(' // ------------------\n')\
        +('endfunction: build_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: connect_phase\n')\
        +('// \n')\
        +('// Establish cross-component connections\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::connect_phase(uvm_phase phase);\n')\
        +(' super.connect_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In connect_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: connect_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Task: run_phase\n')\
        +('// \n')\
        +('// Stimulate the DUT\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('task <CLASS_NAME>::run_phase(uvm_phase phase);\n')\
        +(' super.run_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In run_phase...!!", UVM_DEBUG);\n')\
        +('endtask: run_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: end_of_elaboration_phase\n')\
        +('// \n')\
        +('// Fine-tune the testbench\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::end_of_elaboration_phase(uvm_phase phase);\n')\
        +(' super.end_of_elaboration_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In end_of_elaboration_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: end_of_elaboration_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: start_of_simulation_phase\n')\
        +('// \n')\
        +('// Get ready for DUT to be simulated\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::start_of_simulation_phase(uvm_phase phase);\n')\
        +(' super.start_of_simulation_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In start_of_simulation_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: start_of_simulation_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: extract_phase\n')\
        +('// \n')\
        +('// Extract data from different points of the verification environment\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::extract_phase(uvm_phase phase);\n')\
        +(' super.extract_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In extract_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: extract_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: check_phase\n')\
        +('// \n')\
        +('// Check for any unexpected conditions in the verification environment\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::check_phase(uvm_phase phase);\n')\
        +(' super.check_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In check_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: check_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: report_phase\n')\
        +('// \n')\
        +('// Report results of the test\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::report_phase(uvm_phase phase);\n')\
        +(' super.report_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In report_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: report_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: final_phase\n')\
        +('// \n')\
        +('// Tie up loose ends. All Simulation activities are done.\n')\
        +('// \n')\
        +('// Closing files, Ending co-simulation engines etc.\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::final_phase(uvm_phase phase);\n')\
        +(' super.final_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In final_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: final_phase\n')\
        +('\n')\
        +('\n')\
        +('`endif //<INC_GUARD>\n')

        env_mon_stg = env_mon_stg.replace("<CLASS_NAME>", class_name)
        env_mon_stg = env_mon_stg.replace("<PREFIX_NAME>", class_name_org)
        env_mon_stg = env_mon_stg.replace("<PACKAGE_NAME>", pkg_name)
        env_mon_stg = env_mon_stg.replace("<INC_GUARD>", "INC_" + class_name.upper() + "_SV")
        env_mon_stg = env_mon_stg.replace("<CREATE_NAME>", self.rtn_usr_name())
        env_mon_stg = env_mon_stg.replace("<CREATE_DATE>", self.rtn_date_time_for_files())

        env_mon_stg_file = open("%s.sv"%(class_name), "w")
        env_mon_stg_arr = env_mon_stg.split('µ')
        for lines in env_mon_stg_arr:
            env_mon_stg_file.write(lines)
        env_mon_stg_file.close()
        
        # Cleaning Local Variables
        env_mon_stg = ''
        env_mon_stg_arr = ''
    #------------------------------------------------------------------------------


    #------------------------------------------------------------------------------
    # generate_package 
    #------------------------------------------------------------------------------
    def generate_package(self, pkg_name):
        pkg_stg = ''

        if pkg_name == "":
            print("ERROR: Please Specify Package Name. Exiting The Tool!\n")
            return None
        
        class_name_org = pkg_name
        pkg_name = pkg_name + "_package"
        print("INFO: Generating Package %s"%(pkg_name))

        if (os.path.isfile('%s.sv'%pkg_name)):
            print("WARNING: %s.sv does exist, backing it up to %s.bak"%(pkg_name, pkg_name))
            os.rename('%s.sv %s.bak'%(pkg_name, pkg_name))

        pkg_stg = pkg_stg\
        +('//===============================================================\n')\
        +('// File Name        : <PACKAGE_NAME>\n')\
        +('// Description      :\n')\
        +('// Name             : <CREATE_NAME>\n')\
        +('// File Created     : <CREATE_DATE>\n')\
        +('// Copyright        :\n')\
        +('//===============================================================\n')\
        +('// NOTE: Please Don\'t Remove Any Comments or //--- Given Below\n')\
        +('//===============================================================\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Package Name            : <PACKAGE_NAME>\n')\
        +('// Package Description     :\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('//------------------------------------------\n')\
        +('// Interface Instance\n')\
        +('//------------------------------------------\n')\
        +('\n')\
        +('package <PACKAGE_NAME>;\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Importing Base Library Packages\n')\
        +(' //------------------------------------------\n')\
        +(' import uvm_pkg::*;\n')\
        +(' \n')\
        +(' //------------------------------------------\n')\
        +(' // Importing Base Library Macros \n')\
        +(' //------------------------------------------\n')\
        +('`include "uvm_macros.svh"\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Defines\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Importing Packages\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' // 3rd Party VIP Packages\n')\
        +('\n')\
        +(' // Other VIP Packages\n')\
        +('\n')\
        +(' // RAL Packages\n')\
        +('\n')\
        +(' // Sequence Item Packages\n')\
        +('\n')\
        +(' // Sequence Packages\n')\
        +('\n')\
        +(' // Environment Packages\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Including VIP Files\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Register Models\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Configuration Files\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' // Agent Configuration Files\n')\
        +('\n')\
        +(' // Environment Configuration Files\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Sequence Item Objects\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' // Environment Monitor Sequence Items\n')\
        +('\n')\
        +(' // Agent Driver Sequence Items\n')\
        +('\n')\
        +(' // Agent Monitor Sequence Items\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Sequence Objects\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Agent Components\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' // Agent Monitor Files\n')\
        +('\n')\
        +(' // Agent Driver & Sequencer Files\n')\
        +('\n')\
        +(' // Agent Files\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Environment Components\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' // Environment Monitor Files\n')\
        +('\n')\
        +(' // Environment Scoreboard Files\n')\
        +('\n')\
        +(' // Environment Files\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Test Components\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +('endpackage: <PACKAGE_NAME>\n')

        pkg_stg = pkg_stg.replace("<PACKAGE_NAME>", pkg_name)
        pkg_stg = pkg_stg.replace("<INC_GUARD>", "INC_" + pkg_name.upper() + "_SV")
        pkg_stg = pkg_stg.replace("<CREATE_NAME>", self.rtn_usr_name())
        pkg_stg = pkg_stg.replace("<CREATE_DATE>", self.rtn_date_time_for_files())

        pkg_stg_file = open("%s.sv"%(pkg_name), "w")
        pkg_stg_arr = pkg_stg.split('µ')
        for lines in pkg_stg_arr:
            pkg_stg_file.write(lines)
        pkg_stg_file.close()
        
        # Cleaning Local Variables
        pkg_stg = ''
        pkg_stg_arr = ''
    #------------------------------------------------------------------------------


    #------------------------------------------------------------------------------
    # generate_top_mc 
    #------------------------------------------------------------------------------
    def generate_top_mc(self, top_name):
        top_stg = ''

        if top_name == "":
            print("ERROR: Please Specify Interface Name. Exiting The Tool!\n")
            return None
        
        class_name_org = top_name
        top_name = top_name + "_tb_top"
        print("INFO: Generating class %s"%(top_name))

        if (os.path.isfile('%s.sv'%top_name)):
            print("WARNING: %s.sv does exist, backing it up to %s.bak"%(top_name, top_name))
            os.rename('%s.sv %s.bak'%(top_name, top_name))

        top_stg = top_stg\
        +('//===============================================================\n')\
        +('// File Name        : <TOP_NAME>\n')\
        +('// Description      :\n')\
        +('// Name             : <CREATE_NAME>\n')\
        +('// File Created     : <CREATE_DATE>\n')\
        +('// Copyright        :\n')\
        +('//===============================================================\n')\
        +('// NOTE: Please Don\'t Remove Any Comments or //--- Given Below\n')\
        +('//===============================================================\n')\
        +('\n')\
        +('module <TOP_NAME>();\n')\
        +(' //------------------------------------------\n')\
        +(' // Including & Importing Required UVM Libraries\n')\
        +(' //------------------------------------------\n')\
        +(' import   uvm_pkg::*;\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Importing User Defined Packages\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Local Variables\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Event\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Clock Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Interfaces Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Interface containers\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // DUT Wrapper Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Assertions & Timing Checks\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Interface - Virtual Interface Config_db Setup\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +('\n')\
        +(' initial begin\n')\
        +(' //------------------------------------------\n')\
        +(' // Default Configurations\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Interface Containers Creation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Pass the Interface Containers\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Run Test\n')\
        +(' //------------------------------------------\n')\
        +('   run_test();\n')\
        +(' end\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Initialize the Reference Clock and Reset (if needed)\n')\
        +(' //------------------------------------------\n')\
        +(' //initial begin\n')\
        +(' //end\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Reference Clock Generation (if needed)\n')\
        +(' //------------------------------------------\n')\
        +(' //always begin\n')\
        +(' //end\n')\
        +('endmodule: <TOP_NAME>\n')

        top_stg = top_stg.replace("<TOP_NAME>", top_name)
        top_stg = top_stg.replace("<CREATE_NAME>", self.rtn_usr_name())
        top_stg = top_stg.replace("<CREATE_DATE>", self.rtn_date_time_for_files())

        top_stg_file = open("%s.sv"%(top_name), "w")
        top_stg_arr = top_stg.split('µ')
        for lines in top_stg_arr:
            top_stg_file.write(lines)
        top_stg_file.close()
        
        # Cleaning Local Variables
        top_stg = ''
        top_stg_arr = ''
    #------------------------------------------------------------------------------


    #------------------------------------------------------------------------------
    # generate_common_fl 
    #------------------------------------------------------------------------------
    def generate_common_fl(self, fl_name):
        com_fl_stg = ''

        if fl_name == "":
            print("ERROR: Please Specify File List. Exiting The Tool!\n")
            return None
        
        class_name_org = fl_name
        fl_name = fl_name + "_common"
        print("INFO: Generating File List %s"%(fl_name))

        if (os.path.isfile('%s.f'%fl_name)):
            print("WARNING: %s.f does exist, backing it up to %s.bak"%(fl_name, fl_name))
            os.rename('%s.sv %s.bak'%(fl_name, fl_name))

        com_fl_stg = com_fl_stg\
        +('#===============================================================\n')\
        +('# File Name        : <COMMON_FILELIST_NAME>.f\n')\
        +('# Description      :\n')\
        +('# Name             : <CREATE_NAME>\n')\
        +('# File Created     : <CREATE_DATE>\n')\
        +('# Copyright        :\n')\
        +('#===============================================================\n')\
        +('# NOTE: Please Dont Remove Any Comments Given Below\n')\
        +('#===============================================================\n')\
        +('\n')\
        +('# UVM Library Directory\n')\
        +('+incdir+$UVM_HOME/src\n')\
        +('+incdir+.\n')\
        +('\n')\
        +('# UVM Library Files\n')\
        +('$UVM_HOME/src/uvm.sv\n')\
        +('$UVM_HOME/src/dpi/uvm_dpi.cc\n')

        com_fl_stg = com_fl_stg.replace("<COMMON_FILELIST_NAME>", fl_name)
        com_fl_stg = com_fl_stg.replace("<CREATE_NAME>", self.rtn_usr_name())
        com_fl_stg = com_fl_stg.replace("<CREATE_DATE>", self.rtn_date_time_for_files())

        com_fl_stg_file = open("%s.f"%(fl_name), "w")
        com_fl_stg_arr = com_fl_stg.split('µ')
        for lines in com_fl_stg_arr:
            com_fl_stg_file.write(lines)
        com_fl_stg_file.close()
        
        # Cleaning Local Variables
        com_fl_stg = ''
        com_fl_stg_arr = ''
    #------------------------------------------------------------------------------


    #------------------------------------------------------------------------------
    # generate_env_fl 
    #------------------------------------------------------------------------------
    def generate_env_fl(self, fl_name):
        env_fl_stg = ''

        if fl_name == "":
            print("ERROR: Please Specify File List. Exiting The Tool!\n")
            return None
        
        class_name_org = fl_name
        fl_name = fl_name + "_environment"
        print("INFO: Generating File List %s"%(fl_name))

        if (os.path.isfile('%s.f'%fl_name)):
            print("WARNING: %s.f does exist, backing it up to %s.bak"%(fl_name, fl_name))
            os.rename('%s.sv %s.bak'%(fl_name, fl_name))

        env_fl_stg = env_fl_stg\
        +('#===============================================================\n')\
        +('# File Name        : <ENV_FILELIST_NAME>.f\n')\
        +('# Description      :\n')\
        +('# Name             : <CREATE_NAME>\n')\
        +('# File Created     : <CREATE_DATE>\n')\
        +('# Copyright        :\n')\
        +('#===============================================================\n')\
        +('# NOTE: Please Dont Remove Any Comments Given Below\n')\
        +('#===============================================================\n')\
        +('\n')\
        +('# Sub-Environment List Files\n')\
        +('\n')\
        +('# Environment Directory\n')\
        +('\n')\
        +('# Environment Interface Files Directory\n')\
        +('\n')\
        +('# Environment and Test Sequence Files Directory\n')\
        +('\n')\
        +('# Environment RAL, Memory Models Directory\n')\
        +('\n')\
        +('# Environment Monitor Files Directory\n')\
        +('\n')\
        +('# Environment Scoreboard Files Directory\n')\
        +('\n')\
        +('# Environment Agents Directory\n')\
        +('\n')\
        +('# Agents Directory\n')\
        +('\n')\
        +('# Agents Sequence Directory\n')\
        +('\n')\
        +('# Environment Checkers Directory\n')\
        +('\n')\
        +('# Test Directory\n')\
        +('\n')\
        +('# Interface, Interface Wrapper Files\n')\
        +('\n')\
        +('# Macros Files\n')\
        +('\n')\
        +('# Env Sequence Item Package\n')\
        +('\n')\
        +('# Env Sequence Package\n')\
        +('\n')\
        +('# Env Package\n')\
        +('\n')\
        +('# Env Test Package\n')

        env_fl_stg = env_fl_stg.replace("<ENV_FILELIST_NAME>", fl_name)
        env_fl_stg = env_fl_stg.replace("<CREATE_NAME>", self.rtn_usr_name())
        env_fl_stg = env_fl_stg.replace("<CREATE_DATE>", self.rtn_date_time_for_files())

        env_fl_stg_file = open("%s.f"%(fl_name), "w")
        env_fl_stg_arr = env_fl_stg.split('µ')
        for lines in env_fl_stg_arr:
            env_fl_stg_file.write(lines)
        env_fl_stg_file.close()
        
        # Cleaning Local Variables
        env_fl_stg = ''
        env_fl_stg_arr = ''
    #------------------------------------------------------------------------------


    #------------------------------------------------------------------------------
    # generate_tbt_fl 
    #------------------------------------------------------------------------------
    def generate_tbt_fl(self, fl_name):
        tbt_fl_stg = ''

        if fl_name == "":
            print("ERROR: Please Specify File List. Exiting The Tool!\n")
            return None
        
        class_name_org = fl_name
        fl_name = fl_name + "_tbtop"
        print("INFO: Generating File List %s"%(fl_name))

        if (os.path.isfile('%s.f'%fl_name)):
            print("WARNING: %s.f does exist, backing it up to %s.bak"%(fl_name, fl_name))
            os.rename('%s.sv %s.bak'%(fl_name, fl_name))

        tbt_fl_stg = tbt_fl_stg\
        +('#===============================================================\n')\
        +('# File Name        : <TBTOP_FILELIST_NAME>.f\n')\
        +('# Description      :\n')\
        +('# Name             : <CREATE_NAME>\n')\
        +('# File Created     : <CREATE_DATE>\n')\
        +('# Copyright        :\n')\
        +('#===============================================================\n')\
        +('# NOTE: Please Dont Remove Any Comments Given Below\n')\
        +('#===============================================================\n')\
        +('\n')\
        +('# TB Top Directory\n')\
        +('\n')\
        +('# TB Top Files\n')

        tbt_fl_stg = tbt_fl_stg.replace("<TBTOP_FILELIST_NAME>", fl_name)
        tbt_fl_stg = tbt_fl_stg.replace("<CREATE_NAME>", self.rtn_usr_name())
        tbt_fl_stg = tbt_fl_stg.replace("<CREATE_DATE>", self.rtn_date_time_for_files())

        tbt_fl_stg_file = open("%s.f"%(fl_name), "w")
        tbt_fl_stg_arr = tbt_fl_stg.split('µ')
        for lines in tbt_fl_stg_arr:
            tbt_fl_stg_file.write(lines)
        tbt_fl_stg_file.close()
        
        # Cleaning Local Variables
        tbt_fl_stg = ''
        tbt_fl_stg_arr = ''
    #------------------------------------------------------------------------------


    #------------------------------------------------------------------------------
    # generate_fl 
    #------------------------------------------------------------------------------
    def generate_fl(self, fl_name):
        
        if fl_name == "":
            print("ERROR: Please Specify File List. Exiting The Tool!\n")
            return None

        # Calling generate_common_fl 
        self.generate_common_fl(fl_name)
        self.generate_env_fl(fl_name)
        self.generate_tbt_fl(fl_name)
    #------------------------------------------------------------------------------


    #------------------------------------------------------------------------------
    # generate_agent_alone_mc 
    #------------------------------------------------------------------------------
    def generate_agent_alone_mc(self, class_name, pkg_name):
        agt_stg = ''

        if class_name == "":
            print("ERROR: Please Specify Class Name. Exiting The Tool!\n")
            return None
        
        if pkg_name == "":
            print("ERROR: Please Specify Package Name. Exiting The Tool!\n")
            return None

        class_name_org = class_name
        class_name = class_name + "_agent"
        print("INFO: Generating class %s"%(class_name))

        if (os.path.isfile('%s.sv'%class_name)):
            print("WARNING: %s.sv does exist, backing it up to %s.bak"%(class_name, class_name))
            os.rename('%s.sv %s.bak'%(class_name, class_name))

        agt_stg = agt_stg\
        +('//===============================================================\n')\
        +('// File Name        : <CLASS_NAME>\n')\
        +('// Description      :\n')\
        +('// Package Name     : <PACKAGE_NAME>\n')\
        +('// Name             : <CREATE_NAME>\n')\
        +('// File Created     : <CREATE_DATE>\n')\
        +('// Copyright        :\n')\
        +('//===============================================================\n')\
        +('// NOTE: Please Don\'t Remove Any Comments or //--- Given Below\n')\
        +('//===============================================================\n')\
        +('\n')\
        +('`ifndef <INC_GUARD>\n')\
        +('`define <INC_GUARD>\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Class: <CLASS_NAME>\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('class <CLASS_NAME> extends uvm_agent;\n')\
        +(' //------------------------------------------\n')\
        +(' // Data Members\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Agent Configuration Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Agent Driver-Sequencer Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Agent Monitor Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Constraints\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Methods\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Standard UVM Methods\n')\
        +(' // -----------------\n')\
        +(' extern function              new(string name= "<CLASS_NAME>", uvm_component parent);\n')\
        +(' extern virtual function void build_phase(uvm_phase phase);\n')\
        +(' extern virtual function void connect_phase(uvm_phase phase);\n')\
        +(' extern virtual function void end_of_elaboration_phase(uvm_phase phase);\n')\
        +(' extern virtual function void start_of_simulation_phase(uvm_phase phase);\n')\
        +(' extern virtual function void extract_phase(uvm_phase phase);\n')\
        +(' extern virtual function void check_phase(uvm_phase phase);\n')\
        +(' extern virtual function void report_phase(uvm_phase phase);\n')\
        +(' extern virtual function void final_phase(uvm_phase phase);\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // User Defined APIs\n')\
        +(' // -----------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // UVM Factory Registration\n')\
        +(' // -----------------\n')\
        +(' `uvm_component_utils_begin(<CLASS_NAME>)\n')\
        +('  // -----------------\n')\
        +('  // Add field configurations\n')\
        +('  // -----------------\n')\
        +('  // -----------------\n')\
        +(' `uvm_component_utils_end\n')\
        +('endclass :<CLASS_NAME>\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: new\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function <CLASS_NAME>::new(string name = "<CLASS_NAME>", uvm_component parent);\n')\
        +(' super.new(name, parent);\n')\
        +('endfunction :new\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: build_phase\n')\
        +('// \n')\
        +('// Create and configure of testbench structure\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::build_phase(uvm_phase phase);\n')\
        +(' super.build_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In build_phase...!!", UVM_DEBUG);\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Get configuration\n')\
        +(' // -----------------\n')\
        +('\n')\
        +(' // Get Agent Configuration\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Construct children\n')\
        +(' // ------------------\n')\
        +('\n')\
        +(' // Construct Agent Monitors\n')\
        +('\n')\
        +(' // Construct Agent Driver-Sequencers\n')\
        +('\n')\
        +(' // ------------------\n')\
        +(' // Configure children\n')\
        +(' // ------------------\n')\
        +('endfunction: build_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: connect_phase\n')\
        +('// \n')\
        +('// Establish cross-component connections\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::connect_phase(uvm_phase phase);\n')\
        +(' super.connect_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In connect_phase...!!", UVM_DEBUG);\n')\
        +('\n')\
        +(' // -------------\n')\
        +(' // Connect Virtual Interface to Monitor\n')\
        +(' // -------------\n')\
        +('\n')\
        +(' // -------------\n')\
        +(' // Connect Analysis Port\n')\
        +(' // -------------\n')\
        +('\n')\
        +(' // -------------\n')\
        +(' // Connect children\n')\
        +(' // -------------\n')\
        +('\n')\
        +(' // Connect Agent Driver-Sequencers\n')\
        +('\n')\
        +('endfunction: connect_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: end_of_elaboration_phase\n')\
        +('// \n')\
        +('// Fine-tune the testbench\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::end_of_elaboration_phase(uvm_phase phase);\n')\
        +(' super.end_of_elaboration_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In end_of_elaboration_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: end_of_elaboration_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: start_of_simulation_phase\n')\
        +('// \n')\
        +('// Get ready for DUT to be simulated\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::start_of_simulation_phase(uvm_phase phase);\n')\
        +(' super.start_of_simulation_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In start_of_simulation_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: start_of_simulation_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: extract_phase\n')\
        +('// \n')\
        +('// Extract data from different points of the verification environment\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::extract_phase(uvm_phase phase);\n')\
        +(' super.extract_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In extract_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: extract_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: check_phase\n')\
        +('// \n')\
        +('// Check for any unexpected conditions in the verification environment\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::check_phase(uvm_phase phase);\n')\
        +(' super.check_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In check_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: check_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: report_phase\n')\
        +('// \n')\
        +('// Report results of the test\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::report_phase(uvm_phase phase);\n')\
        +(' super.report_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In report_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: report_phase\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: final_phase\n')\
        +('// \n')\
        +('// Tie up loose ends. All Simulation activities are done.\n')\
        +('// \n')\
        +('// Closing files, Ending co-simulation engines etc.\n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function void <CLASS_NAME>::final_phase(uvm_phase phase);\n')\
        +(' super.final_phase(phase);\n')\
        +('`uvm_info(get_type_name(), "In final_phase...!!", UVM_DEBUG);\n')\
        +('endfunction: final_phase\n')\
        +('\n')\
        +('\n')\
        +('`endif //<INC_GUARD>\n')

        agt_stg = agt_stg.replace("<CLASS_NAME>", class_name)
        agt_stg = agt_stg.replace("<PACKAGE_NAME>", pkg_name)
        agt_stg = agt_stg.replace("<INC_GUARD>", "INC_" + class_name.upper() + "_SV")
        agt_stg = agt_stg.replace("<CREATE_NAME>", self.rtn_usr_name())
        agt_stg = agt_stg.replace("<CREATE_DATE>", self.rtn_date_time_for_files())

        agt_stg_file = open("%s.sv"%(class_name), "w")
        agt_stg_arr = agt_stg.split('µ')
        for lines in agt_stg_arr:
            agt_stg_file.write(lines)
        agt_stg_file.close()
        
        # Cleaning Local Variables
        agt_stg = ''
        agt_stg_arr = ''
        
        # Calling Generate Agent Configuration 
        self.generate_agent_configuration(class_name, pkg_name)
    #------------------------------------------------------------------------------


    #------------------------------------------------------------------------------
    # generate_agent_configuration 
    #------------------------------------------------------------------------------
    def generate_agent_configuration(self, class_name, pkg_name):
        agt_cfg_stg = ''

        if class_name == "":
            print("ERROR: Please Specify Class Name. Exiting The Tool!\n")
            return None
        
        if pkg_name == "":
            print("ERROR: Please Specify Package Name. Exiting The Tool!\n")
            return None

        class_name_org = class_name
        class_name = class_name + "_config"
        print("INFO: Generating class %s"%(class_name))

        if (os.path.isfile('%s.sv'%class_name)):
            print("WARNING: %s.sv does exist, backing it up to %s.bak"%(class_name, class_name))
            os.rename('%s.sv %s.bak'%(class_name, class_name))

        agt_cfg_stg = agt_cfg_stg\
        +('//===============================================================\n')\
        +('// File Name        : <CLASS_NAME>\n')\
        +('// Description      :\n')\
        +('// Package Name     : <PACKAGE_NAME>\n')\
        +('// Name             : <CREATE_NAME>\n')\
        +('// File Created     : <CREATE_DATE>\n')\
        +('// Copyright        :\n')\
        +('//===============================================================\n')\
        +('// NOTE: Please Don\'t Remove Any Comments or //--- Given Below\n')\
        +('//===============================================================\n')\
        +('\n')\
        +('`ifndef <INC_GUARD>\n')\
        +('`define <INC_GUARD>\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Class: <CLASS_NAME>\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('class <CLASS_NAME> extends uvm_object;\n')\
        +(' //------------------------------------------\n')\
        +(' // Data Members\n')\
        +(' //------------------------------------------\n')\
        +(' rand uvm_active_passive_enum is_active = UVM_ACTIVE;\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Agent Interface Instantiation\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Agent Monitor Knobs\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Agent Driver Knobs\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Constraints\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' //------------------------------------------\n')\
        +(' // Methods\n')\
        +(' //------------------------------------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Standard UVM Methods\n')\
        +(' // -----------------\n')\
        +(' extern function       new(string name="<CLASS_NAME>");\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // User Defined APIs\n')\
        +(' // -----------------\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // UVM Factory Registration\n')\
        +(' // -----------------\n')\
        +(' `uvm_object_utils_begin(<CLASS_NAME>)\n')\
        +('  // -----------------\n')\
        +('  // Add field configurations\n')\
        +('  // -----------------\n')\
        +('  // -----------------\n')\
        +(' `uvm_object_utils_end\n')\
        +('endclass: <CLASS_NAME>\n')\
        +('\n')\
        +('\n')\
        +('//---------------------------------------------------------------\n')\
        +('// Function: new\n')\
        +('// \n')\
        +('//---------------------------------------------------------------\n')\
        +('\n')\
        +('function <CLASS_NAME>::new(string name="<CLASS_NAME>");\n')\
        +(' super.new(name);\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Get configuration\n')\
        +(' // -----------------\n')\
        +('\n')\
        +('\n')\
        +(' // -----------------\n')\
        +(' // Construct children\n')\
        +(' // ------------------\n')\
        +('\n')\
        +('\n')\
        +(' // ------------------\n')\
        +(' // Configure children\n')\
        +(' // ------------------\n')\
        +('endfunction: new\n')\
        +('\n')\
        +('`endif //<INC_GUARD>\n')

        agt_cfg_stg = agt_cfg_stg.replace("<CLASS_NAME>", class_name)
        agt_cfg_stg = agt_cfg_stg.replace("<PACKAGE_NAME>", pkg_name)
        agt_cfg_stg = agt_cfg_stg.replace("<INC_GUARD>", "INC_" + class_name.upper() + "_SV")
        agt_cfg_stg = agt_cfg_stg.replace("<CREATE_NAME>", self.rtn_usr_name())
        agt_cfg_stg = agt_cfg_stg.replace("<CREATE_DATE>", self.rtn_date_time_for_files())

        agt_cfg_stg_file = open("%s.sv"%(class_name), "w")
        agt_cfg_stg_arr = agt_cfg_stg.split('µ')
        for lines in agt_cfg_stg_arr:
            agt_cfg_stg_file.write(lines)
        agt_cfg_stg_file.close()
        
        # Cleaning Local Variables
        agt_cfg_stg = ''
        agt_cfg_stg_arr = ''
    #------------------------------------------------------------------------------


    #------------------------------------------------------------------------------
    # generate_tb_setup
    #------------------------------------------------------------------------------
    def generate_tb_setup(self, env_setup_name):
        env_setup_stg = ''

        if env_setup_name == "":
            print("ERROR: Please Specify File List. Exiting The Tool!\n")
            return None
        
        env_setup_name = env_setup_name + "_tb_setup"
        print("INFO: Generating Environment Setup File %s"%(env_setup_name))

        if (os.path.isfile('%s.sh'%env_setup_name)):
            print("WARNING: %s.sh does exist, backing it up to %s.bak"%(env_setup_name, env_setup_name))
            os.rename('%s.sh %s.bak'%(env_setup_name, env_setup_name))

        env_setup_stg = env_setup_stg\
        +('#===============================================================\n')\
        +('# File Name        : <ENV_SETUP_NAME>.sh\n')\
        +('# Description      :\n')\
        +('# Name             : <CREATE_NAME>\n')\
        +('# File Created     : <CREATE_DATE>\n')\
        +('# Copyright        :\n')\
        +('#===============================================================\n')\
        +('# NOTE: Please Don\'t Remove Any Comments Given Below\n')\
        +('#===============================================================\n')\
        +('\n')\
        +('# Source Simulation Environment Variables\n')

        env_setup_stg = env_setup_stg.replace("<ENV_SETUP_NAME>", env_setup_name)
        env_setup_stg = env_setup_stg.replace("<CREATE_NAME>", self.rtn_usr_name())
        env_setup_stg = env_setup_stg.replace("<CREATE_DATE>", self.rtn_date_time_for_files())

        env_setup_stg_file = open("%s.sh"%(env_setup_name), "w")
        env_setup_stg_arr = env_setup_stg.split('µ')
        for lines in env_setup_stg_arr:
            env_setup_stg_file.write(lines)
        env_setup_stg_file.close()
        
        # Cleaning Local Variables
        env_setup_stg = ''
        env_setup_stg_arr = ''
    #------------------------------------------------------------------------------


object_component_list = ['Sequence Item', 'Sequence', 'Sequencer', 'Driver', 'Monitor', 'Agent', 'Scoreboard', 'Environment', 'Test', 'Interface']

root = Tk()
# Code to place the main widget at the top left corner : vimo : 071819|THU
root.geometry("+10+10")
#root.configure(bg="yellow")
#root.configure(highlightbackground='black', highlightthickness='2')

v = IntVar()
sv = StringVar()
cv = IntVar()
qv = IntVar()
qt = IntVar()
mcv = IntVar()
#bnr = IntVar()

MyFontH = font.Font(family='courier', size=25, weight=font.BOLD)
MyFontH1 = font.Font(family='courier', size=22, weight=font.BOLD)
MyFontH2 = font.Font(family='courier', size=20, weight=font.BOLD)
MyFontBtn = font.Font(family='courier', size=20, weight=font.BOLD)
MyFontQT = font.Font(family='courier', size=20)

# Top Local Variables
proj_root = StringVar()
#user_name = StringVar()

# Single Component Local Variables
sccv = IntVar()
obj_comp_entry_name = StringVar()
obj_comp_entry_name_pkg = StringVar()
sc_num_of_mon = IntVar()

# Complete VIP Local Variables
cv = IntVar()
cvs = IntVar()
cvagt_val = IntVar()
cvagt_list = []
cvadt_val_loop_exit = IntVar()

# Multi Cluster VIP Local Variables
mc_agt_cnt_wait = IntVar()
mc_env_cnt_wait = IntVar()
mc_mon_scb_con_wait = IntVar()

my_gui = uvm_testbench_gen(root)

# Code To Add Logo Onto The Frame Windown
#img_tmp="/nfs/site/home/vmanoha1/empire/my_scripts/mine/python/uvmtempgen/uvm_vip_template_py/images/py2.jpg"
#img=ImageTk.PhotoImage(Image.open(img_tmp))
#root.call('wm','iconphoto',root,img)

root.mainloop()




# Some Details About the variables : 090118|SAT

# Details About cv_agent_cfg_array 
# cv_agent_cfg_array.*[0]: Contains details about driver 
# cv_agent_cfg_array.*[1]: Contains details about monitor 
# cv_agent_cfg_array.*[2]: Contains details about scoreboards 
# cv_agent_cfg_array.*[3]: Contains details about mon-scb connection type 
# cv_agent_cfg_array.*[4]: Contains details about details about interface type  
# cv_agent_cfg_array.*[5]: Contains details about agent name
# cv_agent_cfg_array.*[6]: Contains details about No. of Agt 

# Some Details About the mc_agt_cfg_pool : 101919|SAT 
# mc_agt_cfg_pool[0] - Loading the env-agent name
# mc_agt_cfg_pool[1] - Loading the agent name
# mc_agt_cfg_pool[2] - Loading the Agent N-Instance 
# mc_agt_cfg_pool[3] - Loading the driver~sequencer configuration
# mc_agt_cfg_pool[4] - Loading the Monitor Configuration 
# mc_agt_cfg_pool[5] - Loading the Interface Configuration 

# Some details about the mc_agt_drv_intf_cfg_pool : 101919|SAT 
# mc_agt_drv_intf_cfg_pool[0] - Loading up the env,agt,drv name 
# mc_agt_drv_intf_cfg_pool[1] - MC Agt Drv Name  
# mc_agt_drv_intf_cfg_pool[2] - MC Agt Drv Interface Type  
# mc_agt_drv_intf_cfg_pool[3] - Loading the Interface Variables Values - no. of elements in the sheet 
# mc_agt_drv_intf_cfg_pool[4] - mc_udif_intf_cfg_array 
# mc_agt_drv_intf_cfg_pool[5] - mc_udif_clock_cfg_array 
# mc_agt_drv_intf_cfg_pool[6] - mc_udif_cb_cfg_array 
# mc_agt_drv_intf_cfg_pool[7] - mc_udif_mp_cfg_array 
# mc_agt_drv_intf_cfg_pool[8] - If interface type is load interface, then interface file path from where  its being loaded 

# Details about the mc_env_cfg_pool
# mc_env_cfg_pool[0] - env name
# mc_env_cfg_pool[1] - sub env names 
# mc_env_cfg_pool[2] - agent details 
# mc_env_cfg_pool[3] - monitor details 
# mc_env_cfg_pool[4] - scoreboard details 
# mc_env_cfg_pool[5] - mon-scb connectivity 
# mc_env_cfg_pool[6] - directory 
# mc_env_cfg_pool[7] - env interface details 
